/*! For license information please see chunk-7c312c917da0fc9a8551.js.LICENSE.txt */
"use strict";(self.webpackChunkai_tab_manager=self.webpackChunkai_tab_manager||[]).push([[901],{46:(e,t,n)=>{n.d(t,{BTT:()=>i.B,tnl:()=>l,HQu:()=>u,FqL:()=>c,WQq:()=>h,QiD:()=>f,Q7R:()=>m,bzn:()=>g,FLi:()=>y,XRg:()=>b,qRo:()=>x,yHs:()=>w,rYl:()=>v,FPz:()=>k,rfv:()=>N,$jT:()=>D,sub:()=>F,lZX:()=>W,$v7:()=>G,BFc:()=>H,kSi:()=>j,T5N:()=>K,GTe:()=>U,HbZ:()=>q,ftb:()=>ir,ROE:()=>Y,hOW:()=>X,ra8:()=>Z.r,wgE:()=>T.w,mkO:()=>Q,zQh:()=>ee,o8B:()=>O.o,faB:()=>te.f,xWs:()=>M,I1m:()=>ne,RPU:()=>re,O5O:()=>se,P1l:()=>ae,kA9:()=>ie,Xtf:()=>oe,wX9:()=>ue,IPL:()=>ce,jIJ:()=>he,gnS:()=>de,yIG:()=>fe,_jP:()=>gr,Lp0:()=>me,rCv:()=>ge,aOp:()=>ye,Rj8:()=>be,Gl3:()=>xe,smy:()=>we,X7t:()=>ve,y4m:()=>Ne,ek5:()=>$e,Omf:()=>Ce,EZY:()=>fr,_3C:()=>Ae,Pqc:()=>_e,FJY:()=>mr,LCg:()=>Se,Y12:()=>Re,p4S:()=>Ue,oNF:()=>Ge,UG6:()=>He,IYd:()=>je,y5U:()=>qe,hVP:()=>Fn,GSj:()=>J,RIf:()=>Ye,wh_:()=>ke,cZk:()=>r,kgh:()=>Xe,SY9:()=>dr,rhj:()=>Ze,DQN:()=>Qe,KGM:()=>On,ngS:()=>Je,Slp:()=>xs,U4u:()=>yr,ggX:()=>Mn,MIs:()=>et,EN4:()=>tt,yrW:()=>nt,H8d:()=>rt,M7h:()=>st,InN:()=>at,mPL:()=>ws,mT8:()=>ot,Kgs:()=>it,Rm2:()=>lt,Kko:()=>ut,nqI:()=>ft,HPB:()=>gt,VZ:()=>yt,n76:()=>bt,NSZ:()=>xt,ztW:()=>wt,rxB:()=>vt,YYh:()=>vs,yzS:()=>Tt,NoW:()=>L,T9B:()=>Fe,jgi:()=>St,NYV:()=>It,RO:()=>Et,PhQ:()=>$t,i2o:()=>Ct,OYQ:()=>Rt,jkA:()=>Oe,BpO:()=>Dt,FFZ:()=>Ft,ziu:()=>Ot,Clk:()=>Mt,CRk:()=>cr,lKK:()=>z,YDF:()=>Lt,OjQ:()=>zt,HZy:()=>ht,xbf:()=>We,Ec:()=>Pt,Mw0:()=>Bt,SaS:()=>_t,P61:()=>Vt,op:()=>i.op,X4o:()=>Wt,eVF:()=>Ut,BZs:()=>Gt,grY:()=>Ht,XHu:()=>jt,WLX:()=>Kt,dzn:()=>Yt,n7C:()=>Me,NsG:()=>Xt,yyV:()=>Zt.y,_eU:()=>Qt,whe:()=>Jt,Q0_:()=>en,_9M:()=>tn,pR9:()=>on,FE$:()=>ln,m0H:()=>un,YeY:()=>cn,y17:()=>pn,xav:()=>hn,VOZ:()=>dn,VVh:()=>fn,j__:()=>mn,tQQ:()=>R,BEg:()=>gn,QD2:()=>yn,LMr:()=>bn,I2l:()=>xn,JYU:()=>wn,z8$:()=>zn,LIG:()=>vn,Z$r:()=>kn,d_2:()=>Le.d,NFr:()=>pr,sZg:()=>Nt,WfX:()=>Nn,wdz:()=>Tn,F12:()=>Sn,ry7:()=>P,_SZ:()=>In,vPA:()=>bs,F8e:()=>En,L0l:()=>$n,dik:()=>B,Q$M:()=>Cn,zAd:()=>An,wck:()=>_n,R0O:()=>Rn,Vs9:()=>Dn,lw0:()=>dt,eDJ:()=>qt,lMo:()=>ks,Zhr:()=>hr,lOn:()=>ys,lDo:()=>Ln,RZD:()=>ze,EwI:()=>Pe,Pbu:()=>Pn,r2V:()=>Bn,t$z:()=>Vn,PMw:()=>Wn,Ym9:()=>Un,YjP:()=>Ns,jbE:()=>mt,czq:()=>Be,Mlm:()=>Gn,ymU:()=>V,OEK:()=>Hn.O,tGX:()=>Kn,KtR:()=>qn,$_$:()=>Yn,g9W:()=>Xn,Lpo:()=>Zn,yxw:()=>Qn,Vsq:()=>Ke,rfw:()=>Jn,mgz:()=>ur,efE:()=>er,AmM:()=>tr,zAU:()=>nr,K$i:()=>rr,rni:()=>sr,bvq:()=>ar,_M9:()=>Ie,YJN:()=>or,Ul9:()=>At,POl:()=>Ee});var r={};n.r(r),n.d(r,{conv2d:()=>Nr,depthwiseConv2d:()=>Ir,matMul:()=>Er});var s=n(5388),a=n(5441),o=n(8189),i=n(929);const l=(0,i.op)({abs_:function(e){const t=(0,o.YT)(e,"x","abs");if("complex64"===t.dtype){const e={x:t};return s.T2.runKernel(a.$zE,e)}{const e={x:t};return s.T2.runKernel(a.ljI,e)}}}),u=(0,i.op)({acos_:function(e){const t={x:(0,o.YT)(e,"x","acos")};return s.T2.runKernel(a.Vvy,t)}}),c=(0,i.op)({acosh_:function(e){const t={x:(0,o.YT)(e,"x","acosh")};return s.T2.runKernel(a.PH8,t)}});var p=n(4051);const h=(0,i.op)({add_:function(e,t){let n=(0,o.YT)(e,"a","add"),r=(0,o.YT)(t,"b","add");[n,r]=(0,p.h0)(n,r);const i={a:n,b:r};return s.T2.runKernel(a.OMN,i)}});var d=n(5119);const f=(0,i.op)({addN_:function(e){d.vA(Array.isArray(e),(()=>"The argument passed to tf.addN() must be a list of tensors")),d.vA(e.length>=1,(()=>`Must pass at least one tensor to tf.addN(), but got ${e.length}`));const t=e.map(((e,t)=>(0,o.YT)(e,`tensors${t}`,"addN"))),n=t[0];t.forEach((e=>{if(e.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),t.forEach((e=>{if(!d.r1(e.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));const r=t;return s.T2.runKernel(a.EkD,r)}}),m=(0,i.op)({all_:function(e,t=null,n=!1){const r={x:(0,o.YT)(e,"x","all","bool")},i={axis:t,keepDims:n};return s.T2.runKernel(a.u8Z,r,i)}}),g=(0,i.op)({any_:function(e,t=null,n=!1){const r={x:(0,o.YT)(e,"x","any","bool")},i={axis:t,keepDims:n};return s.T2.runKernel(a.FSt,r,i)}}),y=(0,i.op)({argMax_:function(e,t=0){const n={x:(0,o.YT)(e,"x","argMax")},r={axis:t};return s.T2.runKernel(a.Jp_,n,r)}}),b=(0,i.op)({argMin_:function(e,t=0){const n={x:(0,o.YT)(e,"x","argMin")},r={axis:t};return s.T2.runKernel(a.p_m,n,r)}}),x=(0,i.op)({asin_:function(e){const t={x:(0,o.YT)(e,"x","asin")};return s.T2.runKernel(a.QKF,t)}}),w=(0,i.op)({asinh_:function(e){const t={x:(0,o.YT)(e,"x","asinh")};return s.T2.runKernel(a.epO,t)}}),v=(0,i.op)({atan_:function(e){const t={x:(0,o.YT)(e,"x","atan")};return s.T2.runKernel(a.TyE,t)}}),k=(0,i.op)({atan2_:function(e,t){let n=(0,o.YT)(e,"a","atan2"),r=(0,o.YT)(t,"b","atan2");[n,r]=(0,p.h0)(n,r);const i={a:n,b:r};return s.T2.runKernel(a.lxb,i)}}),N=(0,i.op)({atanh_:function(e){const t={x:(0,o.YT)(e,"x","atanh")};return s.T2.runKernel(a.zP9,t)}});var T=n(9809);function S(e,t,n,r,s,a,o=!1,i="channelsLast"){let[l,u,c,p]=[-1,-1,-1,-1];if("channelsLast"===i)[l,u,c,p]=e;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[l,p,u,c]=e}const[h,d,,f]=t,[m,g]=I(n),[y,b]=I(r),x=E(h,y),w=E(d,b),{padInfo:v,outHeight:k,outWidth:N}=function(e,t,n,r,s,a,o,i,l){let u,c,p;if("number"==typeof e){u={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const s=function(e,t,n,r,s){null==r&&(r=function(e,t,n,r=1){const s=E(t,r);return Math.floor((e[0]*(n-1)-n+s)/2)}(e,t,n));const a=e[1];return[$((e[0]-t+2*r)/n+1,s),$((a-t+2*r)/n+1,s)]}([t,n],a,r,e,i);c=s[0],p=s[1]}else if("same"===e){c=Math.ceil(t/r),p=Math.ceil(n/s);const e=Math.max(0,(c-1)*r+a-t),i=Math.max(0,(p-1)*s+o-n),l=Math.floor(e/2),h=e-l,d=Math.floor(i/2);u={top:l,bottom:h,left:d,right:i-d,type:"SAME"}}else if("valid"===e)u={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-a+1)/r),p=Math.ceil((n-o+1)/s);else{if("object"!=typeof e)throw Error(`Unknown padding parameter: ${e}`);{const h="channelsLast"===l?e[1][0]:e[2][0],d="channelsLast"===l?e[1][1]:e[2][1],f="channelsLast"===l?e[2][0]:e[3][0],m="channelsLast"===l?e[2][1]:e[3][1];u={top:h,bottom:d,left:f,right:m,type:0===h&&0===d&&0===f&&0===m?"VALID":"EXPLICIT"},c=$((t-a+h+d)/r+1,i),p=$((n-o+f+m)/s+1,i)}}return{padInfo:u,outHeight:c,outWidth:p}}(s,u,c,m,g,x,w,a,i),T=o?f*p:f;let S;return"channelsFirst"===i?S=[l,T,k,N]:"channelsLast"===i&&(S=[l,k,N,T]),{batchSize:l,dataFormat:i,inHeight:u,inWidth:c,inChannels:p,outHeight:k,outWidth:N,outChannels:T,padInfo:v,strideHeight:m,strideWidth:g,filterHeight:h,filterWidth:d,effectiveFilterHeight:x,effectiveFilterWidth:w,dilationHeight:y,dilationWidth:b,inShape:e,outShape:S,filterShape:t}}function I(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function E(e,t){return t<=1?e:e+(e-1)*(t-1)}function $(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error(`Unknown roundingMode ${t}`)}}function C(e){const[t,n,r]=I(e);return 1===t&&1===n&&1===r}function A(e,t){return C(e)||C(t)}function _(e,t,n){if(null!=n){if("string"==typeof t)throw Error(`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`);if("number"==typeof t)d.vA(d.E6(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`));else{if("object"!=typeof t)throw Error(`Error in ${e}: Unknown padding parameter: ${t}`);t.forEach((t=>{t.forEach((t=>{d.vA(d.E6(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`))}))}))}}}const R=(0,i.op)({reshape_:function(e,t){const n={x:(0,o.YT)(e,"x","reshape","string_or_numeric")},r={shape:t};return s.T2.runKernel(a.R23,n,r)}}),D=(0,i.op)({avgPool_:function(e,t,n,r,i){const l=(0,o.YT)(e,"x","avgPool","float32");d.vA(A(n,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`));let u=l,c=!1;3===l.rank&&(c=!0,u=R(l,[1,l.shape[0],l.shape[1],l.shape[2]])),d.vA(4===u.rank,(()=>`Error in avgPool: x must be rank 4 but got rank ${u.rank}.`)),_("avgPool",r,i);const p={x:u},h={filterSize:t,strides:n,pad:r,dimRoundingMode:i};let f=s.T2.runKernel(a.ho8,p,h);return f=(0,T.w)(f,l.dtype),c?R(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),F=(0,i.op)({avgPool3d_:function(e,t,n,r,i,l="NDHWC"){const u=(0,o.YT)(e,"x","avgPool3d","float32");let c=u,p=!1;4===u.rank&&(p=!0,c=R(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]])),d.vA(5===c.rank,(()=>`Error in avgPool3d: x must be rank 5 but got rank ${c.rank}.`)),d.vA("NDHWC"===l,(()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${l}`)),_("avgPool3d",r,i);const h={x:c},f={filterSize:t,strides:n,pad:r,dimRoundingMode:i,dataFormat:l};let m=s.T2.runKernel(a.cS,h,f);return m=(0,T.w)(m,c.dtype),p?R(m,[m.shape[1],m.shape[2],m.shape[3],m.shape[4]]):m}});var O=n(125);const M=(0,i.op)({concat_:function(e,t=0){(0,d.vA)(e.length>=1,(()=>"Pass at least one tensor to concat"));const n=(0,o.j1)(e,"tensors","concat","string_or_numeric");if("complex64"===n[0].dtype&&n.forEach((e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)})),1===n.length)return(0,O.o)(n[0]);const r=n,i={axis:t};return s.T2.runKernel(a.$dB,r,i)}}),L=(0,i.op)({matMul_:function(e,t,n=!1,r=!1){let i=(0,o.YT)(e,"a","matMul"),l=(0,o.YT)(t,"b","matMul");[i,l]=(0,p.h0)(i,l);const u={a:i,b:l},c={transposeA:n,transposeB:r};return s.T2.runKernel(a.jAQ,u,c)}}),z=(0,i.op)({mul_:function(e,t){let n=(0,o.YT)(e,"a","mul"),r=(0,o.YT)(t,"b","mul");[n,r]=(0,p.h0)(n,r);const i={a:n,b:r};return s.T2.runKernel(a.xu7,i)}}),P=(0,i.op)({sigmoid_:function(e){const t={x:(0,o.YT)(e,"x","sigmoid","float32")};return s.T2.runKernel(a.vI1,t)}}),B=(0,i.op)({slice_:function(e,t,n){const r=(0,o.YT)(e,"x","slice","string_or_numeric");if(0===r.rank)throw new Error("Slicing scalar is not possible");const i={x:r},l={begin:t,size:n};return s.T2.runKernel(a.JiE,i,l)}}),V=(0,i.op)({tanh_:function(e){const t={x:(0,o.YT)(e,"x","tanh","float32")};return s.T2.runKernel(a.iuW,t)}}),W=(0,i.op)({basicLSTMCell_:function(e,t,n,r,s,a){const i=(0,o.YT)(e,"forgetBias","basicLSTMCell"),l=(0,o.YT)(t,"lstmKernel","basicLSTMCell"),u=(0,o.YT)(n,"lstmBias","basicLSTMCell"),c=(0,o.YT)(r,"data","basicLSTMCell"),p=(0,o.YT)(s,"c","basicLSTMCell"),d=(0,o.YT)(a,"h","basicLSTMCell"),f=M([c,d],1),m=L(f,l),g=h(m,u),y=g.shape[0],b=g.shape[1]/4,x=[y,b],w=B(g,[0,0],x),v=B(g,[0,b],x),k=B(g,[0,2*b],x),N=B(g,[0,3*b],x),T=h(z(P(w),V(v)),z(p,P(h(i,k))));return[T,z(V(T),P(N))]}}),U=(0,i.op)({batchToSpaceND_:function(e,t,n){const r=(0,o.YT)(e,"x","batchToSpaceND"),i=t.reduce(((e,t)=>e*t));d.vA(r.rank>=1+t.length,(()=>`input rank is ${r.rank} but should be > than blockShape.length ${t.length}`)),d.vA(n.length===t.length,(()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`)),d.vA(r.shape[0]%i==0,(()=>`input tensor batch is ${r.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${i}`));const l={x:r},u={blockShape:t,crops:n};return s.T2.runKernel(a.Ik2,l,u)}}),G=(0,i.op)({batchNorm_:function(e,t,n,r,i,l){null==l&&(l=.001);const u=(0,o.YT)(e,"x","batchNorm"),c=(0,o.YT)(t,"mean","batchNorm"),p=(0,o.YT)(n,"variance","batchNorm");let h,f;null!=i&&(h=(0,o.YT)(i,"scale","batchNorm")),null!=r&&(f=(0,o.YT)(r,"offset","batchNorm")),d.vA(c.rank===p.rank,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),d.vA(null==f||c.rank===f.rank,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),d.vA(null==h||c.rank===h.rank,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));const m={x:function(e){let t;return t=0===e.rank||1===e.rank?R(e,[1,1,1,e.size]):2===e.rank?R(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?R(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e,t}(u),scale:h,offset:f,mean:c,variance:p},g={varianceEpsilon:l},y=s.T2.runKernel(a.i5R,m,g);return R(y,u.shape)}}),H=(0,i.op)({batchNorm2d_:function(e,t,n,r,s,a){const i=(0,o.YT)(e,"x","batchNorm"),l=(0,o.YT)(t,"mean","batchNorm"),u=(0,o.YT)(n,"variance","batchNorm");let c,p;return null!=s&&(c=(0,o.YT)(s,"scale","batchNorm")),null!=r&&(p=(0,o.YT)(r,"offset","batchNorm")),d.vA(2===i.rank,(()=>`Error in batchNorm2D: x must be rank 2 but got rank ${i.rank}.`)),d.vA(2===l.rank||1===l.rank,(()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${l.rank}.`)),d.vA(2===u.rank||1===u.rank,(()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${u.rank}.`)),null!=c&&d.vA(2===c.rank||1===c.rank,(()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${c.rank}.`)),null!=p&&d.vA(2===p.rank||1===p.rank,(()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${p.rank}.`)),G(i,l,u,p,c,a)}}),j=(0,i.op)({batchNorm3d_:function(e,t,n,r,s,a){const i=(0,o.YT)(e,"x","batchNorm"),l=(0,o.YT)(t,"mean","batchNorm"),u=(0,o.YT)(n,"variance","batchNorm");let c,p;return null!=s&&(c=(0,o.YT)(s,"scale","batchNorm")),null!=r&&(p=(0,o.YT)(r,"offset","batchNorm")),d.vA(3===i.rank,(()=>`Error in batchNorm3D: x must be rank 3 but got rank ${i.rank}.`)),d.vA(3===l.rank||1===l.rank,(()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${l.rank}.`)),d.vA(3===u.rank||1===u.rank,(()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${u.rank}.`)),null!=c&&d.vA(3===c.rank||1===c.rank,(()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${c.rank}.`)),null!=p&&d.vA(3===p.rank||1===p.rank,(()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${p.rank}.`)),G(i,l,u,p,c,a)}}),K=(0,i.op)({batchNorm4d_:function(e,t,n,r,s,a){const i=(0,o.YT)(e,"x","batchNorm"),l=(0,o.YT)(t,"mean","batchNorm"),u=(0,o.YT)(n,"variance","batchNorm");let c,p;return null!=s&&(c=(0,o.YT)(s,"scale","batchNorm")),null!=r&&(p=(0,o.YT)(r,"offset","batchNorm")),d.vA(4===i.rank,(()=>`Error in batchNorm4D: x must be rank 4 but got rank ${i.rank}.`)),d.vA(4===l.rank||1===l.rank,(()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${l.rank}.`)),d.vA(4===u.rank||1===u.rank,(()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${u.rank}.`)),null!=c&&d.vA(4===c.rank||1===c.rank,(()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${c.rank}.`)),null!=p&&d.vA(4===p.rank||1===p.rank,(()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${p.rank}.`)),G(i,l,u,p,c,a)}}),q=(0,i.op)({bincount_:function(e,t,n){const r=(0,o.YT)(e,"x","bincount"),i=(0,o.YT)(t,"weights","bincount");d.vA("int32"===r.dtype,(()=>`Error in bincount: input dtype must be int32, but got ${r.dtype}`)),d.vA(n>=0,(()=>`size must be non-negative, but got ${n}.`)),d.vA(i.size===r.size||0===i.size,(()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${r.shape}, weights shape: ${i.shape}.`));const l={x:r,weights:i},u={size:n};return s.T2.runKernel(a.N4F,l,u)}}),Y=(0,i.op)({broadcastArgs_:function(e,t){const n=(0,o.YT)(e,"s0","broadcastArgs","int32"),r=(0,o.YT)(t,"s1","broadcastArgs","int32");if(1!==n.rank)throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${n.rank}`);if(1!==r.rank)throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${r.rank}`);const i={s0:n,s1:r};return s.T2.runKernel(a.vj7,i)}}),X=(0,i.op)({broadcastTo_:function(e,t){let n=(0,o.YT)(e,"broadcastTo","x");const r=n.shape;if(t.some((e=>!(e>0)||e%1!=0)))throw new Error(`broadcastTo(): Invalid broadcast shape [${t}].`);if(t.length<n.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){const e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=R(n,e)}const i=n.shape,l=Array.from(t);for(let e=t.length-1;e>=0;e--)if(i[e]===t[e])l[e]=1;else if(1!==n.shape[e])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${t}].`);if(0===l.map(((e,t)=>e>1?t:-1)).filter((e=>e>=0)).length)return(0,O.o)(n);const u={x:n},c={reps:l};return s.T2.runKernel(a.FAs,u,c)}});var Z=n(448);const Q=(0,i.op)({ceil_:function(e){const t={x:(0,o.YT)(e,"x","ceil","float32")};return s.T2.runKernel(a.QDP,t)}});function J(e,t,n){const r={shape:e,value:t,dtype:n};return s.T2.runKernel(a.SQl,{},r)}const ee=(0,i.op)({clipByValue_:function(e,t,n){const r=(0,o.YT)(e,"x","clipByValue");if(d.vA(t<=n,(()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`)),t===n)return J(r.shape,t,r.dtype);const i={x:r},l={clipValueMin:t,clipValueMax:n};return s.T2.runKernel(a.vaV,i,l)}});var te=n(7148);const ne=(0,i.op)({concat1d_:function(e){return M(e,0)}}),re=(0,i.op)({concat2d_:function(e,t){return M(e,t)}}),se=(0,i.op)({concat3d_:function(e,t){return M(e,t)}}),ae=(0,i.op)({concat4d_:function(e,t){return M(e,t)}}),oe=(0,i.op)({conv2d_:function(e,t,n,r,i="NHWC",l=[1,1],u){const c=(0,o.YT)(e,"x","conv2d","float32"),p=(0,o.YT)(t,"filter","conv2d","float32");let h=c,f=!1;3===c.rank&&(f=!0,h=R(c,[1,c.shape[0],c.shape[1],c.shape[2]])),d.vA(4===h.rank,(()=>`Error in conv2d: input must be rank 4, but got rank ${h.rank}.`)),d.vA(4===p.rank,(()=>`Error in conv2d: filter must be rank 4, but got rank ${p.rank}.`)),_("conv2d",r,u);const m="NHWC"===i?h.shape[3]:h.shape[1];d.vA(m===p.shape[2],(()=>`Error in conv2d: depth of input (${m}) must match input depth for filter ${p.shape[2]}.`)),d.vA(A(n,l),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${l}'`));const g={x:h,filter:p},y={strides:n,pad:r,dataFormat:i,dilations:l,dimRoundingMode:u},b=s.T2.runKernel(a.p2J,g,y);return f?R(b,[b.shape[1],b.shape[2],b.shape[3]]):b}}),ie=(0,i.op)({conv1d_:function(e,t,n,r,s="NWC",a=1,i){const l=(0,o.YT)(e,"x","conv1d"),u=(0,o.YT)(t,"filter","conv1d");let c=l,p=!1;2===l.rank&&(p=!0,c=R(l,[1,l.shape[0],l.shape[1]])),d.vA(3===c.rank,(()=>`Error in conv1d: input must be rank 3, but got rank ${c.rank}.`)),d.vA(3===u.rank,(()=>`Error in conv1d: filter must be rank 3, but got rank ${u.rank}.`)),_("conv1d",r,i),d.vA(c.shape[2]===u.shape[1],(()=>`Error in conv1d: depth of input (${c.shape[2]}) must match input depth for filter ${u.shape[1]}.`)),d.vA(A(n,a),(()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${a}'`)),d.vA("NWC"===s,(()=>`Error in conv1d: got dataFormat of ${s} but only NWC is currently supported.`));const h=R(u,[1,u.shape[0],u.shape[1],u.shape[2]]),f=R(c,[c.shape[0],1,c.shape[1],c.shape[2]]),m=oe(f,h,[1,n],r,"NHWC",[1,a],i);return R(m,p?[m.shape[2],m.shape[3]]:[m.shape[0],m.shape[2],m.shape[3]])}}),le=(0,i.op)({conv2DBackpropInput_:function(e,t,n,r,o,i="NHWC",l){d.vA(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let u=e,c=t,p=!1;3===t.rank&&(p=!0,c=R(t,[1,t.shape[0],t.shape[1],t.shape[2]]),u=[1,e[0],e[1],e[2]]),d.vA(4===u.length,(()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${u.length}.`)),d.vA(4===c.rank,(()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${c.rank}`)),d.vA(4===n.rank,(()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`));const h="NHWC"===i?u[3]:u[1],f="NHWC"===i?c.shape[3]:c.shape[1];d.vA(h===n.shape[2],(()=>`Error in conv2dDerInput: depth of input (${h}) must match input depth for filter ${n.shape[2]}.`)),d.vA(f===n.shape[3],(()=>`Error in conv2dDerInput: depth of output (${f}) must match output depth for filter ${n.shape[3]}.`)),_("conv2dDerInput",o,l);const m={dy:c,filter:n},g={strides:r,pad:o,dataFormat:i,dimRoundingMode:l,inputShape:u},y=s.T2.runKernel(a.jfg,m,g);return p?R(y,[y.shape[1],y.shape[2],y.shape[3]]):y}}),ue=(0,i.op)({conv2dTranspose_:function(e,t,n,r,s,a){const i=(0,o.YT)(e,"x","conv2dTranspose"),l=(0,o.YT)(t,"filter","conv2dTranspose");return le(n,i,l,r,s,"NHWC",a)}}),ce=(0,i.op)({conv3d_:function(e,t,n,r,i="NDHWC",l=[1,1,1]){const u=(0,o.YT)(e,"x","conv3d"),c=(0,o.YT)(t,"filter","conv3d");let p=u,h=!1;4===u.rank&&(h=!0,p=R(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]])),d.vA(5===p.rank,(()=>`Error in conv3d: input must be rank 5, but got rank ${p.rank}.`)),d.vA(5===c.rank,(()=>`Error in conv3d: filter must be rank 5, but got rank ${c.rank}.`)),d.vA(p.shape[4]===c.shape[3],(()=>`Error in conv3d: depth of input (${p.shape[4]}) must match input depth for filter ${c.shape[3]}.`)),d.vA(A(n,l),(()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${l}'`)),d.vA("NDHWC"===i,(()=>`Error in conv3d: got dataFormat of ${i} but only NDHWC is currently supported.`));const f={x:p,filter:c},m={strides:n,pad:r,dataFormat:i,dilations:l},g=s.T2.runKernel(a.A1h,f,m);return h?R(g,[g.shape[1],g.shape[2],g.shape[3],g.shape[4]]):g}}),pe=(0,i.op)({conv3DBackpropInput_:function(e,t,n,r,o){d.vA(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let i=e,l=t,u=!1;4===t.rank&&(u=!0,l=R(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),i=[1,e[0],e[1],e[2],e[3]]);const c=i[4],p=l.shape[4];d.vA(5===i.length,(()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${i.length}.`)),d.vA(5===l.rank,(()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${l.rank}`)),d.vA(5===n.rank,(()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`)),d.vA(c===n.shape[3],(()=>`Error in conv3dDerInput: depth of input (${c}) must match input depth for filter ${n.shape[3]}.`)),d.vA(p===n.shape[4],(()=>`Error in conv3dDerInput: depth of output (${p}) must match output depth for filter ${n.shape[4]}.`));const h={dy:l,filter:n},f={pad:o,strides:r,inputShape:i},m=s.T2.runKernel(a.gC7,h,f);return u?R(m,[m.shape[1],m.shape[2],m.shape[3],m.shape[4]]):m}}),he=(0,i.op)({conv3dTranspose_:function(e,t,n,r,s){const a=(0,o.YT)(e,"x","conv3dTranspose"),i=(0,o.YT)(t,"filter","conv3dTranspose");return pe(n,a,i,r,s)}}),de=(0,i.op)({cos_:function(e){const t={x:(0,o.YT)(e,"x","cos","float32")};return s.T2.runKernel(a.Mn0,t)}}),fe=(0,i.op)({cosh_:function(e){const t={x:(0,o.YT)(e,"x","cosh","float32")};return s.T2.runKernel(a.MnK,t)}}),me=(0,i.op)({cumprod_:function(e,t=0,n=!1,r=!1){const i={x:(0,o.YT)(e,"x","cumprod")},l={axis:t,exclusive:n,reverse:r};return s.T2.runKernel(a.jj_,i,l)}}),ge=(0,i.op)({cumsum_:function(e,t=0,n=!1,r=!1){const i={x:(0,o.YT)(e,"x","cumsum")},l={axis:t,exclusive:n,reverse:r};return s.T2.runKernel(a.nY8,i,l)}}),ye=(0,i.op)({denseBincount_:function(e,t,n,r=!1){const i=(0,o.YT)(e,"x","denseBincount"),l=(0,o.YT)(t,"weights","denseBincount");d.vA("int32"===i.dtype,(()=>`Error in denseBincount: input dtype must be int32, but got ${i.dtype}`)),d.vA(i.rank<=2,(()=>`Error in denseBincount: input must be at most rank 2, but got rank ${i.rank}.`)),d.vA(n>=0,(()=>`size must be non-negative, but got ${n}.`)),d.vA(l.size===i.size||0===l.size,(()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${i.shape}, weights shape: ${l.shape}.`));const u={x:i,weights:l},c={size:n,binaryOutput:r};return s.T2.runKernel(a.wNW,u,c)}}),be=(0,i.op)({depthToSpace_:function(e,t,n="NHWC"){const r=(0,o.YT)(e,"x","depthToSpace","float32"),i="NHWC"===n?r.shape[1]:r.shape[2],l="NHWC"===n?r.shape[2]:r.shape[3],u="NHWC"===n?r.shape[3]:r.shape[1];d.vA(t>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${t}`)),d.vA(i*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${i} and ${t}  for depthToSpace with input shape\n    ${r.shape}`)),d.vA(l*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${l} and ${t} for depthToSpace with input shape\n        ${r.shape}`)),d.vA(u%(t*t)==0,(()=>`Dimension size must be evenly divisible by ${t*t} but is ${u} for depthToSpace with input shape ${r.shape}`));const c={x:r},p={blockSize:t,dataFormat:n};return s.T2.runKernel(a.TMz,c,p)}}),xe=(0,i.op)({depthwiseConv2d_:function(e,t,n,r,i="NHWC",l=[1,1],u){const c=(0,o.YT)(e,"x","depthwiseConv2d","float32"),p=(0,o.YT)(t,"filter","depthwiseConv2d","float32");let h=c,f=!1;3===c.rank&&(f=!0,h=R(c,[1,c.shape[0],c.shape[1],c.shape[2]])),d.vA(4===h.rank,(()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${h.rank}.`)),d.vA(4===p.rank,(()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${p.rank}.`));const m="NHWC"===i?h.shape[3]:h.shape[1];d.vA(m===p.shape[2],(()=>`Error in depthwiseConv2d: number of input channels (${m}) must match the inChannels dimension in filter ${p.shape[2]}.`)),_("depthwiseConv2d",r,u);const g={x:h,filter:p},y={strides:n,pad:r,dataFormat:i,dilations:l,dimRoundingMode:u},b=s.T2.runKernel(a.tGH,g,y);return f?R(b,[b.shape[1],b.shape[2],b.shape[3]]):b}}),we=(0,i.op)({diag_:function(e){const t={x:(0,o.YT)(e,"x","diag")};return s.T2.runKernel(a.ORI,t)}}),ve=(0,i.op)({dilation2d_:function(e,t,n,r,i=[1,1],l="NHWC"){const u=(0,o.YT)(e,"x","dilation2d"),c=(0,o.YT)(t,"filter","dilation2d");d.vA(3===u.rank||4===u.rank,(()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${u.rank}.`)),d.vA(3===c.rank,(()=>`Error in dilation2d: filter must be rank 3, but got rank ${c.rank}.`)),d.vA("NHWC"===l,(()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${l}`));let p=u,h=!1;3===u.rank&&(p=R(u,[1,u.shape[0],u.shape[1],u.shape[2]]),h=!0);const f={x:p,filter:c},m={strides:n,pad:r,dilations:i},g=s.T2.runKernel(a.jxD,f,m);return h?R(g,[g.shape[1],g.shape[2],g.shape[3]]):g}}),ke=(0,i.op)({floorDiv_:function(e,t){let n=(0,o.YT)(e,"a","floorDiv"),r=(0,o.YT)(t,"b","floorDiv");[n,r]=(0,p.h0)(n,r);const i={a:n,b:r};return s.T2.runKernel(a.ElG,i)}}),Ne=(0,i.op)({div_:function(e,t){let n=(0,o.YT)(e,"a","div"),r=(0,o.YT)(t,"b","div");if([n,r]=(0,p.h0)(n,r),"int32"===n.dtype&&"int32"===r.dtype)return ke(n,r);const i={a:n,b:r};return s.T2.runKernel(a.sDr,i,{})}});function Te(e,t){const n=[],r=Math.max(e.length,t.length);for(let s=0;s<r;s++){let r=e[e.length-s-1];null==r&&(r=1);let a=t[t.length-s-1];if(null==a&&(a=1),1===r)n.unshift(a);else if(1===a)n.unshift(r);else{if(r!==a)throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`);n.unshift(r)}}return n}const Se=(0,i.op)({equal_:function(e,t){let n=(0,o.YT)(e,"a","equal","string_or_numeric"),r=(0,o.YT)(t,"b","equal","string_or_numeric");[n,r]=(0,p.h0)(n,r),Te(n.shape,r.shape);const i={a:n,b:r};return s.T2.runKernel(a.BRl,i)}}),Ie=(0,i.op)({where_:function(e,t,n){const r=(0,o.YT)(t,"a","where"),i=(0,o.YT)(n,"b","where"),l=(0,o.YT)(e,"condition","where","bool"),u=Te(Te(l.shape,r.shape),i.shape),c={condition:X(l,u),t:X(r,u),e:X(i,u)};return s.T2.runKernel(a.l6P,c)}}),Ee=(0,i.op)({zerosLike_:function(e){const t={x:(0,o.YT)(e,"x","zerosLike")};return s.T2.runKernel(a.xJ3,t)}}),$e=(0,i.op)({divNoNan_:function(e,t){let n=(0,o.YT)(e,"a","div"),r=(0,o.YT)(t,"b","div");[n,r]=(0,p.h0)(n,r);const s=Ne(n,r),a=Ee(s),i=Se(r,a);return Ie(i,a,s)}}),Ce=(0,i.op)({dot_:function(e,t){const n=(0,o.YT)(e,"t1","dot"),r=(0,o.YT)(t,"t2","dot");d.vA(!(1!==n.rank&&2!==n.rank||1!==r.rank&&2!==r.rank),(()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${r.rank}.`));const s=1===n.rank?n.size:n.shape[1],a=1===r.rank?r.size:r.shape[0];if(d.vA(s===a,(()=>`Error in dot: inner dimensions of inputs must match, but got ${s} and ${a}.`)),1===n.rank&&1===r.rank){const e=R(n,[1,-1]),t=R(r,[-1,1]),s=L(e,t);return R(s,[])}if(1===n.rank&&2===r.rank){const e=R(n,[1,-1]),t=R(r,[r.shape[0],r.shape[1]]),s=L(e,t);return R(s,[s.size])}if(2===n.rank&&1===r.rank){const e=R(r,[-1,1]),t=L(n,e);return R(t,[t.size])}{const e=R(r,[r.shape[0],r.shape[1]]);return L(n,e)}}}),Ae=(0,i.op)({einsum_:function(e,...t){const n=t.map(((e,t)=>(0,o.YT)(e,`tensors${t}`,"einsum"))),r={equation:e};return s.T2.runKernel(a.Qgm,n,r)}}),_e=(0,i.op)({elu_:function(e){const t={x:(0,o.YT)(e,"x","elu","float32")};return s.T2.runKernel(a.Pah,t)}}),Re=(0,i.op)({erf_:function(e){let t=(0,o.YT)(e,"x","erf");d.vA("int32"===t.dtype||"float32"===t.dtype,(()=>"Input dtype must be `int32` or `float32`.")),"int32"===t.dtype&&(t=(0,T.w)(t,"float32"));const n={x:t};return s.T2.runKernel(a._s9,n)}});function De(e,t){return function(e,t,n){const r=e.length+t.length,s=[];let a=0,o=0;for(let i=0;i<r;i++)-1===n.indexOf(i)?s.push(e[a++]):s.push(t[o++]);return s}(e,t.map((e=>1)),t)}const Fe=(0,i.op)({max_:function(e,t=null,n=!1){const r={x:(0,o.YT)(e,"x","max")},i={reductionIndices:t,keepDims:n};return s.T2.runKernel(a.VAI,r,i)}}),Oe=(0,i.op)({min_:function(e,t=null,n=!1){const r={x:(0,o.YT)(e,"x","min")},i={axis:t,keepDims:n};return s.T2.runKernel(a.lNG,r,i)}}),Me=(0,i.op)({pow_:function(e,t){let n=(0,o.YT)(e,"base","pow"),r=(0,o.YT)(t,"exp","pow");[n,r]=(0,p.h0)(n,r);const i={a:n,b:r};return s.T2.runKernel(a.pyJ,i)}});var Le=n(5702);const ze=(0,i.op)({sqrt_:function(e){const t={x:(0,o.YT)(e,"x","sqrt","float32")};return s.T2.runKernel(a.dFH,t)}}),Pe=(0,i.op)({square_:function(e){const t=(0,o.YT)(e,"x","square");return s.T2.runKernel("Square",{x:t},{})}}),Be=(0,i.op)({sum_:function(e,t=null,n=!1){let r=(0,o.YT)(e,"x","sum");"bool"===r.dtype&&(r=(0,T.w)(r,"int32"));const i={x:r},l={axis:t,keepDims:n};return s.T2.runKernel(a.WuN,i,l)}});function Ve(e,t,n=null){if(0===e.rank)return l(e);if(1!==e.rank&&null===n)return Ve(R(e,[-1]),t,n);if(1===e.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===t)return Be(l(e),n);if(t===1/0)return Fe(l(e),n);if(t===-1/0)return Oe(l(e),n);if("euclidean"===t||2===t)return ze(Be(Me(l(e),(0,Le.d)(2,"int32")),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(n)&&2===n.length){if(1===t)return Fe(Be(l(e),n[0]),n[1]-1);if(t===1/0)return Fe(Be(l(e),n[1]),n[0]);if(t===-1/0)return Oe(Be(l(e),n[1]),n[0]);if("fro"===t||"euclidean"===t)return ze(Be(Pe(e),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${n}`)}const We=(0,i.op)({norm_:function(e,t="euclidean",n=null,r=!1){const s=Ve(e=(0,o.YT)(e,"x","norm"),t,n);let a=s.shape;if(r){const t=(0,d.Y6)(n,e.shape);a=De(s.shape,t)}return R(s,a)}}),Ue=(0,i.op)({euclideanNorm_:function(e,t=null,n=!1){return We(e,"euclidean",t,n)}}),Ge=(0,i.op)({exp_:function(e){const t={x:(0,o.YT)(e,"x","exp")};return s.T2.runKernel(a.ox3,t)}}),He=(0,i.op)({expandDims_:function(e,t=0){const n=(0,o.YT)(e,"x","expandDims","string_or_numeric");d.vA(t<=n.rank,(()=>"Axis must be <= rank of the tensor"));const r={input:n},i={dim:t};return s.T2.runKernel(a.ybN,r,i)}}),je=(0,i.op)({expm1_:function(e){const t={x:(0,o.YT)(e,"x","expm1")};return s.T2.runKernel(a.ybj,t)}}),Ke=(0,i.op)({tile_:function(e,t){const n=(0,o.YT)(e,"x","tile","string_or_numeric");d.vA(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`));const r={x:n},i={reps:t};return s.T2.runKernel(a.FAs,r,i)}}),qe=(0,i.op)({eye_:function(e,t,n,r="float32"){null==t&&(t=e);const s=(0,Z.r)([e,t],r),a=e<=t?e:t;for(let e=0;e<a;++e)s.set(1,e,e);const o=R(s.toTensor(),[e,t]);if(null==n)return o;if(1===n.length)return Ke(He(o,0),[n[0],1,1]);if(2===n.length)return Ke(He(He(o,0),0),[n[0],n[1],1,1]);if(3===n.length)return Ke(He(He(He(o,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}}),Ye=(0,i.op)({floor_:function(e){const t={x:(0,o.YT)(e,"x","floor","float32")};return s.T2.runKernel(a.ZgB,t)}}),Xe=(0,i.op)({gather_:function(e,t,n=0,r=0){const i={x:(0,o.YT)(e,"x","gather"),indices:(0,o.YT)(t,"indices","gather","int32")},l={axis:n,batchDims:r};return s.T2.runKernel(a.mxL,i,l)}}),Ze=(0,i.op)({greater_:function(e,t){let n=(0,o.YT)(e,"a","greater","string_or_numeric"),r=(0,o.YT)(t,"b","greater","string_or_numeric");[n,r]=(0,p.h0)(n,r),Te(n.shape,r.shape);const i={a:n,b:r};return s.T2.runKernel(a.XhZ,i)}}),Qe=(0,i.op)({greaterEqual_:function(e,t){let n=(0,o.YT)(e,"a","greaterEqual","string_or_numeric"),r=(0,o.YT)(t,"b","greaterEqual","string_or_numeric");[n,r]=(0,p.h0)(n,r),Te(n.shape,r.shape);const i={a:n,b:r};return s.T2.runKernel(a.lLS,i)}}),Je=(0,i.op)({imag_:function(e){const t={input:(0,o.YT)(e,"input","imag")};return s.T2.runKernel(a.dv8,t)}}),et=(0,i.op)({isFinite_:function(e){const t={x:(0,o.YT)(e,"x","isFinite")};return s.T2.runKernel(a.gIW,t)}}),tt=(0,i.op)({isInf_:function(e){const t={x:(0,o.YT)(e,"x","isInf")};return s.T2.runKernel(a.E3$,t)}}),nt=(0,i.op)({isNaN_:function(e){const t={x:(0,o.YT)(e,"x","isNaN")};return s.T2.runKernel(a.iPs,t)}}),rt=(0,i.op)({leakyRelu_:function(e,t=.2){const n={x:(0,o.YT)(e,"x","leakyRelu")},r={alpha:t};return s.T2.runKernel(a.X0$,n,r)}}),st=(0,i.op)({less_:function(e,t){let n=(0,o.YT)(e,"a","less","string_or_numeric"),r=(0,o.YT)(t,"b","less","string_or_numeric");[n,r]=(0,p.h0)(n,r),Te(n.shape,r.shape);const i={a:n,b:r};return s.T2.runKernel(a.mIA,i)}}),at=(0,i.op)({lessEqual_:function(e,t){let n=(0,o.YT)(e,"a","lessEqual","string_or_numeric"),r=(0,o.YT)(t,"b","lessEqual","string_or_numeric");[n,r]=(0,p.h0)(n,r),Te(n.shape,r.shape);const i={a:n,b:r};return s.T2.runKernel(a.CwD,i)}});function ot(e,t,n){if(n<=0)throw new Error("The number of values should be positive.");const r={start:e,stop:t,num:n};return s.T2.runKernel(a.mnI,{},r)}const it=(0,i.op)({localResponseNormalization_:function(e,t=5,n=1,r=1,i=.5){const l=(0,o.YT)(e,"x","localResponseNormalization");d.vA(4===l.rank||3===l.rank,(()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${l.rank}.`)),d.vA(d.E6(t),(()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`));let u=l,c=!1;3===l.rank&&(c=!0,u=R(l,[1,l.shape[0],l.shape[1],l.shape[2]]));const p={x:u},h={depthRadius:t,bias:n,alpha:r,beta:i},f=s.T2.runKernel(a.jM4,p,h);return c?R(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),lt=(0,i.op)({log_:function(e){const t={x:(0,o.YT)(e,"x","log","float32")};return s.T2.runKernel(a.tG8,t)}}),ut=(0,i.op)({log1p_:function(e){const t={x:(0,o.YT)(e,"x","log1p")};return s.T2.runKernel(a.Cg$,t)}});var ct=n(259);function pt(e){return s.T2.customGrad(e)}const ht=(0,i.op)({neg_:function(e){const t={x:(0,o.YT)(e,"x","neg")};return s.T2.runKernel(a.l0G,t)}}),dt=(0,i.op)({softplus_:function(e){const t={x:(0,o.YT)(e,"x","softplus")};return s.T2.runKernel(a.Fin,t)}}),ft=(0,i.op)({logSigmoid_:function(e){const t=(0,o.YT)(e,"x","logSigmoid");return pt((e=>({value:ht(dt(ht(e))),gradFunc:t=>z(t,P(ht(e)))})))(t)}}),mt=(0,i.op)({sub_:function(e,t){let n=(0,o.YT)(e,"a","sub"),r=(0,o.YT)(t,"b","sub");[n,r]=(0,p.h0)(n,r);const i={a:n,b:r};return s.T2.runKernel(a.PbM,i)}}),gt=(0,i.op)({logSoftmax_:function(e,t=-1){const n=(0,o.YT)(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);const r=pt(((e,n)=>{const r=Fe(e,t,!0),s=mt(e,r),a=mt((0,T.w)(s,"float32"),lt(Be(Ge(s),t,!0)));return n([a]),{value:a,gradFunc:(e,n)=>{const[r]=n,s=Ge(r);return mt(e,z(Be(e,t,!0),s))}}}));return r(n)}}),yt=(0,i.op)({logSumExp_:function(e,t=null,n=!1){const r=(0,o.YT)(e,"x","logSumExp"),s=(0,d.Y6)(t,r.shape),a=Fe(r,s,!0),i=mt(r,a),l=Ge(i),u=Be(l,s),c=lt(u),p=h(R(a,c.shape),c);if(n){const e=De(p.shape,s);return R(p,e)}return p}}),bt=(0,i.op)({logicalAnd_:function(e,t){const n=(0,o.YT)(e,"a","logicalAnd","bool"),r=(0,o.YT)(t,"b","logicalAnd","bool");Te(n.shape,r.shape);const i={a:n,b:r};return s.T2.runKernel(a.RUm,i)}}),xt=(0,i.op)({logicalNot_:function(e){const t={x:(0,o.YT)(e,"x","logicalNot","bool")};return s.T2.runKernel(a.nZd,t)}}),wt=(0,i.op)({logicalOr_:function(e,t){const n=(0,o.YT)(e,"a","logicalOr","bool"),r=(0,o.YT)(t,"b","logicalOr","bool");Te(n.shape,r.shape);const i={a:n,b:r};return s.T2.runKernel(a.LXA,i)}}),vt=(0,i.op)({logicalXor_:function(e,t){const n=(0,o.YT)(e,"a","logicalXor","bool"),r=(0,o.YT)(t,"b","logicalXor","bool");return Te(n.shape,r.shape),bt(wt(e,t),xt(bt(e,t)))}}),kt=2147483648,Nt=(0,i.op)({searchSorted_:function(e,t,n="left"){const r=(0,o.YT)(e,"sortedSequence","searchSorted"),i=(0,o.YT)(t,"values","searchSorted"),l=r.shape[r.shape.length-1],u=i.shape[i.shape.length-1],c=R(r,[-1,l]),p=R(i,[-1,u]);if(c.rank<2)throw new Error("Sorted input argument must be at least 2-dimensional");if(c.shape[0]!==p.shape[0])throw new Error("Leading dimension of 'sortedSequence' and 'values' must match.");if((0,d.Ze)(p.shape)>=kt)throw new Error("values tensor size must less than 2147483648");if(c.shape[1]>=kt)throw new Error(`trailing dim_size must less than 2147483648 for int32 output type, was ${c.shape[1]}`);const h={sortedSequence:c,values:p},f={side:n};return s.T2.runKernel(a.uWl,h,f)}});function Tt(e,t){return Nt(e,t,"left")}const St=(0,i.op)({maxPool_:function(e,t,n,r,i){const l=(0,o.YT)(e,"x","maxPool");let u=l,c=!1;3===l.rank&&(c=!0,u=R(l,[1,l.shape[0],l.shape[1],l.shape[2]])),d.vA(4===u.rank,(()=>`Error in maxPool: input must be rank 4 but got rank ${u.rank}.`)),d.vA(A(n,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`)),_("maxPool",r,i);const p={x:u},h={filterSize:t,strides:n,pad:r,dimRoundingMode:i},f=s.T2.runKernel(a.t3d,p,h);return c?R(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),It=(0,i.op)({maxPool3d_:function(e,t=[1,1,1],n,r,i,l="NDHWC"){const u=(0,o.YT)(e,"x","maxPool3d");let c=u,p=!1;4===u.rank&&(p=!0,c=R(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]])),d.vA(5===c.rank,(()=>`Error in maxPool3d: x must be rank 5 but got rank ${c.rank}.`)),d.vA("NDHWC"===l,(()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${l}`)),_("maxPool3d",r,i);const h={x:c},f={filterSize:t,strides:n,pad:r,dimRoundingMode:i,dataFormat:l},m=s.T2.runKernel(a.ySp,h,f);return p?R(m,[m.shape[1],m.shape[2],m.shape[3],m.shape[4]]):m}}),Et=(0,i.op)({maxPoolWithArgmax_:function(e,t,n,r,i=!1){const l={x:(0,o.YT)(e,"x","maxPoolWithArgmax")},u={filterSize:t,strides:n,pad:r,includeBatchInIndex:i},c=s.T2.runKernel(a.TL8,l,u);return{result:c[0],indexes:c[1]}}}),$t=(0,i.op)({maximum_:function(e,t){let n=(0,o.YT)(e,"a","maximum"),r=(0,o.YT)(t,"b","maximum");[n,r]=(0,p.h0)(n,r),"bool"===n.dtype&&(n=(0,T.w)(n,"int32"),r=(0,T.w)(r,"int32")),Te(n.shape,r.shape);const i={a:n,b:r};return s.T2.runKernel(a.LDN,i)}}),Ct=(0,i.op)({mean_:function(e,t=null,n=!1){const r={x:(0,o.YT)(e,"x","mean")},i={axis:t,keepDims:n};return s.T2.runKernel(a.g5A,r,i)}});function At(e,t="float32"){if("complex64"===t){const t=At(e,"float32"),n=At(e,"float32");return(0,te.f)(t,n)}const n=(0,d.Ty)((0,d.Ze)(e),t);return s.T2.makeTensor(n,e,t)}function _t(e,t="float32"){if("complex64"===t){const t=_t(e,"float32"),n=At(e,"float32");return(0,te.f)(t,n)}const n=(0,d.FZ)((0,d.Ze)(e),t);return s.T2.makeTensor(n,e,t)}function Rt(e,t,{indexing:n="xy"}={}){if("xy"!==n&&"ij"!==n)throw new TypeError(`${n} is not a valid third argument to meshgrid`);if(void 0===e)return[];let r=(0,o.YT)(e,"x","meshgrid",e instanceof ct.qY?e.dtype:"float32");if(void 0===t)return[r];let s=(0,o.YT)(t,"y","meshgrid",t instanceof ct.qY?t.dtype:"float32");const a=(0,d.Ze)(r.shape),i=(0,d.Ze)(s.shape);return"xy"===n?(r=R(r,[1,-1]),s=R(s,[-1,1]),[L(_t([i,1],r.dtype),r),L(s,_t([1,a],s.dtype))]):(r=R(r,[-1,1]),s=R(s,[1,-1]),[L(r,_t([1,i],r.dtype)),L(_t([a,1],s.dtype),s)])}const Dt=(0,i.op)({minimum_:function(e,t){let n=(0,o.YT)(e,"a","minimum"),r=(0,o.YT)(t,"b","minimum");[n,r]=(0,p.h0)(n,r),"bool"===n.dtype&&(n=(0,T.w)(n,"int32"),r=(0,T.w)(r,"int32")),Te(n.shape,r.shape);const i={a:n,b:r};return s.T2.runKernel(a.LG0,i)}}),Ft=(0,i.op)({mirrorPad_:function(e,t,n){d.vA("reflect"===n||"symmetric"===n,(()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`));const r=(0,o.YT)(e,"x","mirrorPad");if(0===r.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");d.vA(t.length===r.rank,(()=>`Padding doesn't match input. Must be ${r.rank}. Got ${t.length}.`));const i="reflect"===n?1:0;for(let e=0;e<r.rank;e++)d.vA(2===t[e].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),d.vA(t[e][0]>=0&&t[e][0]<=r.shape[e]-i&&t[e][1]>=0&&t[e][1]<=r.shape[e]-i,(()=>`Padding in dimension ${e} cannot be greater than or equal to ${r.shape[e]-i} or less than 0 for input of shape ${r.shape}`));const l={paddings:t,mode:n},u={x:r};return s.T2.runKernel(a.x7F,u,l)}}),Ot=(0,i.op)({mod_:function(e,t){let n=(0,o.YT)(e,"a","mod"),r=(0,o.YT)(t,"b","mod");[n,r]=(0,p.h0)(n,r);const i={a:n,b:r};return s.T2.runKernel(a.BLA,i)}}),Mt=(0,i.op)({moments_:function(e,t=null,n=!1){e=(0,o.YT)(e,"x","moments");const r=(0,d.Y6)(t,e.shape),s=Ct(e,r,n);let a=s.shape;n||(a=De(s.shape,r));const i=Pe(mt((0,T.w)(e,"float32"),R(s,a)));return{mean:s,variance:Ct(i,r,n)}}}),Lt=(0,i.op)({multiRNNCell_:function(e,t,n,r){const s=(0,o.YT)(t,"data","multiRNNCell"),a=(0,o.j1)(n,"c","multiRNNCell"),i=(0,o.j1)(r,"h","multiRNNCell");let l=s;const u=[];for(let t=0;t<e.length;t++){const n=e[t](l,a[t],i[t]);u.push(n[0]),u.push(n[1]),l=n[1]}const c=[],p=[];for(let e=0;e<u.length;e+=2)c.push(u[e]),p.push(u[e+1]);return[c,p]}}),zt=(0,i.op)({multinomial_:function(e,t,n,r=!1){const i=(0,o.YT)(e,"logits","multinomial"),l=i.size,u=i.rank;if(l<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${l}.`);if(u>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${u}`);n=n||Math.random();const c={logits:1===u?R(i,[1,-1]):i},p={numSamples:t,seed:n,normalized:r},h=s.T2.runKernel(a.WT3,c,p);return 1===u?R(h,[h.size]):h}}),Pt=(0,i.op)({notEqual_:function(e,t){let n=(0,o.YT)(e,"a","notEqual","string_or_numeric"),r=(0,o.YT)(t,"b","notEqual","string_or_numeric");[n,r]=(0,p.h0)(n,r),Te(n.shape,r.shape);const i={a:n,b:r};return s.T2.runKernel(a.ylV,i)}}),Bt=(0,i.op)({oneHot_:function(e,t,n=1,r=0,i="int32"){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const l={indices:(0,o.YT)(e,"indices","oneHot","int32")},u={dtype:i,depth:t,onValue:n,offValue:r};return s.T2.runKernel(a.urI,l,u)}}),Vt=(0,i.op)({onesLike_:function(e){const t={x:(0,o.YT)(e,"x","onesLike")};return s.T2.runKernel(a.LWX,t)}}),Wt=(0,i.op)({outerProduct_:function(e,t){const n=(0,o.YT)(e,"v1","outerProduct"),r=(0,o.YT)(t,"v2","outerProduct");d.vA(1===n.rank&&1===r.rank,(()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${r.rank}.`));const s=R(n,[-1,1]),a=R(r,[1,-1]);return L(s,a)}}),Ut=(0,i.op)({pad_:function(e,t,n=0){const r=(0,o.YT)(e,"x","pad");if(0===r.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const i={paddings:t,constantValue:n},l={x:r};return s.T2.runKernel(a.ODT,l,i)}}),Gt=(0,i.op)({pad1d_:function(e,t,n=0){return(0,d.vA)(2===t.length,(()=>"Invalid number of paddings. Must be length of 2.")),Ut(e,[t],n)}}),Ht=(0,i.op)({pad2d_:function(e,t,n=0){return(0,d.vA)(2===t.length&&2===t[0].length&&2===t[1].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),Ut(e,t,n)}}),jt=(0,i.op)({pad3d_:function(e,t,n=0){return(0,d.vA)(3===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),Ut(e,t,n)}}),Kt=(0,i.op)({pad4d_:function(e,t,n=0){return(0,d.vA)(4===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length&&2===t[3].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),Ut(e,t,n)}}),qt=(0,i.op)({spaceToBatchND_:function(e,t,n){const r=(0,o.YT)(e,"x","spaceToBatchND");d.vA(r.rank>=1+t.length,(()=>`input rank ${r.rank} should be > than [blockShape] ${t.length}`)),d.vA(n.length===t.length,(()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`)),d.vA(r.shape.reduce(((e,r,s)=>s>0&&s<=t.length?e&&(r+n[s-1][0]+n[s-1][1])%t[s-1]==0:e),!0),(()=>`input spatial dimensions ${r.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`));const i={x:r},l={blockShape:t,paddings:n};return s.T2.runKernel(a.A8B,i,l)}}),Yt=(0,i.op)({pool_:function(e,t,n,r,s,a,i){null==s&&(s=[1,1]),null==a&&(a=1),0===r&&(r="valid");const l=(0,o.YT)(e,"x","maxPool");let u=l,c=!1;3===l.rank&&(c=!0,u=R(l,[1,l.shape[0],l.shape[1],l.shape[2]])),d.vA(A(a,s),(()=>`Error in pool: Either strides or dilations must be 1. Got strides ${a} and dilations '${s}'`));const p=function(e,t,n,r,s,a,o="channelsLast"){const[i,l]=I(t);let u;if("channelsLast"===o)u=[i,l,e[3],e[3]];else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);u=[i,l,e[1],e[1]]}return S(e,u,n,r,s,a,!1,o)}(u.shape,t,a,s,r),h=[p.dilationHeight,p.dilationWidth];let f;f="same"===r?function(e,t){const n=e.map(((e,n)=>e+(e-1)*(t[n]-1))).map((e=>e-1)),r=n.map((e=>Math.floor(e/2))),s=n.map(((e,t)=>e-r[t]));return n.map(((e,t)=>[r[t],s[t]]))}([p.filterHeight,p.filterWidth],h):[[0,0],[0,0]];const m=1===h[0]&&1===h[1],[g,y]=function(e,t,n){const r=n.map((e=>e[0])),s=n.map((e=>e[1])),a=e.concat(r,s),o=t.map(((e,t)=>(e-a[t]%e)%e)),i=s.map(((e,t)=>e+o[t]));return[t.map(((e,t)=>[r[t],i[t]])),t.map(((e,t)=>[0,o[t]]))]}([p.inHeight,p.inWidth],h,f),b=m?r:"valid",x=m?u:qt(u,h,g),w=("avg"===n?()=>D(x,t,a,b,i):()=>St(x,t,a,b,i))(),v=m?w:U(w,h,y);return c?R(v,[v.shape[1],v.shape[2],v.shape[3]]):v}}),Xt=(0,i.op)({prelu_:function(e,t){const n={x:(0,o.YT)(e,"x","prelu"),alpha:(0,o.YT)(t,"alpha","prelu")};return s.T2.runKernel(a.Ncv,n)}});var Zt=n(5295);const Qt=(0,i.op)({prod_:function(e,t=null,n=!1){let r=(0,o.YT)(e,"x","prod");"bool"===r.dtype&&(r=(0,T.w)(r,"int32"));const i={x:r},l={axis:t,keepDims:n};return s.T2.runKernel(a.kdj,i,l)}}),Jt=(0,i.op)({raggedGather_:function(e,t,n,r){const i={paramsNestedSplits:e.map(((e,t)=>(0,o.YT)(e,`tensors${t}`,"raggedGather","int32"))),paramsDenseValues:(0,o.YT)(t,"paramsDenseValues","raggedGather"),indices:(0,o.YT)(n,"indices","raggedGather","int32")},l={outputRaggedRank:r},u=s.T2.runKernel(a.oJ2,i,l);return{outputNestedSplits:u.slice(0,u.length-1),outputDenseValues:u[u.length-1]}}}),en=(0,i.op)({raggedTensorToTensor_:function(e,t,n,r,i){const l=(0,o.YT)(e,"shape","raggedTensorToTensor","int32"),u=(0,o.YT)(t,"values","raggedTensorToTensor"),c={shape:l,values:u,defaultValue:(0,o.YT)(n,"defaultValue","raggedTensorToTensor",u.dtype),rowPartitionTensors:r.map(((e,t)=>(0,o.YT)(e,`tensors${t}`,"raggedTensorToTensor","int32")))},p={rowPartitionTypes:i};return s.T2.runKernel(a.mH5,c,p)}}),tn=(0,i.op)({rand_:function(e,t,n){const r=(0,d.Ze)(e);let a=null;if(null==n||"float32"===n)a=new Float32Array(r);else if("int32"===n)a=new Int32Array(r);else{if("bool"!==n)throw new Error(`Unknown data type ${n}`);a=new Uint8Array(r)}for(let e=0;e<r;e++)a[e]=t();return s.T2.makeTensor(a,e,n)}});var nn=n(7391);class rn{constructor(e,t,n,r,s){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=s||Math.random();this.random=nn.alea(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let r,s,a;do{r=2*this.random()-1,s=2*this.random()-1,a=r*r+s*s}while(a>=1||0===a);const o=Math.sqrt(-2*Math.log(a)/a);e=this.mean+this.stdDev*r*o,t=this.mean+this.stdDev*s*o,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class sn{constructor(e,t,n,r){this.alpha=e,this.beta=1/t,this.dtype=n;const s=r||Math.random();this.randu=nn.alea(s.toString()),this.randn=new rn(0,1,n,!1,this.randu()),this.d=e<1?e+2/3:e-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let e,t,n,r,s,a;for(;;){do{r=this.randn.nextValue(),a=1+this.c*r}while(a<=0);if(a*=a*a,e=r*r,t=1-.331*e*e,n=.5*e+this.d*(1-a+Math.log(a)),s=this.randu(),s<t||Math.log(s)<n)break}return a=1/this.beta*this.d*a,this.alpha<1&&(a*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(a)}convertValue(e){return"float32"===this.dtype?e:Math.round(e)}}class an{constructor(e=0,t=1,n,r){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=nn.alea(r)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const on=(0,i.op)({randomGamma_:function(e,t,n=1,r="float32",s){if(null==n&&(n=1),null==r&&(r="float32"),"float32"!==r&&"int32"!==r)throw new Error(`Unsupported data type ${r}`);const a=new sn(t,n,r,s),o=(0,Z.r)(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=a.nextValue();return o.toTensor()}}),ln=(0,i.op)({randomNormal_:function(e,t=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error(`Unsupported data type ${r}`);const a=new rn(t,n,r,!1,s),o=(0,Z.r)(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=a.nextValue();return o.toTensor()}}),un=(0,i.op)({randomStandardNormal_:function(e,t,n){if(null!=t&&"bool"===t)throw new Error(`Unsupported data type ${t}`);return ln(e,0,1,t,n)}}),cn=(0,i.op)({randomUniform_:function(e,t=0,n=1,r="float32",s){const a=(0,Z.r)(e,r),o=new an(t,n,null,s);for(let e=0;e<a.values.length;e++)a.values[e]=o.nextValue();return a.toTensor()}});function pn(e,t,n=1,r="float32"){if(0===n)throw new Error("Cannot have a step of zero");const o={start:e,stop:t,step:n,dtype:r};return s.T2.runKernel(a.Q6t,{},o)}const hn=(0,i.op)({real_:function(e){const t={input:(0,o.YT)(e,"input","real")};return s.T2.runKernel(a.LRy,t)}}),dn=(0,i.op)({reciprocal_:function(e){const t={x:(0,o.YT)(e,"x","reciprocal")};return s.T2.runKernel(a.huO,t)}}),fn=(0,i.op)({relu_:function(e){const t={x:(0,o.YT)(e,"x","relu")};return s.T2.runKernel(a.fUj,t)}}),mn=(0,i.op)({relu6_:function(e){const t={x:(0,o.YT)(e,"x","relu6")};return s.T2.runKernel(a.P_L,t)}}),gn=(0,i.op)({reverse_:function(e,t){const n={x:(0,o.YT)(e,"x","reverse")},r={dims:t};return s.T2.runKernel(a.D7i,n,r)}}),yn=(0,i.op)({reverse1d_:function(e){const t=(0,o.YT)(e,"x","reverse");return d.vA(1===t.rank,(()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`)),gn(t,0)}}),bn=(0,i.op)({reverse2d_:function(e,t){const n=(0,o.YT)(e,"x","reverse");return d.vA(2===n.rank,(()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`)),gn(n,t)}}),xn=(0,i.op)({reverse3d_:function(e,t){const n=(0,o.YT)(e,"x","reverse");return d.vA(3===n.rank,(()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`)),gn(n,t)}}),wn=(0,i.op)({reverse4d_:function(e,t){const n=(0,o.YT)(e,"x","reverse");return d.vA(4===n.rank,(()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`)),gn(n,t)}}),vn=(0,i.op)({round_:function(e){const t={x:(0,o.YT)(e,"x","round")};return s.T2.runKernel(a.hVg,t)}}),kn=(0,i.op)({rsqrt_:function(e){const t={x:(0,o.YT)(e,"x","rsqrt","float32")};return s.T2.runKernel(a.TOR,t)}}),Nn=(0,i.op)({selu_:function(e){const t={x:(0,o.YT)(e,"x","selu")};return s.T2.runKernel(a.u$b,t)}}),Tn=(0,i.op)({separableConv2d_:function(e,t,n,r,s,a=[1,1],i="NHWC"){const l=(0,o.YT)(e,"x","separableConv2d"),u=(0,o.YT)(t,"depthwiseFilter","separableConv2d"),c=(0,o.YT)(n,"pointwiseFilter","separableConv2d");let p=l,h=!1;if(3===l.rank&&(h=!0,p=R(l,[1,l.shape[0],l.shape[1],l.shape[2]])),"NCHW"===i)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");d.vA(4===p.rank,(()=>`Error in separableConv2d: input must be rank 4, but got rank ${p.rank}.`)),d.vA(4===u.rank,(()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${u.rank}.`)),d.vA(4===c.rank,(()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${u.rank}.`)),d.vA(1===c.shape[0],(()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${c.shape[0]}.`)),d.vA(1===c.shape[1],(()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${c.shape[1]}.`));const f=u.shape[2],m=u.shape[3];d.vA(c.shape[2]===f*m,(()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${f*m}, but got ${c.shape[2]}.`));const g=xe(p,u,r,s,i,a),y=oe(g,c,1,"valid",i);return h?R(y,[y.shape[1],y.shape[2],y.shape[3]]):y}}),Sn=async function(e,t){const n=(0,o.YT)(e,"x","setdiff1d"),r=(0,o.YT)(t,"y","setdiff1d");d.vA(n.dtype===r.dtype,(()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${r.dtype}).`)),d.vA(1===n.rank,(()=>`x should be 1D tensor, but got x (${n.shape}).`)),d.vA(1===r.rank,(()=>`y should be 1D tensor, but got y (${r.shape}).`));const s=await n.data(),a=await r.data(),i=new Set(a);let l=0;for(let e=0;e<s.length;e++)i.has(s[e])||l++;const u=new ct.yl([l],n.dtype),c=new ct.yl([l],"int32");for(let e=0,t=0;e<s.length;e++)i.has(s[e])||(u.values[t]=s[e],c.values[t]=e,t++);return[u.toTensor(),c.toTensor()]},In=(0,i.op)({sign_:function(e){const t={x:(0,o.YT)(e,"x","sign")};return s.T2.runKernel(a.YVe,t)}}),En=(0,i.op)({sin_:function(e){const t={x:(0,o.YT)(e,"x","sin","float32")};return s.T2.runKernel(a.hql,t)}}),$n=(0,i.op)({sinh_:function(e){const t={x:(0,o.YT)(e,"x","sinh")};return s.T2.runKernel(a.J3C,t)}}),Cn=(0,i.op)({slice1d_:function(e,t,n){const r=(0,o.YT)(e,"x","slice1d");return d.vA(1===r.rank,(()=>`slice1d expects a rank-1 tensor, but got a rank-${r.rank} tensor`)),B(r,[t],[n])}}),An=(0,i.op)({slice2d_:function(e,t,n){const r=(0,o.YT)(e,"x","slice2d");return d.vA(2===r.rank,(()=>`slice2d expects a rank-2 tensor, but got a rank-${r.rank} tensor`)),B(r,t,n)}}),_n=(0,i.op)({slice3d_:function(e,t,n){const r=(0,o.YT)(e,"x","slice3d");return d.vA(3===r.rank,(()=>`slice3d expects a rank-3 tensor, but got a rank-${r.rank} tensor`)),B(r,t,n)}}),Rn=(0,i.op)({slice4d_:function(e,t,n){const r=(0,o.YT)(e,"x","slice4d");return d.vA(4===r.rank,(()=>`slice4d expects a rank-4 tensor, but got a rank-${r.rank} tensor`)),B(r,t,n)}}),Dn=(0,i.op)({softmax_:function(e,t=-1){const n=(0,o.YT)(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);const r={logits:n},i={dim:t};return s.T2.runKernel(a.rFG,r,i)}}),Fn=(0,i.op)({fft_:function(e){(0,d.vA)("complex64"===e.dtype,(()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`));const t={input:e};return s.T2.runKernel(a.rGP,t)}}),On=(0,i.op)({ifft_:function(e){(0,d.vA)("complex64"===e.dtype,(()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`));const t={input:e};return s.T2.runKernel(a.OAQ,t)}}),Mn=(0,i.op)({irfft_:function(e){const t=e.shape[e.shape.length-1],n=e.size/t;let r;if(t<=2){const s=R(e,[n,t]);r=On(s)}else{const s=[n,2*(t-1)],a=R(hn(e),[n,t]),o=R(Je(e),[n,t]),i=gn(B(a,[0,1],[n,t-2]),1),l=z(gn(B(o,[0,1],[n,t-2]),1),(0,Le.d)(-1)),u=M([a,i],1),c=M([o,l],1),p=R((0,te.f)(u,c),[s[0],s[1]]);r=On(p)}if(r=hn(r),3===e.rank&&0!==e.shape[0]){const t=r,n=e.shape[0];r=R(r,[n,r.shape[0]/n,r.shape[1]]),t.dispose()}return r}}),Ln=(0,i.op)({split_:function(e,t,n=0){const r={x:(0,o.YT)(e,"x","split")},i={numOrSizeSplits:t,axis:n};return s.T2.runKernel(a.Blb,r,i)}}),zn=(0,i.op)({rfft_:function(e,t){(0,d.vA)("float32"===e.dtype,(()=>`The dtype for rfft() must be real value but got ${e.dtype}`));let n=e.shape[e.shape.length-1];const r=e.size/n;let s;if(null!=t&&t<n){const r=e.shape.map((e=>0)),a=e.shape.map((e=>e));a[e.shape.length-1]=t,s=B(e,r,a),n=t}else if(null!=t&&t>n){const r=e.shape.map((e=>e));r[e.shape.length-1]=t-n,s=M([e,At(r)],e.shape.length-1),n=t}else s=e;const a=Ee(s),o=R((0,te.f)(s,a),[r,n]),i=Fn(o),l=Math.floor(n/2)+1,u=hn(i),c=Je(i),p=Ln(u,[l,n-l],u.shape.length-1),h=Ln(c,[l,n-l],c.shape.length-1),f=s.shape.slice();return f[s.shape.length-1]=l,R((0,te.f)(p[0],h[0]),f)}}),Pn=(0,i.op)({squaredDifference_:function(e,t){let n=(0,o.YT)(e,"a","squaredDifference"),r=(0,o.YT)(t,"b","squaredDifference");[n,r]=(0,p.h0)(n,r),Te(n.shape,r.shape);const i={a:n,b:r};return s.T2.runKernel(a.Ddj,i,{})}}),Bn=(0,i.op)({squeeze_:function(e,t){const n=(0,o.YT)(e,"x","squeeze","string_or_numeric");return R(n,(0,d.gx)(n.shape,t).newShape)}}),Vn=(0,i.op)({stack_:function(e,t=0){const n=(0,o.j1)(e,"tensors","stack","string_or_numeric");d.vA(n.length>=1,(()=>"Pass at least one tensor to tf.stack")),n.length>0&&d.vA(t<=n[0].rank,(()=>"Axis must be <= rank of the tensor"));const r=n,i={axis:t};return s.T2.runKernel(a.mM$,r,i)}}),Wn=(0,i.op)({step_:function(e,t=0){const n={x:(0,o.YT)(e,"x","step")},r={alpha:t};return s.T2.runKernel(a.pnw,n,r)}}),Un=(0,i.op)({stridedSlice_:function(e,t,n,r,i=0,l=0,u=0,c=0,p=0){const h={x:(0,o.YT)(e,"x","stridedSlice","string_or_numeric")},d={begin:t,end:n,strides:r,beginMask:i,endMask:l,ellipsisMask:u,newAxisMask:c,shrinkAxisMask:p};return s.T2.runKernel(a.UcO,h,d)}}),Gn=(0,i.op)({tan_:function(e){const t={x:(0,o.YT)(e,"x","tan","float32")};return s.T2.runKernel(a.oFs,t)}});var Hn=n(4027),jn=n(9171);function Kn(e,t){(0,d.HO)(e);const n=(0,o.MZ)(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return(0,jn.Q)(e,null,n,t)}function qn(e,t,n){if((0,d.HO)(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const r=(0,o.MZ)(e,n);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return(0,jn.Q)(e,t,r,n)}function Yn(e,t,n){if((0,d.HO)(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const r=(0,o.MZ)(e,n);if(3!==r.length&&1!==r.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return(0,jn.Q)(e,t,r,n)}function Xn(e,t,n){if((0,d.HO)(e),null!=t&&4!==t.length)throw new Error("tensor4d() requires shape to have four numbers");const r=(0,o.MZ)(e,n);if(4!==r.length&&1!==r.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return(0,jn.Q)(e,t,r,n)}function Zn(e,t,n){if((0,d.HO)(e),null!=t&&5!==t.length)throw new Error("tensor5d() requires shape to have five numbers");const r=(0,o.MZ)(e,n);if(5!==r.length&&1!==r.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return(0,jn.Q)(e,t,r,n)}function Qn(e,t,n){if((0,d.HO)(e),null!=t&&6!==t.length)throw new Error("tensor6d() requires shape to have six numbers");const r=(0,o.MZ)(e,n);if(6!==r.length&&1!==r.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return t=t||r,(0,jn.Q)(e,t,r,n)}const Jn=(0,i.op)({topk_:function(e,t=1,n=!0){const r=(0,o.YT)(e,"x","topk");if(0===r.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const i=r.shape[r.shape.length-1];if(t<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`);if(t>i)throw new Error(`'k' passed to topk() must be <= the last dimension (${i}) but got ${t}`);const l={x:r},u={k:t,sorted:n},[c,p]=s.T2.runKernel(a.TBb,l,u);return{values:c,indices:p}}}),er=(0,i.op)({truncatedNormal_:function(e,t=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error("Unsupported data type $ { dtype }");const a=new rn(t,n,r,!0,s),o=(0,Z.r)(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=a.nextValue();return o.toTensor()}}),tr=(0,i.op)({unique_:function(e,t=0){const n=(0,o.YT)(e,"x","unique","string_or_numeric");(0,d.vA)(n.rank>0,(()=>"The input tensor must be at least 1D"));const r={x:n},i={axis:t},[l,u]=s.T2.runKernel(a.EwU,r,i);return{values:l,indices:u}}}),nr=(0,i.op)({unsortedSegmentSum_:function(e,t,n){const r=(0,o.YT)(e,"x","unsortedSegmentSum"),i=(0,o.YT)(t,"segmentIds","unsortedSegmentSum","int32");(0,d.vA)((0,d.E6)(n),(()=>"numSegments must be of dtype int"));const l={x:r,segmentIds:i},u={numSegments:n};return s.T2.runKernel(a.pPe,l,u)}}),rr=(0,i.op)({unstack_:function(e,t=0){const n=(0,o.YT)(e,"x","unstack","string_or_numeric");d.vA(t>=-n.shape.length&&t<n.shape.length,(()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`));const r={value:n},i={axis:t};return s.T2.runKernel(a.dXR,r,i)}});function sr(e,t){return Nt(e,t,"right")}function ar(e,t=!0,n,r){return s.T2.makeVariable(e,t,n,r)}const or=async function(e){const t=(0,o.YT)(e,"condition","whereAsync","bool"),n=await t.data(),r=function(e,t){const n=[];for(let e=0;e<t.length;e++)t[e]&&n.push(e);const r=(0,Z.r)(e,"int32"),s=(0,Z.r)([n.length,e.length],"int32");for(let t=0;t<n.length;t++){const a=r.indexToLoc(n[t]),o=t*e.length;s.values.set(a,o)}return s.toTensor()}(t.shape,n);return e!==t&&t.dispose(),r},ir=async function(e,t,n){const r=(0,o.YT)(e,"tensor","boolMask"),s=(0,o.YT)(t,"mask","boolMask","bool"),a=null==n?0:n,i=s.rank,l=r.shape;d.vA(i>0,(()=>"mask cannot be scalar")),d.O3(l.slice(a,a+i),s.shape,"mask's shape must match the first K dimensions of tensor's shape,");let u=1;for(let e=a;e<a+i;e++)u*=l[e];const c=l.slice(0,a).concat([u],l.slice(a+i)),p=R(r,c),h=R(s,[-1]),f=await or(h),m=Bn(f,[1]),g=Xe(p,m,a);return e!==r&&r.dispose(),t!==s&&s.dispose(),m.dispose(),p.dispose(),h.dispose(),f.dispose(),g};var lr=n(7668);const ur=(0,i.op)({transpose_:function(e,t,n){const r=(0,o.YT)(e,"x","transpose");if(null==t&&(t=r.shape.map(((e,t)=>t)).reverse()),d.vA(r.rank===t.length,(()=>`Error in transpose: rank of input ${r.rank} must match length of perm ${t}.`)),t.forEach((e=>{d.vA(e>=0&&e<r.rank,(()=>"All entries in 'perm' must be between 0 and "+(r.rank-1)+` but got ${t}`))})),r.rank<=1)return r.clone();const i={x:r},l={perm:t};return"complex64"===r.dtype?(0,lr.DZ)((()=>{let e=hn(r),t=Je(r);return e=s.T2.runKernel(a.wx0,{x:e},l),t=s.T2.runKernel(a.wx0,{x:t},l),n&&(t=ht(t)),(0,te.f)(e,t)})):s.T2.runKernel(a.wx0,i,l)}}),cr=(0,i.op)({movingAverage_:function(e,t,n,r,s=!0){const a=(0,o.YT)(e,"v","movingAverage"),i=(0,o.YT)(t,"x","movingAverage"),l=(0,o.YT)(n,"decay","movingAverage");(0,p.rt)(a,i),d.vA(d.r1(a.shape,i.shape),(()=>"Shape mismatch in v and x"));const u=(0,Le.d)(1),c=mt(u,l);let f=z(mt(i,a),c);if(s){d.vA(null!=r,(()=>"When using zeroDebias: true, step is required."));const e=(0,o.YT)(r,"step","movingAverage");f=Ne(f,mt(u,Me(l,e)))}return h(a,f)}});const pr=(0,i.op)({scatterND_:function(e,t,n){const r=(0,o.YT)(e,"indices","scatterND","int32"),i=(0,o.YT)(t,"updates","scatterND");!function(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===e.size)throw new Error(`Updates specified for empty output. updates shape: ${e.shape}`)}!function(e,t,n){const r=t.rank>1?t.shape[t.rank-1]:1,s=t.rank>1?t.rank-1:1,a=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${r}, and batchDim: ${s}.`;if(n.rank<s)throw new Error(a+` update.rank < ${s}. `);if(e.length<r+(n.rank-s))throw new Error(a+` Output shape length < ${r+(n.rank-s)}`);if(n.rank!==s+e.length-r)throw new Error(a+" update.rank != "+(s+e.length-r));for(let e=0;e<s;++e)if(n.shape[e]!==t.shape[e])throw new Error(a+` updates.shape[${e}] (${n.shape[e]}) != indices.shape[${e}] (${t.shape[e]}).`);for(let t=0;t<n.rank-s;++t)if(n.shape[t+s]!==e[t+r])throw new Error(a+` updates.shape[${t+s}] (${n.shape[t+s]}) != shape[${t+s}] (${e[t+s]})`)}(n,t,e)}(i,r,n);const l={indices:r,updates:i},u={shape:n};return s.T2.runKernel(a.pJc,l,u)}}),hr=(0,i.op)({sparseToDense_:function(e,t,n,r=0){const i=(0,o.YT)(e,"sparseIndices","sparseToDense","int32"),l=(0,o.YT)(t,"sparseValues","sparseToDense","string_or_numeric"),u=(0,o.YT)(r,"defaultValue","sparseToDense",l.dtype);!function(e,t,n,r){if("int32"!==e.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);const s=e.rank>0?e.shape[0]:1,a=e.rank>1?e.shape[1]:1;if(n.length!==a)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${a}.`);const o=t.size;if(0!==t.rank&&(1!==t.rank||o!==s))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${s}]`);if(t.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(i,l,n,u);const c={sparseIndices:i,sparseValues:l,defaultValue:u},p={outputShape:n};return s.T2.runKernel(a.jgd,c,p)}}),dr=(0,i.op)({gatherND_:function(e,t){const n=(0,o.YT)(t,"indices","gatherND","int32"),r={params:(0,o.YT)(e,"x","gatherND","string_or_numeric"),indices:n};return s.T2.runKernel(a.O4G,r)}}),fr=(0,i.op)({dropout_:function(e,t,n,r){const s=(0,o.YT)(e,"x","dropout");if(d.vA("float32"===s.dtype,(()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${s.dtype} tensor instead.`)),d.vA(t>=0&&t<1,(()=>`rate must be a float in the range [0, 1), but got ${t}.`)),0===t)return e instanceof ct.qY?s.clone():s;const a=function(e,t){if(null==t)return e.shape.slice();if(d.r1(e.shape,t))return t;if(e.shape.length===t.length){const n=[];for(let r=0;r<e.shape.length;r++)null==t[r]&&null!=e.shape[r]?n.push(e.shape[r]):n.push(t[r]);return n}return t}(s,n),i=1-t,l=Ne(Ye(h(cn(a,0,1,"float32",r),i)),i);return z(s,l)}});function mr(e){return Math.floor(Math.pow(2,Math.ceil(Math.log(e)/Math.log(2))))}function gr(e,t,n){const r=1-e%2,s=new Float32Array(e);for(let a=0;a<e;++a){const o=2*Math.PI*a/(e+r-1);s[a]=t-n*Math.cos(o)}return Kn(s,"float32")}const yr=async function(e,t,n=1){const r=(0,o.YT)(e,"predictions","inTopK"),s=(0,o.YT)(t,"targets","inTopK");(0,d.vA)(r.rank>1,(()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${r.rank}`)),(0,d.vA)(r.rank-1===s.rank,(()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${r.rank} and targets rank ${s.rank}`)),(0,d.O3)(r.shape.slice(0,r.shape.length-1),s.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const a=r.shape[r.shape.length-1];(0,d.vA)(n>0&&n<=a,(()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${a}), but got ${n}`));const i=await r.data(),l=await s.data(),[u,c]=[i.length/a,a],p=(0,d.ce)("bool",u);for(let e=0;e<u;e++){const t=e*c,r=i.subarray(t,t+c),s=[];for(let e=0;e<r.length;e++)s.push({value:r[e],index:e});s.sort(((e,t)=>t.value-e.value)),p[e]=0;for(let t=0;t<n;t++)if(s[t].index===l[e]){p[e]=1;break}}return e!==r&&r.dispose(),t!==s&&s.dispose(),(0,Hn.O)(p,s.shape,"bool")},br=(0,i.op)({conv2DBackpropFilter_:function(e,t,n,r,o,i="NHWC",l){let u=e;3===e.rank&&(u=R(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let c=t;3===c.rank&&(c=R(t,[1,t.shape[0],t.shape[1],t.shape[2]])),d.vA(4===u.rank,(()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${u.shape}.`)),d.vA(4===c.rank,(()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${c.shape}.`)),d.vA(4===n.length,(()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`));const p="NHWC"===i?u.shape[3]:u.shape[1],h="NHWC"===i?c.shape[3]:c.shape[1];d.vA(p===n[2],(()=>`Error in conv2dDerFilter: depth of input ${p}) must match input depth in filter (${n[2]}.`)),d.vA(h===n[3],(()=>`Error in conv2dDerFilter: depth of dy (${h}) must match output depth for filter (${n[3]}).`)),_("conv2dDerFilter",o,l);const f={x:u,dy:c},m={strides:r,pad:o,dataFormat:i,dimRoundingMode:l,filterShape:n};return s.T2.runKernel(a.rFm,f,m)}});function xr(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return z(e,Wn(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function wr(e,t){let n=t;const r=function(e,t){const n=[];for(let r=0;r<t.length;r++){const s=e[e.length-r-1],a=t.length-r-1,o=t[a];(null==s||1===s&&o>1)&&n.unshift(a)}return n}(e.shape,t.shape);return r.length>0&&(n=Be(n,r)),R(n,e.shape)}function vr(e,t,n,r){if("linear"===t)return e;if("relu"===t)return fn(e);if("elu"===t)return _e(e);if("relu6"===t)return mn(e);if("prelu"===t)return Xt(e,n);if("leakyrelu"===t)return rt(e,r);if("sigmoid"===t)return P(e);throw new Error(`Unknown fused activation ${t}.`)}const kr=(e,t)=>!(e>0)||"linear"===t,Nr=(0,i.op)({fusedConv2d_:function({x:e,filter:t,strides:n,pad:r,dataFormat:i="NHWC",dilations:l=[1,1],dimRoundingMode:u,bias:c,activation:f="linear",preluActivationWeights:m,leakyreluAlpha:g}){if(f=f||"linear",!1===kr(s.T2.state.gradientDepth,f)){d.vA("NHWC"===i,(()=>`Error in fused conv2d: got dataFormat of ${i} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`));let s=oe(e,t,n,r,i,l,u);return null!=c&&(s=h(s,c)),vr(s,f,m,g)}const y=(0,o.YT)(e,"x","conv2d","float32"),b=(0,o.YT)(t,"filter","conv2d","float32");let x=y,w=!1;3===y.rank&&(w=!0,x=R(y,[1,y.shape[0],y.shape[1],y.shape[2]])),d.vA(4===x.rank,(()=>`Error in fused conv2d: input must be rank 4, but got rank ${x.rank}.`)),d.vA(4===b.rank,(()=>`Error in fused conv2d: filter must be rank 4, but got rank ${b.rank}.`)),_("fused conv2d",r,u);const v="NHWC"===i?x.shape[3]:x.shape[1];d.vA(b.shape[2]===v,(()=>`Error in conv2d: depth of input (${v}) must match input depth for filter ${b.shape[2]}.`)),d.vA(A(n,l),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${l}'`));const k=S(x.shape,b.shape,n,l,r,u);let N,T;if(null!=c&&(N=(0,o.YT)(c,"bias","fused conv2d"),[N]=(0,p.h0)(N,y),"NHWC"===i?Te(k.outShape,N.shape):(d.vA(N.shape.length<=1,(()=>`Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${N.shape.length}.`)),d.vA(0===N.shape.length||N.shape[0]===k.outChannels||1===N.shape[0],(()=>`Error in fused conv2d: bias shape (${N.shape}) is not compatible with the number of output channels (${k.outChannels})`)))),null!=m){const e=m.shape;if(d.vA(e.length<=1||3===e.length,(()=>`Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${e.length}.`)),1===e.length)d.vA(1===e[0]||e[0]===k.outChannels,(()=>`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the number of output channels (${k.outChannels}).`));else if(3===e.length)try{Te(e,k.outShape)}catch(t){const n=`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the output shape of the conv2d (${k.outShape}).`;throw Error(n)}T=(0,o.YT)(m,"prelu weights","fused conv2d")}const I=(e,t)=>{d.vA("NHWC"===i,(()=>`Error in gradient of fused conv2D: got dataFormat of ${i} but only NHWC is currently supported.`));const[s,a,o,u]=t,c=xr(e,o,f);d.vA(C(l),(()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${l}'`));const p=[le(a.shape,c,s,n,r),br(a,c,s.shape,n,r)];if(null!=u){const e=wr(u,c);p.push(e)}return p},E={x,filter:b,bias:N,preluActivationWeights:T},$={strides:n,pad:r,dataFormat:i,dilations:l,dimRoundingMode:u,activation:f,leakyreluAlpha:g};if(null==c){const e=pt(((e,t,n)=>{let r=s.T2.runKernel(a.aAr,E,$);return n([t,e,r]),w&&(r=R(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:I}}));return e(x,b)}{const e=pt(((e,t,n,r)=>{let o=s.T2.runKernel(a.aAr,E,$);return r([t,e,o,n]),w&&(o=R(o,[o.shape[1],o.shape[2],o.shape[3]])),{value:o,gradFunc:I}}));return e(x,b,N)}}}),Tr=(0,i.op)({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,r,o,i=[1,1],l){let u=e;3===e.rank&&(u=R(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let c=t;3===c.rank&&(c=R(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const p={x:u,dy:c},h={strides:r,pad:o,dimRoundingMode:l,dilations:i,filterShape:n};return s.T2.runKernel(a.X$8,p,h)}}),Sr=(0,i.op)({depthwiseConv2dNativeBackpropInput_:function(e,t,n,r,o,i=[1,1],l){let u=t,c=!1;3===t.rank&&(c=!0,u=R(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const p={dy:u,filter:n},h={strides:r,pad:o,dimRoundingMode:l,dilations:i,inputShape:e},d=s.T2.runKernel(a.nVu,p,h);return c?R(d,[d.shape[1],d.shape[2],d.shape[3]]):d}}),Ir=(0,i.op)({fusedDepthwiseConv2d_:function({x:e,filter:t,strides:n,pad:r,dataFormat:i="NHWC",dilations:l=[1,1],dimRoundingMode:u,bias:c,activation:f="linear",preluActivationWeights:m,leakyreluAlpha:g}){if(!1===kr(s.T2.state.gradientDepth,f)){let s=xe(e,t,n,r,i,l,u);return null!=c&&(s=h(s,c)),vr(s,f,m,g)}const y=(0,o.YT)(e,"x","depthwiseConv2d","float32"),b=(0,o.YT)(t,"filter","depthwiseConv2d","float32");let x=y,w=!1;3===y.rank&&(w=!0,x=R(y,[1,y.shape[0],y.shape[1],y.shape[2]])),d.vA(4===x.rank,(()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${x.rank}.`)),d.vA(4===b.rank,(()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${b.rank}.`)),d.vA(x.shape[3]===b.shape[2],(()=>`Error in fused depthwiseConv2d: number of input channels (${x.shape[3]}) must match the inChannels dimension in filter ${b.shape[2]}.`)),null==l&&(l=[1,1]),d.vA(A(n,l),(()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${l}'`)),_("fused depthwiseConv2d",r,u);const v=S(x.shape,b.shape,n,l,r,u,!0);let k,N;null!=c&&(k=(0,o.YT)(c,"bias","fused conv2d"),[k]=(0,p.h0)(k,y),Te(v.outShape,k.shape)),null!=m&&(N=(0,o.YT)(m,"prelu weights","fused depthwiseConv2d"));const T=(e,t)=>{d.vA(C(l),(()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${l}'`));const[s,a,o,i]=t,c=xr(e,o,f),p=Sr(a.shape,c,s,n,r,l,u),h=Tr(a,c,s.shape,n,r,l,u);return null!=i?[p,h,wr(k,c)]:[p,h]},I={x,filter:b,bias:k,preluActivationWeights:N},E={strides:n,pad:r,dataFormat:i,dilations:l,dimRoundingMode:u,activation:f,leakyreluAlpha:g};if(null==c){const e=pt(((e,t,n)=>{let r=s.T2.runKernel(a.T7M,I,E);return n([t,e,r]),w&&(r=R(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:T}}));return e(x,b)}{const e=pt(((e,t,n,r)=>{let o=s.T2.runKernel(a.T7M,I,E);return r([t,e,o,n]),w&&(o=R(o,[o.shape[1],o.shape[2],o.shape[3]])),{value:o,gradFunc:T}}));return e(x,b,k)}}}),Er=(0,i.op)({fusedMatMul_:function({a:e,b:t,transposeA:n=!1,transposeB:r=!1,bias:i,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c=.2}){if(!1===kr(s.T2.state.gradientDepth,l)){let s=L(e,t,n,r);return null!=i&&(s=h(s,i)),vr(s,l,u,c)}let f=(0,o.YT)(e,"a","fused matMul"),m=(0,o.YT)(t,"b","fused matMul");[f,m]=(0,p.h0)(f,m);const g=n?f.shape[f.rank-2]:f.shape[f.rank-1],y=r?m.shape[m.rank-1]:m.shape[m.rank-2],b=n?f.shape[f.rank-1]:f.shape[f.rank-2],x=r?m.shape[m.rank-2]:m.shape[m.rank-1],w=f.shape.slice(0,-2),v=m.shape.slice(0,-2),k=d.Ze(w),N=d.Ze(v);d.vA(g===y,(()=>`Error in fused matMul: inner shapes (${g}) and (${y}) of Tensors with shapes ${f.shape} and ${m.shape} and transposeA=${n} and transposeB=${r} must match.`));const T=Te(f.shape.slice(0,-2),m.shape.slice(0,-2)).concat([b,x]),S=R(f,n?[k,g,b]:[k,b,g]),I=R(m,r?[N,x,y]:[N,y,x]);let E,$;null!=i&&(E=(0,o.YT)(i,"bias","fused matMul"),[E]=(0,p.h0)(E,f),Te(T,E.shape)),null!=u&&($=(0,o.YT)(u,"prelu weights","fused matMul"));const C=(e,t)=>{const[s,a,o,u]=t,c=xr(R(e,o.shape),o,l);let p,h;return n||r?!n&&r?(p=L(c,a,!1,!1),h=L(c,s,!0,!1)):n&&!r?(p=L(a,c,!1,!0),h=L(s,c,!1,!1)):(p=L(a,c,!0,!0),h=L(c,s,!0,!0)):(p=L(c,a,!1,!0),h=L(s,c,!0,!1)),null!=i?[p,h,wr(u,c)]:[p,h]},A={a:S,b:I,bias:E,preluActivationWeights:$},_={transposeA:n,transposeB:r,activation:l,leakyreluAlpha:c};if(null==i){const e=pt(((e,t,n)=>{const r=s.T2.runKernel(a.Dr,A,_);return n([e,t,r]),{value:R(r,T),gradFunc:C}}));return e(S,I)}{const e=pt(((e,t,n,r)=>{const o=s.T2.runKernel(a.Dr,A,_);return r([e,t,o,n]),{value:R(o,T),gradFunc:C}}));return e(S,I,E)}}}),$r=(0,i.op)({hammingWindow_:function(e){return gr(e,.54,.46)}}),Cr=(0,i.op)({hannWindow_:function(e){return gr(e,.5,.5)}}),Ar=(0,i.op)({frame_:function(e,t,n,r=!1,s=0){let a=0;const o=[];for(;a+t<=e.size;)o.push(B(e,a,t)),a+=n;if(r)for(;a<e.size;){const r=a+t-e.size,i=M([B(e,a,t-r),J([r],s)]);o.push(i),a+=n}return 0===o.length?qn([],[0,t]):R(M(o),[o.length,t])}}),_r=(0,i.op)({stft_:function(e,t,n,r,s=Cr){null==r&&(r=mr(t));const a=Ar(e,t,n),o=z(a,s(t));return zn(o,r)}}),Rr=(0,i.op)({cropAndResize_:function(e,t,n,r,i="bilinear",l=0){const u=(0,o.YT)(e,"image","cropAndResize"),c=(0,o.YT)(t,"boxes","cropAndResize","float32"),p=(0,o.YT)(n,"boxInd","cropAndResize","int32"),h=c.shape[0];d.vA(4===u.rank,(()=>`Error in cropAndResize: image must be rank 4,but got rank ${u.rank}.`)),d.vA(2===c.rank&&4===c.shape[1],(()=>`Error in cropAndResize: boxes must be have size [${h},4] but had shape ${c.shape}.`)),d.vA(1===p.rank&&p.shape[0]===h,(()=>`Error in cropAndResize: boxInd must be have size [${h}] but had shape ${c.shape}.`)),d.vA(2===r.length,(()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${r.length}.`)),d.vA(r[0]>=1&&r[1]>=1,(()=>`cropSize must be atleast [1,1], but was ${r}`)),d.vA("bilinear"===i||"nearest"===i,(()=>`method must be bilinear or nearest, but was ${i}`));const f={image:u,boxes:c,boxInd:p},m={method:i,extrapolationValue:l,cropSize:r};return s.T2.runKernel(a.MRQ,f,m)}}),Dr=(0,i.op)({flipLeftRight_:function(e){const t=(0,o.YT)(e,"image","flipLeftRight","float32");d.vA(4===t.rank,(()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`));const n={image:t};return s.T2.runKernel(a.BxF,n,{})}}),Fr=(0,i.op)({grayscaleToRGB_:function(e){const t=(0,o.YT)(e,"image","grayscaleToRGB"),n=t.rank-1,r=t.shape[n];d.vA(t.rank>=2,(()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`)),d.vA(1===r,(()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${r}.`));const s=new Array(t.rank);return s.fill(1,0,n),s[n]=3,Ke(t,s)}}),Or=(0,i.op)({rotateWithOffset_:function(e,t,n=0,r=.5){const i=(0,o.YT)(e,"image","rotateWithOffset","float32");d.vA(4===i.rank,(()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${i.rank}.`));const l={image:i},u={radians:t,fillValue:n,center:r};return s.T2.runKernel(a.BK4,l,u)}});function Mr(e,t,n,r,s,a){null==r&&(r=.5),null==s&&(s=Number.NEGATIVE_INFINITY),null==a&&(a=0);const o=e.shape[0];return n=Math.min(n,o),d.vA(0<=r&&r<=1,(()=>`iouThreshold must be in [0, 1], but was '${r}'`)),d.vA(2===e.rank,(()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`)),d.vA(4===e.shape[1],(()=>`boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`)),d.vA(1===t.rank,(()=>"scores must be a 1D tensor")),d.vA(t.shape[0]===o,(()=>`scores has incompatible shape with boxes. Expected ${o}, but was ${t.shape[0]}`)),d.vA(0<=a&&a<=1,(()=>`softNmsSigma must be in [0, 1], but was '${a}'`)),{maxOutputSize:n,iouThreshold:r,scoreThreshold:s,softNmsSigma:a}}const Lr=(0,i.op)({nonMaxSuppression_:function(e,t,n,r=.5,i=Number.NEGATIVE_INFINITY){const l=(0,o.YT)(e,"boxes","nonMaxSuppression","float32"),u=(0,o.YT)(t,"scores","nonMaxSuppression","float32"),c=Mr(l,u,n,r,i),p={maxOutputSize:n=c.maxOutputSize,iouThreshold:r=c.iouThreshold,scoreThreshold:i=c.scoreThreshold};return s.T2.runKernel(a.SDM,{boxes:l,scores:u},p)}});function zr(e,t,n){const r=function(e,t,n){return function(e,t,n){let r=0,s=e.length,a=0,o=!1;for(;r<s;){a=r+(s-r>>>1);const i=n(t,e[a]);i>0?r=a+1:(s=a,o=!i)}return o?r:-r-1}(e,t,n||Pr)}(e,t,n),s=r<0?-(r+1):r;e.splice(s,0,t)}function Pr(e,t){return e>t?1:e<t?-1:0}function Br(e,t,n,r,s,a,o=!1,i=!1,l=!1){const u=[];for(let e=0;e<t.length;e++)t[e]>s&&u.push({score:t[e],boxIndex:e,suppressBeginIndex:0});u.sort(Ur);const c=a>0?-.5/a:0,p=[],h=[];for(;p.length<n&&u.length>0;){const t=u.pop(),{score:n,boxIndex:a,suppressBeginIndex:o}=t;if(n<s)break;let i=!1;for(let n=p.length-1;n>=o;--n){const o=Vr(e,a,p[n]);if(o>=r){i=!0;break}if(t.score=t.score*Wr(r,c,o),t.score<=s)break}t.suppressBeginIndex=p.length,i||(t.score===n?(p.push(a),h.push(t.score)):t.score>s&&zr(u,t,Ur))}const d=p.length,f=n-d;i&&f>0&&(p.push(...new Array(f).fill(0)),h.push(...new Array(f).fill(0)));const m={selectedIndices:p};return o&&(m.selectedScores=h),l&&(m.validOutputs=d),m}function Vr(e,t,n){const r=e.subarray(4*t,4*t+4),s=e.subarray(4*n,4*n+4),a=Math.min(r[0],r[2]),o=Math.min(r[1],r[3]),i=Math.max(r[0],r[2]),l=Math.max(r[1],r[3]),u=Math.min(s[0],s[2]),c=Math.min(s[1],s[3]),p=Math.max(s[0],s[2]),h=Math.max(s[1],s[3]),d=(i-a)*(l-o),f=(p-u)*(h-c);if(d<=0||f<=0)return 0;const m=Math.max(a,u),g=Math.max(o,c),y=Math.min(i,p),b=Math.min(l,h),x=Math.max(y-m,0)*Math.max(b-g,0);return x/(d+f-x)}function Wr(e,t,n){const r=Math.exp(t*n*n);return n<=e?r:0}function Ur(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}const Gr=(0,i.op)({nonMaxSuppressionWithScore_:function(e,t,n,r=.5,i=Number.NEGATIVE_INFINITY,l=0){const u=(0,o.YT)(e,"boxes","nonMaxSuppression"),c=(0,o.YT)(t,"scores","nonMaxSuppression"),p=Mr(u,c,n,r,i,l),h={boxes:u,scores:c},d={maxOutputSize:n=p.maxOutputSize,iouThreshold:r=p.iouThreshold,scoreThreshold:i=p.scoreThreshold,softNmsSigma:l=p.softNmsSigma},f=s.T2.runKernel(a.e0f,h,d);return{selectedIndices:f[0],selectedScores:f[1]}}}),Hr=(0,i.op)({nonMaxSuppressionPadded_:function(e,t,n,r=.5,i=Number.NEGATIVE_INFINITY,l=!1){const u=(0,o.YT)(e,"boxes","nonMaxSuppression"),c=(0,o.YT)(t,"scores","nonMaxSuppression"),p=Mr(u,c,n,r,i,null),h={boxes:u,scores:c},d={maxOutputSize:p.maxOutputSize,iouThreshold:p.iouThreshold,scoreThreshold:p.scoreThreshold,padToMaxOutputSize:l},f=s.T2.runKernel(a.Zl4,h,d);return{selectedIndices:f[0],validOutputs:f[1]}}}),jr=(0,i.op)({resizeBilinear_:function(e,t,n=!1,r=!1){const i=(0,o.YT)(e,"images","resizeBilinear");d.vA(3===i.rank||4===i.rank,(()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${i.rank}.`)),d.vA(2===t.length,(()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`)),d.vA(!1===r||!1===n,(()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false."));let l=i,u=!1;3===i.rank&&(u=!0,l=R(i,[1,i.shape[0],i.shape[1],i.shape[2]]));const[]=t,c={images:l},p={alignCorners:n,halfPixelCenters:r,size:t},h=s.T2.runKernel(a.hgw,c,p);return u?R(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),Kr=(0,i.op)({resizeNearestNeighbor_:function(e,t,n=!1,r=!1){const i=(0,o.YT)(e,"images","resizeNearestNeighbor");d.vA(3===i.rank||4===i.rank,(()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${i.rank}.`)),d.vA(2===t.length,(()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`)),d.vA("float32"===i.dtype||"int32"===i.dtype,(()=>"`images` must have `int32` or `float32` as dtype")),d.vA(!1===r||!1===n,(()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false."));let l=i,u=!1;3===i.rank&&(u=!0,l=R(i,[1,i.shape[0],i.shape[1],i.shape[2]]));const[]=t,c={images:l},p={alignCorners:n,halfPixelCenters:r,size:t},h=s.T2.runKernel(a.jOE,c,p);return u?R(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),qr=(0,i.op)({threshold_:function(e,t="binary",n=!1,r=.5){const s=(0,o.YT)(e,"image","threshold"),a=s.shape[0]*s.shape[1];let i,l,u,c,p=z(Kn([r]),255);if(d.vA(3===s.rank,(()=>`Error in threshold: image must be rank 3,but got rank ${s.rank}.`)),d.vA(3===s.shape[2]||1===s.shape[2],(()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${s.shape[2]}.`)),d.vA("int32"===s.dtype||"float32"===s.dtype,(()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${s.dtype}.`)),d.vA("otsu"===t||"binary"===t,(()=>`Method must be binary or otsu, but was ${t}`)),3===s.shape[2]){[i,l,u]=Ln(s,[1,1,1],-1);const e=z(i,.2989),t=z(l,.587),n=z(u,.114);c=h(h(e,t),n)}else c=e;"otsu"===t&&(p=function(e,t){let n,r,s,a,o,i,l=Kn([-1]),u=Kn([0]),c=Kn([0]);for(let p=0;p<e.size-1;p++){n=B(e,0,p+1),r=B(e,p+1),o=Ne(Be(n),t),i=Ne(Be(r),t);const d=Be(z(n,pn(0,n.size)));s=Ne(d,Be(n));const f=J(r.shape,n.size),m=h(pn(0,r.size),f),g=z(r,m);a=Ne(Be(g),Be(r));const y=mt(s,a),b=mt(s,a),x=z(o,i);c=z(z(x,y),b);const w=Ze(c,u);u=Ie(w,c,u),l=Ie(w,Kn([p]),l)}return l}(q((0,T.w)(vn(c),"int32"),(0,Hn.O)([]),256),a));const f=n?at(c,p):Ze(c,p);return(0,T.w)(z(f,255),"int32")}}),Yr=(0,i.op)({transform_:function(e,t,n="nearest",r="constant",i=0,l){const u=(0,o.YT)(e,"image","transform","float32"),c=(0,o.YT)(t,"transforms","transform","float32");d.vA(4===u.rank,(()=>`Error in transform: image must be rank 4,but got rank ${u.rank}.`)),d.vA(2===c.rank&&(c.shape[0]===u.shape[0]||1===c.shape[0])&&8===c.shape[1],(()=>"Error in transform: Input transform should be batch x 8 or 1 x 8")),d.vA(null==l||2===l.length,(()=>`Error in transform: outputShape must be [height, width] or null, but got ${l}.`));const p={image:u,transforms:c},h={interpolation:n,fillMode:r,fillValue:i,outputShape:l};return s.T2.runKernel(a.dLy,p,h)}}),Xr=(0,i.op)({bandPart_:function(e,t,n){(0,d.vA)(t%1==0,(()=>`bandPart(): numLower must be an integer, got ${t}.`)),(0,d.vA)(n%1==0,(()=>`bandPart(): numUpper must be an integer, got ${n}.`));const r=(0,o.YT)(e,"a","bandPart");(0,d.vA)(r.rank>=2,(()=>`bandPart(): Rank must be at least 2, got ${r.rank}.`));const s=r.shape,[a,i]=r.shape.slice(-2);if(!(t<=a))throw new Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${a}).`);if(!(n<=i))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${i}).`);t<0&&(t=a),n<0&&(n=i);const l=R(pn(0,a,1,"int32"),[-1,1]),u=pn(0,i,1,"int32"),c=mt(l,u),p=bt(at(c,(0,Le.d)(+t,"int32")),Qe(c,(0,Le.d)(-n,"int32"))),h=At([a,i],r.dtype);return R(Vn(rr(R(r,[-1,a,i])).map((e=>Ie(p,e,h)))),s)}}),Zr=(0,i.op)({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,(0,d.vA)(null!=e&&e.length>0,(()=>"Gram-Schmidt process: input must not be null, undefined, or empty"));const n=e[0].shape[0];for(let t=1;t<e.length;++t)(0,d.vA)(e[t].shape[0]===n,(()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`))}else t=!0,e=Ln(e,e.shape[0],0).map((e=>Bn(e,[0])));(0,d.vA)(e.length<=e[0].shape[0],(()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`));const n=[],r=e;for(let t=0;t<e.length;++t)n.push(s.T2.tidy((()=>{let e=r[t];if(t>0)for(let r=0;r<t;++r){const t=z(Be(z(n[r],e)),n[r]);e=mt(e,t)}return Ne(e,We(e,"euclidean"))})));return t?Vn(n,0):n}});function Qr(e,t=!1){return s.T2.tidy((()=>{(0,d.vA)(2===e.shape.length,(()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`));const n=e.shape[0],r=e.shape[1];let a=qe(n),o=(0,O.o)(e);const i=qn([[1]],[1,1]);let l=(0,O.o)(i);const u=n>=r?r:n;for(let e=0;e<u;++e){const t=o,u=l,c=a;[l,o,a]=s.T2.tidy((()=>{const t=B(o,[e,e],[n-e,1]),s=We(t),u=B(o,[e,e],[1,1]),c=Ie(Ze(u,0),qn([[-1]]),qn([[1]])),p=mt(u,z(c,s)),h=Ne(t,p);l=1===h.shape[0]?(0,O.o)(i):M([i,B(h,[1,0],[h.shape[0]-1,h.shape[1]])],0);const d=ht(Ne(L(c,p),s)),f=B(o,[e,0],[n-e,r]),m=z(d,l),g=ur(l);if(0===e)o=mt(f,L(m,L(g,f)));else{const t=mt(f,L(m,L(g,f)));o=M([B(o,[0,0],[e,r]),t],0)}const y=ur(m),b=B(a,[0,e],[n,a.shape[1]-e]);if(0===e)a=mt(b,L(L(b,l),y));else{const t=mt(b,L(L(b,l),y));a=M([B(a,[0,0],[n,e]),t],1)}return[l,o,a]})),(0,lr.AS)([t,u,c])}return!t&&n>r&&(a=B(a,[0,0],[n,r]),o=B(o,[0,0],[r,r])),[a,o]}))}const Jr=(0,i.op)({qr_:function(e,t=!1){if((0,d.vA)(e.rank>=2,(()=>`qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`)),2===e.rank)return Qr(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce(((e,t)=>e*t)),r=rr(R(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),s=[],a=[];return r.forEach((e=>{const[n,r]=Qr(e,t);s.push(n),a.push(r)})),[R(Vn(s,0),e.shape),R(Vn(a,0),e.shape)]}}});var es;!function(e){e[e.NONE=0]="NONE",e[e.MEAN=1]="MEAN",e[e.SUM=2]="SUM",e[e.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(es||(es={}));const ts=(0,i.op)({computeWeightedLoss_:function(e,t,n=es.SUM_BY_NONZERO_WEIGHTS){const r=(0,o.YT)(e,"losses","computeWeightedLoss");let s=null;null!=t&&(s=(0,o.YT)(t,"weights","computeWeightedLoss"));const a=null==s?r:z(r,s);if(n===es.NONE)return a;if(n===es.SUM)return Be(a);if(n===es.MEAN){if(null==s)return Ct(a);{const e=r.size/s.size,t=Ne(Be(a),Be(s));return e>1?Ne(t,(0,Le.d)(e)):t}}if(n===es.SUM_BY_NONZERO_WEIGHTS){if(null==s)return Ne(Be(a),(0,Le.d)(r.size));{const e=z(s,_t(r.shape)),t=(0,T.w)(Be(Pt(e,(0,Le.d)(0))),"float32");return Ne(Be(a),t)}}throw Error(`Unknown reduction: ${n}`)}}),ns=(0,i.op)({absoluteDifference_:function(e,t,n,r=es.SUM_BY_NONZERO_WEIGHTS){const s=(0,o.YT)(e,"labels","absoluteDifference"),a=(0,o.YT)(t,"predictions","absoluteDifference");let i=null;null!=n&&(i=(0,o.YT)(n,"weights","absoluteDifference")),(0,d.O3)(s.shape,a.shape,"Error in absoluteDifference: ");const u=l(mt(s,a));return ts(u,i,r)}}),rs=(0,i.op)({cosineDistance_:function(e,t,n,r,s=es.SUM_BY_NONZERO_WEIGHTS){const a=(0,o.YT)(e,"labels","cosineDistance"),i=(0,o.YT)(t,"predictions","cosineDistance");let l=null;null!=r&&(l=(0,o.YT)(r,"weights","cosineDistance")),(0,d.O3)(a.shape,i.shape,"Error in cosineDistance: ");const u=(0,Le.d)(1),c=mt(u,Be(z(a,i),n,!0));return ts(c,l,s)}}),ss=(0,i.op)({hingeLoss_:function(e,t,n,r=es.SUM_BY_NONZERO_WEIGHTS){let s=(0,o.YT)(e,"labels","hingeLoss");const a=(0,o.YT)(t,"predictions","hingeLoss");let i=null;null!=n&&(i=(0,o.YT)(n,"weights","hingeLoss")),(0,d.O3)(s.shape,a.shape,"Error in hingeLoss: ");const l=(0,Le.d)(1);s=mt(z((0,Le.d)(2),s),l);const u=fn(mt(l,z(s,a)));return ts(u,i,r)}}),as=(0,i.op)({huberLoss_:function(e,t,n,r=1,s=es.SUM_BY_NONZERO_WEIGHTS){const a=(0,o.YT)(e,"labels","huberLoss"),i=(0,o.YT)(t,"predictions","huberLoss");let u=null;null!=n&&(u=(0,o.YT)(n,"weights","huberLoss")),(0,d.O3)(a.shape,i.shape,"Error in huberLoss: ");const c=(0,Le.d)(r),p=l(mt(i,a)),f=Dt(p,c),m=mt(p,f),g=h(z((0,Le.d)(.5),Pe(f)),z(c,m));return ts(g,u,s)}}),os=(0,i.op)({logLoss_:function(e,t,n,r=1e-7,s=es.SUM_BY_NONZERO_WEIGHTS){const a=(0,o.YT)(e,"labels","logLoss"),i=(0,o.YT)(t,"predictions","logLoss");let l=null;null!=n&&(l=(0,o.YT)(n,"weights","logLoss")),(0,d.O3)(a.shape,i.shape,"Error in logLoss: ");const u=(0,Le.d)(1),c=(0,Le.d)(r),p=ht(z(a,lt(h(i,c)))),f=z(mt(u,a),lt(h(mt(u,i),c))),m=mt(p,f);return ts(m,l,s)}}),is=(0,i.op)({meanSquaredError_:function(e,t,n,r=es.SUM_BY_NONZERO_WEIGHTS){const s=(0,o.YT)(e,"labels","meanSquaredError"),a=(0,o.YT)(t,"predictions","meanSquaredError");let i=null;null!=n&&(i=(0,o.YT)(n,"weights","meanSquaredError")),(0,d.O3)(s.shape,a.shape,"Error in meanSquaredError: ");const l=Pn(s,a);return ts(l,i,r)}}),ls=(0,i.op)({sigmoidCrossEntropy_:function(e,t,n,r=0,s=es.SUM_BY_NONZERO_WEIGHTS){let a=(0,o.YT)(e,"multiClassLabels","sigmoidCrossEntropy");const i=(0,o.YT)(t,"logits","sigmoidCrossEntropy");let u=null;if(null!=n&&(u=(0,o.YT)(n,"weights","sigmoidCrossEntropy")),(0,d.O3)(a.shape,i.shape,"Error in sigmoidCrossEntropy: "),r>0){const e=(0,Le.d)(r),t=(0,Le.d)(1),n=(0,Le.d)(.5);a=h(z(a,mt(t,e)),z(n,e))}const c=function(e,t){const n=(0,o.YT)(e,"labels","sigmoidCrossEntropyWithLogits"),r=(0,o.YT)(t,"logits","sigmoidCrossEntropyWithLogits");(0,d.O3)(n.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");const s=fn(r),a=z(r,n),i=ut(Ge(ht(l(r))));return h(mt(s,a),i)}(a,i);return ts(c,u,s)}}),us=(0,i.op)({softmaxCrossEntropy_:function(e,t,n,r=0,s=es.SUM_BY_NONZERO_WEIGHTS){let a=(0,o.YT)(e,"onehotLabels","softmaxCrossEntropy");const i=(0,o.YT)(t,"logits","softmaxCrossEntropy");let l=null;if(null!=n&&(l=(0,o.YT)(n,"weights","softmaxCrossEntropy")),(0,d.O3)(a.shape,i.shape,"Error in softmaxCrossEntropy: "),r>0){const e=(0,Le.d)(r),t=(0,Le.d)(1),n=(0,Le.d)(a.shape[1]);a=h(z(a,mt(t,e)),Ne(e,n))}const u=function(e,t,n=-1){if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${n}`);const r=pt(((e,t,r)=>{const s=yt(t,[n],!0),a=mt((0,T.w)(t,"float32"),s);r([e,a]);const o=ht(z(a,e));return{value:Be(o,[n]),gradFunc:(e,t)=>{const[r,s]=t,a=De(e.shape,[n]);return[z(R(e,a),mt((0,T.w)(r,"float32"),Ge(s))),z(R(e,a),mt(Ge(s),(0,T.w)(r,"float32")))]}}}));return r(e,t)}(a,i);return ts(u,l,s)}}),cs=(0,i.op)({sparseFillEmptyRows_:function(e,t,n,r){const i=(0,o.YT)(e,"indices","sparseFillEmptyRows","int32"),l=(0,o.YT)(t,"values","sparseFillEmptyRows"),u=(0,o.YT)(n,"denseShape","sparseFillEmptyRows","int32"),c=(0,o.YT)(r,"defaultValue","sparseFillEmptyRows",l.dtype);if(2!==i.rank)throw new Error(`Indices should be Tensor2D but received shape\n        ${i.shape}`);if(1!==l.rank)throw new Error(`Values should be Tensor1D but received shape ${l.shape}`);if(1!==u.rank)throw new Error(`Dense shape should be Tensor1D but received shape ${u.shape}`);if(0!==c.rank)throw new Error(`Default value should be a scalar but received shape ${c.shape}`);const p={indices:i,values:l,denseShape:u,defaultValue:c},h=s.T2.runKernel(a.C8s,p);return{outputIndices:h[0],outputValues:h[1],emptyRowIndicator:h[2],reverseIndexMap:h[3]}}}),ps=(0,i.op)({sparseReshape_:function(e,t,n){const r=(0,o.YT)(e,"inputIndices","sparseReshape","int32"),i=(0,o.YT)(t,"inputShape","sparseReshape","int32"),l=(0,o.YT)(n,"newShape","sparseReshape","int32");if(2!==r.rank)throw new Error(`Input indices should be Tensor2D but received shape\n        ${r.shape}`);if(1!==i.rank)throw new Error(`Input shape should be Tensor1D but received shape ${i.shape}`);if(1!==l.rank)throw new Error(`New shape should be Tensor1D but received shape ${l.shape}`);const u={inputIndices:r,inputShape:i,newShape:l},c=s.T2.runKernel(a.BoJ,u);return{outputIndices:c[0],outputShape:c[1]}}}),hs=(0,i.op)({sparseSegmentMean_:function(e,t,n){const r=(0,o.YT)(e,"data","sparseSegmentMean"),i=(0,o.YT)(t,"indices","sparseSegmentMean","int32"),l=(0,o.YT)(n,"segmentIds","sparseSegmentMean","int32");if(r.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==i.rank)throw new Error(`Indices should be Tensor1D but received shape\n          ${i.shape}`);if(1!==l.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n          ${l.shape}`);const u={data:r,indices:i,segmentIds:l};return s.T2.runKernel(a.L6G,u)}}),ds=(0,i.op)({sparseSegmentSum_:function(e,t,n){const r=(0,o.YT)(e,"data","sparseSegmentSum"),i=(0,o.YT)(t,"indices","sparseSegmentSum","int32"),l=(0,o.YT)(n,"segmentIds","sparseSegmentSum","int32");if(r.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==i.rank)throw new Error(`Indices should be Tensor1D but received shape\n         ${i.shape}`);if(1!==l.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n         ${l.shape}`);const u={data:r,indices:i,segmentIds:l};return s.T2.runKernel(a.DvZ,u)}}),fs=(0,i.op)({stringNGrams_:function(e,t,n,r,i,l,u,c){const p=(0,o.YT)(e,"data","stringNGrams","string");if("string"!==p.dtype)throw new Error("Data must be of datatype string");if(1!==p.shape.length)throw new Error(`Data must be a vector, saw: ${p.shape}`);const h=(0,o.YT)(t,"dataSplits","stringNGrams");if("int32"!==h.dtype)throw new Error("Data splits must be of datatype int32");const d={separator:n,nGramWidths:r,leftPad:i,rightPad:l,padWidth:u,preserveShortSequences:c},f={data:p,dataSplits:h},m=s.T2.runKernel(a.YAb,f,d);return{nGrams:m[0],nGramsSplits:m[1]}}}),ms=(0,i.op)({stringSplit_:function(e,t,n=!0){const r=(0,o.YT)(e,"input","stringSplit","string"),i=(0,o.YT)(t,"delimiter","stringSplit","string");if(1!==r.rank)throw new Error(`Input should be Tensor1D but received shape ${r.shape}`);if(0!==i.rank)throw new Error(`Delimiter should be a scalar but received shape ${i.shape}`);const l={skipEmpty:n},u={input:r,delimiter:i},c=s.T2.runKernel(a.iW0,u,l);return{indices:c[0],values:c[1],shape:c[2]}}}),gs=(0,i.op)({stringToHashBucketFast_:function(e,t){const n=(0,o.YT)(e,"input","stringToHashBucketFast","string"),r={numBuckets:t};if(t<=0)throw new Error("Number of buckets must be at least 1");const i={input:n};return s.T2.runKernel(a.$jE,i,r)}}),ys={fft:Fn,ifft:On,rfft:zn,irfft:Mn},bs={hammingWindow:$r,hannWindow:Cr,frame:Ar,stft:_r},xs={flipLeftRight:Dr,grayscaleToRGB:Fr,resizeNearestNeighbor:Kr,resizeBilinear:jr,rotateWithOffset:Or,cropAndResize:Rr,nonMaxSuppression:Lr,nonMaxSuppressionAsync:async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=(0,o.YT)(e,"boxes","nonMaxSuppressionAsync"),i=(0,o.YT)(t,"scores","nonMaxSuppressionAsync"),l=Mr(a,i,n,r,s);n=l.maxOutputSize,r=l.iouThreshold,s=l.scoreThreshold;const u=await Promise.all([a.data(),i.data()]),c=u[0],p=u[1],{selectedIndices:h}=function(e,t,n,r,s){return Br(e,t,n,r,s,0)}(c,p,n,r,s);return a!==e&&a.dispose(),i!==t&&i.dispose(),Kn(h,"int32")},nonMaxSuppressionWithScore:Gr,nonMaxSuppressionWithScoreAsync:async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const i=(0,o.YT)(e,"boxes","nonMaxSuppressionAsync"),l=(0,o.YT)(t,"scores","nonMaxSuppressionAsync"),u=Mr(i,l,n,r,s,a);n=u.maxOutputSize,r=u.iouThreshold,s=u.scoreThreshold,a=u.softNmsSigma;const c=await Promise.all([i.data(),l.data()]),p=c[0],h=c[1],{selectedIndices:d,selectedScores:f}=function(e,t,n,r,s,a){return Br(e,t,n,r,s,a,!0)}(p,h,n,r,s,a);return i!==e&&i.dispose(),l!==t&&l.dispose(),{selectedIndices:Kn(d,"int32"),selectedScores:Kn(f)}},nonMaxSuppressionPadded:Hr,nonMaxSuppressionPaddedAsync:async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const i=(0,o.YT)(e,"boxes","nonMaxSuppressionAsync"),l=(0,o.YT)(t,"scores","nonMaxSuppressionAsync"),u=Mr(i,l,n,r,s,null),c=u.maxOutputSize,p=u.iouThreshold,h=u.scoreThreshold,[d,f]=await Promise.all([i.data(),l.data()]),{selectedIndices:m,validOutputs:g}=function(e,t,n,r,s,a){return Br(e,t,n,r,s,0,!1,a,!0)}(d,f,c,p,h,a);return i!==e&&i.dispose(),l!==t&&l.dispose(),{selectedIndices:Kn(m,"int32"),validOutputs:(0,Le.d)(g,"int32")}},threshold:qr,transform:Yr},ws={bandPart:Xr,gramSchmidt:Zr,qr:Jr},vs={absoluteDifference:ns,computeWeightedLoss:ts,cosineDistance:rs,hingeLoss:ss,huberLoss:as,logLoss:os,meanSquaredError:is,sigmoidCrossEntropy:ls,softmaxCrossEntropy:us},ks={sparseFillEmptyRows:cs,sparseReshape:ps,sparseSegmentMean:hs,sparseSegmentSum:ds},Ns={stringNGrams:fs,stringSplit:ms,stringToHashBucketFast:gs}},125:(e,t,n)=>{n.d(t,{o:()=>o});var r=n(5388),s=n(5441),a=n(8189);const o=(0,n(929).op)({clone_:function(e){const t={x:(0,a.YT)(e,"x","clone","string_or_numeric")};return r.T2.runKernel(s.lzr,t)}})},259:(e,t,n)=>{n.d(t,{qY:()=>b,yl:()=>p,rT:()=>x,B4:()=>y,Q5:()=>g,qP:()=>m});var r=n(1743),s=n(5119);function a(e,t,n,r){const a=(0,s.Ur)(t),i=function(e,t,n,r){const a=(0,s.Ze)(t),i=r[r.length-1],l=new Array(i).fill(0),c=t.length,p="complex64"===n?u(e):e;if(c>1)for(let e=0;e<a/i;e++){const t=e*i;for(let e=0;e<i;e++)l[e]=Math.max(l[e],o(p[t+e],0,n).length)}return l}(e,t,n,a),c=t.length,p=l(e,t,n,a,i),h=["Tensor"];return r&&(h.push(`  dtype: ${n}`),h.push(`  rank: ${c}`),h.push(`  shape: [${t}]`),h.push("  values:")),h.push(p.map((e=>"    "+e)).join("\n")),h.join("\n")}function o(e,t,n){let r;return r=Array.isArray(e)?`${parseFloat(e[0].toFixed(7))} + ${parseFloat(e[1].toFixed(7))}j`:(0,s.Kg)(e)?`'${e}'`:"bool"===n?i(e):parseFloat(e.toFixed(7)).toString(),(0,s.av)(r,t)}function i(e){return 0===e?"false":"true"}function l(e,t,n,r,s,a=!0){const c="complex64"===n?2:1,p=t[0],h=t.length;if(0===h)return"complex64"===n?[o(u(e)[0],0,n)]:"bool"===n?[i(e[0])]:[e[0].toString()];if(1===h){if(p>20){const t=3*c;let r=Array.from(e.slice(0,t)),a=Array.from(e.slice((p-3)*c,p*c));return"complex64"===n&&(r=u(r),a=u(a)),["["+r.map(((e,t)=>o(e,s[t],n))).join(", ")+", ..., "+a.map(((e,t)=>o(e,s[p-3+t],n))).join(", ")+"]"]}return["["+("complex64"===n?u(e):Array.from(e)).map(((e,t)=>o(e,s[t],n))).join(", ")+"]"]}const d=t.slice(1),f=r.slice(1),m=r[0]*c,g=[];if(p>20){for(let t=0;t<3;t++){const r=t*m,a=r+m;g.push(...l(e.slice(r,a),d,n,f,s,!1))}g.push("...");for(let t=p-3;t<p;t++){const r=t*m,a=r+m;g.push(...l(e.slice(r,a),d,n,f,s,t===p-1))}}else for(let t=0;t<p;t++){const r=t*m,a=r+m;g.push(...l(e.slice(r,a),d,n,f,s,t===p-1))}const y=2===h?",":"";g[0]="["+g[0]+y;for(let e=1;e<g.length-1;e++)g[e]=" "+g[e]+y;let b=",\n";for(let e=2;e<h;e++)b+="\n";return g[g.length-1]=" "+g[g.length-1]+"]"+(a?"":b),g}function u(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}var c=n(3879);class p{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=s.Ze(e),null!=n){const e=n.length;s.vA(e===this.size,(()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`))}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||s.Ab(t,this.size),this.strides=(0,s.Ur)(e)}set(e,...t){0===t.length&&(t=[0]),s.vA(t.length===this.rank,(()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`));const n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(const n of e){if(n<0||n>=this.shape[t]){const t=`Requested out of range element at ${e}.   Buffer shape=${this.shape}`;throw new Error(t)}t++}let n=e[e.length-1];for(let t=0;t<e.length-1;++t)n+=this.strides[t]*e[t];return this.values[n]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return h().makeTensor(this.values,this.shape,this.dtype)}}let h=null,d=null,f=null;function m(e){h=e}function g(e){d=e}function y(e){f=e}class b{constructor(e,t,n,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=s.Ze(e),this.strides=(0,s.Ur)(e),this.dataId=n,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return d.buffer(this.shape,this.dtype,e)}bufferSync(){return d.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return(0,s.yw)(this.shape,e,"complex64"===this.dtype)}arraySync(){return(0,s.yw)(this.shape,this.dataSync(),"complex64"===this.dtype)}async data(){this.throwIfDisposed();const e=h().read(this.dataId);if("string"===this.dtype){const t=await e;try{return t.map((e=>c.decodeString(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataToGPU(e){return this.throwIfDisposed(),h().readToGPU(this.dataId,e)}dataSync(){this.throwIfDisposed();const e=h().readSync(this.dataId);if("string"===this.dtype)try{return e.map((e=>c.decodeString(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await h().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(h().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return d.print(this,e)}clone(){return this.throwIfDisposed(),d.clone(this)}toString(e=!1){return a(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),d.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),h().makeVariable(this,e,t,n)}}Object.defineProperty(b,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed}),(0,r.m)("Tensor",(()=>b));class x extends b{constructor(e,t,n,r){super(e.shape,e.dtype,e.dataId,r),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!s.r1(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);h().disposeTensor(this),this.dataId=e.dataId,h().incRef(this,null)}dispose(){h().disposeVariable(this),this.isDisposedInternal=!0}}Object.defineProperty(x,Symbol.hasInstance,{value:e=>e instanceof b&&null!=e.assign&&e.assign instanceof Function})},448:(e,t,n)=>{n.d(t,{r:()=>a});var r=n(259),s=n(5119);function a(e,t="float32",n){return t=t||"float32",s.SA(e),new r.yl(e,t,n)}},929:(e,t,n)=>{n.d(t,{B:()=>a,op:()=>o});var r=n(5388),s=n(5119);const a="__op";function o(e){const t=Object.keys(e);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let n=t[0];const o=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+=a;const i=(...e)=>{r.T2.startScope(n);try{const t=o(...e);return(0,s.yL)(t)&&console.error("Cannot return a Promise inside of tidy."),r.T2.endScope(t),t}catch(e){throw r.T2.endScope(null),e}};return Object.defineProperty(i,"name",{value:n,configurable:!0}),i}},1743:(e,t,n)=>{let r;function s(){if(null==r){let e;if("undefined"!=typeof window)e=window;else if(void 0!==n.g)e=n.g;else if("undefined"!=typeof process)e=process;else{if("undefined"==typeof self)throw new Error("Could not find a global object");e=self}r=e}return r}function a(e,t){const n=function(){const e=s();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const r=t();return n.set(e,r),n.get(e)}}n.d(t,{L:()=>s,m:()=>a})},3879:(e,t,n)=>{n.r(t),n.d(t,{arraysEqual:()=>s.r1,assert:()=>s.vA,assertNonNegativeIntegerDimensions:()=>s.SA,assertNonNull:()=>s.HO,assertShapesMatch:()=>s.O3,bytesFromStringArray:()=>s.SL,bytesPerElement:()=>s.jv,checkConversionForErrors:()=>s.nd,clamp:()=>s.qE,computeStrides:()=>s.Ur,createScalarValue:()=>x,createShuffledIndices:()=>s.P8,decodeString:()=>T,distSquared:()=>s.oO,encodeString:()=>N,fetch:()=>k,fingerPrint64:()=>b,flatten:()=>s.Bq,getArrayFromDType:()=>s.Ab,getTypedArrayFromDType:()=>s.ce,hasEncodingLoss:()=>s.BE,hexToLong:()=>i,indexToLoc:()=>s._k,inferDtype:()=>s.X$,inferFromImplicitShape:()=>s.XT,isBoolean:()=>s.Lm,isFunction:()=>s.Tn,isInt:()=>s.E6,isNumber:()=>s.Et,isPromise:()=>s.yL,isScalarShape:()=>s.Sf,isString:()=>s.Kg,isTypedArray:()=>s.iu,isValidDtype:()=>s.xn,locToIndex:()=>s.sX,makeOnesTypedArray:()=>s.FZ,makeZerosNestedTypedArray:()=>s.c7,makeZerosTypedArray:()=>s.Ty,nearestDivisor:()=>s.lK,nearestLargerEven:()=>s.eV,now:()=>v,parseAxisParam:()=>s.Y6,randUniform:()=>s.so,repeatedTry:()=>s._q,rightPad:()=>s.av,shuffle:()=>s.k4,shuffleCombo:()=>s.a0,sizeFromShape:()=>s.Ze,sizeToSquarishShape:()=>s.gS,squeezeShape:()=>s.gx,sum:()=>s.cz,swap:()=>s.wg,tanh:()=>s.ym,toNestedArray:()=>s.yw,toTypedArray:()=>w});var r=n(6574),s=n(5119),a=n(8570);const o=n.n(a)()||a;function i(e){return o.fromString(e,!0,16)}const l=i("c3a5c85c97cb3127"),u=i("b492b66fbe98f273"),c=i("9ae16a3b2f90404f");function p(e){return e.xor(e.shru(47))}function h(e,t,n){const r=e.slice(t,t+n);return o.fromBytes(Array.from(r),!0,!0)}function d(e,t){return h(e,t,8)}function f(e,t){return h(e,t,4)}function m(e,t){return 0===t?e:e.shru(t).or(e.shl(64-t))}function g(e,t,n=i("9ddfea08eb382d69")){let r=e.xor(t).mul(n);r=r.xor(r.shru(47));let s=t.xor(r).mul(n);return s=s.xor(s.shru(47)),s=s.mul(n),s}function y(e,t,n,r){return function(e,t,n,r,s,a){s=s.add(e),a=m(a.add(s).add(r),21);const o=s;return s=(s=s.add(t)).add(n),a=a.add(m(s,44)),[s.add(r),a.add(o)]}(d(e,t),d(e,t+8),d(e,t+16),d(e,t+24),n,r)}function b(e,t=e.length){const n=o.fromNumber(81,!0);if(t<=32)return t<=16?function(e,t=e.length){if(t>=8){const n=c.add(2*t),r=d(e,0).add(c),s=d(e,t-8);return g(m(s,37).mul(n).add(r),m(r,25).add(s).mul(n),n)}if(t>=4){const n=c.add(2*t);return g(f(e,0).shl(3).add(t),f(e,t-4),n)}if(t>0){const n=e[0]+(e[t>>1]<<8),r=t+(e[t-1]<<2);return p(c.mul(n).xor(l.mul(r))).mul(c)}return c}(e,t):function(e,t=e.length){const n=c.add(2*t),r=d(e,0).mul(u),s=d(e,8),a=d(e,t-8).mul(n),o=d(e,t-16).mul(c);return g(m(r.add(s),43).add(m(a,30)).add(o),r.add(m(s.add(c),18)).add(a),n)}(e,t);if(t<=64)return function(e,t=e.length){const n=c.add(2*t),r=d(e,0).mul(c),s=d(e,8),a=d(e,t-8).mul(n),o=d(e,t-16).mul(c),i=m(r.add(s),43).add(m(a,30)).add(o),l=g(i,r.add(m(s.add(c),18)).add(a),n),u=d(e,16).mul(n),p=d(e,24),h=i.add(d(e,t-32)).mul(n),f=l.add(d(e,t-24)).mul(n);return g(m(u.add(p),43).add(m(h,30)).add(f),u.add(m(p.add(r),18)).add(h),n)}(e,t);let r=n,s=n.mul(u).add(113),a=p(s.mul(c).add(113)).mul(c),i=[o.UZERO,o.UZERO],h=[o.UZERO,o.UZERO];r=r.mul(c).add(d(e,0));let b=0;const x=64*(t-1>>6),w=x+(t-1&63)-63;do{r=m(r.add(s).add(i[0]).add(d(e,b+8)),37).mul(u),s=m(s.add(i[1]).add(d(e,b+48)),42).mul(u),r=r.xor(h[1]),s=s.add(i[0]).add(d(e,b+40)),a=m(a.add(h[0]),33).mul(u),i=y(e,b,i[1].mul(u),r.add(h[0])),h=y(e,b+32,a.add(h[1]),s.add(d(e,b+16))),[a,r]=[r,a],b+=64}while(b!==x);const v=u.add(a.and(255).shl(1));return b=w,h[0]=h[0].add(t-1&63),i[0]=i[0].add(h[0]),h[0]=h[0].add(i[0]),r=m(r.add(s).add(i[0]).add(d(e,b+8)),37).mul(v),s=m(s.add(i[1]).add(d(e,b+48)),42).mul(v),r=r.xor(h[1].mul(9)),s=s.add(i[0].mul(9).add(d(e,b+40))),a=m(a.add(h[0]),33).mul(v),i=y(e,b,i[1].mul(v),r.add(h[0])),h=y(e,b+32,a.add(h[1]),s.add(d(e,b+16))),[a,r]=[r,a],g(g(i[0],h[0],v).add(p(s).mul(l)).add(a),g(i[1],h[1],v).add(r),v)}function x(e,t){return"string"===t?N(e):w([e],t)}function w(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=s.Bq(e)),(0,r._K)().getBool("DEBUG")&&s.nd(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error(`Unknown data type ${t}`)}function v(){return(0,r._K)().platform.now()}function k(e,t){return(0,r._K)().platform.fetch(e,t)}function N(e,t="utf-8"){return t=t||"utf-8",(0,r._K)().platform.encode(e,t)}function T(e,t="utf-8"){return t=t||"utf-8",(0,r._K)().platform.decode(e,t)}},4027:(e,t,n)=>{n.d(t,{O:()=>a});var r=n(8189),s=n(9171);function a(e,t,n){const a=(0,r.MZ)(e,n);return(0,s.Q)(e,t,a,n)}},4051:(e,t,n)=>{n.d(t,{rt:()=>h,NB:()=>d,h0:()=>p});var r,s,a,o,i,l=n(259);!function(e){e.R0="R0",e.R1="R1",e.R2="R2",e.R3="R3",e.R4="R4",e.R5="R5",e.R6="R6"}(r||(r={})),function(e){e.float32="float32",e.int32="int32",e.bool="int32",e.complex64="complex64"}(s||(s={})),function(e){e.float32="float32",e.int32="int32",e.bool="bool",e.complex64="complex64"}(a||(a={})),function(e){e.float32="float32",e.int32="float32",e.bool="float32",e.complex64="complex64"}(o||(o={})),function(e){e.float32="complex64",e.int32="complex64",e.bool="complex64",e.complex64="complex64"}(i||(i={}));const u={float32:o,int32:s,bool:a,complex64:i};var c=n(5119);function p(e,t){if(e.dtype===t.dtype)return[e,t];const n=function(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return u[e][t]}(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function h(e,t){(0,c.vA)(e.dtype===t.dtype,(()=>`The dtypes of the first(${e.dtype}) and second(${t.dtype}) input must match`))}function d(e){const t=[];return f(e,t,new Set),t}function f(e,t,n){if(null==e)return;if(e instanceof l.qY)return void t.push(e);if(r=e,!Array.isArray(r)&&"object"!=typeof r)return;var r;const s=e;for(const e in s){const r=s[e];n.has(r)||(n.add(r),f(r,t,n))}}},4198:(e,t,n)=>{n.r(t),n.d(t,{Abs:()=>et,Acos:()=>tt,Acosh:()=>nt,AdadeltaOptimizer:()=>qi,AdagradOptimizer:()=>Xi,AdamOptimizer:()=>Ji,AdamaxOptimizer:()=>al,Add:()=>rt,AddN:()=>st,All:()=>at,Any:()=>ot,ArgMax:()=>it,ArgMin:()=>lt,Asin:()=>ut,Asinh:()=>ct,Atan:()=>pt,Atan2:()=>dt,Atanh:()=>ht,AvgPool:()=>ft,AvgPool3D:()=>gt,AvgPool3DGrad:()=>yt,AvgPoolGrad:()=>mt,BatchMatMul:()=>bt,BatchToSpaceND:()=>xt,Bincount:()=>wt,BitwiseAnd:()=>vt,BroadcastArgs:()=>Nt,BroadcastTo:()=>kt,Callback:()=>aS,CallbackList:()=>Kx,Cast:()=>Tt,Ceil:()=>St,ClipByValue:()=>It,Complex:()=>Et,ComplexAbs:()=>$t,Concat:()=>Ct,Conv2D:()=>At,Conv2DBackpropFilter:()=>_t,Conv2DBackpropInput:()=>Rt,Conv3D:()=>Dt,Conv3DBackpropFilterV2:()=>Ft,Conv3DBackpropInputV2:()=>Ot,Cos:()=>Mt,Cosh:()=>Lt,CropAndResize:()=>Bt,Cumprod:()=>zt,Cumsum:()=>Pt,CustomCallback:()=>Xx,DataStorage:()=>Y,DenseBincount:()=>Vt,DepthToSpace:()=>Wt,DepthwiseConv2dNative:()=>Ut,DepthwiseConv2dNativeBackpropFilter:()=>Gt,DepthwiseConv2dNativeBackpropInput:()=>Ht,Diag:()=>jt,Dilation2D:()=>Kt,Dilation2DBackpropFilter:()=>Yt,Dilation2DBackpropInput:()=>qt,Draw:()=>Xt,ENV:()=>Ze,EarlyStopping:()=>lS,Einsum:()=>Qt,Elu:()=>Jt,EluGrad:()=>en,Environment:()=>Ke,Equal:()=>nn,Erf:()=>tn,Exp:()=>rn,ExpandDims:()=>sn,Expm1:()=>an,FFT:()=>on,Fill:()=>ln,FlipLeftRight:()=>un,Floor:()=>cn,FloorDiv:()=>pn,FromPixels:()=>fs,FusedBatchNorm:()=>hn,FusedConv2D:()=>ys,FusedDepthwiseConv2D:()=>bs,GPGPUContext:()=>SM,GatherNd:()=>fn,GatherV2:()=>dn,GraphModel:()=>$I,Greater:()=>mn,GreaterEqual:()=>gn,History:()=>Yx,IFFT:()=>bn,Identity:()=>yn,Imag:()=>xn,InputSpec:()=>Qb,IsFinite:()=>wn,IsInf:()=>vn,IsNan:()=>kn,KernelBackend:()=>X,LRN:()=>On,LRNGrad:()=>Mn,LayerVariable:()=>Yb,LayersModel:()=>qw,LeakyRelu:()=>Nn,Less:()=>Tn,LessEqual:()=>Sn,LinSpace:()=>In,Log:()=>En,Log1p:()=>$n,LogSoftmax:()=>Dn,LogicalAnd:()=>Cn,LogicalNot:()=>An,LogicalOr:()=>_n,LogicalXor:()=>Rn,LowerBound:()=>Fn,MathBackendCPU:()=>VE,MathBackendWebGL:()=>BL,MatrixBandPart:()=>Ln,Max:()=>zn,MaxPool:()=>Bn,MaxPool3D:()=>Wn,MaxPool3DGrad:()=>Un,MaxPoolGrad:()=>Vn,MaxPoolWithArgmax:()=>Gn,Maximum:()=>Pn,Mean:()=>Hn,Min:()=>jn,Minimum:()=>Kn,MirrorPad:()=>qn,Mod:()=>Yn,MomentumOptimizer:()=>il,Multinomial:()=>Xn,Multiply:()=>Zn,Neg:()=>Qn,NonMaxSuppressionV3:()=>er,NonMaxSuppressionV4:()=>tr,NonMaxSuppressionV5:()=>nr,NotEqual:()=>Jn,OP_SCOPE_SUFFIX:()=>Ka,OneHot:()=>sr,OnesLike:()=>rr,Optimizer:()=>Ki,OptimizerConstructors:()=>Au,Pack:()=>ar,PadV2:()=>or,Pool:()=>ir,Pow:()=>lr,Prelu:()=>ur,Prod:()=>cr,RMSPropOptimizer:()=>ll,RNN:()=>nk,RaggedGather:()=>pr,RaggedRange:()=>hr,RaggedTensorToTensor:()=>dr,Range:()=>fr,Rank:()=>ga,Real:()=>mr,RealDiv:()=>Zt,Reciprocal:()=>gr,Reduction:()=>mf,Relu:()=>yr,Relu6:()=>Nr,Reshape:()=>br,ResizeBilinear:()=>vr,ResizeBilinearGrad:()=>kr,ResizeNearestNeighbor:()=>xr,ResizeNearestNeighborGrad:()=>wr,Reverse:()=>Tr,RotateWithOffset:()=>ms,Round:()=>Sr,Rsqrt:()=>Ir,SGDOptimizer:()=>ol,ScatterNd:()=>Er,SearchSorted:()=>Cr,Select:()=>Ar,Selu:()=>_r,Sequential:()=>Qw,Sigmoid:()=>Mr,Sign:()=>Or,Sin:()=>Dr,Sinh:()=>Fr,Slice:()=>Rr,Softmax:()=>Wr,Softplus:()=>Lr,SpaceToBatchND:()=>Br,SparseFillEmptyRows:()=>Ur,SparseReshape:()=>Gr,SparseSegmentMean:()=>Hr,SparseSegmentSum:()=>jr,SparseToDense:()=>Kr,SplitV:()=>Vr,Sqrt:()=>zr,Square:()=>Yr,SquaredDifference:()=>qr,StaticRegexReplace:()=>Xr,Step:()=>ds,StridedSlice:()=>Zr,StringNGrams:()=>Qr,StringSplit:()=>Jr,StringToHashBucketFast:()=>es,Sub:()=>ts,Sum:()=>Pr,SymbolicTensor:()=>Jb,Tan:()=>ns,Tanh:()=>rs,Tensor:()=>da,TensorBuffer:()=>ua,TensorScatterUpdate:()=>$r,Tile:()=>ss,TopK:()=>as,Transform:()=>os,Transpose:()=>is,Unique:()=>ls,Unpack:()=>us,UnsortedSegmentSum:()=>cs,UpperBound:()=>ps,Variable:()=>ma,ZerosLike:()=>hs,_FusedMatMul:()=>gs,abs:()=>el,acos:()=>_u,acosh:()=>Ru,add:()=>Ii,addN:()=>Du,all:()=>Fu,any:()=>Ou,argMax:()=>Mu,argMin:()=>Lu,asin:()=>zu,asinh:()=>Pu,atan:()=>Bu,atan2:()=>Vu,atanh:()=>Wu,avgPool:()=>ac,avgPool3d:()=>oc,backend:()=>wo,backend_util:()=>y,basicLSTMCell:()=>pc,batchNorm:()=>dc,batchNorm2d:()=>fc,batchNorm3d:()=>mc,batchNorm4d:()=>gc,batchToSpaceND:()=>hc,bincount:()=>yc,bitwiseAnd:()=>bc,booleanMaskAsync:()=>xd,broadcastArgs:()=>xc,broadcastTo:()=>wc,broadcast_util:()=>i,browser:()=>c,buffer:()=>ki,callbacks:()=>uS,cast:()=>Ni,ceil:()=>vc,clipByValue:()=>kc,clone:()=>Ti,complex:()=>Ya,concat:()=>ic,concat1d:()=>Nc,concat2d:()=>Tc,concat3d:()=>Sc,concat4d:()=>Ic,constraints:()=>x,conv1d:()=>$c,conv2d:()=>Ec,conv2dTranspose:()=>Ac,conv3d:()=>_c,conv3dTranspose:()=>Dc,copyRegisteredKernels:()=>As,cos:()=>Fc,cosh:()=>Oc,cosineWindow:()=>Id,cumprod:()=>Mc,cumsum:()=>Lc,customGrad:()=>zi,data:()=>H,denseBincount:()=>zc,deprecationWarn:()=>ro,depthToSpace:()=>Pc,depthwiseConv2d:()=>Bc,deregisterOp:()=>mS,device_util:()=>a,diag:()=>Vc,dilation2d:()=>Wc,disableDeprecationWarnings:()=>no,dispose:()=>uo,disposeVariables:()=>so,div:()=>$i,divNoNan:()=>Hc,dot:()=>jc,dropout:()=>Td,einsum:()=>Kc,elu:()=>qc,enableDebugMode:()=>to,enableProdMode:()=>eo,enclosingPowerOfTwo:()=>Sd,engine:()=>ao,ensureShape:()=>Yc,env:()=>Ye,equal:()=>Uc,erf:()=>Xc,euclideanNorm:()=>cp,exp:()=>pp,expandDims:()=>hp,expm1:()=>dp,eye:()=>mp,fft:()=>Kh,fill:()=>Yi,findBackend:()=>yo,findBackendFactory:()=>bo,floor:()=>gp,floorDiv:()=>Ei,forceHalfFloat:()=>WL,fused:()=>m,gather:()=>yp,gatherND:()=>Nd,gather_util:()=>p,getBackend:()=>mo,getGradient:()=>Ts,getKernel:()=>Ns,getKernelsForBackend:()=>Ss,gpgpu_util:()=>q,grad:()=>Di,grads:()=>Fi,greater:()=>bp,greaterEqual:()=>xp,ifft:()=>qh,imag:()=>Rl,image:()=>Of,inTopKAsync:()=>Ed,initializers:()=>w,input:()=>tv,io:()=>l,irfft:()=>Yh,isFinite:()=>wp,isInf:()=>vp,isNaN:()=>kp,keep:()=>co,kernel_impls:()=>b,layers:()=>v,leakyRelu:()=>Np,less:()=>Tp,lessEqual:()=>Sp,linalg:()=>Mf,linspace:()=>Ip,loadGraphModel:()=>CI,loadGraphModelSync:()=>AI,loadLayersModel:()=>Zw,localResponseNormalization:()=>Ep,log:()=>$p,log1p:()=>Cp,logSigmoid:()=>_p,logSoftmax:()=>Rp,logSumExp:()=>Dp,logicalAnd:()=>Fp,logicalNot:()=>Op,logicalOr:()=>Mp,logicalXor:()=>Lp,losses:()=>Lf,lowerBound:()=>Bp,matMul:()=>Al,math:()=>u,max:()=>ap,maxPool:()=>Vp,maxPool3d:()=>Wp,maxPoolWithArgmax:()=>Up,maximum:()=>sl,mean:()=>Gp,memory:()=>oo,meshgrid:()=>Kp,metrics:()=>k,min:()=>op,minimum:()=>qp,mirrorPad:()=>Yp,mod:()=>Xp,model:()=>Jw,models:()=>N,moments:()=>Zp,movingAverage:()=>wd,mul:()=>Ci,multiRNNCell:()=>Qp,multinomial:()=>Jp,neg:()=>Dl,nextFrame:()=>Wf,norm:()=>up,notEqual:()=>eh,oneHot:()=>_l,ones:()=>jp,onesLike:()=>th,op:()=>qa,outerProduct:()=>nh,pad:()=>rh,pad1d:()=>sh,pad2d:()=>ah,pad3d:()=>oh,pad4d:()=>ih,pool:()=>uh,pow:()=>Zi,prelu:()=>ch,print:()=>Si,prod:()=>ph,profile:()=>io,raggedGather:()=>hh,raggedRange:()=>dh,raggedTensorToTensor:()=>fh,rand:()=>mh,randomGamma:()=>wh,randomNormal:()=>vh,randomStandardNormal:()=>kh,randomUniform:()=>Nh,randomUniformInt:()=>Th,range:()=>Sh,ready:()=>fo,real:()=>Fl,reciprocal:()=>Ih,registerBackend:()=>xo,registerCallbackConstructor:()=>nv,registerGradient:()=>Es,registerKernel:()=>Is,registerOp:()=>dS,regularizers:()=>T,relu:()=>Eh,relu6:()=>$h,removeBackend:()=>go,reshape:()=>sc,reverse:()=>Ch,reverse1d:()=>Ah,reverse2d:()=>_h,reverse3d:()=>Rh,reverse4d:()=>Dh,rfft:()=>Zh,round:()=>Fh,rsqrt:()=>Oh,scalar:()=>Bi,scatterND:()=>vd,scatter_util:()=>h,searchSorted:()=>Pp,selu:()=>Mh,separableConv2d:()=>Lh,sequential:()=>ev,serialization:()=>o,setBackend:()=>ho,setPlatform:()=>vo,setWebGLContext:()=>wF,setdiff1dAsync:()=>zh,shared:()=>j,sigmoid:()=>lc,sign:()=>Ph,signal:()=>Ff,sin:()=>Bh,sinh:()=>Vh,slice:()=>uc,slice1d:()=>Wh,slice2d:()=>Uh,slice3d:()=>Gh,slice4d:()=>Hh,slice_util:()=>d,softmax:()=>jh,softplus:()=>Ap,spaceToBatchND:()=>lh,sparse:()=>zf,sparseToDense:()=>kd,spectral:()=>Df,split:()=>Xh,sqrt:()=>Ai,square:()=>_i,squaredDifference:()=>Qh,squeeze:()=>Jh,stack:()=>ed,step:()=>td,stridedSlice:()=>nd,string:()=>Pf,sub:()=>Qi,sum:()=>ip,sumOutType:()=>Na,tan:()=>rd,tanh:()=>cc,tensor:()=>Za,tensor1d:()=>sd,tensor2d:()=>ad,tensor3d:()=>Ll,tensor4d:()=>od,tensor5d:()=>id,tensor6d:()=>ld,tensorScatterUpdate:()=>ud,tensor_util:()=>s,test_util:()=>f,tidy:()=>lo,tile:()=>fp,time:()=>po,topk:()=>cd,train:()=>Bf,transpose:()=>Ol,truncatedNormal:()=>pd,unique:()=>hd,unregisterGradient:()=>Cs,unregisterKernel:()=>$s,unsortedSegmentSum:()=>dd,unstack:()=>fd,upcastType:()=>ka,upperBound:()=>md,util:()=>r,valueAndGrad:()=>Oi,valueAndGrads:()=>Mi,variable:()=>gd,variableGrads:()=>Li,version:()=>FG,version_converter:()=>_I,version_core:()=>Cu,version_cpu:()=>hA,version_layers:()=>Aw,version_webgl:()=>VL,webgl:()=>UL,webgl_util:()=>K,where:()=>Gc,whereAsync:()=>bd,zeros:()=>Hp,zerosLike:()=>Ri});var r={};n.r(r),n.d(r,{arraysEqual:()=>he,arraysEqualWithNull:()=>pe,assert:()=>oe,assertNonNegativeIntegerDimensions:()=>We,assertNonNull:()=>le,assertShapesMatch:()=>ie,bytesFromStringArray:()=>$e,bytesPerElement:()=>Ee,checkConversionForErrors:()=>Te,clamp:()=>ee,computeStrides:()=>Oe,convertBackendValuesAndArrayBuffer:()=>ze,createScalarValue:()=>Ks,createShuffledIndices:()=>ge,decodeString:()=>Qs,distSquared:()=>ae,encodeString:()=>Zs,fetch:()=>Xs,fingerPrint64:()=>js,flatten:()=>ea,getArrayFromDType:()=>Ne,getTypedArrayFromDType:()=>ke,hasEncodingLoss:()=>Ie,hexToLong:()=>Os,indexToLoc:()=>Ge,inferDtype:()=>Re,inferFromImplicitShape:()=>xe,isBoolean:()=>Ae,isFunction:()=>De,isInt:()=>de,isNumber:()=>_e,isPromise:()=>He,isScalarShape:()=>ce,isString:()=>Ce,isTypedArray:()=>Js,isValidDtype:()=>Se,locToIndex:()=>Ue,makeOnesTypedArray:()=>Pe,makeZerosNestedTypedArray:()=>Ve,makeZerosTypedArray:()=>Be,nearestDivisor:()=>Fe,nearestLargerEven:()=>te,now:()=>Ys,parseAxisParam:()=>we,randUniform:()=>se,repeatedTry:()=>be,rightPad:()=>ye,shuffle:()=>Q,shuffleCombo:()=>J,sizeFromShape:()=>ue,sizeToSquarishShape:()=>me,squeezeShape:()=>ve,sum:()=>re,swap:()=>ne,tanh:()=>fe,toNestedArray:()=>Le,toTypedArray:()=>qs});var s={};n.r(s),n.d(s,{assertTypesMatch:()=>Ea,getTensorsInContainer:()=>Ca,isTensorInList:()=>$a,makeTypesMatch:()=>Ia});var a={};n.r(a),n.d(a,{isBrowser:()=>Ba,isMobile:()=>Pa,mockIsMobile:()=>za});var o={};n.r(o),n.d(o,{Serializable:()=>Ui,SerializationMap:()=>Gi,getRegisteredName:()=>ji,registerClass:()=>Hi});var i={};n.r(i),n.d(i,{assertAndGetBroadcastShape:()=>rl,getBroadcastDims:()=>tl,getReductionAxes:()=>nl});var l={};n.r(l),n.d(l,{CompositeArrayBuffer:()=>Ja,browserFiles:()=>dl,browserHTTPRequest:()=>kl,concatenateArrayBuffers:()=>Do,copyModel:()=>bi,decodeWeights:()=>To,decodeWeightsStream:()=>Co,encodeWeights:()=>No,fromMemory:()=>Il,fromMemorySync:()=>El,getLoadHandlers:()=>Go,getModelArtifactsForJSON:()=>Lo,getModelArtifactsForJSONSync:()=>Mo,getModelArtifactsInfoForJSON:()=>zo,getSaveHandlers:()=>Uo,getWeightSpecs:()=>Po,http:()=>vl,isHTTPScheme:()=>xl,listModels:()=>gi,loadWeights:()=>gl,moveModel:()=>xi,registerLoadRouter:()=>Wo,registerSaveRouter:()=>Vo,removeModel:()=>yi,weightsLoaderFactory:()=>yl,withSaveHandler:()=>$l,withSaveHandlerSync:()=>Cl});var u={};n.r(u),n.d(u,{confusionMatrix:()=>Ml});var c={};n.r(c),n.d(c,{draw:()=>Gl,fromPixels:()=>Hl,fromPixelsAsync:()=>Vl,toPixels:()=>Ul});var p={};n.r(p),n.d(p,{prepareAndValidate:()=>jl});var h={};n.r(h),n.d(h,{calculateShapes:()=>Yl,validateInput:()=>ql,validateUpdateShape:()=>Kl});var d={};n.r(d),n.d(d,{assertParamsValid:()=>Ql,computeFlatOffset:()=>pu,computeOutShape:()=>eu,getNormalizedAxes:()=>su,isSliceContinous:()=>cu,maskToAxes:()=>Jl,parseSliceParams:()=>hu,sliceInfo:()=>du,startForAxis:()=>lu,startIndicesWithElidedDims:()=>au,stopForAxis:()=>uu,stopIndicesWithElidedDims:()=>ou,stridesForAxis:()=>iu,stridesWithElidedDims:()=>tu});var f={};n.r(f),n.d(f,{TEST_EPSILON_FLOAT16:()=>gu,createVideoElement:()=>Eu,encodeStrings:()=>Iu,expectArrayBuffersEqual:()=>Su,expectArraysClose:()=>yu,expectArraysEqual:()=>vu,expectNumbersClose:()=>ku,expectPromiseToFail:()=>wu,expectValuesInRange:()=>Tu,play:()=>$u,testEpsilon:()=>bu});var m={};n.r(m),n.d(m,{conv2d:()=>Dd,depthwiseConv2d:()=>Md,matMul:()=>Ld});var g={};n.r(g),n.d(g,{collectGatherOpShapeInfo:()=>Hm,computeOutShape:()=>Gm,segOpComputeOptimalWindowSize:()=>Um});var y={};n.r(y),n.d(y,{ERF_A1:()=>im,ERF_A2:()=>lm,ERF_A3:()=>um,ERF_A4:()=>cm,ERF_A5:()=>pm,ERF_P:()=>om,PARALLELIZE_THRESHOLD:()=>Xf,RowPartitionType:()=>Hf,SELU_SCALE:()=>am,SELU_SCALEALPHA:()=>sm,applyActivation:()=>_d,assertAndGetBroadcastShape:()=>rl,assertAxesAreInnerMostDims:()=>tp,assertParamsConsistent:()=>Uf,assignToTypedArray:()=>ym,axesAreInnerMostDims:()=>Zc,calculateShapes:()=>Yl,checkEinsumDimSizes:()=>Im,checkPadOnDimRoundingMode:()=>rc,combineLocations:()=>Qc,combineRaggedTensorToTensorShapes:()=>jf,complexWithEvenIndex:()=>fm,complexWithOddIndex:()=>mm,computeConv2DInfo:()=>ju,computeConv3DInfo:()=>Ku,computeDefaultPad:()=>qu,computeDilation2DInfo:()=>Uu,computeOptimalWindowSize:()=>Zf,computeOutAndReduceShapes:()=>Jc,computeOutShape:()=>Gf,computePool2DInfo:()=>Gu,computePool3DInfo:()=>Hu,convertConv2DDataFormat:()=>nc,decodeEinsumEquation:()=>Tm,eitherStridesOrDilationsAreOne:()=>ec,expandShapeToKeepDim:()=>ep,exponent:()=>xm,exponents:()=>bm,fromStringArrayToUint8:()=>Km,fromUint8ToStringArray:()=>jm,getAxesPermutation:()=>np,getBroadcastDims:()=>tl,getComplexWithIndex:()=>gm,getEinsumComputePath:()=>Em,getEinsumPermutation:()=>Sm,getFusedBiasGradient:()=>Ad,getFusedDyActivation:()=>Cd,getImageCenter:()=>Qf,getInnerMostAxes:()=>sp,getPermuted:()=>em,getRaggedRank:()=>qf,getReductionAxes:()=>nl,getReshaped:()=>Jf,getReshapedPermuted:()=>tm,getRowPartitionTypesHelper:()=>Kf,getSliceBeginCoords:()=>nm,getSliceSize:()=>rm,getSparseFillEmptyRowsIndicesDenseShapeMismatch:()=>_m,getSparseFillEmptyRowsNegativeIndexErrorMessage:()=>Rm,getSparseFillEmptyRowsOutOfRangeIndexErrorMessage:()=>Dm,getSparseReshapeEmptyTensorZeroOutputDimErrorMessage:()=>Mm,getSparseReshapeInputOutputMismatchErrorMessage:()=>zm,getSparseReshapeInputOutputMultipleErrorMessage:()=>Lm,getSparseReshapeMultipleNegativeOneOutputDimErrorMessage:()=>Fm,getSparseReshapeNegativeOutputDimErrorMessage:()=>Om,getSparseSegmentReductionIndicesOutOfRangeErrorMessage:()=>Wm,getSparseSegmentReductionNegativeSegmentIdsErrorMessage:()=>Pm,getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage:()=>Bm,getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage:()=>Vm,getUndoAxesPermutation:()=>rp,isIdentityPermutation:()=>$m,log:()=>ws,mergeRealAndImagArrays:()=>hm,prepareAndValidate:()=>jl,prepareSplitSize:()=>Am,segment_util:()=>g,shouldFuse:()=>Rd,slice_util:()=>d,splitRealAndImagArrays:()=>dm,stridesOrDilationsArePositive:()=>tc,tupleValuesAreOne:()=>Ju,upcastType:()=>ka,validateDefaultValueShape:()=>Yf,validateInput:()=>ql,validateUpdateShape:()=>Kl,warn:()=>xs});var b={};n.r(b),n.d(b,{nonMaxSuppressionV3Impl:()=>Zd,nonMaxSuppressionV4Impl:()=>Qd,nonMaxSuppressionV5Impl:()=>Jd,whereImpl:()=>yd});var x={};n.r(x),n.d(x,{maxNorm:()=>Tx,minMaxNorm:()=>Ex,nonNeg:()=>Ix,unitNorm:()=>Sx});var w={};n.r(w),n.d(w,{constant:()=>Ax,glorotNormal:()=>Lx,glorotUniform:()=>Mx,heNormal:()=>zx,heUniform:()=>Px,identity:()=>Fx,leCunNormal:()=>Bx,leCunUniform:()=>Vx,ones:()=>Cx,orthogonal:()=>Wx,randomNormal:()=>Rx,randomUniform:()=>_x,truncatedNormal:()=>Dx,varianceScaling:()=>Ox,zeros:()=>$x});var v={};n.r(v),n.d(v,{Layer:()=>rx,RNN:()=>nk,RNNCell:()=>rk,activation:()=>FN,add:()=>UN,alphaDropout:()=>DT,average:()=>GN,averagePooling1d:()=>JN,averagePooling2d:()=>nT,averagePooling3d:()=>aT,avgPool1d:()=>eT,avgPool2d:()=>rT,avgPool3d:()=>oT,avgPooling1d:()=>tT,avgPooling2d:()=>sT,avgPooling3d:()=>iT,batchNormalization:()=>XN,bidirectional:()=>ST,categoryEncoding:()=>zT,centerCrop:()=>MT,concatenate:()=>HN,conv1d:()=>SN,conv2d:()=>IN,conv2dTranspose:()=>EN,conv3d:()=>$N,conv3dTranspose:()=>CN,convLstm2d:()=>vT,convLstm2dCell:()=>kT,cropping2D:()=>_N,dense:()=>ON,depthwiseConv2d:()=>DN,dot:()=>YN,dropout:()=>MN,elu:()=>xN,embedding:()=>WN,flatten:()=>zN,gaussianDropout:()=>RT,gaussianNoise:()=>_T,globalAveragePooling1d:()=>lT,globalAveragePooling2d:()=>uT,globalMaxPool1d:()=>ET,globalMaxPool2d:()=>$T,globalMaxPooling1d:()=>cT,globalMaxPooling2d:()=>pT,gru:()=>mT,gruCell:()=>gT,input:()=>tv,inputLayer:()=>bN,layerNormalization:()=>ZN,leakyReLU:()=>vN,lstm:()=>yT,lstmCell:()=>bT,masking:()=>FT,maxPool1d:()=>CT,maxPool2d:()=>AT,maxPooling1d:()=>hT,maxPooling2d:()=>dT,maxPooling3d:()=>fT,maximum:()=>jN,minimum:()=>KN,multiply:()=>qN,permute:()=>VN,prelu:()=>kN,randomWidth:()=>PT,reLU:()=>wN,repeatVector:()=>PN,rescaling:()=>OT,reshape:()=>BN,resizing:()=>LT,rnn:()=>NT,separableConv2d:()=>AN,simpleRNN:()=>xT,simpleRNNCell:()=>wT,softmax:()=>NN,spatialDropout1d:()=>LN,stackedRNNCells:()=>TT,thresholdedReLU:()=>TN,timeDistributed:()=>IT,upSampling2d:()=>RN,zeroPadding2d:()=>QN});var k={};n.r(k),n.d(k,{MAPE:()=>XT,MSE:()=>JT,binaryAccuracy:()=>BT,binaryCrossentropy:()=>VT,categoricalAccuracy:()=>UT,categoricalCrossentropy:()=>GT,cosineProximity:()=>KT,mape:()=>ZT,meanAbsoluteError:()=>qT,meanAbsolutePercentageError:()=>YT,meanSquaredError:()=>QT,mse:()=>eS,precision:()=>HT,r2Score:()=>tS,recall:()=>jT,sparseCategoricalAccuracy:()=>WT});var N={};n.r(N),n.d(N,{modelFromJSON:()=>Xw});var T={};n.r(T),n.d(T,{l1:()=>rS,l1l2:()=>nS,l2:()=>sS});var S={};n.r(S),n.d(S,{json:()=>TS});var I={};n.r(I),n.d(I,{json:()=>SS});var E={};n.r(E),n.d(E,{json:()=>IS});var $={};n.r($),n.d($,{json:()=>ES});var C={};n.r(C),n.d(C,{json:()=>$S});var A={};n.r(A),n.d(A,{json:()=>CS});var _={};n.r(_),n.d(_,{json:()=>AS});var R={};n.r(R),n.d(R,{json:()=>_S});var D={};n.r(D),n.d(D,{json:()=>RS});var F={};n.r(F),n.d(F,{json:()=>DS});var O={};n.r(O),n.d(O,{json:()=>FS});var M={};n.r(M),n.d(M,{json:()=>OS});var L={};n.r(L),n.d(L,{json:()=>MS});var z={};n.r(z),n.d(z,{json:()=>LS});var P={};n.r(P),n.d(P,{json:()=>zS});var B={};n.r(B),n.d(B,{json:()=>PS});var V={};n.r(V),n.d(V,{json:()=>BS});var W={};n.r(W),n.d(W,{json:()=>VS});var U={};n.r(U),n.d(U,{json:()=>WS});var G={};n.r(G),n.d(G,{OP_SCOPE_SUFFIX:()=>Ka,abs:()=>el,acos:()=>_u,acosh:()=>Ru,add:()=>Ii,addN:()=>Du,all:()=>Fu,any:()=>Ou,argMax:()=>Mu,argMin:()=>Lu,asin:()=>zu,asinh:()=>Pu,atan:()=>Bu,atan2:()=>Vu,atanh:()=>Wu,avgPool:()=>ac,avgPool3d:()=>oc,basicLSTMCell:()=>pc,batchNorm:()=>dc,batchNorm2d:()=>fc,batchNorm3d:()=>mc,batchNorm4d:()=>gc,batchToSpaceND:()=>hc,bincount:()=>yc,bitwiseAnd:()=>bc,booleanMaskAsync:()=>xd,broadcastArgs:()=>xc,broadcastTo:()=>wc,buffer:()=>ki,cast:()=>Ni,ceil:()=>vc,clipByValue:()=>kc,clone:()=>Ti,complex:()=>Ya,concat:()=>ic,concat1d:()=>Nc,concat2d:()=>Tc,concat3d:()=>Sc,concat4d:()=>Ic,conv1d:()=>$c,conv2d:()=>Ec,conv2dTranspose:()=>Ac,conv3d:()=>_c,conv3dTranspose:()=>Dc,cos:()=>Fc,cosh:()=>Oc,cosineWindow:()=>Id,cumprod:()=>Mc,cumsum:()=>Lc,denseBincount:()=>zc,depthToSpace:()=>Pc,depthwiseConv2d:()=>Bc,diag:()=>Vc,dilation2d:()=>Wc,div:()=>$i,divNoNan:()=>Hc,dot:()=>jc,dropout:()=>Td,einsum:()=>Kc,elu:()=>qc,enclosingPowerOfTwo:()=>Sd,ensureShape:()=>Yc,equal:()=>Uc,erf:()=>Xc,euclideanNorm:()=>cp,exp:()=>pp,expandDims:()=>hp,expm1:()=>dp,eye:()=>mp,fft:()=>Kh,fill:()=>Yi,floor:()=>gp,floorDiv:()=>Ei,fused:()=>m,gather:()=>yp,gatherND:()=>Nd,greater:()=>bp,greaterEqual:()=>xp,ifft:()=>qh,imag:()=>Rl,image:()=>Of,inTopKAsync:()=>Ed,irfft:()=>Yh,isFinite:()=>wp,isInf:()=>vp,isNaN:()=>kp,leakyRelu:()=>Np,less:()=>Tp,lessEqual:()=>Sp,linalg:()=>Mf,linspace:()=>Ip,localResponseNormalization:()=>Ep,log:()=>$p,log1p:()=>Cp,logSigmoid:()=>_p,logSoftmax:()=>Rp,logSumExp:()=>Dp,logicalAnd:()=>Fp,logicalNot:()=>Op,logicalOr:()=>Mp,logicalXor:()=>Lp,losses:()=>Lf,lowerBound:()=>Bp,matMul:()=>Al,max:()=>ap,maxPool:()=>Vp,maxPool3d:()=>Wp,maxPoolWithArgmax:()=>Up,maximum:()=>sl,mean:()=>Gp,meshgrid:()=>Kp,min:()=>op,minimum:()=>qp,mirrorPad:()=>Yp,mod:()=>Xp,moments:()=>Zp,movingAverage:()=>wd,mul:()=>Ci,multiRNNCell:()=>Qp,multinomial:()=>Jp,neg:()=>Dl,norm:()=>up,notEqual:()=>eh,oneHot:()=>_l,ones:()=>jp,onesLike:()=>th,op:()=>qa,outerProduct:()=>nh,pad:()=>rh,pad1d:()=>sh,pad2d:()=>ah,pad3d:()=>oh,pad4d:()=>ih,pool:()=>uh,pow:()=>Zi,prelu:()=>ch,print:()=>Si,prod:()=>ph,raggedGather:()=>hh,raggedRange:()=>dh,raggedTensorToTensor:()=>fh,rand:()=>mh,randomGamma:()=>wh,randomNormal:()=>vh,randomStandardNormal:()=>kh,randomUniform:()=>Nh,randomUniformInt:()=>Th,range:()=>Sh,real:()=>Fl,reciprocal:()=>Ih,relu:()=>Eh,relu6:()=>$h,reshape:()=>sc,reverse:()=>Ch,reverse1d:()=>Ah,reverse2d:()=>_h,reverse3d:()=>Rh,reverse4d:()=>Dh,rfft:()=>Zh,round:()=>Fh,rsqrt:()=>Oh,scalar:()=>Bi,scatterND:()=>vd,searchSorted:()=>Pp,selu:()=>Mh,separableConv2d:()=>Lh,setdiff1dAsync:()=>zh,sigmoid:()=>lc,sign:()=>Ph,signal:()=>Ff,sin:()=>Bh,sinh:()=>Vh,slice:()=>uc,slice1d:()=>Wh,slice2d:()=>Uh,slice3d:()=>Gh,slice4d:()=>Hh,softmax:()=>jh,softplus:()=>Ap,spaceToBatchND:()=>lh,sparse:()=>zf,sparseToDense:()=>kd,spectral:()=>Df,split:()=>Xh,sqrt:()=>Ai,square:()=>_i,squaredDifference:()=>Qh,squeeze:()=>Jh,stack:()=>ed,step:()=>td,stridedSlice:()=>nd,string:()=>Pf,sub:()=>Qi,sum:()=>ip,tan:()=>rd,tanh:()=>cc,tensor:()=>Za,tensor1d:()=>sd,tensor2d:()=>ad,tensor3d:()=>Ll,tensor4d:()=>od,tensor5d:()=>id,tensor6d:()=>ld,tensorScatterUpdate:()=>ud,tile:()=>fp,topk:()=>cd,transpose:()=>Ol,truncatedNormal:()=>pd,unique:()=>hd,unsortedSegmentSum:()=>dd,unstack:()=>fd,upperBound:()=>md,variable:()=>gd,where:()=>Gc,whereAsync:()=>bd,zeros:()=>Hp,zerosLike:()=>Ri});var H={};n.r(H),n.d(H,{CSVDataset:()=>xE,Dataset:()=>iE,FileDataSource:()=>_E,TextLineDataset:()=>hE,URLDataSource:()=>RE,array:()=>uE,csv:()=>DE,func:()=>FE,generator:()=>OE,microphone:()=>LE,version_data:()=>zE,webcam:()=>ME,zip:()=>cE});var j={};n.r(j),n.d(j,{addImpl:()=>r$,bincountImpl:()=>i$,bincountReduceImpl:()=>l$,bitwiseAndImpl:()=>u$,castImpl:()=>QE,ceilImpl:()=>m$,concatImpl:()=>b$,equalImpl:()=>x$,expImpl:()=>k$,expm1Impl:()=>S$,floorDivImpl:()=>_$,floorImpl:()=>$$,gatherNdImpl:()=>F$,gatherV2Impl:()=>O$,greaterEqualImpl:()=>P$,greaterImpl:()=>M$,lessEqualImpl:()=>H$,lessImpl:()=>W$,linSpaceImpl:()=>q$,logImpl:()=>Y$,maxImpl:()=>Q$,maximumImpl:()=>J$,minimumImpl:()=>nC,multiplyImpl:()=>aC,negImpl:()=>uC,notEqualImpl:()=>pC,prodImpl:()=>yC,raggedGatherImpl:()=>wC,raggedRangeImpl:()=>kC,raggedTensorToTensorImpl:()=>EC,rangeImpl:()=>$C,rsqrtImpl:()=>CC,scatterImpl:()=>RC,sigmoidImpl:()=>DC,simpleAbsImpl:()=>WE,sliceImpl:()=>MC,sparseFillEmptyRowsImpl:()=>PC,sparseReshapeImpl:()=>BC,sparseSegmentReductionImpl:()=>VC,sqrtImpl:()=>WC,squaredDifferenceImpl:()=>HC,staticRegexReplaceImpl:()=>qC,stridedSliceImpl:()=>ZC,stringNGramsImpl:()=>JC,stringSplitImpl:()=>tA,stringToHashBucketFastImpl:()=>nA,subImpl:()=>rA,tileImpl:()=>iA,topKImpl:()=>cA,transposeImpl:()=>fC,uniqueImpl:()=>pA});var K={};n.r(K),n.d(K,{assertNotComplex:()=>IO,bindCanvasToFramebuffer:()=>eO,bindColorTextureToFramebuffer:()=>tO,bindTextureToProgramUniformSampler:()=>JF,bindTextureUnit:()=>YF,bindVertexBufferToProgramAttribute:()=>qF,callAndCheck:()=>CF,canBeRepresented:()=>RF,createFragmentShader:()=>MF,createFramebuffer:()=>KF,createProgram:()=>PF,createStaticIndexBuffer:()=>UF,createStaticVertexBuffer:()=>WF,createTexture:()=>HF,createVertexShader:()=>OF,getBatchDim:()=>iO,getExtensionOrThrow:()=>FF,getFramebufferErrorMessage:()=>sO,getMaxTexturesInShader:()=>bO,getNumChannels:()=>GF,getProgramUniformLocation:()=>QF,getProgramUniformLocationOrThrow:()=>ZF,getRowsCols:()=>lO,getShapeAs3D:()=>uO,getTextureShapeFromLogicalShape:()=>cO,getWebGLDisjointQueryTimerVersion:()=>xO,getWebGLErrorMessage:()=>DF,getWebGLMaxTextureSize:()=>mO,hasExtension:()=>wO,isCapableOfRenderingToFloatTexture:()=>kO,isDownloadFloatTextureEnabled:()=>NO,isReshapeFree:()=>hO,isWebGLFenceEnabled:()=>SO,isWebGLVersionEnabled:()=>vO,linkProgram:()=>BF,logShaderSourceAndInfoLog:()=>zF,resetMaxTextureSize:()=>gO,resetMaxTexturesInShader:()=>yO,unbindColorTextureFromFramebuffer:()=>nO,unbindTextureUnit:()=>XF,validateFramebuffer:()=>rO,validateProgram:()=>VF,validateTextureSize:()=>jF});var q={};n.r(q),n.d(q,{bindVertexProgramAttributeStreams:()=>yM,createBufferFromOutputTexture:()=>wM,createFloat16MatrixTexture:()=>cM,createFloat16PackedMatrixTexture:()=>gM,createFloat32MatrixTexture:()=>lM,createIndexBuffer:()=>aM,createPackedMatrixTexture:()=>fM,createUnsignedBytesMatrixTexture:()=>hM,createVertexBuffer:()=>sM,createVertexShader:()=>rM,downloadByteEncodedFloatMatrixFromOutputTexture:()=>kM,downloadFloat32MatrixFromBuffer:()=>vM,downloadMatrixFromPackedOutputTexture:()=>TM,downloadPackedMatrixFromBuffer:()=>NM,getInternalFormatForFloat16MatrixTexture:()=>uM,getInternalFormatForFloat16PackedMatrixTexture:()=>mM,getInternalFormatForFloat32MatrixTexture:()=>iM,getInternalFormatForPackedMatrixTexture:()=>dM,getInternalFormatForUnsignedBytesMatrixTexture:()=>pM,uploadDenseMatrixToTexture:()=>bM,uploadPixelDataToTexture:()=>xM});class Y{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class X{refCount(e){return Z("refCount")}incRef(e){return Z("incRef")}timerAvailable(){return!0}time(e){return Z("time")}read(e){return Z("read")}readSync(e){return Z("readSync")}readToGPU(e,t){return Z("readToGPU")}numDataIds(){return Z("numDataIds")}disposeData(e,t){return Z("disposeData")}write(e,t,n){return Z("write")}move(e,t,n,r,s){return Z("move")}createTensorFromGPUData(e,t,n){return Z("createTensorFromGPUData")}memory(){return Z("memory")}floatPrecision(){return Z("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return Z("dispose")}}function Z(e){throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}function Q(e){let t=e.length,n=0;for(;t>0;)n=Math.random()*t|0,t--,ne(e,t,n)}function J(e,t){if(e.length!==t.length)throw new Error(`Array sizes must match to be shuffled together First array length was ${e.length}Second array length was ${t.length}`);let n=e.length,r=0;for(;n>0;)r=Math.random()*n|0,n--,ne(e,n,r),ne(t,n,r)}function ee(e,t,n){return Math.max(e,Math.min(t,n))}function te(e){return e%2==0?e:e+1}function ne(e,t,n){const r=e[t];e[t]=e[n],e[n]=r}function re(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}function se(e,t){const n=Math.random();return t*n+(1-n)*e}function ae(e,t){let n=0;for(let r=0;r<e.length;r++){const s=Number(e[r])-Number(t[r]);n+=s*s}return n}function oe(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function ie(e,t,n=""){oe(he(e,t),(()=>n+` Shapes ${e} and ${t} must match`))}function le(e){oe(null!=e,(()=>"The input to the tensor constructor must be a non-null value."))}function ue(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function ce(e){return 0===e.length}function pe(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(null!==e[n]&&null!==t[n]&&e[n]!==t[n])return!1;return!0}function he(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function de(e){return e%1==0}function fe(e){if(null!=Math.tanh)return Math.tanh(e);if(e===1/0)return 1;if(e===-1/0)return-1;{const t=Math.exp(2*e);return(t-1)/(t+1)}}function me(e){const t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function ge(e){const t=new Uint32Array(e);for(let n=0;n<e;++n)t[n]=n;return Q(t),t}function ye(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function be(e,t=e=>0,n,r){return new Promise(((s,a)=>{let o=0;const i=()=>{if(e())return void s();o++;const l=t(o);null!=n&&o>=n?a():null!=r?r(i,l):setTimeout(i,l)};i()}))}function xe(e,t){let n=1,r=-1;for(let t=0;t<e.length;++t)if(e[t]>=0)n*=e[t];else if(-1===e[t]){if(-1!==r)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${r} and dim ${t}`);r=t}else if(e[t]<0)throw Error(`Shapes can not be < 0. Found ${e[t]} at dim ${t}`);if(-1===r){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);const s=e.slice();return s[r]=t/n,s}function we(e,t){const n=t.length;return oe((e=null==e?t.map(((e,t)=>t)):[].concat(e)).every((e=>e>=-n&&e<n)),(()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${e}`)),oe(e.every((e=>de(e))),(()=>`All values in axis param must be integers but got axis ${e}`)),e.map((e=>e<0?n+e:e))}function ve(e,t){const n=[],r=[],s=null!=t&&Array.isArray(t)&&0===t.length,a=null==t||s?null:we(t,e).sort();let o=0;for(let t=0;t<e.length;++t){if(null!=a){if(a[o]===t&&1!==e[t])throw new Error(`Can't squeeze axis ${t} since its dim '${e[t]}' is not 1`);(null==a[o]||a[o]>t)&&1===e[t]&&(n.push(e[t]),r.push(t)),a[o]<=t&&o++}1!==e[t]&&(n.push(e[t]),r.push(t))}return{newShape:n,keptDims:r}}function ke(e,t){return Ne(e,t)}function Ne(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error(`Unknown data type ${e}`);n=new Array(t)}return n}function Te(e,t){for(let n=0;n<e.length;n++){const r=e[n];if(isNaN(r)||!isFinite(r))throw Error(`A tensor of type ${t} being uploaded contains ${r}.`)}}function Se(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}function Ie(e,t){return!("complex64"===t||"float32"===t&&"complex64"!==e||"int32"===t&&"float32"!==e&&"complex64"!==e||"bool"===t&&"bool"===e)}function Ee(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error(`Unknown dtype ${e}`)}function $e(e){if(null==e)return 0;let t=0;return e.forEach((e=>t+=e.length)),t}function Ce(e){return"string"==typeof e||e instanceof String}function Ae(e){return"boolean"==typeof e}function _e(e){return"number"==typeof e}function Re(e){return Array.isArray(e)?Re(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray?"int32":_e(e)?"float32":Ce(e)?"string":Ae(e)?"bool":"float32"}function De(e){return!!(e&&e.constructor&&e.call&&e.apply)}function Fe(e,t){for(let n=t;n<e;++n)if(e%n==0)return n;return e}function Oe(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let r=t-3;r>=0;--r)n[r]=n[r+1]*e[r+1];return n}function Me(e,t,n,r=!1){const s=new Array;if(1===t.length){const a=t[0]*(r?2:1);for(let t=0;t<a;t++)s[t]=n[e+t]}else{const a=t[0],o=t.slice(1),i=o.reduce(((e,t)=>e*t))*(r?2:1);for(let t=0;t<a;t++)s[t]=Me(e+t*i,o,n,r)}return s}function Le(e,t,n=!1){if(0===e.length)return t[0];const r=e.reduce(((e,t)=>e*t))*(n?2:1);if(0===r)return[];if(r!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}${n?" for a complex tensor":""}.`);return Me(0,e,t,n)}function ze(e,t){if(Array.isArray(e))return e;if("float32"===t)return e instanceof Float32Array?e:new Float32Array(e);if("int32"===t)return e instanceof Int32Array?e:new Int32Array(e);if("bool"===t||"string"===t)return Uint8Array.from(new Int32Array(e));throw new Error(`Unknown dtype ${t}`)}function Pe(e,t){const n=Be(e,t);for(let e=0;e<n.length;e++)n[e]=1;return n}function Be(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error(`Unknown data type ${t}`)}function Ve(e,t){const n=e.reduce(((e,t)=>e*t),1);if(null==t||"float32"===t)return Le(e,new Float32Array(n));if("int32"===t)return Le(e,new Int32Array(n));if("bool"===t)return Le(e,new Uint8Array(n));throw new Error(`Unknown data type ${t}`)}function We(e){e.forEach((t=>{oe(Number.isInteger(t)&&t>=0,(()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`))}))}function Ue(e,t,n){if(0===t)return 0;if(1===t)return e[0];let r=e[e.length-1];for(let t=0;t<e.length-1;++t)r+=n[t]*e[t];return r}function Ge(e,t,n){if(0===t)return[];if(1===t)return[e];const r=new Array(t);for(let t=0;t<r.length-1;++t)r[t]=Math.floor(e/n[t]),e-=r[t]*n[t];return r[r.length-1]=e,r}function He(e){return e&&e.then&&"function"==typeof e.then}const je="tfjsflags";class Ke{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=qe,this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&(Ye().getBool("IS_TEST")||Ye().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`)),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];Ye().getBool("IS_TEST")||Ye().getBool("PROD")||console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if(He(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getString(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const e=this.getQueryParams(this.global.location.search);je in e&&e[je].split(",").forEach((e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){const n=t.toLowerCase();return"true"===n||"false"===n?"true"===n:""+ +n===n?+n:t}(0,n)}))}}function qe(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,((e,...n)=>(function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,n[0],n[1]),n.join("=")))),t}function Ye(){return Ze}let Xe,Ze=null;function Qe(){if(null==Xe){let e;if("undefined"!=typeof window)e=window;else if(void 0!==n.g)e=n.g;else if("undefined"!=typeof process)e=process;else{if("undefined"==typeof self)throw new Error("Could not find a global object");e=self}Xe=e}return Xe}function Je(e,t){const n=function(){const e=Qe();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const r=t();return n.set(e,r),n.get(e)}}const et="Abs",tt="Acos",nt="Acosh",rt="Add",st="AddN",at="All",ot="Any",it="ArgMax",lt="ArgMin",ut="Asin",ct="Asinh",pt="Atan",ht="Atanh",dt="Atan2",ft="AvgPool",mt="AvgPoolGrad",gt="AvgPool3D",yt="AvgPool3DGrad",bt="BatchMatMul",xt="BatchToSpaceND",wt="Bincount",vt="BitwiseAnd",kt="BroadcastTo",Nt="BroadcastArgs",Tt="Cast",St="Ceil",It="ClipByValue",Et="Complex",$t="ComplexAbs",Ct="Concat",At="Conv2D",_t="Conv2DBackpropFilter",Rt="Conv2DBackpropInput",Dt="Conv3D",Ft="Conv3DBackpropFilterV2",Ot="Conv3DBackpropInputV2",Mt="Cos",Lt="Cosh",zt="Cumprod",Pt="Cumsum",Bt="CropAndResize",Vt="DenseBincount",Wt="DepthToSpace",Ut="DepthwiseConv2dNative",Gt="DepthwiseConv2dNativeBackpropFilter",Ht="DepthwiseConv2dNativeBackpropInput",jt="Diag",Kt="Dilation2D",qt="Dilation2DBackpropInput",Yt="Dilation2DBackpropFilter",Xt="Draw",Zt="RealDiv",Qt="Einsum",Jt="Elu",en="EluGrad",tn="Erf",nn="Equal",rn="Exp",sn="ExpandDims",an="Expm1",on="FFT",ln="Fill",un="FlipLeftRight",cn="Floor",pn="FloorDiv",hn="FusedBatchNorm",dn="GatherV2",fn="GatherNd",mn="Greater",gn="GreaterEqual",yn="Identity",bn="IFFT",xn="Imag",wn="IsFinite",vn="IsInf",kn="IsNan",Nn="LeakyRelu",Tn="Less",Sn="LessEqual",In="LinSpace",En="Log",$n="Log1p",Cn="LogicalAnd",An="LogicalNot",_n="LogicalOr",Rn="LogicalXor",Dn="LogSoftmax",Fn="LowerBound",On="LRN",Mn="LRNGrad",Ln="MatrixBandPart",zn="Max",Pn="Maximum",Bn="MaxPool",Vn="MaxPoolGrad",Wn="MaxPool3D",Un="MaxPool3DGrad",Gn="MaxPoolWithArgmax",Hn="Mean",jn="Min",Kn="Minimum",qn="MirrorPad",Yn="Mod",Xn="Multinomial",Zn="Multiply",Qn="Neg",Jn="NotEqual",er="NonMaxSuppressionV3",tr="NonMaxSuppressionV4",nr="NonMaxSuppressionV5",rr="OnesLike",sr="OneHot",ar="Pack",or="PadV2",ir="Pool",lr="Pow",ur="Prelu",cr="Prod",pr="RaggedGather",hr="RaggedRange",dr="RaggedTensorToTensor",fr="Range",mr="Real",gr="Reciprocal",yr="Relu",br="Reshape",xr="ResizeNearestNeighbor",wr="ResizeNearestNeighborGrad",vr="ResizeBilinear",kr="ResizeBilinearGrad",Nr="Relu6",Tr="Reverse",Sr="Round",Ir="Rsqrt",Er="ScatterNd",$r="TensorScatterUpdate",Cr="SearchSorted",Ar="Select",_r="Selu",Rr="Slice",Dr="Sin",Fr="Sinh",Or="Sign",Mr="Sigmoid",Lr="Softplus",zr="Sqrt",Pr="Sum",Br="SpaceToBatchND",Vr="SplitV",Wr="Softmax",Ur="SparseFillEmptyRows",Gr="SparseReshape",Hr="SparseSegmentMean",jr="SparseSegmentSum",Kr="SparseToDense",qr="SquaredDifference",Yr="Square",Xr="StaticRegexReplace",Zr="StridedSlice",Qr="StringNGrams",Jr="StringSplit",es="StringToHashBucketFast",ts="Sub",ns="Tan",rs="Tanh",ss="Tile",as="TopK",os="Transform",is="Transpose",ls="Unique",us="Unpack",cs="UnsortedSegmentSum",ps="UpperBound",hs="ZerosLike",ds="Step",fs="FromPixels",ms="RotateWithOffset",gs="_FusedMatMul",ys="FusedConv2D",bs="FusedDepthwiseConv2D";function xs(...e){Ye().getBool("IS_TEST")||Ye().getBool("PROD")||console.warn(...e)}function ws(...e){Ye().getBool("IS_TEST")||Ye().getBool("PROD")||console.log(...e)}const vs=Je("kernelRegistry",(()=>new Map)),ks=Je("gradRegistry",(()=>new Map));function Ns(e,t){const n=_s(e,t);return vs.get(n)}function Ts(e){return ks.get(e)}function Ss(e){const t=vs.entries(),n=[];for(;;){const{done:r,value:s}=t.next();if(r)break;const[a,o]=s,[i]=a.split("_");i===e&&n.push(o)}return n}function Is(e){const{kernelName:t,backendName:n}=e,r=_s(t,n);vs.has(r)&&xs(`The kernel '${t}' for backend '${n}' is already registered`),vs.set(r,e)}function Es(e){const{kernelName:t}=e;ks.has(t)&&Ye().getBool("DEBUG")&&xs(`Overriding the gradient for '${t}'`),ks.set(t,e)}function $s(e,t){const n=_s(e,t);if(!vs.has(n))throw new Error(`The kernel '${e}' for backend '${t}' is not registered`);vs.delete(n)}function Cs(e){if(!ks.has(e))throw new Error(`The gradient '${e}' for backend is not registered`);ks.delete(e)}function As(e,t){Ss(e).forEach((e=>{Is(Object.assign({},e,{backendName:t}))}))}function _s(e,t){return`${t}_${e}`}function Rs(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray}var Ds=n(8570);const Fs=n.n(Ds)()||Ds;function Os(e){return Fs.fromString(e,!0,16)}const Ms=Os("c3a5c85c97cb3127"),Ls=Os("b492b66fbe98f273"),zs=Os("9ae16a3b2f90404f");function Ps(e){return e.xor(e.shru(47))}function Bs(e,t,n){const r=e.slice(t,t+n);return Fs.fromBytes(Array.from(r),!0,!0)}function Vs(e,t){return Bs(e,t,8)}function Ws(e,t){return Bs(e,t,4)}function Us(e,t){return 0===t?e:e.shru(t).or(e.shl(64-t))}function Gs(e,t,n=Os("9ddfea08eb382d69")){let r=e.xor(t).mul(n);r=r.xor(r.shru(47));let s=t.xor(r).mul(n);return s=s.xor(s.shru(47)),s=s.mul(n),s}function Hs(e,t,n,r){return function(e,t,n,r,s,a){s=s.add(e),a=Us(a.add(s).add(r),21);const o=s;return s=(s=s.add(t)).add(n),a=a.add(Us(s,44)),[s.add(r),a.add(o)]}(Vs(e,t),Vs(e,t+8),Vs(e,t+16),Vs(e,t+24),n,r)}function js(e,t=e.length){const n=Fs.fromNumber(81,!0);if(t<=32)return t<=16?function(e,t=e.length){if(t>=8){const n=zs.add(2*t),r=Vs(e,0).add(zs),s=Vs(e,t-8);return Gs(Us(s,37).mul(n).add(r),Us(r,25).add(s).mul(n),n)}if(t>=4){const n=zs.add(2*t);return Gs(Ws(e,0).shl(3).add(t),Ws(e,t-4),n)}if(t>0){const n=e[0]+(e[t>>1]<<8),r=t+(e[t-1]<<2);return Ps(zs.mul(n).xor(Ms.mul(r))).mul(zs)}return zs}(e,t):function(e,t=e.length){const n=zs.add(2*t),r=Vs(e,0).mul(Ls),s=Vs(e,8),a=Vs(e,t-8).mul(n),o=Vs(e,t-16).mul(zs);return Gs(Us(r.add(s),43).add(Us(a,30)).add(o),r.add(Us(s.add(zs),18)).add(a),n)}(e,t);if(t<=64)return function(e,t=e.length){const n=zs.add(2*t),r=Vs(e,0).mul(zs),s=Vs(e,8),a=Vs(e,t-8).mul(n),o=Vs(e,t-16).mul(zs),i=Us(r.add(s),43).add(Us(a,30)).add(o),l=Gs(i,r.add(Us(s.add(zs),18)).add(a),n),u=Vs(e,16).mul(n),c=Vs(e,24),p=i.add(Vs(e,t-32)).mul(n),h=l.add(Vs(e,t-24)).mul(n);return Gs(Us(u.add(c),43).add(Us(p,30)).add(h),u.add(Us(c.add(r),18)).add(p),n)}(e,t);let r=n,s=n.mul(Ls).add(113),a=Ps(s.mul(zs).add(113)).mul(zs),o=[Fs.UZERO,Fs.UZERO],i=[Fs.UZERO,Fs.UZERO];r=r.mul(zs).add(Vs(e,0));let l=0;const u=64*(t-1>>6),c=u+(t-1&63)-63;do{r=Us(r.add(s).add(o[0]).add(Vs(e,l+8)),37).mul(Ls),s=Us(s.add(o[1]).add(Vs(e,l+48)),42).mul(Ls),r=r.xor(i[1]),s=s.add(o[0]).add(Vs(e,l+40)),a=Us(a.add(i[0]),33).mul(Ls),o=Hs(e,l,o[1].mul(Ls),r.add(i[0])),i=Hs(e,l+32,a.add(i[1]),s.add(Vs(e,l+16))),[a,r]=[r,a],l+=64}while(l!==u);const p=Ls.add(a.and(255).shl(1));return l=c,i[0]=i[0].add(t-1&63),o[0]=o[0].add(i[0]),i[0]=i[0].add(o[0]),r=Us(r.add(s).add(o[0]).add(Vs(e,l+8)),37).mul(p),s=Us(s.add(o[1]).add(Vs(e,l+48)),42).mul(p),r=r.xor(i[1].mul(9)),s=s.add(o[0].mul(9).add(Vs(e,l+40))),a=Us(a.add(i[0]),33).mul(p),o=Hs(e,l,o[1].mul(p),r.add(i[0])),i=Hs(e,l+32,a.add(i[1]),s.add(Vs(e,l+16))),[a,r]=[r,a],Gs(Gs(o[0],i[0],p).add(Ps(s).mul(Ms)).add(a),Gs(o[1],i[1],p).add(r),p)}function Ks(e,t){return"string"===t?Zs(e):qs([e],t)}function qs(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=ea(e)),Ye().getBool("DEBUG")&&Te(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error(`Unknown data type ${t}`)}function Ys(){return Ye().platform.now()}function Xs(e,t){return Ye().platform.fetch(e,t)}function Zs(e,t="utf-8"){return t=t||"utf-8",Ye().platform.encode(e,t)}function Qs(e,t="utf-8"){return t=t||"utf-8",Ye().platform.decode(e,t)}function Js(e){return null!=Ye().platform.isTypedArray?Ye().platform.isTypedArray(e):Rs(e)}function ea(e,t=[],n=!1){if(null==t&&(t=[]),"boolean"==typeof e||"number"==typeof e||"string"==typeof e||He(e)||null==e||Js(e)&&n)t.push(e);else if(Array.isArray(e)||Js(e))for(let r=0;r<e.length;++r)ea(e[r],t,n);else{let r=-1;for(const t of Object.keys(e))/^([1-9]+[0-9]*|0)$/.test(t)&&(r=Math.max(r,Number(t)));for(let s=0;s<=r;s++)ea(e[s],t,n)}return t}class ta{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new ra)}profileKernel(e,t,n){let r;const s=()=>{r=n()};let a;const o=Ys();if(this.backendTimer.timerAvailable())a=this.backendTimer.time(s);else{s();for(const e of r)e.dataSync();a=Promise.resolve({kernelMs:Ys()-o})}if(Ye().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let t=0;t<r.length;t++){const n=r[t];n.data().then((t=>{na(t,n.dtype,e)}))}return{kernelName:e,outputs:r,inputs:t,timeMs:a.then((e=>e.kernelMs)),extraInfo:a.then((e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():""))}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:r,inputs:s,extraInfo:a}=e;n.forEach((e=>{Promise.all([e.data(),r,a]).then((n=>{this.logger.logKernelProfile(t,e,n[0],n[1],s,n[2])}))}))}}function na(e,t,n){if("float32"!==t)return!1;for(let t=0;t<e.length;t++){const r=e[t];if(isNaN(r)||!isFinite(r))return console.warn(`Found ${r} in the result of '${n}'`),!0}return!1}class ra{logKernelProfile(e,t,n,r,s,a){const o="number"==typeof r?ye(`${r}ms`,9):r.error,i=ye(e,25),l=t.rank,u=t.size,c=ye(t.shape.toString(),14);let p="";for(const e in s){const n=s[e];if(null!=n){const r=n.shape||t.shape,s=r.length;p+=`${e}: ${s}D ${s>0?r:""} `}}console.log(`%c${i}\t%c${o}\t%c${l}D ${c}\t%c${u}\t%c${p}\t%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function sa(e,t,n,r){const s=Oe(t),a=function(e,t,n,r){const s=ue(t),a=r[r.length-1],o=new Array(a).fill(0),i=t.length,l="complex64"===n?la(e):e;if(i>1)for(let e=0;e<s/a;e++){const t=e*a;for(let e=0;e<a;e++)o[e]=Math.max(o[e],aa(l[t+e],0,n).length)}return o}(e,t,n,s),o=t.length,i=ia(e,t,n,s,a),l=["Tensor"];return r&&(l.push(`  dtype: ${n}`),l.push(`  rank: ${o}`),l.push(`  shape: [${t}]`),l.push("  values:")),l.push(i.map((e=>"    "+e)).join("\n")),l.join("\n")}function aa(e,t,n){let r;return r=Array.isArray(e)?`${parseFloat(e[0].toFixed(7))} + ${parseFloat(e[1].toFixed(7))}j`:Ce(e)?`'${e}'`:"bool"===n?oa(e):parseFloat(e.toFixed(7)).toString(),ye(r,t)}function oa(e){return 0===e?"false":"true"}function ia(e,t,n,r,s,a=!0){const o="complex64"===n?2:1,i=t[0],l=t.length;if(0===l)return"complex64"===n?[aa(la(e)[0],0,n)]:"bool"===n?[oa(e[0])]:[e[0].toString()];if(1===l){if(i>20){const t=3*o;let r=Array.from(e.slice(0,t)),a=Array.from(e.slice((i-3)*o,i*o));return"complex64"===n&&(r=la(r),a=la(a)),["["+r.map(((e,t)=>aa(e,s[t],n))).join(", ")+", ..., "+a.map(((e,t)=>aa(e,s[i-3+t],n))).join(", ")+"]"]}return["["+("complex64"===n?la(e):Array.from(e)).map(((e,t)=>aa(e,s[t],n))).join(", ")+"]"]}const u=t.slice(1),c=r.slice(1),p=r[0]*o,h=[];if(i>20){for(let t=0;t<3;t++){const r=t*p,a=r+p;h.push(...ia(e.slice(r,a),u,n,c,s,!1))}h.push("...");for(let t=i-3;t<i;t++){const r=t*p,a=r+p;h.push(...ia(e.slice(r,a),u,n,c,s,t===i-1))}}else for(let t=0;t<i;t++){const r=t*p,a=r+p;h.push(...ia(e.slice(r,a),u,n,c,s,t===i-1))}const d=2===l?",":"";h[0]="["+(i>0?h[0]+d:"");for(let e=1;e<h.length-1;e++)h[e]=" "+h[e]+d;let f=",\n";for(let e=2;e<l;e++)f+="\n";return h[h.length-1]=" "+h[h.length-1]+"]"+(a?"":f),h}function la(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}class ua{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=ue(e),null!=n){const e=n.length;oe(e===this.size,(()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`))}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||Ne(t,this.size),this.strides=Oe(e)}set(e,...t){0===t.length&&(t=[0]),oe(t.length===this.rank,(()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`));const n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(const n of e){if(n<0||n>=this.shape[t]){const t=`Requested out of range element at ${e}.   Buffer shape=${this.shape}`;throw new Error(t)}t++}let n=e[e.length-1];for(let t=0;t<e.length-1;++t)n+=this.strides[t]*e[t];return this.values[n]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return ca().makeTensor(this.values,this.shape,this.dtype)}}let ca=null,pa=null,ha=null;class da{constructor(e,t,n,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=ue(e),this.strides=Oe(e),this.dataId=n,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return pa.buffer(this.shape,this.dtype,e)}bufferSync(){return pa.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return Le(this.shape,e,"complex64"===this.dtype)}arraySync(){return Le(this.shape,this.dataSync(),"complex64"===this.dtype)}async data(){this.throwIfDisposed();const e=ca().read(this.dataId);if("string"===this.dtype){const t=await e;try{return t.map((e=>Qs(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataToGPU(e){return this.throwIfDisposed(),ca().readToGPU(this.dataId,e)}dataSync(){this.throwIfDisposed();const e=ca().readSync(this.dataId);if("string"===this.dtype)try{return e.map((e=>Qs(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await ca().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(this.kerasMask&&this.kerasMask.dispose(),ca().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return pa.print(this,e)}clone(){return this.throwIfDisposed(),pa.clone(this)}toString(e=!1){return sa(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),pa.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),ca().makeVariable(this,e,t,n)}}function fa(){return Je("Tensor",(()=>da))}Object.defineProperty(da,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed}),fa();class ma extends da{constructor(e,t,n,r){super(e.shape,e.dtype,e.dataId,r),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!he(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);ca().disposeTensor(this),this.dataId=e.dataId,ca().incRef(this,null)}dispose(){ca().disposeVariable(this),this.isDisposedInternal=!0}}var ga,ya,ba,xa,wa;Object.defineProperty(ma,Symbol.hasInstance,{value:e=>e instanceof da&&null!=e.assign&&e.assign instanceof Function}),function(e){e.R0="R0",e.R1="R1",e.R2="R2",e.R3="R3",e.R4="R4",e.R5="R5",e.R6="R6"}(ga||(ga={})),function(e){e.float32="float32",e.int32="int32",e.bool="int32",e.complex64="complex64"}(ya||(ya={})),function(e){e.float32="float32",e.int32="int32",e.bool="bool",e.complex64="complex64"}(ba||(ba={})),function(e){e.float32="float32",e.int32="float32",e.bool="float32",e.complex64="complex64"}(xa||(xa={})),function(e){e.float32="complex64",e.int32="complex64",e.bool="complex64",e.complex64="complex64"}(wa||(wa={}));const va={float32:xa,int32:ya,bool:ba,complex64:wa};function ka(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return va[e][t]}function Na(e){return ka(e,"int32")}function Ta(e){return null!=e&&"object"==typeof e&&"texture"in e&&e.texture instanceof WebGLTexture}function Sa(e){return"undefined"!=typeof GPUBuffer&&null!=e&&"object"==typeof e&&"buffer"in e&&e.buffer instanceof GPUBuffer}function Ia(e,t){if(e.dtype===t.dtype)return[e,t];const n=ka(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function Ea(e,t){oe(e.dtype===t.dtype,(()=>`The dtypes of the first(${e.dtype}) and second(${t.dtype}) input must match`))}function $a(e,t){return t.some((t=>t.id===e.id))}function Ca(e){const t=[];return Aa(e,t,new Set),t}function Aa(e,t,n){if(null==e)return;if(e instanceof da)return void t.push(e);if(r=e,!Array.isArray(r)&&"object"!=typeof r)return;var r;const s=e;for(const e in s){const r=s[e];n.has(r)||(n.add(r),Aa(r,t,n))}}function _a(e){return null!=e.kernelName}class Ra{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map((e=>e.name))))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class Da{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new Ra}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then((()=>{}));if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(xs(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new ta(this.backendInstance),!0}setupRegisteredKernels(){Ss(this.backendName).forEach((e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)}))}disposeRegisteredKernels(e){Ss(e).forEach((t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])}))}initializeBackend(e){const t=this.registryFactory[e];if(null==t)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const n=t.factory();if(!n||n instanceof X||"function"!=typeof n.then)return this.registry[e]=n,{success:!0,asyncInit:!1};{const t=++this.pendingBackendInitId,r=n.then((n=>!(t<this.pendingBackendInitId||(this.registry[e]=n,this.pendingBackendInit=null,0)))).catch((n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,xs(`Initialization of backend ${e} failed`),xs(n.stack||n.message)),!1)));return this.pendingBackendInit=r,{success:r,asyncInit:!0}}}catch(t){return xs(`Initialization of backend ${e} failed`),xs(t.stack||t.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort(((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority))}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:r,asyncInit:s}=this.initializeBackend(n);if(s||r)return{name:n,asyncInit:s}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),r=n.backend,s=this.readSync(t),a=r.refCount(t);r.disposeData(t,!0),n.backend=e,e.move(t,s,n.shape,n.dtype,a),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,r=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=e}return this.scopedRun((()=>this.startScope(r)),(()=>this.endScope(n)),(()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n)))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(e){throw t(),e}}nextTensorId(){return Da.nextTensorId++}nextVariableId(){return Da.nextVariableId++}clone(e){const t=Oa.runKernel(yn,{x:e}),n={x:e};return this.addTapeNode(this.state.activeScope.name,n,[t],(e=>({x:()=>{const t={x:e};return Oa.runKernel(Tt,t,{dtype:"float32"})}})),[],{}),t}runKernel(e,t,n){if(null==this.backendName&&this.backend,null==Ns(e,this.backendName))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:n})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const r=this.backend.numDataIds();let s=0;n.forEach((e=>{s+="complex64"===e.dtype?3:1}));const a=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],o=r-t-s-a;if(o>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${o} data ids) after running '${e}'`)}runKernelFunc(e){let t,n=[];const r=this.isTapeOn(),s=this.state.numBytes,a=this.state.numTensors;let o,i;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;const l=_a(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(_a(e)){const{kernelName:t,inputs:s,attrs:a}=e;null==this.backendName&&this.backend;const l=Ns(t,this.backendName);oe(null!=l,(()=>`Cannot find registered kernel '${t}' for backend '${this.backendName}'`)),o=()=>{const e=this.backend.numDataIds();i=l.kernelFunc({inputs:s,attrs:a,backend:this.backend});const o=Array.isArray(i)?i:[i];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(t,e,o);const u=o.map((e=>null!=e.rank?e:this.makeTensorFromTensorInfo(e)));if(r){const e=this.getTensorsForGradient(t,s,u);n=this.saveTensorsForBackwardMode(e)}return u}}else{const{forwardFunc:t}=e,s=e=>{r&&(n=e.map((e=>this.keep(this.clone(e)))))};o=()=>{const e=this.backend.numDataIds();i=this.tidy((()=>t(this.backend,s)));const n=Array.isArray(i)?i:[i];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(l,e,n),n}}const{inputs:u,attrs:c}=e,p=_a(e)?null:e.backwardsFunc;let h;return this.scopedRun((()=>this.state.kernelDepth++),(()=>this.state.kernelDepth--),(()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(h=this.profiler.profileKernel(l,u,(()=>o())),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(h),t=h.outputs):t=o()})),r&&this.addTapeNode(l,u,t,p,n,c),this.state.profiling&&this.state.activeProfile.kernels.push({name:l,bytesAdded:this.state.numBytes-s,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-a,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(u).map((e=>null!=u[e]?u[e].shape:null)),outputShapes:t.map((e=>e.shape)),kernelTimeMs:h.timeMs,extraInfo:h.extraInfo}),Array.isArray(i)?t:t[0]}saveTensorsForBackwardMode(e){const t=e.map((e=>this.keep(this.clone(e))));return t}getTensorsForGradient(e,t,n){const r=Ts(e);if(null!=r){const e=r.inputsToSave||[],s=r.outputsToSave||[];let a;r.saveAllInputs?(oe(Array.isArray(t),(()=>"saveAllInputs is true, expected inputs to be an array.")),a=Object.keys(t).map((e=>t[e]))):a=e.map((e=>t[e]));const o=n.filter(((e,t)=>s[t]));return a.concat(o)}return[]}makeTensor(e,t,n,r){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",r=r||this.backend;let s=e;"string"===n&&Ce(e[0])&&(s=e.map((e=>Zs(e))));const a=r.write(s,t,n),o=new da(t,n,a,this.nextTensorId());if(this.trackTensor(o,r),"string"===n){const e=this.state.tensorInfo.get(a),t=$e(s);this.state.numBytes+=t-e.bytes,e.bytes=t}return o}makeTensorFromDataId(e,t,n,r){const s={dataId:e,shape:t,dtype:n=n||"float32"};return this.makeTensorFromTensorInfo(s,r)}makeTensorFromTensorInfo(e,t){const{dataId:n,shape:r,dtype:s}=e,a=new da(r,s,n,this.nextTensorId());return this.trackTensor(a,t),a}makeVariable(e,t=!0,n,r){n=n||this.nextVariableId().toString(),null!=r&&r!==e.dtype&&(e=e.cast(r));const s=new ma(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[s.name])throw new Error(`Variable with name ${s.name} was already registered`);return this.state.registeredVariables[s.name]=s,this.incRef(s,this.backend),s}trackTensor(e,t){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*Ee(e.dtype)),this.state.numBytes+=n,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n})),e instanceof ma||this.track(e)}incRef(e,t){this.trackTensor(e,t),this.backend.incRef(e.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const t=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){const t=e.size*Ee(e.dtype);this.state.numBytes-=t}t.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,t.backend)}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map((e=>e.totalBytesSnapshot))),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const e of this.state.activeProfile.kernels)e.kernelTimeMs=await e.kernelTimeMs,e.extraInfo=await e.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,r,s,a){const o={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:s},i=Ts(e);null!=i&&(r=i.gradFunc),null!=r&&(o.gradient=e=>(e=e.map(((e,t)=>{if(null==e){const e=n[t],r=Be(e.size,e.dtype);return this.makeTensor(r,e.shape,e.dtype)}return e})),r(e.length>1?e:e[0],s,a))),this.state.activeTape.push(o)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=Ca(e),n=new Set(t.map((e=>e.id)));for(let e=0;e<this.state.activeScope.track.length;e++){const t=this.state.activeScope.track[e];t.kept||n.has(t.id)||t.dispose()}const r=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach((e=>{e.kept||e.scopeId!==r.id||this.track(e)}))}gradients(e,t,n,r=!1){if(oe(t.length>0,(()=>"gradients() received an empty list of xs.")),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const s=this.scopedRun((()=>this.startTape()),(()=>this.endTape()),(()=>this.tidy("forward",e)));oe(s instanceof da,(()=>"The result y returned by f() must be a tensor."));const a=function(e,t,n){const r={},s={};for(let e=0;e<t.length;e++)r[t[e].id]=!0;for(let n=0;n<e.length;n++){const a=e[n],o=a.inputs;for(const e in o){const n=o[e];let i=!1;for(let e=0;e<t.length;e++)if(r[n.id]){a.outputs.forEach((e=>r[e.id]=!0)),i=!0,s[a.id]=!0;break}if(i)break}}const a={};a[n.id]=!0;const o={};for(let t=e.length-1;t>=0;t--){const n=e[t],r=n.inputs;for(let e=0;e<n.outputs.length;e++)if(a[n.outputs[e].id]){for(const e in r)a[r[e].id]=!0,o[n.id]=!0;break}}const i=[];for(let t=0;t<e.length;t++){const n=e[t];if(s[n.id]&&o[n.id]){const e={};for(const t in n.inputs){const s=n.inputs[t];r[s.id]&&(e[t]=s)}const t=Object.assign({},n);t.inputs=e,t.outputs=n.outputs,i.push(t)}}return i}(this.state.activeTape,t,s);if(!r&&0===a.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(()=>{const e={};e[s.id]=null==n?function(e){const t=Pe(ue(e),"float32");return Oa.makeTensor(t,e,"float32")}(s.shape):n,function(e,t,n,r){for(let s=t.length-1;s>=0;s--){const a=t[s],o=[];if(a.outputs.forEach((t=>{const n=e[t.id];null!=n?o.push(n):o.push(null)})),null==a.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${a.kernelName}.`);const i=a.gradient(o);for(const t in a.inputs){if(!(t in i))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(i)}.`);const s=n((()=>i[t]()));if("float32"!==s.dtype)throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${s.dtype}'`);const o=a.inputs[t];if(!he(s.shape,o.shape))throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input '${t}' has shape '${s.shape}', which does not match the shape of the input '${o.shape}'`);if(null==e[o.id])e[o.id]=s;else{const t=e[o.id];e[o.id]=r(t,s),t.dispose()}}}}(e,a,(e=>this.tidy(e)),Ma);const r=t.map((t=>e[t.id]));return 0===this.state.gradientDepth&&(this.state.activeTape.forEach((e=>{for(const t of e.saved)t.dispose()})),this.state.activeTape=null),{value:s,grads:r}}))}customGrad(e){return oe(De(e),(()=>"The f passed in customGrad(f) must be a function.")),(...t)=>{let n;oe(t.every((e=>e instanceof da)),(()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors"));const r={};return t.forEach(((e,t)=>{r[t]=e})),this.runKernelFunc({forwardFunc:(r,s)=>(n=e(...t,s),oe(n.value instanceof da,(()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor")),oe(De(n.gradFunc),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.")),n.value),backwardsFunc:(e,r)=>{const s=n.gradFunc(e,r),a=Array.isArray(s)?s:[s];oe(a.length===t.length,(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).")),oe(a.every((e=>e instanceof da)),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."));const o={};return a.forEach(((e,t)=>{o[t]=()=>e})),o},inputs:r})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}readToGPU(e,t){return this.state.tensorInfo.get(e).backend.readToGPU(e,t)}async time(e){const t=Ys(),n=await this.backend.time(e);return n.wallMs=Ys()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new Ra;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function Fa(){const e=Qe();if(null==e._tfengine){const t=new Ke(e);e._tfengine=new Da(t)}var t;return t=e._tfengine.ENV,Ze=t,ca=()=>e._tfengine,e._tfengine}Da.nextTensorId=0,Da.nextVariableId=0;const Oa=Fa();function Ma(e,t){const n={a:e,b:t};return Oa.runKernel(rt,n)}let La;function za(e){La=e}function Pa(e){if(void 0!==La)return La;if(e||"undefined"!=typeof navigator&&null!=navigator){if(e||(e=navigator),"ReactNative"===e.product)return!0;const t=e.userAgent||e.vendor||("undefined"!=typeof window?window.opera:"");if(!t){const t=e;return t.userAgentData&&t.userAgentData.mobile}return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function Ba(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}const Va=Ye();function Wa(e,t){let n=e;if(Js(e))return"string"===t?[]:[e.length];if(Ta(e)){const t=e.channels||"RGBA";return[e.height,e.width*t.length]}if(Sa(e))return[e.buffer.size/(null==t?4:Ee(t))];if(!Array.isArray(e))return[];const r=[];for(;Array.isArray(n)||Js(n)&&"string"!==t;)r.push(n.length),n=n[0];return Array.isArray(e)&&Ye().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&Ua(e,r,[]),r}function Ua(e,t,n){if(n=n||[],!Array.isArray(e)&&!Js(e))return void oe(0===t.length,(()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`));oe(t.length>0,(()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${e.length} elements`)),oe(e.length===t[0],(()=>`Element arr[${n.join("][")}] should have ${t[0]} elements, but has ${e.length} elements`));const r=t.slice(1);for(let t=0;t<e.length;++t)Ua(e[t],r,n.concat(t))}function Ga(e,t,n,r){if("string_or_numeric"!==e){if(null==e)throw new Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw new Error(`Argument '${n}' passed to '${r}' must be ${e} tensor, but got ${t} tensor`)}}function Ha(e,t,n,r="numeric"){if(e instanceof fa())return Ga(r,e.dtype,t,n),e;let s=Re(e);if("string"!==s&&["bool","int32","float32"].indexOf(r)>=0&&(s=r),Ga(r,s,t,n),null==e||!Js(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){const r=null==e?"null":e.constructor.name;throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${r}'`)}const a=Wa(e,s);Js(e)||Array.isArray(e)||(e=[e]);const o="string"!==s?qs(e,s):ea(e,[],!0);return Oa.makeTensor(o,a,s)}function ja(e,t,n,r="numeric"){if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map(((e,s)=>Ha(e,`${t}[${s}]`,n,r)))}Va.registerFlag("DEBUG",(()=>!1),(e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),Va.registerFlag("IS_BROWSER",(()=>Ba())),Va.registerFlag("IS_NODE",(()=>"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node)),Va.registerFlag("IS_CHROME",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor))),Va.registerFlag("IS_SAFARI",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Safari/.test(navigator.userAgent)&&/Apple/.test(navigator.vendor))),Va.registerFlag("PROD",(()=>!1)),Va.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(()=>Va.getBool("DEBUG"))),Va.registerFlag("DEPRECATION_WARNINGS_ENABLED",(()=>!0)),Va.registerFlag("IS_TEST",(()=>!1)),Va.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",(()=>Va.getBool("DEBUG"))),Va.registerFlag("WRAP_TO_IMAGEBITMAP",(()=>!1)),Va.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU",(()=>!1)),Va.registerFlag("USE_SETTIMEOUTCUSTOM",(()=>!1));const Ka="__op";function qa(e){const t=Object.keys(e);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let n=t[0];const r=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+=Ka;const s=(...e)=>{Oa.startScope(n);try{const t=r(...e);return He(t)&&console.error("Cannot return a Promise inside of tidy."),Oa.endScope(t),t}catch(e){throw Oa.endScope(null),e}};return Object.defineProperty(s,"name",{value:n,configurable:!0}),s}const Ya=qa({complex_:function(e,t){const n=Ha(e,"real","complex"),r=Ha(t,"imag","complex");ie(n.shape,r.shape,`real and imag shapes, ${n.shape} and ${r.shape}, must match in call to tf.complex().`);const s={real:n,imag:r};return Oa.runKernel(Et,s)}});function Xa(e,t,n,r){if(null==r)r=Re(e);else if("complex64"===r)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(Sa(e)||Ta(e)){if("float32"!==r&&"int32"!==r)throw new Error(`Creating tensor from GPU data only supports 'float32'|'int32' dtype, while the dtype is ${r}.`);return Oa.backend.createTensorFromGPUData(e,t||n,r)}if(!Js(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){We(t);const e=ue(t),r=ue(n);oe(e===r,(()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${r}`));for(let e=0;e<n.length;++e){const r=n[e],s=e!==n.length-1||r!==ue(t.slice(e));oe(n[e]===t[e]||!s,(()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `))}}return Js(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==r?qs(e,r):ea(e,[],!0),Oa.makeTensor(e,t,r)}function Za(e,t,n){return Xa(e,t,Wa(e,n),n)}const Qa={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};class Ja{static join(e){return new Ja(e).slice()}constructor(e){if(this.shards=[],this.previousShardIndex=0,null==e)return;if(e instanceof Array||(e=[e]),0===(e=e.map((e=>Js(e)?e.buffer:e))).length)return;this.bufferUniformSize=e[0].byteLength;let t=0;for(let n=0;n<e.length;n++){const r=e[n];n!==e.length-1&&r.byteLength!==this.bufferUniformSize&&(this.bufferUniformSize=void 0);const s=t+r.byteLength;this.shards.push({buffer:r,start:t,end:s}),t=s}0===this.shards.length&&(this.byteLength=0),this.byteLength=this.shards[this.shards.length-1].end}slice(e=0,t=this.byteLength){if(0===this.shards.length)return new ArrayBuffer(0);if(e=isNaN(Number(e))?0:e,t=isNaN(Number(t))?0:t,e=Math.max(0,e),(t=Math.min(this.byteLength,t))<=e)return new ArrayBuffer(0);const n=this.findShardForByte(e);if(-1===n)throw new Error(`Could not find start shard for byte ${e}`);const r=new ArrayBuffer(t-e),s=new Uint8Array(r);let a=0;for(let r=n;r<this.shards.length;r++){const n=this.shards[r],o=e+a-n.start,i=a,l=Math.min(t,n.end)-n.start,u=new Uint8Array(n.buffer,o,l-o);if(s.set(u,i),a+=u.length,t<n.end)break}return r}findShardForByte(e){if(0===this.shards.length||e<0||e>=this.byteLength)return-1;if(null!=this.bufferUniformSize)return this.previousShardIndex=Math.floor(e/this.bufferUniformSize),this.previousShardIndex;function t(t){return e<t.start?-1:e>=t.end?1:0}if(0===t(this.shards[this.previousShardIndex]))return this.previousShardIndex;const n=function(e,t){let n=0,r=e.length;for(;n<=r;){const s=Math.floor((r-n)/2)+n,a=t(e[s]);if(0===a)return s;a<0?r=s:n=s+1}return-1}(this.shards,t);return-1===n?-1:(this.previousShardIndex=n,this.previousShardIndex)}}function eo(){Ye().set("PROD",!0)}function to(){Ye().set("DEBUG",!0)}function no(){Ye().set("DEPRECATION_WARNINGS_ENABLED",!1),console.warn("TensorFlow.js deprecation warnings have been disabled.")}function ro(e){Ye().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function so(){Oa.disposeVariables()}function ao(){return Oa}function oo(){return Oa.memory()}function io(e){return Oa.profile(e)}function lo(e,t){return Oa.tidy(e,t)}function uo(e){Ca(e).forEach((e=>e.dispose()))}function co(e){return Oa.keep(e)}function po(e){return Oa.time(e)}function ho(e){return Oa.setBackend(e)}function fo(){return Oa.ready()}function mo(){return Oa.backendName}function go(e){Oa.removeBackend(e)}function yo(e){return Oa.findBackend(e)}function bo(e){return Oa.findBackendFactory(e)}function xo(e,t,n=1){return Oa.registerBackend(e,t,n)}function wo(){return Oa.backend}function vo(e,t){Ye().setPlatform(e,t)}ha=ro;const ko=4;async function No(e,t){const n=[],r=[],s=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);for(let a=0;a<s.length;++a){const o=s[a],i=Array.isArray(e)?e[a].tensor:e[o];if("float32"!==i.dtype&&"int32"!==i.dtype&&"bool"!==i.dtype&&"string"!==i.dtype&&"complex64"!==i.dtype)throw new Error(`Unsupported dtype in weight '${o}': ${i.dtype}`);const l={name:o,shape:i.shape,dtype:i.dtype};if("string"===i.dtype){const e=new Promise((async e=>{const t=await i.bytes(),n=t.reduce(((e,t)=>e+t.length),0)+ko*t.length,r=new Uint8Array(n);let s=0;for(let e=0;e<t.length;e++){const n=t[e],a=new Uint8Array(new Uint32Array([n.length]).buffer);r.set(a,s),s+=ko,r.set(n,s),s+=n.length}e(r)}));r.push(e)}else r.push(i.data());null!=t&&(l.group=t),n.push(l)}return{data:Ao(await Promise.all(r)),specs:n}}function To(e,t){const n=new Ja(e),r={};let s=0;for(const e of t){const t=So(e,((e,t)=>n.slice(s+e,s+t)));r[e.name]=Eo(e,n.slice(s,s+t)),s+=t}return r}function So(e,t){const n=ue(e.shape);let r;if("quantization"in e){const t=e.quantization;r=Qa[t.dtype]}else{if("string"===e.dtype){let e=0;for(let r=0;r<n;r++)e+=ko+new Uint32Array(t(e,e+ko))[0];return e}r=Qa[e.dtype]}return n*r}async function Io(e,t){const n=ue(e.shape);let r;if("quantization"in e){const t=e.quantization;r=Qa[t.dtype]}else{if("string"===e.dtype){let e=0;for(let r=0;r<n;r++)e+=ko+new Uint32Array(await t(e,e+ko))[0];return e}r=Qa[e.dtype]}return n*r}function Eo(e,t){const n=e.name,r=e.dtype,s=e.shape,a=ue(s);let o,i=0;if("quantization"in e){const s=e.quantization;if("uint8"===s.dtype||"uint16"===s.dtype){if(!("min"in s)||!("scale"in s))throw new Error(`Weight ${e.name} with quantization ${s.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==s.dtype)throw new Error(`Weight ${e.name} has unknown quantization dtype ${s.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==r)throw new Error(`Weight ${e.name} is quantized with ${s.dtype} which only supports weights of type float32 not ${r}.`)}const l=Qa[s.dtype],u="uint8"===s.dtype?new Uint8Array(t):new Uint16Array(t);if("float32"===r)if("uint8"===s.dtype||"uint16"===s.dtype){o=new Float32Array(u.length);for(let e=0;e<u.length;e++){const t=u[e];o[e]=t*s.scale+s.min}}else{if("float16"!==s.dtype)throw new Error(`Unsupported quantization type ${s.dtype} for weight type float32.`);{const e=function(){const e=function(){const e=e=>{let t=e<<13,n=0;for(;!(8388608&t);)n-=8388608,t<<=1;return t&=-8388609,n+=947912704,t|n},t=new Uint32Array(2048);t[0]=0;for(let n=1;n<1024;n++)t[n]=e(n);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}(),t=function(){const e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=2147483648+(t-32<<23);return e}(),n=function(){const e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return r=>{const s=new ArrayBuffer(4*r.length),a=new Uint32Array(s);for(let s=0;s<r.length;s++){const o=r[s],i=e[n[o>>10]+(1023&o)]+t[o>>10];a[s]=i}return new Float32Array(s)}}();o=e(u)}}else{if("int32"!==r)throw new Error(`Unsupported dtype in weight '${n}': ${r}`);if("uint8"!==s.dtype&&"uint16"!==s.dtype)throw new Error(`Unsupported quantization type ${s.dtype} for weight type int32.`);o=new Int32Array(u.length);for(let e=0;e<u.length;e++){const t=u[e];o[e]=Math.round(t*s.scale+s.min)}}i+=a*l}else if("string"===r){const n=ue(e.shape);o=[];for(let e=0;e<n;e++){const e=new Uint32Array(t.slice(i,i+ko))[0];i+=ko;const n=new Uint8Array(t.slice(i,i+e));o.push(n),i+=e}}else{const e=Qa[r];if("float32"===r)o=new Float32Array(t);else if("int32"===r)o=new Int32Array(t);else{if("bool"!==r){if("complex64"===r){o=new Float32Array(t);const e=new Float32Array(o.length/2),n=new Float32Array(o.length/2);for(let t=0;t<e.length;t++)e[t]=o[2*t],n[t]=o[2*t+1];const r=Za(e,s,"float32"),a=Za(n,s,"float32"),i=Ya(r,a);return r.dispose(),a.dispose(),i}throw new Error(`Unsupported dtype in weight '${n}': ${r}`)}o=new Uint8Array(t)}i+=a*e}return Za(o,s,r)}async function $o(e,t,n){let r=new Uint8Array(t);for(;r.byteLength<n;){const{done:t,value:s}=await e.read();if(t&&null==s){const e=n-r.byteLength;throw new Error(`Reader is done but ${e} bytes are still expected`)}const a=new Uint8Array(r.length+s.byteLength);a.set(r,0),a.set(new Uint8Array(s),r.length),r=a}return r.buffer}async function Co(e,t){const n={},r=e.getReader();let s=new ArrayBuffer(0);for(const e of t){const t=await Io(e,(async(e,t)=>(s=await $o(r,s,t),s.slice(e,t))));s=await $o(r,s,t);const a=s.slice(0,t);s=s.slice(t);const o=Eo(e,a);if(n[e.name]=o,"webgpu"===mo()){const e=wo();"uploadToGPU"in e&&ue(o.shape)>=Ye().get("WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD")&&e.uploadToGPU(o.dataId)}}return n}function Ao(e){if(null===e)throw new Error(`Invalid input value: ${JSON.stringify(e)}`);let t=0;const n=[];e.forEach((e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${e.constructor.name}`)}));const r=new Uint8Array(t);let s=0;return n.forEach((e=>{r.set(new Uint8Array(e.buffer),s),s+=e.byteLength})),r.buffer}const _o="undefined"!=typeof Buffer&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function Ro(e){return _o?Buffer.byteLength(e,"utf8"):new Blob([e]).size}function Do(e){return Ja.join(e)}function Fo(e){for(e=e.trim();e.endsWith("/");)e=e.slice(0,e.length-1);const t=e.split("/");return t[t.length-1]}function Oo(e,t){const n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:t};return null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer),null!=e.initializerSignature&&(n.initializerSignature=e.initializerSignature),null!=e.trainingConfig&&(n.trainingConfig=e.trainingConfig),n}function Mo(e,t,n){const r={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};if(null!=e.trainingConfig&&(r.trainingConfig=e.trainingConfig),null!=e.weightsManifest){if(!t)throw new Error("modelJSON has weightsManifest but weightSpecs is null");if(!n)throw new Error("modelJSON has weightsManifest but weightData is null");r.weightSpecs=t,r.weightData=n}return null!=e.signature&&(r.signature=e.signature),null!=e.userDefinedMetadata&&(r.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(r.modelInitializer=e.modelInitializer),null!=e.initializerSignature&&(r.initializerSignature=e.initializerSignature),r}async function Lo(e,t){let n,r;return null!=e.weightsManifest&&([n,r]=await t(e.weightsManifest)),Mo(e,n,r)}function zo(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:Ro(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:Ro(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:new Ja(e.weightData).byteLength}}function Po(e){const t=[];for(const n of e)t.push(...n.weights);return t}class Bo{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==Bo.instance&&(Bo.instance=new Bo),Bo.instance}static registerSaveRouter(e){Bo.getInstance().saveRouters.push(e)}static registerLoadRouter(e){Bo.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return Bo.getHandlers(e,"save")}static getLoadHandlers(e,t){return Bo.getHandlers(e,"load",t)}static getHandlers(e,t,n){const r=[];return("load"===t?Bo.getInstance().loadRouters:Bo.getInstance().saveRouters).forEach((t=>{const s=t(e,n);null!==s&&r.push(s)})),r}}const Vo=e=>Bo.registerSaveRouter(e),Wo=e=>Bo.registerLoadRouter(e),Uo=e=>Bo.getSaveHandlers(e),Go=(e,t)=>Bo.getLoadHandlers(e,t),Ho="tensorflowjs",jo="models_store",Ko="model_info_store";function qo(){if(!Ye().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function Yo(e){const t=e.result;t.createObjectStore(jo,{keyPath:"modelPath"}),t.createObjectStore(Ko,{keyPath:"modelPath"})}class Xo{constructor(e){if(this.indexedDB=qo(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise(((e,n)=>{const r=this.indexedDB.open(Ho,1);r.onupgradeneeded=()=>Yo(r),r.onsuccess=()=>{const s=r.result;if(null==t){const t=s.transaction(jo,"readonly"),r=t.objectStore(jo).get(this.modelPath);r.onsuccess=()=>{if(null==r.result)return s.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(r.result.modelArtifacts)},r.onerror=e=>(s.close(),n(r.error)),t.oncomplete=()=>s.close()}else{t.weightData=Ja.join(t.weightData);const r=zo(t),a=s.transaction(Ko,"readwrite");let o,i,l=a.objectStore(Ko);try{o=l.put({modelPath:this.modelPath,modelArtifactsInfo:r})}catch(e){return n(e)}o.onsuccess=()=>{i=s.transaction(jo,"readwrite");const o=i.objectStore(jo);let u;try{u=o.put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:r})}catch(e){return n(e)}u.onsuccess=()=>e({modelArtifactsInfo:r}),u.onerror=e=>{l=a.objectStore(Ko);const t=l.delete(this.modelPath);t.onsuccess=()=>(s.close(),n(u.error)),t.onerror=e=>(s.close(),n(u.error))}},o.onerror=e=>(s.close(),n(o.error)),a.oncomplete=()=>{null==i?s.close():i.oncomplete=()=>s.close()}}},r.onerror=e=>n(r.error)}))}}Xo.URL_SCHEME="indexeddb://";const Zo=e=>{return Ye().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Xo.URL_SCHEME)?(t=e.slice(Xo.URL_SCHEME.length),new Xo(t)):null;var t};Bo.registerSaveRouter(Zo),Bo.registerLoadRouter(Zo);class Qo{constructor(){this.indexedDB=qo()}async listModels(){return new Promise(((e,t)=>{const n=this.indexedDB.open(Ho,1);n.onupgradeneeded=()=>Yo(n),n.onsuccess=()=>{const r=n.result,s=r.transaction(Ko,"readonly"),a=s.objectStore(Ko).getAll();a.onsuccess=()=>{const t={};for(const e of a.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},a.onerror=e=>(r.close(),t(a.error)),s.oncomplete=()=>r.close()},n.onerror=e=>t(n.error)}))}async removeModel(e){var t;return e=(t=e).startsWith(Xo.URL_SCHEME)?t.slice(Xo.URL_SCHEME.length):t,new Promise(((t,n)=>{const r=this.indexedDB.open(Ho,1);r.onupgradeneeded=()=>Yo(r),r.onsuccess=()=>{const s=r.result,a=s.transaction(Ko,"readwrite"),o=a.objectStore(Ko),i=o.get(e);let l;i.onsuccess=()=>{if(null==i.result)return s.close(),n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const r=o.delete(e),a=()=>{l=s.transaction(jo,"readwrite");const r=l.objectStore(jo).delete(e);r.onsuccess=()=>t(i.result.modelArtifactsInfo),r.onerror=e=>n(i.error)};r.onsuccess=a,r.onerror=e=>(a(),s.close(),n(i.error))}},i.onerror=e=>(s.close(),n(i.error)),a.oncomplete=()=>{null==l?s.close():l.oncomplete=()=>s.close()}},r.onerror=e=>n(r.error)}))}}const Jo="/",ei="tensorflowjs_models",ti="info",ni="model_topology",ri="weight_specs",si="weight_data",ai="model_metadata";function oi(e){return{info:[ei,e,ti].join(Jo),topology:[ei,e,ni].join(Jo),weightSpecs:[ei,e,ri].join(Jo),weightData:[ei,e,si].join(Jo),modelMetadata:[ei,e,ai].join(Jo)}}function ii(e){for(const t of Object.values(e))window.localStorage.removeItem(t)}function li(e){const t=e.split(Jo);if(t.length<3)throw new Error(`Invalid key format: ${e}`);return t.slice(1,t.length-1).join(Jo)}class ui{constructor(e){if(!Ye().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=oi(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const t=JSON.stringify(e.modelTopology),n=JSON.stringify(e.weightSpecs),r=zo(e),s=Ja.join(e.weightData);try{this.LS.setItem(this.keys.info,JSON.stringify(r)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(e){if(_o)return Buffer.from(e).toString("base64");const t=new Uint8Array(e);let n="";for(let e=0,r=t.length;e<r;e++)n+=String.fromCharCode(t[e]);return btoa(n)}(s));const a={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:null!=e.signature?e.signature:void 0,userDefinedMetadata:null!=e.userDefinedMetadata?e.userDefinedMetadata:void 0,modelInitializer:null!=e.modelInitializer?e.modelInitializer:void 0,initializerSignature:null!=e.initializerSignature?e.initializerSignature:void 0,trainingConfig:null!=e.trainingConfig?e.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(a)),{modelArtifactsInfo:r}}catch(e){throw ii(this.keys),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${r.modelTopologyBytes}, weightSpecsBytes=${r.weightSpecsBytes}, weightDataBytes=${r.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;const r=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==r)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=r;const s=this.LS.getItem(this.keys.modelMetadata);if(null!=s){const e=JSON.parse(s);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer),null!=e.initializerSignature&&(t.initializerSignature=e.initializerSignature),null!=e.trainingConfig&&(t.trainingConfig=e.trainingConfig)}const a=this.LS.getItem(this.keys.weightData);if(null==a)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=function(e){if(_o){const t=Buffer.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}const t=atob(e),n=new Uint8Array(t.length);for(let e=0;e<t.length;++e)n.set([t.charCodeAt(e)],e);return n.buffer}(a),t}}ui.URL_SCHEME="localstorage://";const ci=e=>{return Ye().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(ui.URL_SCHEME)?(t=e.slice(ui.URL_SCHEME.length),new ui(t)):null;var t};Bo.registerSaveRouter(ci),Bo.registerLoadRouter(ci);class pi{constructor(){oe(Ye().getBool("IS_BROWSER"),(()=>"Current environment is not a web browser")),oe("undefined"==typeof window||void 0!==window.localStorage,(()=>"Current browser does not appear to support localStorage")),this.LS=window.localStorage}async listModels(){const e={},t=ei+Jo,n=Jo+ti;for(let r=0;r<this.LS.length;++r){const s=this.LS.key(r);s.startsWith(t)&&s.endsWith(n)&&(e[li(s)]=JSON.parse(this.LS.getItem(s)))}return e}async removeModel(e){var t;const n=oi(e=(t=e).startsWith(ui.URL_SCHEME)?t.slice(ui.URL_SCHEME.length):t);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${e}'`);const r=JSON.parse(this.LS.getItem(n.info));return ii(n),r}}const hi="://";class di{constructor(){this.managers={}}static getInstance(){return null==di.instance&&(di.instance=new di),di.instance}static registerManager(e,t){oe(null!=e,(()=>"scheme must not be undefined or null.")),e.endsWith(hi)&&(e=e.slice(0,e.indexOf(hi))),oe(e.length>0,(()=>"scheme must not be an empty string."));const n=di.getInstance();oe(null==n.managers[e],(()=>`A model store manager is already registered for scheme '${e}'.`)),n.managers[e]=t}static getManager(e){const t=di.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(di.getInstance().managers)}}function fi(e){if(-1===e.indexOf(hi))throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${di.getSchemes().join(",")}`);return{scheme:e.split(hi)[0],path:e.split(hi)[1]}}async function mi(e,t,n=!1){oe(e!==t,(()=>`Old path and new path are the same: '${e}'`));const r=Bo.getLoadHandlers(e);oe(r.length>0,(()=>`Copying failed because no load handler is found for source URL ${e}.`)),oe(r.length<2,(()=>`Copying failed because more than one (${r.length}) load handlers for source URL ${e}.`));const s=r[0],a=Bo.getSaveHandlers(t);oe(a.length>0,(()=>`Copying failed because no save handler is found for destination URL ${t}.`)),oe(a.length<2,(()=>`Copying failed because more than one (${r.length}) save handlers for destination URL ${t}.`));const o=a[0],i=fi(e).scheme,l=fi(e).path,u=i===fi(e).scheme,c=await s.load();n&&u&&await di.getManager(i).removeModel(l);const p=await o.save(c);return n&&!u&&await di.getManager(i).removeModel(l),p.modelArtifactsInfo}async function gi(){const e=di.getSchemes(),t={};for(const n of e){const e=await di.getManager(n).listModels();for(const r in e)t[n+hi+r]=e[r]}return t}async function yi(e){const t=fi(e);return di.getManager(t.scheme).removeModel(t.path)}async function bi(e,t){return mi(e,t,!1)}async function xi(e,t){return mi(e,t,!0)}class wi{constructor(){this.messageName="setTimeoutCustom",this.functionRefs=[],this.handledMessageCount=0,this.hasEventListener=!1}fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}setTimeoutCustom(e,t){"undefined"!=typeof window&&Ye().getBool("USE_SETTIMEOUTCUSTOM")?(this.functionRefs.push(e),setTimeout((()=>{window.postMessage({name:this.messageName,index:this.functionRefs.length-1},"*")}),t),this.hasEventListener||(this.hasEventListener=!0,window.addEventListener("message",(e=>{e.source===window&&e.data.name===this.messageName&&(e.stopPropagation(),(0,this.functionRefs[e.data.index])(),this.handledMessageCount++,this.handledMessageCount===this.functionRefs.length&&(this.functionRefs=[],this.handledMessageCount=0))}),!0))):setTimeout(e,t)}isTypedArray(e){return Rs(e)}}if(Ye().get("IS_BROWSER")){Ye().setPlatform("browser",new wi);try{di.registerManager(ui.URL_SCHEME,new pi)}catch(e){}try{di.registerManager(Xo.URL_SCHEME,new Qo)}catch(e){}}let vi;function ki(e,t="float32",n){return t=t||"float32",We(e),new ua(e,t,n)}Ye().get("IS_NODE")&&!Ye().get("IS_BROWSER")&&Ye().setPlatform("node",new class{constructor(){this.util=n(6905),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=Ye().global.fetch?Ye().global.fetch(e,t):(null==vi&&(vi=n(7078)),vi(e,t))}now(){const e=process.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}isTypedArray(e){return this.util.types.isFloat32Array(e)||this.util.types.isInt32Array(e)||this.util.types.isUint8Array(e)||this.util.types.isUint8ClampedArray(e)}});const Ni=qa({cast_:function(e,t){const n=Ha(e,"x","cast");if(!Se(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const r={x:n},s={dtype:t};return Oa.runKernel(Tt,r,s)}}),Ti=qa({clone_:function(e){const t={x:Ha(e,"x","clone","string_or_numeric")};return Oa.runKernel(yn,t)}});function Si(e,t=!1){console.log(e.toString(t))}Fa(),pa={buffer:ki,cast:Ni,clone:Ti,print:Si};const Ii=qa({add_:function(e,t){let n=Ha(e,"a","add"),r=Ha(t,"b","add");[n,r]=Ia(n,r);const s={a:n,b:r};return Oa.runKernel(rt,s)}}),Ei=qa({floorDiv_:function(e,t){let n=Ha(e,"a","floorDiv"),r=Ha(t,"b","floorDiv");[n,r]=Ia(n,r);const s={a:n,b:r};return Oa.runKernel(pn,s)}}),$i=qa({div_:function(e,t){let n=Ha(e,"a","div"),r=Ha(t,"b","div");if([n,r]=Ia(n,r),"int32"===n.dtype&&"int32"===r.dtype)return Ei(n,r);const s={a:n,b:r};return Oa.runKernel(Zt,s,{})}}),Ci=qa({mul_:function(e,t){let n=Ha(e,"a","mul"),r=Ha(t,"b","mul");[n,r]=Ia(n,r);const s={a:n,b:r};return Oa.runKernel(Zn,s)}}),Ai=qa({sqrt_:function(e){const t={x:Ha(e,"x","sqrt","float32")};return Oa.runKernel(zr,t)}}),_i=qa({square_:function(e){const t=Ha(e,"x","square");return Oa.runKernel("Square",{x:t},{})}}),Ri=qa({zerosLike_:function(e){const t={x:Ha(e,"x","zerosLike")};return Oa.runKernel(hs,t)}});function Di(e){return oe(De(e),(()=>"The f passed in grad(f) must be a function")),(t,n)=>{const r=Ha(t,"x","tf.grad","string_or_numeric"),s=null!=n?Ha(n,"dy","tf.grad"):null;return Oa.tidy((()=>{const{value:t,grads:n}=Oa.gradients((()=>e(r)),[r],s);return null!=s&&ie(t.shape,s.shape,"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"),Pi(n),n[0]}))}}function Fi(e){return oe(De(e),(()=>"The f passed in grads(f) must be a function")),(t,n)=>{oe(Array.isArray(t),(()=>"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s"));const r=ja(t,"args","tf.grads","string_or_numeric"),s=null!=n?Ha(n,"dy","tf.grads"):null;return Oa.tidy((()=>{const{value:t,grads:n}=Oa.gradients((()=>e(...r)),r,s);return null!=s&&ie(t.shape,s.shape,"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),Pi(n),n}))}}function Oi(e){return oe(De(e),(()=>"The f passed in valueAndGrad(f) must be a function")),(t,n)=>{oe(t instanceof da,(()=>"The x passed in valueAndGrad(f)(x) must be a tensor")),oe(null==n||n instanceof da,(()=>"The dy passed in valueAndGrad(f)(x, dy) must be a tensor"));const{grads:r,value:s}=Oa.gradients((()=>e(t)),[t],n);return Pi(r),{grad:r[0],value:s}}}function Mi(e){return oe(De(e),(()=>"The f passed in valueAndGrads(f) must be a function")),(t,n)=>{oe(Array.isArray(t)&&t.every((e=>e instanceof da)),(()=>"The args passed in valueAndGrads(f)(args) must be array of tensors")),oe(null==n||n instanceof da,(()=>"The dy passed in valueAndGrads(f)(args, dy) must be a tensor"));const r=Oa.gradients((()=>e(...t)),t,n);return null!=n&&ie(r.value.shape,n.shape,"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),Pi(r.grads),r}}function Li(e,t){oe(De(e),(()=>"The f passed in variableGrads(f) must be a function")),oe(null==t||Array.isArray(t)&&t.every((e=>e instanceof ma)),(()=>"The varList passed in variableGrads(f, varList) must be an array of variables"));const n=null!=t;if(!n){t=[];for(const e in Oa.registeredVariables)t.push(Oa.registeredVariables[e])}const r=n?t.filter((e=>!e.trainable)):null,s=t.length;t=t.filter((e=>e.trainable)),oe(t.length>0,(()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${s} variables is trainable.`));const{value:a,grads:o}=Oa.gradients(e,t,null,!0);oe(o.some((e=>null!=e)),(()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().")),oe(0===a.rank,(()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${a.rank} tensor`));const i={};return t.forEach(((e,t)=>{null!=o[t]&&(i[e.name]=o[t])})),null!=r&&r.forEach((e=>i[e.name]=null)),{value:a,grads:i}}function zi(e){return Oa.customGrad(e)}function Pi(e){if(e.filter((e=>null==e)).length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.")}function Bi(e,t){if((Js(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&Js(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return Xa(e,[],[],t)}const Vi=new Map,Wi=new Map;class Ui{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}}class Gi{constructor(){this.classNameMap={}}static getMap(){return null==Gi.instance&&(Gi.instance=new Gi),Gi.instance}static register(e){Gi.getMap().classNameMap[e.className]=[e,e.fromConfig]}}function Hi(e,t,n){oe(null!=e.className,(()=>"Class being registered does not have the static className property defined.")),oe("string"==typeof e.className,(()=>"className is required to be a string, but got type "+typeof e.className)),oe(e.className.length>0,(()=>"Class being registered has an empty-string as its className, which is disallowed.")),void 0===t&&(t="Custom"),void 0===n&&(n=e.className);const r=t+">"+n;return Gi.register(e),Vi.set(r,e),Wi.set(e,r),e}function ji(e){return Wi.has(e)?Wi.get(e):e.className}class Ki extends Ui{minimize(e,t=!1,n){const{value:r,grads:s}=this.computeGradients(e,n);if(null!=n){const e=n.map((e=>({name:e.name,tensor:s[e.name]})));this.applyGradients(e)}else this.applyGradients(s);return uo(s),t?r:(r.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return Li(e,t)}dispose(){null!=this.iterations_&&uo(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:Bi(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}}Object.defineProperty(Ki,Symbol.hasInstance,{value:e=>null!=e.minimize&&null!=e.computeGradients&&null!=e.applyGradients});class qi extends Ki{static get className(){return"Adadelta"}constructor(e,t,n=null){super(),this.learningRate=e,this.rho=t,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=Oa.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=Oa.registeredVariables[t],s=!1;null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:`${t}/accum_grad`,variable:lo((()=>Ri(r).variable(s)))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:`${t}/accum_var`,variable:lo((()=>Ri(r).variable(s)))});const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const o=this.accumulatedGrads[n].variable,i=this.accumulatedUpdates[n].variable;lo((()=>{const e=Ii(Ci(o,this.rho),Ci(_i(a),1-this.rho)),t=Ci($i(Ai(Ii(i,this.epsilon)),Ai(Ii(o,this.epsilon))),a),n=Ii(Ci(i,this.rho),Ci(_i(t),1-this.rho));o.assign(e),i.assign(n);const s=Ii(Ci(t,-this.learningRate),r);r.assign(s)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(uo(this.accumulatedGrads.map((e=>e.variable))),uo(this.accumulatedUpdates.map((e=>e.variable))))}async getWeights(){const e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){const t=(e=await this.extractIterations(e)).length/2,n=!1;this.accumulatedGrads=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.accumulatedUpdates=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)})))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}}function Yi(e,t,n){We(e);const r={shape:e,value:t,dtype:n=n||Re(t)};return Oa.runKernel(ln,{},r)}class Xi extends Ki{static get className(){return"Adagrad"}constructor(e,t=.1){super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=Oa.registeredVariables[t];if(null==this.accumulatedGrads[n]){const e=!1;this.accumulatedGrads[n]={originalName:`${t}/accumulator`,variable:lo((()=>Yi(r.shape,this.initialAccumulatorValue).variable(e)))}}const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const a=this.accumulatedGrads[n].variable;lo((()=>{const e=Ii(a,_i(s));a.assign(e);const t=Ii(Ci($i(s,Ai(Ii(e,Oa.backend.epsilon()))),-this.learningRate),r);r.assign(t)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&uo(this.accumulatedGrads.map((e=>e.variable)))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),this.accumulatedGrads=e.map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}}const Zi=qa({pow_:function(e,t){let n=Ha(e,"base","pow"),r=Ha(t,"exp","pow");[n,r]=Ia(n,r);const s={a:n,b:r};return Oa.runKernel(lr,s)}}),Qi=qa({sub_:function(e,t){let n=Ha(e,"a","sub"),r=Ha(t,"b","sub");[n,r]=Ia(n,r);const s={a:n,b:r};return Oa.runKernel(ts,s)}});class Ji extends Ki{static get className(){return"Adam"}constructor(e,t,n,r=null){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=r,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],lo((()=>{this.accBeta1=Bi(t).variable(),this.accBeta2=Bi(n).variable()})),null==r&&(this.epsilon=Oa.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);lo((()=>{const n=Qi(1,this.accBeta1),r=Qi(1,this.accBeta2);t.forEach(((t,s)=>{const a=Oa.registeredVariables[t],o=!1;null==this.accumulatedFirstMoment[s]&&(this.accumulatedFirstMoment[s]={originalName:`${t}/m`,variable:lo((()=>Ri(a).variable(o)))}),null==this.accumulatedSecondMoment[s]&&(this.accumulatedSecondMoment[s]={originalName:`${t}/v`,variable:lo((()=>Ri(a).variable(o)))});const i=Array.isArray(e)?e[s].tensor:e[t];if(null==i)return;const l=this.accumulatedFirstMoment[s].variable,u=this.accumulatedSecondMoment[s].variable,c=Ii(Ci(l,this.beta1),Ci(i,1-this.beta1)),p=Ii(Ci(u,this.beta2),Ci(_i(i),1-this.beta2)),h=$i(c,n),d=$i(p,r);l.assign(c),u.assign(p);const f=Ii(Ci($i(h,Ii(Ai(d),this.epsilon)),-this.learningRate),a);a.assign(f)})),this.accBeta1.assign(Ci(this.accBeta1,this.beta1)),this.accBeta2.assign(Ci(this.accBeta2,this.beta2))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&uo(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedSecondMoment&&uo(this.accumulatedSecondMoment.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),lo((()=>{this.accBeta1.assign(Zi(this.beta1,this.iterations_+1)),this.accBeta2.assign(Zi(this.beta2,this.iterations_+1))}));const t=e.length/2,n=!1;this.accumulatedFirstMoment=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.accumulatedSecondMoment=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)})))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}}const el=qa({abs_:function(e){const t=Ha(e,"x","abs");if("complex64"===t.dtype){const e={x:t};return Oa.runKernel($t,e)}{const e={x:t};return Oa.runKernel(et,e)}}});function tl(e,t){const n=e.length,r=[];for(let s=0;s<n;s++){const a=n-1-s,o=e[a]||1;(t[t.length-1-s]||1)>1&&1===o&&r.unshift(a)}return r}function nl(e,t){const n=[];for(let r=0;r<t.length;r++){const s=e[e.length-r-1],a=t.length-r-1,o=t[a];(null==s||1===s&&o>1)&&n.unshift(a)}return n}function rl(e,t){const n=Math.max(e.length,t.length),r=new Array(n);for(let s=0;s<n;s++){let a=e[e.length-s-1];null==a&&(a=1);let o=t[t.length-s-1];if(null==o&&(o=1),1===a)r[n-s-1]=o;else if(1===o)r[n-s-1]=a;else{if(a!==o)throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`);r[n-s-1]=a}}return r}const sl=qa({maximum_:function(e,t){let n=Ha(e,"a","maximum"),r=Ha(t,"b","maximum");[n,r]=Ia(n,r),"bool"===n.dtype&&(n=Ni(n,"int32"),r=Ni(r,"int32")),rl(n.shape,r.shape);const s={a:n,b:r};return Oa.runKernel(Pn,s)}});class al extends Ki{static get className(){return"Adamax"}constructor(e,t,n,r=null,s=0){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=r,this.decay=s,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],lo((()=>{this.iteration=Bi(0).variable(),this.accBeta1=Bi(t).variable()})),null==r&&(this.epsilon=Oa.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);lo((()=>{const n=Qi(1,this.accBeta1),r=$i(-this.learningRate,Ii(Ci(this.iteration,this.decay),1));t.forEach(((t,s)=>{const a=Oa.registeredVariables[t],o=!1;null==this.accumulatedFirstMoment[s]&&(this.accumulatedFirstMoment[s]={originalName:`${t}/m`,variable:Ri(a).variable(o)}),null==this.accumulatedWeightedInfNorm[s]&&(this.accumulatedWeightedInfNorm[s]={originalName:`${t}/v`,variable:Ri(a).variable(o)});const i=Array.isArray(e)?e[s].tensor:e[t];if(null==i)return;const l=this.accumulatedFirstMoment[s].variable,u=this.accumulatedWeightedInfNorm[s].variable,c=Ii(Ci(l,this.beta1),Ci(i,1-this.beta1)),p=Ci(u,this.beta2),h=el(i),d=sl(p,h);l.assign(c),u.assign(d);const f=Ii(Ci($i(r,n),$i(c,Ii(d,this.epsilon))),a);a.assign(f)})),this.iteration.assign(Ii(this.iteration,1)),this.accBeta1.assign(Ci(this.accBeta1,this.beta1))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&uo(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedWeightedInfNorm&&uo(this.accumulatedWeightedInfNorm.map((e=>e.variable)))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}}class ol extends Ki{static get className(){return"SGD"}constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const s=Oa.registeredVariables[t];lo((()=>{const e=Ii(Ci(this.c,r),s);s.assign(e)}))})),this.incrementIterations()}setLearningRate(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=co(Bi(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(0!==(e=await this.extractIterations(e)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}}class il extends ol{static get className(){return"Momentum"}constructor(e,t,n=!1){super(e),this.learningRate=e,this.momentum=t,this.useNesterov=n,this.accumulations=[],this.m=Bi(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=Oa.registeredVariables[t];if(null==this.accumulations[n]){const e=!1;this.accumulations[n]={originalName:`${t}/momentum`,variable:lo((()=>Ri(r).variable(e)))}}const s=this.accumulations[n].variable,a=Array.isArray(e)?e[n].tensor:e[t];null!=a&&lo((()=>{let e;const t=Ii(Ci(this.m,s),a);e=this.useNesterov?Ii(Ci(this.c,Ii(a,Ci(t,this.m))),r):Ii(Ci(this.c,t),r),s.assign(t),r.assign(e)}))})),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&uo(this.accumulations.map((e=>e.variable)))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),this.accumulations=e.map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}}class ll extends Ki{static get className(){return"RMSProp"}constructor(e,t=.9,n=0,r=null,s=!1){if(super(),this.learningRate=e,this.decay=t,this.momentum=n,this.epsilon=r,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=s,null==r&&(this.epsilon=Oa.backend.epsilon()),null==e)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=Oa.registeredVariables[t],s=!1;null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:`${t}/rms`,variable:lo((()=>Ri(r).variable(s)))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:`${t}/momentum`,variable:lo((()=>Ri(r).variable(s)))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:`${t}/mg`,variable:lo((()=>Ri(r).variable(s)))});const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const o=this.accumulatedMeanSquares[n].variable,i=this.accumulatedMoments[n].variable;lo((()=>{const e=Ii(Ci(o,this.decay),Ci(_i(a),1-this.decay));if(this.centered){const t=this.accumulatedMeanGrads[n].variable,s=Ii(Ci(t,this.decay),Ci(a,1-this.decay)),l=$i(Ci(a,this.learningRate),Ai(Qi(e,Ii(_i(s),this.epsilon)))),u=Ii(Ci(i,this.momentum),l);o.assign(e),t.assign(s),i.assign(u);const c=Qi(r,u);r.assign(c)}else{const e=Ii(Ci(o,this.decay),Ci(_i(a),1-this.decay)),t=Ii(Ci(i,this.momentum),$i(Ci(a,this.learningRate),Ai(Ii(e,this.epsilon))));o.assign(e),i.assign(t);const n=Qi(r,t);r.assign(n)}}))})),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&uo(this.accumulatedMeanSquares.map((e=>e.variable))),null!=this.accumulatedMeanGrads&&this.centered&&uo(this.accumulatedMeanGrads.map((e=>e.variable))),null!=this.accumulatedMoments&&uo(this.accumulatedMoments.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);const t=this.centered?e.length/3:e.length/2,n=!1;this.accumulatedMeanSquares=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.accumulatedMoments=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.centered&&(this.accumulatedMeanGrads=e.slice(2*t,3*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}}const ul=[qi,Xi,Ji,al,il,ll,ol];function cl(e){return new Promise((e=>setTimeout(e))).then(e)}class pl{constructor(e){if(!Ye().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(pl.URL_SCHEME)&&(e=e.slice(pl.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelJsonFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=Ja.join(e.weightData),n=window.URL.createObjectURL(new Blob([t],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const t=Oo(e,[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}]),r=window.URL.createObjectURL(new Blob([JSON.stringify(t)],{type:"application/json"})),s=null==this.modelJsonAnchor?document.createElement("a"):this.modelJsonAnchor;if(s.download=this.modelJsonFileName,s.href=r,await cl((()=>s.dispatchEvent(new MouseEvent("click")))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=n,await cl((()=>e.dispatchEvent(new MouseEvent("click"))))}return{modelArtifactsInfo:zo(e)}}}}pl.URL_SCHEME="downloads://";class hl{constructor(e){if(null==e||e.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);this.jsonFile=e[0],this.weightsFiles=e.slice(1)}async load(){return new Promise(((e,t)=>{const n=new FileReader;n.onload=n=>{const r=JSON.parse(n.target.result),s=r.modelTopology;if(null==s)return void t(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));if(null==r.weightsManifest)return void t(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));if(0===this.weightsFiles.length)return void e({modelTopology:s});const a=Lo(r,(e=>this.loadWeights(e)));e(a)},n.onerror=e=>t(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),n.readAsText(this.jsonFile)}))}loadWeights(e){const t=[],n=[];for(const r of e)t.push(...r.weights),n.push(...r.paths);const r=this.checkManifestAndWeightFiles(e),s=n.map((e=>this.loadWeightsFile(e,r[e])));return Promise.all(s).then((e=>[t,e]))}loadWeightsFile(e,t){return new Promise(((n,r)=>{const s=new FileReader;s.onload=e=>{const t=e.target.result;n(t)},s.onerror=t=>r(`Failed to weights data from file of path '${e}'.`),s.readAsArrayBuffer(t)}))}checkManifestAndWeightFiles(e){const t=[],n=this.weightsFiles.map((e=>Fo(e.name))),r={};for(const s of e)s.paths.forEach((e=>{const s=Fo(e);if(-1!==t.indexOf(s))throw new Error(`Duplicate file basename found in weights manifest: '${s}'`);if(t.push(s),-1===n.indexOf(s))throw new Error(`Weight file with basename '${s}' is not provided.`);r[e]=this.weightsFiles[n.indexOf(s)]}));if(t.length!==this.weightsFiles.length)throw new Error(`Mismatch in the number of files in weights manifest (${t.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return r}}function dl(e){return new hl(e)}function fl(e,t,n,r){!function(e){oe(null!=e&&Array.isArray(e)&&e.length>0,(()=>"promises must be a none empty array"))}(e),function(e,t){oe(e>=0&&e<=1,(()=>`Progress fraction must be in range [0, 1], but got startFraction ${e}`)),oe(t>=0&&t<=1,(()=>`Progress fraction must be in range [0, 1], but got endFraction ${t}`)),oe(t>=e,(()=>`startFraction must be no more than endFraction, but got startFraction ${e} and endFraction ${t}`))}(n=null==n?0:n,r=null==r?1:r);let s=0;return Promise.all(e.map((a=>(a.then((a=>{const o=n+ ++s/e.length*(r-n);return t(o),a})),a))))}async function ml(e,t){null==t&&(t={});const n=null==t.fetchFunc?Ye().platform.fetch:t.fetchFunc,r=e.map((e=>n(e,t.requestInit,{isBinary:!0}))),s=(null==t.onProgress?await Promise.all(r):await fl(r,t.onProgress,0,.5)).map((e=>e.arrayBuffer()));return null==t.onProgress?await Promise.all(s):await fl(s,t.onProgress,.5,1)}async function gl(e,t="",n,r){return yl((e=>ml(e,{requestInit:r})))(e,t,n)}function yl(e){return async(t,n="",r)=>{const s=t.map((()=>!1)),a={},o=null!=r?r.map((()=>!1)):[],i=[];if(t.forEach(((e,t)=>{let n=0;e.weights.forEach((e=>{const l="quantization"in e?e.quantization.dtype:e.dtype,u=Qa[l]*ue(e.shape),c=()=>{s[t]=!0,null==a[t]&&(a[t]=[]),a[t].push({manifestEntry:e,groupOffset:n,sizeBytes:u})};null!=r?r.forEach(((t,n)=>{t===e.name&&(c(),o[n]=!0)})):c(),i.push(e.name),n+=u}))})),!o.every((e=>e))){const e=r.filter(((e,t)=>!o[t]));throw new Error(`Could not find weights in manifest with names: ${e.join(", ")}. \nManifest JSON has weights with names: ${i.join(", ")}.`)}const l=s.reduce(((e,t,n)=>(t&&e.push(n),e)),[]),u=[];l.forEach((e=>{t[e].paths.forEach((e=>{const t=n+(n.endsWith("/")?"":"/")+e;u.push(t)}))}));const c=await e(u),p={};let h=0;return l.forEach((e=>{const n=t[e].paths.length,r=new Ja(c.slice(h,h+n));a[e].forEach((e=>{const t=To(r.slice(e.groupOffset,e.groupOffset+e.sizeBytes),[e.manifestEntry]);for(const e in t)p[e]=t[e]})),h+=n})),p}}Bo.registerSaveRouter((e=>Ye().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(pl.URL_SCHEME)?function(e="model"){return new pl(e)}(e.slice(pl.URL_SCHEME.length)):null));class bl{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?(oe("function"==typeof t.fetchFunc,(()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)")),this.fetch=t.fetchFunc):this.fetch=Ye().platform.fetch,oe(null!=e&&e.length>0,(()=>"URL path for http must not be null, undefined or empty.")),Array.isArray(e)&&oe(2===e.length,(()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`)),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{},this.loadOptions=t}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const n=Oo(e,[{paths:["./model.weights.bin"],weights:e.weightSpecs}]);if(t.body.append("model.json",new Blob([JSON.stringify(n)],{type:"application/json"}),"model.json"),null!=e.weightData){const n=Ja.join(e.weightData);t.body.append("model.weights.bin",new Blob([n],{type:"application/octet-stream"}),"model.weights.bin")}const r=await this.fetch(this.path,t);if(r.ok)return{modelArtifactsInfo:zo(e),responses:[r]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${r.status}.`)}async loadModelJSON(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);let t;try{t=await e.json()}catch(e){let t=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?t+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":t+=" Please make sure the server is serving valid JSON for this request.",new Error(t)}const n=t.modelTopology,r=t.weightsManifest;if(null==n&&null==r)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return t}async load(){return this.loadOptions.streamWeights?this.loadStream():Lo(await this.loadModelJSON(),(e=>this.loadWeights(e)))}async loadStream(){const e=await this.loadModelJSON(),t=await this.getWeightUrls(e.weightsManifest),n=Po(e.weightsManifest);return Object.assign(Object.assign({},e),{weightSpecs:n,getWeightStream:()=>function(e,t){var n;const r=null==t.fetchFunc?Ye().platform.fetch:t.fetchFunc;let s,a=0;return null===(n=t.onProgress)||void 0===n||n.call(t,0),new ReadableStream({pull:async n=>{for(var o;a<e.length;){if(!s){const n=(await r(e[a],t.requestInit,{isBinary:!0})).body;s=n.getReader()}const{done:i,value:l}=await s.read();if(!i)return void n.enqueue(l);a++,s=void 0,null===(o=t.onProgress)||void 0===o||o.call(t,a/e.length)}n.close()}})}(t,this.loadOptions)})}async getWeightUrls(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[n,r]=function(e){const t=e.lastIndexOf("/"),n=e.lastIndexOf("?");return[e.substring(0,t)+"/",n>t?e.substring(n):""]}(t),s=this.weightPathPrefix||n,a=[],o=[];for(const t of e)for(const e of t.paths)null!=this.weightUrlConverter?o.push(this.weightUrlConverter(e)):a.push(s+e+r);return this.weightUrlConverter&&a.push(...await Promise.all(o)),a}async loadWeights(e){const t=await this.getWeightUrls(e);return[Po(e),await ml(t,this.loadOptions)]}}function xl(e){return null!=e.match(bl.URL_SCHEME_REGEX)}bl.URL_SCHEME_REGEX=/^https?:\/\//;const wl=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every((e=>xl(e))):xl(e),n)return vl(e,t)}return null};function vl(e,t){return new bl(e,t)}function kl(e,t){return vl(e,t)}Bo.registerSaveRouter(wl),Bo.registerLoadRouter(wl);class Nl{constructor(e){this.modelArtifacts=e}load(){return this.modelArtifacts}}class Tl{constructor(e){this.saveHandler=e}save(e){return this.saveHandler(e)}}class Sl{constructor(e){e.load&&(this.load=()=>Promise.resolve(e.load())),e.save&&(this.save=t=>Promise.resolve(e.save(t)))}}function Il(e,t,n,r){return new Sl(El(...arguments))}function El(e,t,n,r){return 1===arguments.length?null!=e.modelTopology||null!=e.weightSpecs?new Nl(e):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Nl({modelTopology:e})):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Nl({modelTopology:e,weightSpecs:t,weightData:n,trainingConfig:r}))}function $l(e){return new Tl(e)}function Cl(e){return new Tl(e)}const Al=qa({matMul_:function(e,t,n=!1,r=!1){let s=Ha(e,"a","matMul"),a=Ha(t,"b","matMul");[s,a]=Ia(s,a);const o={a:s,b:a},i={transposeA:n,transposeB:r};return Oa.runKernel(bt,o,i)}}),_l=qa({oneHot_:function(e,t,n=1,r=0,s="int32"){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const a={indices:Ha(e,"indices","oneHot","int32")},o={dtype:s,depth:t,onValue:n,offValue:r};return Oa.runKernel(sr,a,o)}}),Rl=qa({imag_:function(e){const t={input:Ha(e,"input","imag")};return Oa.runKernel(xn,t)}}),Dl=qa({neg_:function(e){const t={x:Ha(e,"x","neg")};return Oa.runKernel(Qn,t)}}),Fl=qa({real_:function(e){const t={input:Ha(e,"input","real")};return Oa.runKernel(mr,t)}}),Ol=qa({transpose_:function(e,t,n){const r=Ha(e,"x","transpose");if(null==t&&(t=r.shape.map(((e,t)=>t)).reverse()),oe(r.rank===t.length,(()=>`Error in transpose: rank of input ${r.rank} must match length of perm ${t}.`)),t.forEach((e=>{oe(e>=0&&e<r.rank,(()=>"All entries in 'perm' must be between 0 and "+(r.rank-1)+` but got ${t}`))})),r.rank<=1)return r.clone();const s={x:r},a={perm:t};return"complex64"===r.dtype?lo((()=>{let e=Fl(r),t=Rl(r);return e=Oa.runKernel(is,{x:e},a),t=Oa.runKernel(is,{x:t},a),n&&(t=Dl(t)),Ya(e,t)})):Oa.runKernel(is,s,a)}}),Ml=qa({confusionMatrix_:function(e,t,n){const r=Ha(e,"labels","confusionMatrix"),s=Ha(t,"predictions","confusionMatrix");oe(null==n||n>0&&Number.isInteger(n),(()=>`If provided, numClasses must be a positive integer, but got ${n}`)),oe(1===r.rank,(()=>`Expected the rank of labels to be 1, but got ${r.rank}`)),oe(1===s.rank,(()=>`Expected the rank of predictions to be 1, but got ${s.rank}`)),oe(r.shape[0]===s.shape[0],(()=>`Mismatch in the number of examples: ${r.shape[0]} vs. ${s.shape[0]}. Labels and predictions should have the same number of elements.`)),oe(n>0&&Number.isInteger(n),(()=>`numClasses is required to be a positive integer, but got ${n}`));const a=_l(Ni(r,"int32"),n),o=_l(Ni(s,"int32"),n),i=Ol(a),l=Al(i,o);return Ni(l,"int32")}});function Ll(e,t,n){if(le(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const r=Wa(e,n);if(3!==r.length&&1!==r.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return Xa(e,t,r,n)}let zl,Pl=!1;function Bl(e,t=3){if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==e)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,r=!1,s=!1,a=!1,o=!1,i=!1;if(e.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&e instanceof ImageData)r=!0;else if("undefined"!=typeof HTMLVideoElement&&e instanceof HTMLVideoElement)s=!0;else if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement)a=!0;else if(null!=e.getContext)o=!0;else{if(!("undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap))throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${e.constructor.name}`);i=!0}if(null!=Ns(fs,Oa.backendName)){const n={pixels:e},r={numChannels:t};return Oa.runKernel(fs,n,r)}const[l,u]=s?[e.videoWidth,e.videoHeight]:[e.width,e.height];let c,p;if(o)c=e.getContext("2d").getImageData(0,0,l,u).data;else if(r||n)c=e.data;else if(a||s||i){if(null==zl)if("undefined"==typeof document){if("undefined"==typeof OffscreenCanvas||"undefined"==typeof OffscreenCanvasRenderingContext2D)throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");zl=new OffscreenCanvas(1,1).getContext("2d")}else zl=document.createElement("canvas").getContext("2d",{willReadFrequently:!0});zl.canvas.width=l,zl.canvas.height=u,zl.drawImage(e,0,0,l,u),c=zl.getImageData(0,0,l,u).data}if(4===t)p=new Int32Array(c);else{const e=l*u;p=new Int32Array(e*t);for(let n=0;n<e;n++)for(let e=0;e<t;++e)p[n*t+e]=c[4*n+e]}return Ll(p,[u,l,t],"int32")}async function Vl(e,t=3){let n=null;if(Ye().getBool("WRAP_TO_IMAGEBITMAP")&&function(e){return"undefined"!=typeof window&&"undefined"!=typeof ImageBitmap&&window.hasOwnProperty("createImageBitmap")&&!(e instanceof ImageBitmap)&&function(e){return null!=e&&0!==e.width&&0!==e.height}(e)&&!function(e){return null!=e&&e.data instanceof Uint8Array}(e)}(e)){let t;try{t=await createImageBitmap(e,{premultiplyAlpha:"none"})}catch(e){t=null}n=null!=t&&t.width===e.width&&t.height===e.height?t:e}else n=e;return Bl(n,t)}function Wl(e){if(2!==e.rank&&3!==e.rank)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${e.rank}.`);const t=2===e.rank?1:e.shape[2];if(t>4||2===t)throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${t}`);if("float32"!==e.dtype&&"int32"!==e.dtype)throw new Error(`Unsupported type for toPixels: ${e.dtype}. Please use float32 or int32 tensors.`)}async function Ul(e,t){let n=Ha(e,"img","toPixels");if(!(e instanceof da)){const e=n;n=Ni(e,"int32"),e.dispose()}Wl(n);const[r,s]=n.shape.slice(0,2),a=2===n.rank?1:n.shape[2],o=await n.data(),i="float32"===n.dtype?255:1,l=new Uint8ClampedArray(s*r*4);for(let e=0;e<r*s;++e){const t=[0,0,0,255];for(let r=0;r<a;r++){const s=o[e*a+r];if("float32"===n.dtype){if(s<0||s>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${s}.`)}else if("int32"===n.dtype&&(s<0||s>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${s}.`);1===a?(t[0]=s*i,t[1]=s*i,t[2]=s*i):t[r]=s*i}const r=4*e;l[r+0]=Math.round(t[0]),l[r+1]=Math.round(t[1]),l[r+2]=Math.round(t[2]),l[r+3]=Math.round(t[3])}if(null!=t){Pl||null!=Ns(Xt,Oa.backendName)&&(console.warn("tf.browser.toPixels is not efficient to draw tensor on canvas. Please try tf.browser.draw instead."),Pl=!0),t.width=s,t.height=r;const e=t.getContext("2d"),n=new ImageData(l,s,r);e.putImageData(n,0,0)}return n!==e&&n.dispose(),l}function Gl(e,t,n){let r=Ha(e,"img","draw");if(!(e instanceof da)){const e=r;r=Ni(e,"int32"),e.dispose()}Wl(r),function(e){const t=(null==e?void 0:e.alpha)||1;if(t>1||t<0)throw new Error(`Alpha value ${t} is suppoed to be in range [0 - 1].`)}(null==n?void 0:n.imageOptions);const s={image:r},a={canvas:t,options:n};Oa.runKernel(Xt,s,a)}const Hl=qa({fromPixels_:Bl});function jl(e,t){const n=e.shape.length,r=t.shape.length;if(n<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`);if(r<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${r}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[r-1]>n)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[r-1]} vs. ${n}`);if(0===ue(e.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);const s=t.shape,a=s[s.length-1];let o=1;for(let e=0;e<s.length-1;++e)o*=s[e];const i=e.shape,l=s.slice();l.pop();let u=1;for(let e=a;e<n;++e)u*=i[e],l.push(i[e]);const c=[...Oe(e.shape).map((e=>e/u)),1].slice(0,a);return[l,o,u,c]}function Kl(e,t,n){const r=t.rank>1?t.shape[t.rank-1]:1,s=t.rank>1?t.rank-1:1,a=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${r}, and batchDim: ${s}.`;if(n.rank<s)throw new Error(a+` update.rank < ${s}. `);if(e.length<r+(n.rank-s))throw new Error(a+` Output shape length < ${r+(n.rank-s)}`);if(n.rank!==s+e.length-r)throw new Error(a+" update.rank != "+(s+e.length-r));for(let e=0;e<s;++e)if(n.shape[e]!==t.shape[e])throw new Error(a+` updates.shape[${e}] (${n.shape[e]}) != indices.shape[${e}] (${t.shape[e]}).`);for(let t=0;t<n.rank-s;++t)if(n.shape[t+s]!==e[t+r])throw new Error(a+` updates.shape[${t+s}] (${n.shape[t+s]}) != shape[${t+s}] (${e[t+s]})`)}function ql(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===e.size)throw new Error(`Updates specified for empty output. updates shape: ${e.shape}`)}Kl(n,t,e)}function Yl(e,t,n){const r=t.shape.length,s=r>1?t.shape[r-1]:1,a=n.length;let o=1;for(let e=s;e<a;++e)o*=n[e];const i=s<1?1:s;return{sliceRank:s,numUpdates:ue(t.shape)/i,sliceSize:o,strides:[...Oe(n.slice(0,s)),1],outputSize:ue(n)}}const Xl=-2,Zl=-1;function Ql(e,t,n){const r=e.shape.length;oe(r===t.length,(()=>`Error in slice${r}D: Length of begin ${t} must match the rank of the array (${r}).`)),oe(r===n.length,(()=>`Error in slice${r}D: Length of size ${n} must match the rank of the array (${r}).`));for(let s=0;s<r;++s)oe(t[s]+n[s]<=e.shape[s],(()=>`Error in slice${r}D: begin[${s}] + size[${s}] (${t[s]+n[s]}) would overflow input.shape[${s}] (${e.shape[s]})`))}function Jl(e){const t=[];let n=0;for(;e>0;)1&e&&t.push(n),e/=2,n++;return t}function eu(e,t,n){const r=[];for(let s=0;s<e.length;s++)r[s]=Math.ceil((t[s]-e[s])/n[s]);return r}function tu(e,t,n,r){const s=[...e];for(let e=s.length;e<r.length;e++)s.push(1);for(let e=0;e<n;e++)0===e?s[t]=1:(s.splice(t,0,1),s.pop());return s}function nu(e,t,n){return n<=e?n:n-(t-1)}function ru(e,t){const n=[];for(let r=0;r<e;r++)n.push(t+r);return n}function su(e,t,n,r,s,a,o,i,l){const u=e.length;let c=new Array(u),p=new Array(u),h=new Array(u);if(t.length&&n>0){const l=t[0],u=n+1;c=au(o,l,u,r,e),p=ou(i,l,u,s,e),h=tu(a,l,u,e)}else for(let t=0;t<u;t++)c[t]=lu(o,r,a,e,t,l),p[t]=uu(i,s,a,e,t,l),h[t]=iu(a,t,l);return{begin:c,end:p,strides:h}}function au(e,t,n,r,s){const a=[...s],o=ru(n,t);for(let s=0;s<a.length;s++)if(o.indexOf(s)>-1)a[s]=0;else{const o=nu(t,n,s);let i=r[o];e&1<<o&&(i=0),a[s]=i}return a}function ou(e,t,n,r,s){const a=[...s],o=ru(n,t);for(let s=0;s<a.length;s++)if(o.indexOf(s)>-1)a[s]=Number.MAX_SAFE_INTEGER;else{const o=nu(t,n,s);let i=r[o];e&1<<o&&(i=Number.MAX_SAFE_INTEGER),a[s]=i}for(let e=0;e<a.length;e++){const t=s[e];a[e]<0&&(a[e]+=t),a[e]=ee(0,a[e],s[e])}return a}function iu(e,t,n){let r=e[t];return(n&1<<t||null==r)&&(r=1),r}function lu(e,t,n,r,s,a){let o=t[s];const i=n[s]||1;(e&1<<s||a&1<<s||null==o)&&(o=i>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const l=r[s];return o<0&&(o+=l),o=ee(0,o,l-1),o}function uu(e,t,n,r,s,a){let o=t[s];const i=n[s]||1;(e&1<<s||a&1<<s||null==o)&&(o=i>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const l=r[s];return o<0&&(o+=l),o=i>0?ee(0,o,l):ee(-1,o,l-1),o}function cu(e,t,n){let r=n.length;for(let e=0;e<n.length;e++)if(n[e]>1){r=e;break}for(let s=r+1;s<n.length;s++)if(t[s]>0||n[s]!==e[s])return!1;return!0}function pu(e,t){let n=e.length>0?e[e.length-1]:1;for(let r=0;r<e.length-1;r++)n+=e[r]*t[r];return n}function hu(e,t,n){let r;const s=e.shape.length;let a;return r="number"==typeof t?[t,...new Array(s-1).fill(0)]:t.length<s?t.concat(new Array(s-t.length).fill(0)):t.slice(),r.forEach((e=>{oe(-1!==e,(()=>"slice() does not support negative begin indexing."))})),a=null==n?new Array(s).fill(-1):"number"==typeof n?[n,...new Array(s-1).fill(-1)]:n.length<s?n.concat(new Array(s-n.length).fill(-1)):n,a=a.map(((t,n)=>t>=0?t:(oe(-1===t,(()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${n}.`)),e.shape[n]-r[n]))),[r,a]}function du(e,t,n,r,s,a,o,i,l){let u;if(null==r?(u=new Array(t.length),u.fill(1)):u=r,null!=o&&o&o-1)throw new Error("Multiple ellipses in slice is not allowed.");let c=!1;const p={dims:u.length,numAddAxisAfterEllipsis:0,begin:t.slice(),end:n.slice(),strides:u.slice(),beginMask:s,endMask:a,ellipsisMask:o,newAxisMask:i,shrinkAxisMask:l};for(let e=0;e<p.dims;e++)c&&1<<e&i&&p.numAddAxisAfterEllipsis++,1<<e&o&&(c=!0);c||(p.ellipsisMask|=1<<p.dims,p.dims++);const h={dims:e.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};!function(e,t){t.beginMask=0,t.endMask=0,t.shrinkAxisMask=0;let n=0;t.beginValid=null!=e.begin,t.endValid=null!=e.end,t.begin=new Array(t.dims),t.end=new Array(t.dims),t.strides=new Array(t.dims),t.finalShapeGatherIndices=[],t.finalShapeGatherIndicesSparse=[],t.inputShapeGatherIndicesSparse=new Array(t.dims);for(let r=0;r<e.dims;r++)if(1<<r&e.ellipsisMask){const s=Math.min(t.dims-(e.dims-r)+1+e.numAddAxisAfterEllipsis,t.dims);for(;n<s;n++)t.begin[n]=0,t.end[n]=0,t.strides[n]=1,t.beginMask|=1<<n,t.endMask|=1<<n,t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(-1),t.inputShapeGatherIndicesSparse[n]=r}else if(1<<r&e.newAxisMask)t.finalShapeGatherIndices.push(Xl),t.finalShapeGatherIndicesSparse.push(-1);else{if(n===t.begin.length)throw Error(`Index out of range using input dim ${n}; input has only ${t.dims} dims, ${t.begin.length}.`);null!=e.begin&&(t.begin[n]=e.begin[r]),null!=e.end&&(t.end[n]=e.end[r]),t.strides[n]=e.strides[r],e.beginMask&1<<r&&(t.beginMask|=1<<n),e.endMask&1<<r&&(t.endMask|=1<<n),e.shrinkAxisMask&1<<r?(t.finalShapeGatherIndices.push(Zl),t.finalShapeGatherIndicesSparse.push(-1),t.shrinkAxisMask|=1<<n):(t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(r)),t.inputShapeGatherIndicesSparse[n]=r,n++}}(p,h);let d=!0,f=!0,m=!0;const g=[],y=[];for(let t=0;t<e.length;++t){if(0===h.strides[t])throw Error(`strides[${t}] must be non-zero`);const n=!!(h.shrinkAxisMask&1<<t),r=e[t];if(-1===r){g.push(n?1:-1);continue}const s=[h.beginMask&1<<t,h.endMask&1<<t],a=[h.strides[t]>0?0:-1,h.strides[t]>0?r:r-1];if(n&&h.strides[t]<=0)throw Error("only stride 1 allowed on non-range indexing.");m=m&&1===h.strides[t];const o=!!(h.beginMask&1<<t&&h.endMask&1<<t);if(h.beginValid&&h.endValid){if(n){const e=h.begin[t]<0?r+h.begin[t]:h.begin[t];if(h.begin[t]=e,h.end[t]=h.begin[t]+1,e<0||e>=r)throw Error(`slice index ${h.begin[t]} of dimension ${t} out of bounds.`)}else h.begin[t]=fu(h.begin[t],0,h.strides[t],r,s,a),h.end[t]=fu(h.end[t],1,h.strides[t],r,s,a);const e=1===h.strides[t]&&0===h.begin[t]&&h.end[t]===r;d=d&&e,f=f&&(0===t&&1===h.strides[t]||e)}else d=d&&1===h.strides[t]&&o,f=f&&(0===t&&1===h.strides[t]||o);let i,l=!1;if(h.beginValid&&h.endValid?(i=h.end[t]-h.begin[t],l=!0):n?(i=1,l=!0):o&&r>=0&&(i=h.strides[t]<0?-r:r,l=!0),l){let e;e=0===i||i<0!=h.strides[t]<0?0:Math.trunc(i/h.strides[t])+(i%h.strides[t]!=0?1:0),g.push(e)}else g.push(-1)}for(let e=0;e<h.finalShapeGatherIndices.length;++e){const t=h.finalShapeGatherIndices[e];t>=0?y.push(g[t]):t===Xl&&y.push(1)}return{finalShapeSparse:y.filter(((e,t)=>h.finalShapeGatherIndices[t]!==Xl)),finalShape:y,isIdentity:d,sliceDim0:f,isSimpleSlice:m,begin:h.begin,end:h.end,strides:h.strides}}function fu(e,t,n,r,s,a){if(s[t])return n>0?a[t]:a[t+1&1];{const t=e<0?r+e:e;return t<a[0]?a[0]:t>a[1]?a[1]:t}}const mu=.001,gu=.1;function yu(e,t,n){return null==n&&(n=bu()),xu(e,t,((e,t)=>Nu(e,t,n)))}function bu(){return 32===Oa.backend.floatPrecision()?mu:gu}function xu(e,t,n){let r=!0;if((Js(e)||Js(t))&&(r=!1),Js(e)&&Js(t)&&(r=!0),r){const n=e.constructor.name,r=t.constructor.name;if(n!==r)throw new Error(`Arrays are of different type. Actual: ${n}. Expected: ${r}`)}if(Array.isArray(e)&&Array.isArray(t)){const n=Wa(e),r=Wa(t);if(!he(n,r))throw new Error(`Arrays have different shapes. Actual: [${n}]. Expected: [${r}]`)}const s=Js(e)?e:ea(e),a=Js(t)?t:ea(t);if(s.length!==a.length)throw new Error(`Arrays have different lengths actual: ${s.length} vs expected: ${a.length}.\nActual:   ${s}.\nExpected: ${a}.`);for(let e=0;e<a.length;++e){const t=s[e],r=a[e];if(!n(t,r))throw new Error(`Arrays differ: actual[${e}] = ${t}, expected[${e}] = ${r}.\nActual:   ${s}.\nExpected: ${a}.`)}"undefined"!=typeof expect&&expect().nothing()}function wu(e,t){e().then((()=>t.fail()),(()=>t())),"undefined"!=typeof expect&&expect().nothing()}function vu(e,t){const n="string"==typeof t||"number"==typeof t||"boolean"==typeof t?[t]:t;return Ce(e)||Ce(e[0])||Ce(t)||Ce(t[0])?xu(e,n,((e,t)=>e==t)):xu(e,t,((e,t)=>Nu(e,t,0)))}function ku(e,t,n){if(null==n&&(n=bu()),!Nu(e,t,n))throw new Error(`Numbers differ: actual === ${e}, expected === ${t}`);"undefined"!=typeof expect&&expect().nothing()}function Nu(e,t,n){return!isFinite(e)&&!isFinite(t)||!(isNaN(e)||isNaN(t)||Math.abs(e-t)>n)}function Tu(e,t,n){for(let r=0;r<e.length;r++)if(e[r]<t||e[r]>n)throw new Error(`Value out of range:${e[r]} low: ${t}, high: ${n}`)}function Su(e,t){const n=new Float32Array(e),r=new Float32Array(t);if(n.length!==r.length)throw new Error(`Expected ArrayBuffer to be of length ${r.length}, but it was ${n.length}`);for(let e=0;e<r.length;e++)if(n[e]!==r[e])throw new Error(`Expected ArrayBuffer value at ${e} to be ${r[e]} but got ${n[e]} instead`)}function Iu(e){for(let t=0;t<e.length;t++){const n=e[t];Array.isArray(n)?Iu(n):e[t]=Zs(n)}return e}function Eu(e){const t=document.createElement("video");return"playsInline"in t&&(t.playsInline=!0),t.muted=!0,t.loop=!0,t.style.position="fixed",t.style.left="0px",t.style.top="0px",t.preload="auto",t.appendChild(e),new Promise((e=>{t.addEventListener("loadeddata",(n=>e(t))),t.load()}))}async function $u(e){await e.play(),"requestVideoFrameCallback"in e&&await new Promise((t=>{e.requestVideoFrameCallback(t)}))}const Cu="4.22.0";class Au{static sgd(e){return new ol(e)}static momentum(e,t,n=!1){return new il(e,t,n)}static rmsprop(e,t=.9,n=0,r=null,s=!1){return new ll(e,t,n,r,s)}static adam(e=.001,t=.9,n=.999,r=null){return new Ji(e,t,n,r)}static adadelta(e=.001,t=.95,n=null){return new qi(e,t,n)}static adamax(e=.002,t=.9,n=.999,r=null,s=0){return new al(e,t,n,r,s)}static adagrad(e,t=.1){return new Xi(e,t)}}const _u=qa({acos_:function(e){const t={x:Ha(e,"x","acos")};return Oa.runKernel(tt,t)}}),Ru=qa({acosh_:function(e){const t={x:Ha(e,"x","acosh")};return Oa.runKernel(nt,t)}}),Du=qa({addN_:function(e){oe(Array.isArray(e),(()=>"The argument passed to tf.addN() must be a list of tensors")),oe(e.length>=1,(()=>`Must pass at least one tensor to tf.addN(), but got ${e.length}`));const t=e.map(((e,t)=>Ha(e,`tensors${t}`,"addN"))),n=t[0];t.forEach((e=>{if(e.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),t.forEach((e=>{if(!he(e.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));const r=t;return Oa.runKernel(st,r)}}),Fu=qa({all_:function(e,t=null,n=!1){const r={x:Ha(e,"x","all","bool")},s={axis:t,keepDims:n};return Oa.runKernel(at,r,s)}}),Ou=qa({any_:function(e,t=null,n=!1){const r={x:Ha(e,"x","any","bool")},s={axis:t,keepDims:n};return Oa.runKernel(ot,r,s)}}),Mu=qa({argMax_:function(e,t=0){const n={x:Ha(e,"x","argMax")},r={axis:t};return Oa.runKernel(it,n,r)}}),Lu=qa({argMin_:function(e,t=0){const n={x:Ha(e,"x","argMin")},r={axis:t};return Oa.runKernel(lt,n,r)}}),zu=qa({asin_:function(e){const t={x:Ha(e,"x","asin")};return Oa.runKernel(ut,t)}}),Pu=qa({asinh_:function(e){const t={x:Ha(e,"x","asinh")};return Oa.runKernel(ct,t)}}),Bu=qa({atan_:function(e){const t={x:Ha(e,"x","atan")};return Oa.runKernel(pt,t)}}),Vu=qa({atan2_:function(e,t){let n=Ha(e,"a","atan2"),r=Ha(t,"b","atan2");[n,r]=Ia(n,r);const s={a:n,b:r};return Oa.runKernel(dt,s)}}),Wu=qa({atanh_:function(e){const t={x:Ha(e,"x","atanh")};return Oa.runKernel(ht,t)}});function Uu(e,t,n,r,s="NHWC",a){return ju(e,[...t,e[3]],n,a,r,null,null,nc(s))}function Gu(e,t,n,r,s,a,o="channelsLast"){const[i,l]=Yu(t);let u;if("channelsLast"===o)u=[i,l,e[3],e[3]];else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);u=[i,l,e[1],e[1]]}return ju(e,u,n,r,s,a,!1,o)}function Hu(e,t,n,r,s,a,o="NDHWC"){const[i,l,u]=Xu(t);let c,p;if("NDHWC"===o)p="channelsLast",c=[i,l,u,e[4],e[4]];else{if("NCDHW"!==o)throw new Error(`Unknown dataFormat ${o}`);p="channelsFirst",c=[i,l,u,e[1],e[1]]}return Ku(e,c,n,r,s,!1,p,a)}function ju(e,t,n,r,s,a,o=!1,i="channelsLast"){let[l,u,c,p]=[-1,-1,-1,-1];if("channelsLast"===i)[l,u,c,p]=e;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[l,p,u,c]=e}const[h,d,,f]=t,[m,g]=Yu(n),[y,b]=Yu(r),x=Zu(h,y),w=Zu(d,b),{padInfo:v,outHeight:k,outWidth:N}=function(e,t,n,r,s,a,o,i,l){let u,c,p;if("number"==typeof e){u={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const s=function(e,t,n,r,s){null==r&&(r=qu(e,t,n));const a=e[1];return[Qu((e[0]-t+2*r)/n+1,s),Qu((a-t+2*r)/n+1,s)]}([t,n],a,r,e,i);c=s[0],p=s[1]}else if("same"===e){c=Math.ceil(t/r),p=Math.ceil(n/s);const e=Math.max(0,(c-1)*r+a-t),i=Math.max(0,(p-1)*s+o-n),l=Math.floor(e/2),h=e-l,d=Math.floor(i/2);u={top:l,bottom:h,left:d,right:i-d,type:"SAME"}}else if("valid"===e)u={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-a+1)/r),p=Math.ceil((n-o+1)/s);else{if("object"!=typeof e)throw Error(`Unknown padding parameter: ${e}`);{const h="channelsLast"===l?e[1][0]:e[2][0],d="channelsLast"===l?e[1][1]:e[2][1],f="channelsLast"===l?e[2][0]:e[3][0],m="channelsLast"===l?e[2][1]:e[3][1];u={top:h,bottom:d,left:f,right:m,type:0===h&&0===d&&0===f&&0===m?"VALID":"EXPLICIT"},c=Qu((t-a+h+d)/r+1,i),p=Qu((n-o+f+m)/s+1,i)}}return{padInfo:u,outHeight:c,outWidth:p}}(s,u,c,m,g,x,w,a,i),T=o?f*p:f;let S;return"channelsFirst"===i?S=[l,T,k,N]:"channelsLast"===i&&(S=[l,k,N,T]),{batchSize:l,dataFormat:i,inHeight:u,inWidth:c,inChannels:p,outHeight:k,outWidth:N,outChannels:T,padInfo:v,strideHeight:m,strideWidth:g,filterHeight:h,filterWidth:d,effectiveFilterHeight:x,effectiveFilterWidth:w,dilationHeight:y,dilationWidth:b,inShape:e,outShape:S,filterShape:t}}function Ku(e,t,n,r,s,a=!1,o="channelsLast",i){let[l,u,c,p,h]=[-1,-1,-1,-1,-1];if("channelsLast"===o)[l,u,c,p,h]=e;else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);[l,h,u,c,p]=e}const[d,f,m,,g]=t,[y,b,x]=Xu(n),[w,v,k]=Xu(r),N=Zu(d,w),T=Zu(f,v),S=Zu(m,k),{padInfo:I,outDepth:E,outHeight:$,outWidth:C}=function(e,t,n,r,s,a,o,i,l,u,c){let p,h,d,f;if("valid"===e&&(e=0),"number"==typeof e){p={top:e,bottom:e,left:e,right:e,front:e,back:e,type:0===e?"VALID":"NUMBER"};const m=function(e,t,n,r,s,a){null==s&&(s=qu(e,t[0],r[0]));const o=[0,0,0,1];for(let n=0;n<3;n++)e[n]+2*s>=t[n]&&(o[n]=Qu((e[n]-t[n]+2*s)/r[n]+1,a));return o}([t,n,r,1],[i,l,u],0,[s,a,o],e,c);h=m[0],d=m[1],f=m[2]}else{if("same"!==e)throw Error(`Unknown padding parameter: ${e}`);{h=Math.ceil(t/s),d=Math.ceil(n/a),f=Math.ceil(r/o);const e=(h-1)*s+i-t,c=(d-1)*a+l-n,m=(f-1)*o+u-r,g=Math.floor(e/2),y=e-g,b=Math.floor(c/2),x=c-b,w=Math.floor(m/2);p={top:b,bottom:x,left:w,right:m-w,front:g,back:y,type:"SAME"}}}return{padInfo:p,outDepth:h,outHeight:d,outWidth:f}}(s,u,c,p,y,b,x,N,T,S,i),A=a?g*h:g;let _;return"channelsFirst"===o?_=[l,A,E,$,C]:"channelsLast"===o&&(_=[l,E,$,C,A]),{batchSize:l,dataFormat:o,inDepth:u,inHeight:c,inWidth:p,inChannels:h,outDepth:E,outHeight:$,outWidth:C,outChannels:A,padInfo:I,strideDepth:y,strideHeight:b,strideWidth:x,filterDepth:d,filterHeight:f,filterWidth:m,effectiveFilterDepth:N,effectiveFilterHeight:T,effectiveFilterWidth:S,dilationDepth:w,dilationHeight:v,dilationWidth:k,inShape:e,outShape:_,filterShape:t}}function qu(e,t,n,r=1){const s=Zu(t,r);return Math.floor((e[0]*(n-1)-n+s)/2)}function Yu(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function Xu(e){return"number"==typeof e?[e,e,e]:e}function Zu(e,t){return t<=1?e:e+(e-1)*(t-1)}function Qu(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error(`Unknown roundingMode ${t}`)}}function Ju(e){const[t,n,r]=Yu(e);return 1===t&&1===n&&1===r}function ec(e,t){return Ju(e)||Ju(t)}function tc(e){return Yu(e).every((e=>e>0))}function nc(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw new Error(`Unknown dataFormat ${e}`)}function rc(e,t,n){if(null!=n){if("string"==typeof t)throw Error(`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`);if("number"==typeof t)oe(de(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`));else{if("object"!=typeof t)throw Error(`Error in ${e}: Unknown padding parameter: ${t}`);t.forEach((t=>{t.forEach((t=>{oe(de(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`))}))}))}}}const sc=qa({reshape_:function(e,t){const n={x:Ha(e,"x","reshape","string_or_numeric")},r={shape:t};return Oa.runKernel(br,n,r)}}),ac=qa({avgPool_:function(e,t,n,r,s){const a=Ha(e,"x","avgPool","float32");oe(ec(n,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`));let o=a,i=!1;3===a.rank&&(i=!0,o=sc(a,[1,a.shape[0],a.shape[1],a.shape[2]])),oe(4===o.rank,(()=>`Error in avgPool: x must be rank 4 but got rank ${o.rank}.`)),rc("avgPool",r,s);const l={x:o},u={filterSize:t,strides:n,pad:r,dimRoundingMode:s};let c=Oa.runKernel(ft,l,u);return c=Ni(c,a.dtype),i?sc(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),oc=qa({avgPool3d_:function(e,t,n,r,s,a="NDHWC"){const o=Ha(e,"x","avgPool3d","float32");let i=o,l=!1;4===o.rank&&(l=!0,i=sc(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),oe(5===i.rank,(()=>`Error in avgPool3d: x must be rank 5 but got rank ${i.rank}.`)),oe("NDHWC"===a,(()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),oe("number"==typeof n&&n>0||Array.isArray(n)&&n[0]>0&&n[1]>0&&n[2]>0,(()=>`Error in avgPool3d: Stride must be > 0, but got '${n}'`)),rc("avgPool3d",r,s);const u={x:i},c={filterSize:t,strides:n,pad:r,dimRoundingMode:s,dataFormat:a};let p=Oa.runKernel(gt,u,c);return p=Ni(p,i.dtype),l?sc(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}}),ic=qa({concat_:function(e,t=0){oe(e.length>=1,(()=>"Pass at least one tensor to concat"));const n=ja(e,"tensors","concat","string_or_numeric");if("complex64"===n[0].dtype&&n.forEach((e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)})),1===n.length)return Ti(n[0]);const r=n,s={axis:t};return Oa.runKernel(Ct,r,s)}}),lc=qa({sigmoid_:function(e){const t={x:Ha(e,"x","sigmoid","float32")};return Oa.runKernel(Mr,t)}}),uc=qa({slice_:function(e,t,n){const r=Ha(e,"x","slice","string_or_numeric");if(0===r.rank)throw new Error("Slicing scalar is not possible");const s={x:r},a={begin:t,size:n};return Oa.runKernel(Rr,s,a)}}),cc=qa({tanh_:function(e){const t={x:Ha(e,"x","tanh","float32")};return Oa.runKernel(rs,t)}}),pc=qa({basicLSTMCell_:function(e,t,n,r,s,a){const o=Ha(e,"forgetBias","basicLSTMCell"),i=Ha(t,"lstmKernel","basicLSTMCell"),l=Ha(n,"lstmBias","basicLSTMCell"),u=Ha(r,"data","basicLSTMCell"),c=Ha(s,"c","basicLSTMCell"),p=Ha(a,"h","basicLSTMCell"),h=ic([u,p],1),d=Al(h,i),f=Ii(d,l),m=f.shape[0],g=f.shape[1]/4,y=[m,g],b=uc(f,[0,0],y),x=uc(f,[0,g],y),w=uc(f,[0,2*g],y),v=uc(f,[0,3*g],y),k=Ii(Ci(lc(b),cc(x)),Ci(c,lc(Ii(o,w))));return[k,Ci(cc(k),lc(v))]}}),hc=qa({batchToSpaceND_:function(e,t,n){const r=Ha(e,"x","batchToSpaceND"),s=t.reduce(((e,t)=>e*t));oe(r.rank>=1+t.length,(()=>`input rank is ${r.rank} but should be > than blockShape.length ${t.length}`)),oe(n.length===t.length,(()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`)),oe(r.shape[0]%s==0,(()=>`input tensor batch is ${r.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${s}`));const a={x:r},o={blockShape:t,crops:n};return Oa.runKernel(xt,a,o)}}),dc=qa({batchNorm_:function(e,t,n,r,s,a){null==a&&(a=.001);const o=Ha(e,"x","batchNorm"),i=Ha(t,"mean","batchNorm"),l=Ha(n,"variance","batchNorm");let u,c;null!=s&&(u=Ha(s,"scale","batchNorm")),null!=r&&(c=Ha(r,"offset","batchNorm")),oe(i.rank===l.rank,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),oe(null==c||i.rank===c.rank,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),oe(null==u||i.rank===u.rank,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));const p={x:function(e){let t;return t=0===e.rank||1===e.rank?sc(e,[1,1,1,e.size]):2===e.rank?sc(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?sc(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e,t}(o),scale:u,offset:c,mean:i,variance:l},h={varianceEpsilon:a},d=Oa.runKernel(hn,p,h);return sc(d,o.shape)}}),fc=qa({batchNorm2d_:function(e,t,n,r,s,a){const o=Ha(e,"x","batchNorm"),i=Ha(t,"mean","batchNorm"),l=Ha(n,"variance","batchNorm");let u,c;return null!=s&&(u=Ha(s,"scale","batchNorm")),null!=r&&(c=Ha(r,"offset","batchNorm")),oe(2===o.rank,(()=>`Error in batchNorm2D: x must be rank 2 but got rank ${o.rank}.`)),oe(2===i.rank||1===i.rank,(()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${i.rank}.`)),oe(2===l.rank||1===l.rank,(()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`)),null!=u&&oe(2===u.rank||1===u.rank,(()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${u.rank}.`)),null!=c&&oe(2===c.rank||1===c.rank,(()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`)),dc(o,i,l,c,u,a)}}),mc=qa({batchNorm3d_:function(e,t,n,r,s,a){const o=Ha(e,"x","batchNorm"),i=Ha(t,"mean","batchNorm"),l=Ha(n,"variance","batchNorm");let u,c;return null!=s&&(u=Ha(s,"scale","batchNorm")),null!=r&&(c=Ha(r,"offset","batchNorm")),oe(3===o.rank,(()=>`Error in batchNorm3D: x must be rank 3 but got rank ${o.rank}.`)),oe(3===i.rank||1===i.rank,(()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${i.rank}.`)),oe(3===l.rank||1===l.rank,(()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`)),null!=u&&oe(3===u.rank||1===u.rank,(()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${u.rank}.`)),null!=c&&oe(3===c.rank||1===c.rank,(()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`)),dc(o,i,l,c,u,a)}}),gc=qa({batchNorm4d_:function(e,t,n,r,s,a){const o=Ha(e,"x","batchNorm"),i=Ha(t,"mean","batchNorm"),l=Ha(n,"variance","batchNorm");let u,c;return null!=s&&(u=Ha(s,"scale","batchNorm")),null!=r&&(c=Ha(r,"offset","batchNorm")),oe(4===o.rank,(()=>`Error in batchNorm4D: x must be rank 4 but got rank ${o.rank}.`)),oe(4===i.rank||1===i.rank,(()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${i.rank}.`)),oe(4===l.rank||1===l.rank,(()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`)),null!=u&&oe(4===u.rank||1===u.rank,(()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${u.rank}.`)),null!=c&&oe(4===c.rank||1===c.rank,(()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`)),dc(o,i,l,c,u,a)}}),yc=qa({bincount_:function(e,t,n){const r=Ha(e,"x","bincount"),s=Ha(t,"weights","bincount");oe("int32"===r.dtype,(()=>`Error in bincount: input dtype must be int32, but got ${r.dtype}`)),oe(n>=0,(()=>`size must be non-negative, but got ${n}.`)),oe(s.size===r.size||0===s.size,(()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${r.shape}, weights shape: ${s.shape}.`));const a={x:r,weights:s},o={size:n};return Oa.runKernel(wt,a,o)}}),bc=qa({bitwiseAnd_:function(e,t){const n=Ha(e,"x","bitwiseAnd"),r=Ha(t,"y","bitwiseAnd");if(!he(n.shape,r.shape))throw new Error(`BitwiseAnd: Tensors must have the same shape. x: ${n.shape}, y: ${r.shape}`);if("int32"!==n.dtype||"int32"!==r.dtype)throw new Error(`BitwiseAnd: Only supports 'int32' values in tensor, found type of x: ${n.dtype} and type of y: ${r.dtype}`);const s={a:n,b:r};return Oa.runKernel(vt,s)}}),xc=qa({broadcastArgs_:function(e,t){const n=Ha(e,"s0","broadcastArgs","int32"),r=Ha(t,"s1","broadcastArgs","int32");if(1!==n.rank)throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${n.rank}`);if(1!==r.rank)throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${r.rank}`);const s={s0:n,s1:r};return Oa.runKernel(Nt,s)}}),wc=qa({broadcastTo_:function(e,t){let n=Ha(e,"broadcastTo","x");const r=n.shape;if(We(t),t.length<n.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){const e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=sc(n,e)}const s=n.shape,a=Array.from(t);for(let e=t.length-1;e>=0;e--)if(s[e]===t[e])a[e]=1;else if(1!==n.shape[e])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${t}].`);if(0===a.map(((e,t)=>e>1?t:-1)).filter((e=>e>=0)).length)return Ti(n);const o={x:n},i={reps:a};return Oa.runKernel(ss,o,i)}}),vc=qa({ceil_:function(e){const t={x:Ha(e,"x","ceil","float32")};return Oa.runKernel(St,t)}}),kc=qa({clipByValue_:function(e,t,n){const r=Ha(e,"x","clipByValue");if(oe(t<=n,(()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`)),t===n)return Yi(r.shape,t,r.dtype);const s={x:r},a={clipValueMin:t,clipValueMax:n};return Oa.runKernel(It,s,a)}}),Nc=qa({concat1d_:function(e){return ic(e,0)}}),Tc=qa({concat2d_:function(e,t){return ic(e,t)}}),Sc=qa({concat3d_:function(e,t){return ic(e,t)}}),Ic=qa({concat4d_:function(e,t){return ic(e,t)}}),Ec=qa({conv2d_:function(e,t,n,r,s="NHWC",a=[1,1],o){const i=Ha(e,"x","conv2d","float32"),l=Ha(t,"filter","conv2d","float32");let u=i,c=!1;3===i.rank&&(c=!0,u=sc(i,[1,i.shape[0],i.shape[1],i.shape[2]])),oe(4===u.rank,(()=>`Error in conv2d: input must be rank 4, but got rank ${u.rank}.`)),oe(4===l.rank,(()=>`Error in conv2d: filter must be rank 4, but got rank ${l.rank}.`)),rc("conv2d",r,o);const p="NHWC"===s?u.shape[3]:u.shape[1];oe(p===l.shape[2],(()=>`Error in conv2d: depth of input (${p}) must match input depth for filter ${l.shape[2]}.`)),oe(ec(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),oe(tc(a),(()=>"Error in conv2D: Dilated rates should be larger than 0.")),oe(tc(n),(()=>"Error in conv2D: Strides should be larger than 0."));const h={x:u,filter:l},d={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o},f=Oa.runKernel(At,h,d);return c?sc(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),$c=qa({conv1d_:function(e,t,n,r,s="NWC",a=1,o){const i=Ha(e,"x","conv1d"),l=Ha(t,"filter","conv1d");let u=i,c=!1;2===i.rank&&(c=!0,u=sc(i,[1,i.shape[0],i.shape[1]])),oe(3===u.rank,(()=>`Error in conv1d: input must be rank 3, but got rank ${u.rank}.`)),oe(3===l.rank,(()=>`Error in conv1d: filter must be rank 3, but got rank ${l.rank}.`)),rc("conv1d",r,o),oe(u.shape[2]===l.shape[1],(()=>`Error in conv1d: depth of input (${u.shape[2]}) must match input depth for filter ${l.shape[1]}.`)),oe(ec(n,a),(()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${a}'`)),oe(tc(a),(()=>"Error in conv1D: Dilated rates should be larger than 0.")),oe(tc(n),(()=>"Error in conv1D: Stride should be larger than 0.")),oe("NWC"===s,(()=>`Error in conv1d: got dataFormat of ${s} but only NWC is currently supported.`));const p=sc(l,[1,l.shape[0],l.shape[1],l.shape[2]]),h=sc(u,[u.shape[0],1,u.shape[1],u.shape[2]]),d=Ec(h,p,[1,n],r,"NHWC",[1,a],o);return sc(d,c?[d.shape[2],d.shape[3]]:[d.shape[0],d.shape[2],d.shape[3]])}}),Cc=qa({conv2DBackpropInput_:function(e,t,n,r,s,a="NHWC",o){oe(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let i=e,l=t,u=!1;3===t.rank&&(u=!0,l=sc(t,[1,t.shape[0],t.shape[1],t.shape[2]]),i=[1,e[0],e[1],e[2]]),oe(4===i.length,(()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${i.length}.`)),oe(4===l.rank,(()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${l.rank}`)),oe(4===n.rank,(()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`));const c="NHWC"===a?i[3]:i[1],p="NHWC"===a?l.shape[3]:l.shape[1];oe(c===n.shape[2],(()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${n.shape[2]}.`)),oe(p===n.shape[3],(()=>`Error in conv2dDerInput: depth of output (${p}) must match output depth for filter ${n.shape[3]}.`)),rc("conv2dDerInput",s,o);const h={dy:l,filter:n},d={strides:r,pad:s,dataFormat:a,dimRoundingMode:o,inputShape:i},f=Oa.runKernel(Rt,h,d);return u?sc(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),Ac=qa({conv2dTranspose_:function(e,t,n,r,s,a){const o=Ha(e,"x","conv2dTranspose"),i=Ha(t,"filter","conv2dTranspose");return Cc(n,o,i,r,s,"NHWC",a)}}),_c=qa({conv3d_:function(e,t,n,r,s="NDHWC",a=[1,1,1]){const o=Ha(e,"x","conv3d"),i=Ha(t,"filter","conv3d");let l=o,u=!1;4===o.rank&&(u=!0,l=sc(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),oe(5===l.rank,(()=>`Error in conv3d: input must be rank 5, but got rank ${l.rank}.`)),oe(5===i.rank,(()=>`Error in conv3d: filter must be rank 5, but got rank ${i.rank}.`)),oe(l.shape[4]===i.shape[3],(()=>`Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${i.shape[3]}.`)),oe(ec(n,a),(()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),oe("NDHWC"===s,(()=>`Error in conv3d: got dataFormat of ${s} but only NDHWC is currently supported.`)),oe(tc(a),(()=>"Error in conv3D: Dilated rates should be larger than 0.")),oe(tc(n),(()=>"Error in conv3D: Strides should be larger than 0."));const c={x:l,filter:i},p={strides:n,pad:r,dataFormat:s,dilations:a},h=Oa.runKernel(Dt,c,p);return u?sc(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}}),Rc=qa({conv3DBackpropInput_:function(e,t,n,r,s){oe(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let a=e,o=t,i=!1;4===t.rank&&(i=!0,o=sc(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),a=[1,e[0],e[1],e[2],e[3]]);const l=a[4],u=o.shape[4];oe(5===a.length,(()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${a.length}.`)),oe(5===o.rank,(()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${o.rank}`)),oe(5===n.rank,(()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`)),oe(l===n.shape[3],(()=>`Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${n.shape[3]}.`)),oe(u===n.shape[4],(()=>`Error in conv3dDerInput: depth of output (${u}) must match output depth for filter ${n.shape[4]}.`));const c={dy:o,filter:n},p={pad:s,strides:r,inputShape:a},h=Oa.runKernel(Ot,c,p);return i?sc(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}}),Dc=qa({conv3dTranspose_:function(e,t,n,r,s){const a=Ha(e,"x","conv3dTranspose"),o=Ha(t,"filter","conv3dTranspose");return Rc(n,a,o,r,s)}}),Fc=qa({cos_:function(e){const t={x:Ha(e,"x","cos","float32")};return Oa.runKernel(Mt,t)}}),Oc=qa({cosh_:function(e){const t={x:Ha(e,"x","cosh","float32")};return Oa.runKernel(Lt,t)}}),Mc=qa({cumprod_:function(e,t=0,n=!1,r=!1){const s={x:Ha(e,"x","cumprod")},a={axis:t,exclusive:n,reverse:r};return Oa.runKernel(zt,s,a)}}),Lc=qa({cumsum_:function(e,t=0,n=!1,r=!1){const s={x:Ha(e,"x","cumsum")},a={axis:t,exclusive:n,reverse:r};return Oa.runKernel(Pt,s,a)}}),zc=qa({denseBincount_:function(e,t,n,r=!1){const s=Ha(e,"x","denseBincount"),a=Ha(t,"weights","denseBincount");oe("int32"===s.dtype,(()=>`Error in denseBincount: input dtype must be int32, but got ${s.dtype}`)),oe(s.rank<=2,(()=>`Error in denseBincount: input must be at most rank 2, but got rank ${s.rank}.`)),oe(n>=0,(()=>`size must be non-negative, but got ${n}.`)),oe(a.size===s.size||0===a.size,(()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${s.shape}, weights shape: ${a.shape}.`));const o={x:s,weights:a},i={size:n,binaryOutput:r};return Oa.runKernel(Vt,o,i)}}),Pc=qa({depthToSpace_:function(e,t,n="NHWC"){const r=Ha(e,"x","depthToSpace","float32"),s="NHWC"===n?r.shape[1]:r.shape[2],a="NHWC"===n?r.shape[2]:r.shape[3],o="NHWC"===n?r.shape[3]:r.shape[1];oe(t>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${t}`)),oe(s*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${s} and ${t}  for depthToSpace with input shape\n    ${r.shape}`)),oe(a*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${a} and ${t} for depthToSpace with input shape\n        ${r.shape}`)),oe(o%(t*t)==0,(()=>`Dimension size must be evenly divisible by ${t*t} but is ${o} for depthToSpace with input shape ${r.shape}`));const i={x:r},l={blockSize:t,dataFormat:n};return Oa.runKernel(Wt,i,l)}}),Bc=qa({depthwiseConv2d_:function(e,t,n,r,s="NHWC",a=[1,1],o){const i=Ha(e,"x","depthwiseConv2d","float32"),l=Ha(t,"filter","depthwiseConv2d","float32");let u=i,c=!1;3===i.rank&&(c=!0,u=sc(i,[1,i.shape[0],i.shape[1],i.shape[2]])),oe(4===u.rank,(()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${u.rank}.`)),oe(4===l.rank,(()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${l.rank}.`));const p="NHWC"===s?u.shape[3]:u.shape[1];oe(p===l.shape[2],(()=>`Error in depthwiseConv2d: number of input channels (${p}) must match the inChannels dimension in filter ${l.shape[2]}.`)),rc("depthwiseConv2d",r,o);const h={x:u,filter:l},d={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o},f=Oa.runKernel(Ut,h,d);return c?sc(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),Vc=qa({diag_:function(e){const t={x:Ha(e,"x","diag")};return Oa.runKernel(jt,t)}}),Wc=qa({dilation2d_:function(e,t,n,r,s=[1,1],a="NHWC"){const o=Ha(e,"x","dilation2d"),i=Ha(t,"filter","dilation2d");oe(3===o.rank||4===o.rank,(()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${o.rank}.`)),oe(3===i.rank,(()=>`Error in dilation2d: filter must be rank 3, but got rank ${i.rank}.`)),oe("NHWC"===a,(()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${a}`));let l=o,u=!1;3===o.rank&&(l=sc(o,[1,o.shape[0],o.shape[1],o.shape[2]]),u=!0),oe(l.shape[3]===i.shape[2],(()=>`Error in dilation2d:  input and filter must have the same depth: ${l.shape[3]} vs ${i.shape[2]}`));const c={x:l,filter:i},p={strides:n,pad:r,dilations:s},h=Oa.runKernel(Kt,c,p);return u?sc(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),Uc=qa({equal_:function(e,t){let n=Ha(e,"a","equal","string_or_numeric"),r=Ha(t,"b","equal","string_or_numeric");[n,r]=Ia(n,r),rl(n.shape,r.shape);const s={a:n,b:r};return Oa.runKernel(nn,s)}}),Gc=qa({where_:function(e,t,n){const r=Ha(t,"a","where"),s=Ha(n,"b","where"),a=Ha(e,"condition","where","bool"),o=rl(rl(a.shape,r.shape),s.shape),i={condition:wc(a,o),t:wc(r,o),e:wc(s,o)};return Oa.runKernel(Ar,i)}}),Hc=qa({divNoNan_:function(e,t){let n=Ha(e,"a","div"),r=Ha(t,"b","div");[n,r]=Ia(n,r);const s=$i(n,r),a=Ri(s),o=Uc(r,a);return Gc(o,a,s)}}),jc=qa({dot_:function(e,t){const n=Ha(e,"t1","dot"),r=Ha(t,"t2","dot");oe(!(1!==n.rank&&2!==n.rank||1!==r.rank&&2!==r.rank),(()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${r.rank}.`));const s=1===n.rank?n.size:n.shape[1],a=1===r.rank?r.size:r.shape[0];if(oe(s===a,(()=>`Error in dot: inner dimensions of inputs must match, but got ${s} and ${a}.`)),1===n.rank&&1===r.rank){const e=sc(n,[1,-1]),t=sc(r,[-1,1]),s=Al(e,t);return sc(s,[])}if(1===n.rank&&2===r.rank){const e=sc(n,[1,-1]),t=sc(r,[r.shape[0],r.shape[1]]),s=Al(e,t);return sc(s,[s.size])}if(2===n.rank&&1===r.rank){const e=sc(r,[-1,1]),t=Al(n,e);return sc(t,[t.size])}{const e=sc(r,[r.shape[0],r.shape[1]]);return Al(n,e)}}}),Kc=qa({einsum_:function(e,...t){const n=t.map(((e,t)=>Ha(e,`tensors${t}`,"einsum"))),r={equation:e};return Oa.runKernel(Qt,n,r)}}),qc=qa({elu_:function(e){const t={x:Ha(e,"x","elu","float32")};return Oa.runKernel(Jt,t)}}),Yc=qa({ensureShape_:function(e,t){const n=Ha(e,"x","ensureShape","string_or_numeric");if(!pe(n.shape,t))throw new Error(`EnsureShape: Shape of tensor ${n.shape} is not compatible with expected shape ${t}`);return e}}),Xc=qa({erf_:function(e){let t=Ha(e,"x","erf");oe("int32"===t.dtype||"float32"===t.dtype,(()=>"Input dtype must be `int32` or `float32`.")),"int32"===t.dtype&&(t=Ni(t,"float32"));const n={x:t};return Oa.runKernel(tn,n)}});function Zc(e,t){for(let n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0}function Qc(e,t,n){const r=e.length+t.length,s=[];let a=0,o=0;for(let i=0;i<r;i++)-1===n.indexOf(i)?s.push(e[a++]):s.push(t[o++]);return s}function Jc(e,t){const n=[],r=e.length;for(let s=0;s<r;s++)-1===t.indexOf(s)&&n.push(e[s]);return[n,t.map((t=>e[t]))]}function ep(e,t){return Qc(e,t.map((e=>1)),t)}function tp(e,t,n){oe(Zc(t,n),(()=>`${e} supports only inner-most axes for now. Got axes ${t} and rank-${n} input.`))}function np(e,t){if(Zc(e,t))return null;const n=[];for(let r=0;r<t;++r)-1===e.indexOf(r)&&n.push(r);return e.forEach((e=>n.push(e))),n}function rp(e){return e.map(((e,t)=>[t,e])).sort(((e,t)=>e[1]-t[1])).map((e=>e[0]))}function sp(e,t){const n=[];for(let r=t-e;r<t;++r)n.push(r);return n}const ap=qa({max_:function(e,t=null,n=!1){const r={x:Ha(e,"x","max")},s={reductionIndices:t,keepDims:n};return Oa.runKernel(zn,r,s)}}),op=qa({min_:function(e,t=null,n=!1){const r={x:Ha(e,"x","min")},s={axis:t,keepDims:n};return Oa.runKernel(jn,r,s)}}),ip=qa({sum_:function(e,t=null,n=!1){let r=Ha(e,"x","sum");"bool"===r.dtype&&(r=Ni(r,"int32"));const s={x:r},a={axis:t,keepDims:n};return Oa.runKernel(Pr,s,a)}});function lp(e,t,n=null){if(0===e.rank)return el(e);if(1!==e.rank&&null===n)return lp(sc(e,[-1]),t,n);if(1===e.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===t)return ip(el(e),n);if(t===1/0)return ap(el(e),n);if(t===-1/0)return op(el(e),n);if("euclidean"===t||2===t)return Ai(ip(Zi(el(e),Bi(2,"int32")),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(n)&&2===n.length){if(1===t)return ap(ip(el(e),n[0]),n[1]-1);if(t===1/0)return ap(ip(el(e),n[1]),n[0]);if(t===-1/0)return op(ip(el(e),n[1]),n[0]);if("fro"===t||"euclidean"===t)return Ai(ip(_i(e),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${n}`)}const up=qa({norm_:function(e,t="euclidean",n=null,r=!1){const s=lp(e=Ha(e,"x","norm"),t,n);let a=s.shape;if(r){const t=we(n,e.shape);a=ep(s.shape,t)}return sc(s,a)}}),cp=qa({euclideanNorm_:function(e,t=null,n=!1){return up(e,"euclidean",t,n)}}),pp=qa({exp_:function(e){const t={x:Ha(e,"x","exp")};return Oa.runKernel(rn,t)}}),hp=qa({expandDims_:function(e,t=0){const n=Ha(e,"x","expandDims","string_or_numeric");oe(t<=n.rank,(()=>"Axis must be <= rank of the tensor"));const r={input:n},s={dim:t};return Oa.runKernel(sn,r,s)}}),dp=qa({expm1_:function(e){const t={x:Ha(e,"x","expm1")};return Oa.runKernel(an,t)}}),fp=qa({tile_:function(e,t){const n=Ha(e,"x","tile","string_or_numeric");oe(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`));const r={x:n},s={reps:t};return Oa.runKernel(ss,r,s)}}),mp=qa({eye_:function(e,t,n,r="float32"){null==t&&(t=e);const s=ki([e,t],r),a=e<=t?e:t;for(let e=0;e<a;++e)s.set(1,e,e);const o=sc(s.toTensor(),[e,t]);if(null==n)return o;if(1===n.length)return fp(hp(o,0),[n[0],1,1]);if(2===n.length)return fp(hp(hp(o,0),0),[n[0],n[1],1,1]);if(3===n.length)return fp(hp(hp(hp(o,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}}),gp=qa({floor_:function(e){const t={x:Ha(e,"x","floor","float32")};return Oa.runKernel(cn,t)}}),yp=qa({gather_:function(e,t,n=0,r=0){const s={x:Ha(e,"x","gather"),indices:Ha(t,"indices","gather","int32")},a={axis:n,batchDims:r};return Oa.runKernel(dn,s,a)}}),bp=qa({greater_:function(e,t){let n=Ha(e,"a","greater","string_or_numeric"),r=Ha(t,"b","greater","string_or_numeric");[n,r]=Ia(n,r),rl(n.shape,r.shape);const s={a:n,b:r};return Oa.runKernel(mn,s)}}),xp=qa({greaterEqual_:function(e,t){let n=Ha(e,"a","greaterEqual","string_or_numeric"),r=Ha(t,"b","greaterEqual","string_or_numeric");[n,r]=Ia(n,r),rl(n.shape,r.shape);const s={a:n,b:r};return Oa.runKernel(gn,s)}}),wp=qa({isFinite_:function(e){const t={x:Ha(e,"x","isFinite")};return Oa.runKernel(wn,t)}}),vp=qa({isInf_:function(e){const t={x:Ha(e,"x","isInf")};return Oa.runKernel(vn,t)}}),kp=qa({isNaN_:function(e){const t={x:Ha(e,"x","isNaN")};return Oa.runKernel(kn,t)}}),Np=qa({leakyRelu_:function(e,t=.2){const n={x:Ha(e,"x","leakyRelu")},r={alpha:t};return Oa.runKernel(Nn,n,r)}}),Tp=qa({less_:function(e,t){let n=Ha(e,"a","less","string_or_numeric"),r=Ha(t,"b","less","string_or_numeric");[n,r]=Ia(n,r),rl(n.shape,r.shape);const s={a:n,b:r};return Oa.runKernel(Tn,s)}}),Sp=qa({lessEqual_:function(e,t){let n=Ha(e,"a","lessEqual","string_or_numeric"),r=Ha(t,"b","lessEqual","string_or_numeric");[n,r]=Ia(n,r),rl(n.shape,r.shape);const s={a:n,b:r};return Oa.runKernel(Sn,s)}});function Ip(e,t,n){if(n<=0)throw new Error("The number of values should be positive.");const r={start:e,stop:t,num:n};return Oa.runKernel(In,{},r)}const Ep=qa({localResponseNormalization_:function(e,t=5,n=1,r=1,s=.5){const a=Ha(e,"x","localResponseNormalization");oe(4===a.rank||3===a.rank,(()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${a.rank}.`)),oe(de(t),(()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`));let o=a,i=!1;3===a.rank&&(i=!0,o=sc(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const l={x:o},u={depthRadius:t,bias:n,alpha:r,beta:s},c=Oa.runKernel(On,l,u);return i?sc(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),$p=qa({log_:function(e){const t={x:Ha(e,"x","log","float32")};return Oa.runKernel(En,t)}}),Cp=qa({log1p_:function(e){const t={x:Ha(e,"x","log1p")};return Oa.runKernel($n,t)}}),Ap=qa({softplus_:function(e){const t={x:Ha(e,"x","softplus")};return Oa.runKernel(Lr,t)}}),_p=qa({logSigmoid_:function(e){const t=Ha(e,"x","logSigmoid");return zi((e=>({value:Dl(Ap(Dl(e))),gradFunc:t=>Ci(t,lc(Dl(e)))})))(t)}}),Rp=qa({logSoftmax_:function(e,t=-1){const n=Ha(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);const r=zi(((e,n)=>{const r=ap(e,t,!0),s=Qi(e,r),a=Qi(Ni(s,"float32"),$p(ip(pp(s),t,!0)));return n([a]),{value:a,gradFunc:(e,n)=>{const[r]=n,s=pp(r);return Qi(e,Ci(ip(e,t,!0),s))}}}));return r(n)}}),Dp=qa({logSumExp_:function(e,t=null,n=!1){const r=Ha(e,"x","logSumExp"),s=we(t,r.shape),a=ap(r,s,!0),o=Qi(r,a),i=pp(o),l=ip(i,s),u=$p(l),c=Ii(sc(a,u.shape),u);if(n){const e=ep(c.shape,s);return sc(c,e)}return c}}),Fp=qa({logicalAnd_:function(e,t){const n=Ha(e,"a","logicalAnd","bool"),r=Ha(t,"b","logicalAnd","bool");rl(n.shape,r.shape);const s={a:n,b:r};return Oa.runKernel(Cn,s)}}),Op=qa({logicalNot_:function(e){const t={x:Ha(e,"x","logicalNot","bool")};return Oa.runKernel(An,t)}}),Mp=qa({logicalOr_:function(e,t){const n=Ha(e,"a","logicalOr","bool"),r=Ha(t,"b","logicalOr","bool");rl(n.shape,r.shape);const s={a:n,b:r};return Oa.runKernel(_n,s)}}),Lp=qa({logicalXor_:function(e,t){const n=Ha(e,"a","logicalXor","bool"),r=Ha(t,"b","logicalXor","bool");return rl(n.shape,r.shape),Fp(Mp(e,t),Op(Fp(e,t)))}}),zp=2147483648,Pp=qa({searchSorted_:function(e,t,n="left"){const r=Ha(e,"sortedSequence","searchSorted"),s=Ha(t,"values","searchSorted"),a=r.shape[r.shape.length-1],o=s.shape[s.shape.length-1],i=sc(r,[-1,a]),l=sc(s,[-1,o]);if(i.rank<2)throw new Error("Sorted input argument must be at least 2-dimensional");if(i.shape[0]!==l.shape[0])throw new Error("Leading dimension of 'sortedSequence' and 'values' must match.");if(ue(l.shape)>=zp)throw new Error("values tensor size must less than 2147483648");if(i.shape[1]>=zp)throw new Error(`trailing dim_size must less than 2147483648 for int32 output type, was ${i.shape[1]}`);const u={sortedSequence:i,values:l},c={side:n};return Oa.runKernel(Cr,u,c)}});function Bp(e,t){return Pp(e,t,"left")}const Vp=qa({maxPool_:function(e,t,n,r,s){const a=Ha(e,"x","maxPool");let o=a,i=!1;3===a.rank&&(i=!0,o=sc(a,[1,a.shape[0],a.shape[1],a.shape[2]])),oe(4===o.rank,(()=>`Error in maxPool: input must be rank 4 but got rank ${o.rank}.`)),oe(ec(n,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`)),rc("maxPool",r,s);const l={x:o},u={filterSize:t,strides:n,pad:r,dimRoundingMode:s},c=Oa.runKernel(Bn,l,u);return i?sc(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),Wp=qa({maxPool3d_:function(e,t=[1,1,1],n,r,s,a="NDHWC"){const o=Ha(e,"x","maxPool3d");let i=o,l=!1;4===o.rank&&(l=!0,i=sc(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),oe(5===i.rank,(()=>`Error in maxPool3d: x must be rank 5 but got rank ${i.rank}.`)),oe("NDHWC"===a,(()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),rc("maxPool3d",r,s);const u={x:i},c={filterSize:t,strides:n,pad:r,dimRoundingMode:s,dataFormat:a},p=Oa.runKernel(Wn,u,c);return l?sc(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}}),Up=qa({maxPoolWithArgmax_:function(e,t,n,r,s=!1){const a={x:Ha(e,"x","maxPoolWithArgmax")},o={filterSize:t,strides:n,pad:r,includeBatchInIndex:s},i=Oa.runKernel(Gn,a,o);return{result:i[0],indexes:i[1]}}}),Gp=qa({mean_:function(e,t=null,n=!1){const r={x:Ha(e,"x","mean")},s={axis:t,keepDims:n};return Oa.runKernel(Hn,r,s)}});function Hp(e,t="float32"){if(We(e),"complex64"===t){const t=Hp(e,"float32"),n=Hp(e,"float32");return Ya(t,n)}const n=Be(ue(e),t);return Oa.makeTensor(n,e,t)}function jp(e,t="float32"){if(We(e),"complex64"===t){const t=jp(e,"float32"),n=Hp(e,"float32");return Ya(t,n)}const n=Pe(ue(e),t);return Oa.makeTensor(n,e,t)}function Kp(e,t,{indexing:n="xy"}={}){if("xy"!==n&&"ij"!==n)throw new TypeError(`${n} is not a valid third argument to meshgrid`);if(void 0===e)return[];let r=Ha(e,"x","meshgrid",e instanceof da?e.dtype:"float32");if(void 0===t)return[r];let s=Ha(t,"y","meshgrid",t instanceof da?t.dtype:"float32");const a=ue(r.shape),o=ue(s.shape);return"xy"===n?(r=sc(r,[1,-1]),s=sc(s,[-1,1]),[Al(jp([o,1],r.dtype),r),Al(s,jp([1,a],s.dtype))]):(r=sc(r,[-1,1]),s=sc(s,[1,-1]),[Al(r,jp([1,o],r.dtype)),Al(jp([a,1],s.dtype),s)])}const qp=qa({minimum_:function(e,t){let n=Ha(e,"a","minimum"),r=Ha(t,"b","minimum");[n,r]=Ia(n,r),"bool"===n.dtype&&(n=Ni(n,"int32"),r=Ni(r,"int32")),rl(n.shape,r.shape);const s={a:n,b:r};return Oa.runKernel(Kn,s)}}),Yp=qa({mirrorPad_:function(e,t,n){oe("reflect"===n||"symmetric"===n,(()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`));const r=Ha(e,"x","mirrorPad");if(0===r.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");oe(t.length===r.rank,(()=>`Padding doesn't match input. Must be ${r.rank}. Got ${t.length}.`));const s="reflect"===n?1:0;for(let e=0;e<r.rank;e++)oe(2===t[e].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),oe(t[e][0]>=0&&t[e][0]<=r.shape[e]-s&&t[e][1]>=0&&t[e][1]<=r.shape[e]-s,(()=>`Padding in dimension ${e} cannot be greater than or equal to ${r.shape[e]-s} or less than 0 for input of shape ${r.shape}`));const a={paddings:t,mode:n},o={x:r};return Oa.runKernel(qn,o,a)}}),Xp=qa({mod_:function(e,t){let n=Ha(e,"a","mod"),r=Ha(t,"b","mod");[n,r]=Ia(n,r);const s={a:n,b:r};return Oa.runKernel(Yn,s)}}),Zp=qa({moments_:function(e,t=null,n=!1){const r=we(t,(e=Ha(e,"x","moments")).shape),s=Gp(e,r,n);let a=s.shape;n||(a=ep(s.shape,r));const o=_i(Qi(Ni(e,"float32"),sc(s,a)));return{mean:s,variance:Gp(o,r,n)}}}),Qp=qa({multiRNNCell_:function(e,t,n,r){const s=Ha(t,"data","multiRNNCell"),a=ja(n,"c","multiRNNCell"),o=ja(r,"h","multiRNNCell");let i=s;const l=[];for(let t=0;t<e.length;t++){const n=e[t](i,a[t],o[t]);l.push(n[0]),l.push(n[1]),i=n[1]}const u=[],c=[];for(let e=0;e<l.length;e+=2)u.push(l[e]),c.push(l[e+1]);return[u,c]}}),Jp=qa({multinomial_:function(e,t,n,r=!1){const s=Ha(e,"logits","multinomial"),a=s.size,o=s.rank;if(a<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${a}.`);if(o>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${o}`);n=n||Math.random();const i={logits:1===o?sc(s,[1,-1]):s},l={numSamples:t,seed:n,normalized:r},u=Oa.runKernel(Xn,i,l);return 1===o?sc(u,[u.size]):u}}),eh=qa({notEqual_:function(e,t){let n=Ha(e,"a","notEqual","string_or_numeric"),r=Ha(t,"b","notEqual","string_or_numeric");[n,r]=Ia(n,r),rl(n.shape,r.shape);const s={a:n,b:r};return Oa.runKernel(Jn,s)}}),th=qa({onesLike_:function(e){const t={x:Ha(e,"x","onesLike")};return Oa.runKernel(rr,t)}}),nh=qa({outerProduct_:function(e,t){const n=Ha(e,"v1","outerProduct"),r=Ha(t,"v2","outerProduct");oe(1===n.rank&&1===r.rank,(()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${r.rank}.`));const s=sc(n,[-1,1]),a=sc(r,[1,-1]);return Al(s,a)}}),rh=qa({pad_:function(e,t,n=0){const r=Ha(e,"x","pad");if(0===r.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const s={paddings:t,constantValue:n},a={x:r};return Oa.runKernel(or,a,s)}}),sh=qa({pad1d_:function(e,t,n=0){return oe(2===t.length,(()=>"Invalid number of paddings. Must be length of 2.")),rh(e,[t],n)}}),ah=qa({pad2d_:function(e,t,n=0){return oe(2===t.length&&2===t[0].length&&2===t[1].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),rh(e,t,n)}}),oh=qa({pad3d_:function(e,t,n=0){return oe(3===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),rh(e,t,n)}}),ih=qa({pad4d_:function(e,t,n=0){return oe(4===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length&&2===t[3].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),rh(e,t,n)}}),lh=qa({spaceToBatchND_:function(e,t,n){const r=Ha(e,"x","spaceToBatchND");oe(r.rank>=1+t.length,(()=>`input rank ${r.rank} should be > than [blockShape] ${t.length}`)),oe(n.length===t.length,(()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`)),oe(r.shape.reduce(((e,r,s)=>s>0&&s<=t.length?e&&(r+n[s-1][0]+n[s-1][1])%t[s-1]==0:e),!0),(()=>`input spatial dimensions ${r.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`));const s={x:r},a={blockShape:t,paddings:n};return Oa.runKernel(Br,s,a)}}),uh=qa({pool_:function(e,t,n,r,s,a,o){null==s&&(s=[1,1]),null==a&&(a=1),0===r&&(r="valid");const i=Ha(e,"x","maxPool");let l=i,u=!1;3===i.rank&&(u=!0,l=sc(i,[1,i.shape[0],i.shape[1],i.shape[2]])),oe(ec(a,s),(()=>`Error in pool: Either strides or dilations must be 1. Got strides ${a} and dilations '${s}'`));const c=Gu(l.shape,t,a,s,r),p=[c.dilationHeight,c.dilationWidth];let h;h="same"===r?function(e,t){const n=e.map(((e,n)=>e+(e-1)*(t[n]-1))).map((e=>e-1)),r=n.map((e=>Math.floor(e/2))),s=n.map(((e,t)=>e-r[t]));return n.map(((e,t)=>[r[t],s[t]]))}([c.filterHeight,c.filterWidth],p):[[0,0],[0,0]];const d=1===p[0]&&1===p[1],[f,m]=function(e,t,n){const r=n.map((e=>e[0])),s=n.map((e=>e[1])),a=e.concat(r,s),o=t.map(((e,t)=>(e-a[t]%e)%e)),i=s.map(((e,t)=>e+o[t]));return[t.map(((e,t)=>[r[t],i[t]])),t.map(((e,t)=>[0,o[t]]))]}([c.inHeight,c.inWidth],p,h),g=d?r:"valid",y=d?l:lh(l,p,f),b=("avg"===n?()=>ac(y,t,a,g,o):()=>Vp(y,t,a,g,o))(),x=d?b:hc(b,p,m);return u?sc(x,[x.shape[1],x.shape[2],x.shape[3]]):x}}),ch=qa({prelu_:function(e,t){const n={x:Ha(e,"x","prelu"),alpha:Ha(t,"alpha","prelu")};return Oa.runKernel(ur,n)}}),ph=qa({prod_:function(e,t=null,n=!1){let r=Ha(e,"x","prod");"bool"===r.dtype&&(r=Ni(r,"int32"));const s={x:r},a={axis:t,keepDims:n};return Oa.runKernel(cr,s,a)}}),hh=qa({raggedGather_:function(e,t,n,r){const s={paramsNestedSplits:e.map(((e,t)=>Ha(e,`tensors${t}`,"raggedGather","int32"))),paramsDenseValues:Ha(t,"paramsDenseValues","raggedGather"),indices:Ha(n,"indices","raggedGather","int32")},a={outputRaggedRank:r},o=Oa.runKernel(pr,s,a);return{outputNestedSplits:o.slice(0,o.length-1),outputDenseValues:o[o.length-1]}}}),dh=qa({raggedRange_:function(e,t,n){const r=Ha(e,"starts","raggedRange"),s={starts:r,limits:Ha(t,"limits","raggedRange",r.dtype),deltas:Ha(n,"deltas","raggedRange",r.dtype)},a=Oa.runKernel(hr,s);return{rtNestedSplits:a[0],rtDenseValues:a[1]}}}),fh=qa({raggedTensorToTensor_:function(e,t,n,r,s){const a=Ha(e,"shape","raggedTensorToTensor","int32"),o=Ha(t,"values","raggedTensorToTensor"),i={shape:a,values:o,defaultValue:Ha(n,"defaultValue","raggedTensorToTensor",o.dtype),rowPartitionTensors:r.map(((e,t)=>Ha(e,`tensors${t}`,"raggedTensorToTensor","int32")))},l={rowPartitionTypes:s};return Oa.runKernel(dr,i,l)}}),mh=qa({rand_:function(e,t,n){We(e);const r=ue(e);let s=null;if(null==n||"float32"===n)s=new Float32Array(r);else if("int32"===n)s=new Int32Array(r);else{if("bool"!==n)throw new Error(`Unknown data type ${n}`);s=new Uint8Array(r)}for(let e=0;e<r;e++)s[e]=t();return Oa.makeTensor(s,e,n)}});var gh=n(7391);class yh{constructor(e,t,n,r,s){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=s||Math.random();this.random=gh.alea(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let r,s,a;do{r=2*this.random()-1,s=2*this.random()-1,a=r*r+s*s}while(a>=1||0===a);const o=Math.sqrt(-2*Math.log(a)/a);e=this.mean+this.stdDev*r*o,t=this.mean+this.stdDev*s*o,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class bh{constructor(e,t,n,r){this.alpha=e,this.beta=1/t,this.dtype=n;const s=r||Math.random();this.randu=gh.alea(s.toString()),this.randn=new yh(0,1,n,!1,this.randu()),this.d=e<1?e+2/3:e-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let e,t,n,r,s,a;for(;;){do{r=this.randn.nextValue(),a=1+this.c*r}while(a<=0);if(a*=a*a,e=r*r,t=1-.331*e*e,n=.5*e+this.d*(1-a+Math.log(a)),s=this.randu(),s<t||Math.log(s)<n)break}return a=1/this.beta*this.d*a,this.alpha<1&&(a*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(a)}convertValue(e){return"float32"===this.dtype?e:Math.round(e)}}class xh{constructor(e=0,t=1,n,r){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=gh.alea(r)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const wh=qa({randomGamma_:function(e,t,n=1,r="float32",s){if(We(e),null==n&&(n=1),null==r&&(r="float32"),"float32"!==r&&"int32"!==r)throw new Error(`Unsupported data type ${r}`);const a=new bh(t,n,r,s),o=ki(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=a.nextValue();return o.toTensor()}}),vh=qa({randomNormal_:function(e,t=0,n=1,r,s){if(We(e),null!=r&&"bool"===r)throw new Error(`Unsupported data type ${r}`);const a=new yh(t,n,r,!1,s),o=ki(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=a.nextValue();return o.toTensor()}}),kh=qa({randomStandardNormal_:function(e,t,n){if(null!=t&&"bool"===t)throw new Error(`Unsupported data type ${t}`);return vh(e,0,1,t,n)}}),Nh=qa({randomUniform_:function(e,t=0,n=1,r="float32",s){We(e);const a=ki(e,r),o=new xh(t,n,null,s);for(let e=0;e<a.values.length;e++)a.values[e]=o.nextValue();return a.toTensor()}}),Th=qa({randomUniformInt_:function(e,t,n,r){return Nh(e,t,n,"int32",r)}});function Sh(e,t,n=1,r="float32"){if(0===n)throw new Error("Cannot have a step of zero");const s={start:e,stop:t,step:n,dtype:r};return Oa.runKernel(fr,{},s)}const Ih=qa({reciprocal_:function(e){const t={x:Ha(e,"x","reciprocal")};return Oa.runKernel(gr,t)}}),Eh=qa({relu_:function(e){const t={x:Ha(e,"x","relu")};return Oa.runKernel(yr,t)}}),$h=qa({relu6_:function(e){const t={x:Ha(e,"x","relu6")};return Oa.runKernel(Nr,t)}}),Ch=qa({reverse_:function(e,t){const n={x:Ha(e,"x","reverse")},r={dims:t};return Oa.runKernel(Tr,n,r)}}),Ah=qa({reverse1d_:function(e){const t=Ha(e,"x","reverse");return oe(1===t.rank,(()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`)),Ch(t,0)}}),_h=qa({reverse2d_:function(e,t){const n=Ha(e,"x","reverse");return oe(2===n.rank,(()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`)),Ch(n,t)}}),Rh=qa({reverse3d_:function(e,t){const n=Ha(e,"x","reverse");return oe(3===n.rank,(()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`)),Ch(n,t)}}),Dh=qa({reverse4d_:function(e,t){const n=Ha(e,"x","reverse");return oe(4===n.rank,(()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`)),Ch(n,t)}}),Fh=qa({round_:function(e){const t={x:Ha(e,"x","round")};return Oa.runKernel(Sr,t)}}),Oh=qa({rsqrt_:function(e){const t={x:Ha(e,"x","rsqrt","float32")};return Oa.runKernel(Ir,t)}}),Mh=qa({selu_:function(e){const t={x:Ha(e,"x","selu")};return Oa.runKernel(_r,t)}}),Lh=qa({separableConv2d_:function(e,t,n,r,s,a=[1,1],o="NHWC"){const i=Ha(e,"x","separableConv2d"),l=Ha(t,"depthwiseFilter","separableConv2d"),u=Ha(n,"pointwiseFilter","separableConv2d");let c=i,p=!1;if(3===i.rank&&(p=!0,c=sc(i,[1,i.shape[0],i.shape[1],i.shape[2]])),"NCHW"===o)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");oe(4===c.rank,(()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`)),oe(4===l.rank,(()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`)),oe(4===u.rank,(()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`)),oe(1===u.shape[0],(()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${u.shape[0]}.`)),oe(1===u.shape[1],(()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${u.shape[1]}.`));const h=l.shape[2],d=l.shape[3];oe(u.shape[2]===h*d,(()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${h*d}, but got ${u.shape[2]}.`));const f=Bc(c,l,r,s,o,a),m=Ec(f,u,1,"valid",o);return p?sc(m,[m.shape[1],m.shape[2],m.shape[3]]):m}}),zh=async function(e,t){const n=Ha(e,"x","setdiff1d"),r=Ha(t,"y","setdiff1d");oe(n.dtype===r.dtype,(()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${r.dtype}).`)),oe(1===n.rank,(()=>`x should be 1D tensor, but got x (${n.shape}).`)),oe(1===r.rank,(()=>`y should be 1D tensor, but got y (${r.shape}).`));const s=await n.data(),a=await r.data(),o=new Set(a);let i=0;for(let e=0;e<s.length;e++)o.has(s[e])||i++;const l=new ua([i],n.dtype),u=new ua([i],"int32");for(let e=0,t=0;e<s.length;e++)o.has(s[e])||(l.values[t]=s[e],u.values[t]=e,t++);return[l.toTensor(),u.toTensor()]},Ph=qa({sign_:function(e){const t={x:Ha(e,"x","sign")};return Oa.runKernel(Or,t)}}),Bh=qa({sin_:function(e){const t={x:Ha(e,"x","sin","float32")};return Oa.runKernel(Dr,t)}}),Vh=qa({sinh_:function(e){const t={x:Ha(e,"x","sinh")};return Oa.runKernel(Fr,t)}}),Wh=qa({slice1d_:function(e,t,n){const r=Ha(e,"x","slice1d");return oe(1===r.rank,(()=>`slice1d expects a rank-1 tensor, but got a rank-${r.rank} tensor`)),uc(r,[t],[n])}}),Uh=qa({slice2d_:function(e,t,n){const r=Ha(e,"x","slice2d");return oe(2===r.rank,(()=>`slice2d expects a rank-2 tensor, but got a rank-${r.rank} tensor`)),uc(r,t,n)}}),Gh=qa({slice3d_:function(e,t,n){const r=Ha(e,"x","slice3d");return oe(3===r.rank,(()=>`slice3d expects a rank-3 tensor, but got a rank-${r.rank} tensor`)),uc(r,t,n)}}),Hh=qa({slice4d_:function(e,t,n){const r=Ha(e,"x","slice4d");return oe(4===r.rank,(()=>`slice4d expects a rank-4 tensor, but got a rank-${r.rank} tensor`)),uc(r,t,n)}}),jh=qa({softmax_:function(e,t=-1){const n=Ha(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);const r={logits:n},s={dim:t};return Oa.runKernel(Wr,r,s)}}),Kh=qa({fft_:function(e){oe("complex64"===e.dtype,(()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`));const t={input:e};return Oa.runKernel(on,t)}}),qh=qa({ifft_:function(e){oe("complex64"===e.dtype,(()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`));const t={input:e};return Oa.runKernel(bn,t)}}),Yh=qa({irfft_:function(e){const t=e.shape[e.shape.length-1],n=e.size/t;let r;if(t<=2){const s=sc(e,[n,t]);r=qh(s)}else{const s=[n,2*(t-1)],a=sc(Fl(e),[n,t]),o=sc(Rl(e),[n,t]),i=Ch(uc(a,[0,1],[n,t-2]),1),l=Ci(Ch(uc(o,[0,1],[n,t-2]),1),Bi(-1)),u=ic([a,i],1),c=ic([o,l],1),p=sc(Ya(u,c),[s[0],s[1]]);r=qh(p)}if(r=Fl(r),3===e.rank&&0!==e.shape[0]){const t=r,n=e.shape[0];r=sc(r,[n,r.shape[0]/n,r.shape[1]]),t.dispose()}return r}}),Xh=qa({split_:function(e,t,n=0){const r={x:Ha(e,"x","split")},s={numOrSizeSplits:t,axis:n};return Oa.runKernel(Vr,r,s)}}),Zh=qa({rfft_:function(e,t){oe("float32"===e.dtype,(()=>`The dtype for rfft() must be real value but got ${e.dtype}`));let n=e.shape[e.shape.length-1];const r=e.size/n;let s;if(null!=t&&t<n){const r=e.shape.map((e=>0)),a=e.shape.map((e=>e));a[e.shape.length-1]=t,s=uc(e,r,a),n=t}else if(null!=t&&t>n){const r=e.shape.map((e=>e));r[e.shape.length-1]=t-n,s=ic([e,Hp(r)],e.shape.length-1),n=t}else s=e;const a=Ri(s),o=sc(Ya(s,a),[r,n]),i=Kh(o),l=Math.floor(n/2)+1,u=Fl(i),c=Rl(i),p=Xh(u,[l,n-l],u.shape.length-1),h=Xh(c,[l,n-l],c.shape.length-1),d=s.shape.slice();return d[s.shape.length-1]=l,sc(Ya(p[0],h[0]),d)}}),Qh=qa({squaredDifference_:function(e,t){let n=Ha(e,"a","squaredDifference"),r=Ha(t,"b","squaredDifference");[n,r]=Ia(n,r),rl(n.shape,r.shape);const s={a:n,b:r};return Oa.runKernel(qr,s,{})}}),Jh=qa({squeeze_:function(e,t){const n=Ha(e,"x","squeeze","string_or_numeric");return sc(n,ve(n.shape,t).newShape)}}),ed=qa({stack_:function(e,t=0){const n=ja(e,"tensors","stack","string_or_numeric");oe(n.length>=1,(()=>"Pass at least one tensor to tf.stack")),n.length>0&&oe(t<=n[0].rank,(()=>"Axis must be <= rank of the tensor"));const r=n,s={axis:t};return Oa.runKernel(ar,r,s)}}),td=qa({step_:function(e,t=0){const n={x:Ha(e,"x","step")},r={alpha:t};return Oa.runKernel(ds,n,r)}}),nd=qa({stridedSlice_:function(e,t,n,r,s=0,a=0,o=0,i=0,l=0){const u={x:Ha(e,"x","stridedSlice","string_or_numeric")},c={begin:t,end:n,strides:r,beginMask:s,endMask:a,ellipsisMask:o,newAxisMask:i,shrinkAxisMask:l};return Oa.runKernel(Zr,u,c)}}),rd=qa({tan_:function(e){const t={x:Ha(e,"x","tan","float32")};return Oa.runKernel(ns,t)}});function sd(e,t){le(e);const n=Wa(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return Xa(e,null,n,t)}function ad(e,t,n){if(le(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const r=Wa(e,n);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return Xa(e,t,r,n)}function od(e,t,n){if(le(e),null!=t&&4!==t.length)throw new Error("tensor4d() requires shape to have four numbers");const r=Wa(e,n);if(4!==r.length&&1!==r.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return Xa(e,t,r,n)}function id(e,t,n){if(le(e),null!=t&&5!==t.length)throw new Error("tensor5d() requires shape to have five numbers");const r=Wa(e,n);if(5!==r.length&&1!==r.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return Xa(e,t,r,n)}function ld(e,t,n){if(le(e),null!=t&&6!==t.length)throw new Error("tensor6d() requires shape to have six numbers");const r=Wa(e,n);if(6!==r.length&&1!==r.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return Xa(e,t=t||r,r,n)}const ud=qa({tensorScatterUpdate_:function(e,t,n){const r=Ha(e,"tensor","tensorScatterupdate"),s=Ha(t,"indices","tensorScatterupdate","int32"),a=Ha(n,"updates","tensorScatterupdate");if(ql(a,s,r.shape),r.dtype!==a.dtype)throw new Error(`tensor and updates must have the same dtype, instead they are ${r.dtype} and ${a.dtype}.`);const o={tensor:r,indices:s,updates:a};return Oa.runKernel($r,o,{})}}),cd=qa({topk_:function(e,t=1,n=!0){const r=Ha(e,"x","topk");if(0===r.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const s=r.shape[r.shape.length-1];if(t<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`);if(t>s)throw new Error(`'k' passed to topk() must be <= the last dimension (${s}) but got ${t}`);const a={x:r},o={k:t,sorted:n},[i,l]=Oa.runKernel(as,a,o);return{values:i,indices:l}}}),pd=qa({truncatedNormal_:function(e,t=0,n=1,r,s){if(We(e),null!=r&&"bool"===r)throw new Error("Unsupported data type $ { dtype }");const a=new yh(t,n,r,!0,s),o=ki(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=a.nextValue();return o.toTensor()}}),hd=qa({unique_:function(e,t=0){const n=Ha(e,"x","unique","string_or_numeric");oe(n.rank>0,(()=>"The input tensor must be at least 1D"));const r={x:n},s={axis:t},[a,o]=Oa.runKernel(ls,r,s);return{values:a,indices:o}}}),dd=qa({unsortedSegmentSum_:function(e,t,n){const r=Ha(e,"x","unsortedSegmentSum"),s=Ha(t,"segmentIds","unsortedSegmentSum","int32");oe(de(n),(()=>"numSegments must be of dtype int"));const a={x:r,segmentIds:s},o={numSegments:n};return Oa.runKernel(cs,a,o)}}),fd=qa({unstack_:function(e,t=0){const n=Ha(e,"x","unstack","string_or_numeric");oe(t>=-n.shape.length&&t<n.shape.length,(()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`));const r={value:n},s={axis:t};return Oa.runKernel(us,r,s)}});function md(e,t){return Pp(e,t,"right")}function gd(e,t=!0,n,r){return Oa.makeVariable(e,t,n,r)}function yd(e,t){const n=[];for(let e=0;e<t.length;e++)t[e]&&n.push(e);const r=ki(e,"int32"),s=ki([n.length,e.length],"int32");for(let t=0;t<n.length;t++){const a=r.indexToLoc(n[t]),o=t*e.length;s.values.set(a,o)}return s.toTensor()}const bd=async function(e){const t=Ha(e,"condition","whereAsync","bool"),n=await t.data(),r=yd(t.shape,n);return e!==t&&t.dispose(),r},xd=async function(e,t,n){const r=Ha(e,"tensor","boolMask"),s=Ha(t,"mask","boolMask","bool"),a=null==n?0:n,o=s.rank,i=r.shape;oe(o>0,(()=>"mask cannot be scalar")),ie(i.slice(a,a+o),s.shape,"mask's shape must match the first K dimensions of tensor's shape,");let l=1;for(let e=a;e<a+o;e++)l*=i[e];const u=i.slice(0,a).concat([l],i.slice(a+o)),c=sc(r,u),p=sc(s,[-1]),h=await bd(p),d=Jh(h,[1]),f=yp(c,d,a);return e!==r&&r.dispose(),t!==s&&s.dispose(),d.dispose(),c.dispose(),p.dispose(),h.dispose(),f},wd=qa({movingAverage_:function(e,t,n,r,s=!0){const a=Ha(e,"v","movingAverage"),o=Ha(t,"x","movingAverage"),i=Ha(n,"decay","movingAverage");Ea(a,o),oe(he(a.shape,o.shape),(()=>"Shape mismatch in v and x"));const l=Bi(1),u=Qi(l,i);let c=Ci(Qi(o,a),u);if(s){oe(null!=r,(()=>"When using zeroDebias: true, step is required."));const e=Ha(r,"step","movingAverage");c=$i(c,Qi(l,Zi(i,e)))}return Ii(a,c)}}),vd=qa({scatterND_:function(e,t,n){We(n);const r=Ha(e,"indices","scatterND","int32"),s=Ha(t,"updates","scatterND");ql(s,r,n);const a={indices:r,updates:s},o={shape:n};return Oa.runKernel(Er,a,o)}}),kd=qa({sparseToDense_:function(e,t,n,r=0){We(n);const s=Ha(e,"sparseIndices","sparseToDense","int32"),a=Ha(t,"sparseValues","sparseToDense","string_or_numeric"),o=Ha(r,"defaultValue","sparseToDense",a.dtype);!function(e,t,n,r){if("int32"!==e.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);const s=e.rank>0?e.shape[0]:1,a=e.rank>1?e.shape[1]:1;if(n.length!==a)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${a}.`);const o=t.size;if(0!==t.rank&&(1!==t.rank||o!==s))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${s}]`);if(t.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(s,a,n,o);const i={sparseIndices:s,sparseValues:a,defaultValue:o},l={outputShape:n};return Oa.runKernel(Kr,i,l)}}),Nd=qa({gatherND_:function(e,t){const n=Ha(t,"indices","gatherND","int32"),r={params:Ha(e,"x","gatherND","string_or_numeric"),indices:n};return Oa.runKernel(fn,r)}}),Td=qa({dropout_:function(e,t,n,r){const s=Ha(e,"x","dropout");if(oe("float32"===s.dtype,(()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${s.dtype} tensor instead.`)),oe(t>=0&&t<1,(()=>`rate must be a float in the range [0, 1), but got ${t}.`)),0===t)return e instanceof da?s.clone():s;const a=function(e,t){if(null==t)return e.shape.slice();if(he(e.shape,t))return t;if(e.shape.length===t.length){const n=[];for(let r=0;r<e.shape.length;r++)null==t[r]&&null!=e.shape[r]?n.push(e.shape[r]):n.push(t[r]);return n}return t}(s,n),o=1-t,i=$i(gp(Ii(Nh(a,0,1,"float32",r),o)),o);return Ci(s,i)}});function Sd(e){return Math.floor(Math.pow(2,Math.ceil(Math.log(e)/Math.log(2))))}function Id(e,t,n){const r=1-e%2,s=new Float32Array(e);for(let a=0;a<e;++a){const o=2*Math.PI*a/(e+r-1);s[a]=t-n*Math.cos(o)}return sd(s,"float32")}const Ed=async function(e,t,n=1){const r=Ha(e,"predictions","inTopK"),s=Ha(t,"targets","inTopK");oe(r.rank>1,(()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${r.rank}`)),oe(r.rank-1===s.rank,(()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${r.rank} and targets rank ${s.rank}`)),ie(r.shape.slice(0,r.shape.length-1),s.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const a=r.shape[r.shape.length-1];oe(n>0&&n<=a,(()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${a}), but got ${n}`));const o=await r.data(),i=await s.data(),[l,u]=[o.length/a,a],c=ke("bool",l);for(let e=0;e<l;e++){const t=e*u,r=o.subarray(t,t+u),s=[];for(let e=0;e<r.length;e++)s.push({value:r[e],index:e});s.sort(((e,t)=>t.value-e.value)),c[e]=0;for(let t=0;t<n;t++)if(s[t].index===i[e]){c[e]=1;break}}return e!==r&&r.dispose(),t!==s&&s.dispose(),Za(c,s.shape,"bool")},$d=qa({conv2DBackpropFilter_:function(e,t,n,r,s,a="NHWC",o){let i=e;3===e.rank&&(i=sc(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=sc(t,[1,t.shape[0],t.shape[1],t.shape[2]])),oe(4===i.rank,(()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${i.shape}.`)),oe(4===l.rank,(()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${l.shape}.`)),oe(4===n.length,(()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`));const u="NHWC"===a?i.shape[3]:i.shape[1],c="NHWC"===a?l.shape[3]:l.shape[1];oe(u===n[2],(()=>`Error in conv2dDerFilter: depth of input ${u}) must match input depth in filter (${n[2]}.`)),oe(c===n[3],(()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${n[3]}).`)),rc("conv2dDerFilter",s,o);const p={x:i,dy:l},h={strides:r,pad:s,dataFormat:a,dimRoundingMode:o,filterShape:n};return Oa.runKernel(_t,p,h)}});function Cd(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return Ci(e,td(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function Ad(e,t){let n=t;const r=nl(e.shape,t.shape);return r.length>0&&(n=ip(n,r)),sc(n,e.shape)}function _d(e,t,n,r){if("linear"===t)return e;if("relu"===t)return Eh(e);if("elu"===t)return qc(e);if("relu6"===t)return $h(e);if("prelu"===t)return ch(e,n);if("leakyrelu"===t)return Np(e,r);if("sigmoid"===t)return lc(e);throw new Error(`Unknown fused activation ${t}.`)}const Rd=(e,t)=>!(e>0)||"linear"===t,Dd=qa({fusedConv2d_:function({x:e,filter:t,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:o,bias:i,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(l=l||"linear",!1===Rd(Oa.state.gradientDepth,l)){oe("NHWC"===s,(()=>`Error in fused conv2d: got dataFormat of ${s} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`));let p=Ec(e,t,n,r,s,a,o);return null!=i&&(p=Ii(p,i)),_d(p,l,u,c)}const p=Ha(e,"x","conv2d","float32"),h=Ha(t,"filter","conv2d","float32");let d=p,f=!1;3===p.rank&&(f=!0,d=sc(p,[1,p.shape[0],p.shape[1],p.shape[2]])),oe(4===d.rank,(()=>`Error in fused conv2d: input must be rank 4, but got rank ${d.rank}.`)),oe(4===h.rank,(()=>`Error in fused conv2d: filter must be rank 4, but got rank ${h.rank}.`)),rc("fused conv2d",r,o);const m="NHWC"===s?d.shape[3]:d.shape[1];oe(h.shape[2]===m,(()=>`Error in conv2d: depth of input (${m}) must match input depth for filter ${h.shape[2]}.`)),oe(ec(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`));const g=ju(d.shape,h.shape,n,a,r,o);let y,b;if(null!=i&&(y=Ha(i,"bias","fused conv2d"),[y]=Ia(y,p),"NHWC"===s?rl(g.outShape,y.shape):(oe(y.shape.length<=1,(()=>`Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${y.shape.length}.`)),oe(0===y.shape.length||y.shape[0]===g.outChannels||1===y.shape[0],(()=>`Error in fused conv2d: bias shape (${y.shape}) is not compatible with the number of output channels (${g.outChannels})`)))),null!=u){const e=u.shape;if(oe(e.length<=1||3===e.length,(()=>`Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${e.length}.`)),1===e.length)oe(1===e[0]||e[0]===g.outChannels,(()=>`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the number of output channels (${g.outChannels}).`));else if(3===e.length)try{rl(e,g.outShape)}catch(t){const n=`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the output shape of the conv2d (${g.outShape}).`;throw Error(n)}b=Ha(u,"prelu weights","fused conv2d")}const x=(e,t)=>{oe("NHWC"===s,(()=>`Error in gradient of fused conv2D: got dataFormat of ${s} but only NHWC is currently supported.`));const[o,i,u,c]=t,p=Cd(e,u,l);oe(Ju(a),(()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`));const h=[Cc(i.shape,p,o,n,r),$d(i,p,o.shape,n,r)];if(null!=c){const e=Ad(c,p);h.push(e)}return h},w={x:d,filter:h,bias:y,preluActivationWeights:b},v={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o,activation:l,leakyreluAlpha:c};if(null==i){const e=zi(((e,t,n)=>{let r=Oa.runKernel(ys,w,v);return n([t,e,r]),f&&(r=sc(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:x}}));return e(d,h)}{const e=zi(((e,t,n,r)=>{let s=Oa.runKernel(ys,w,v);return r([t,e,s,n]),f&&(s=sc(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:x}}));return e(d,h,y)}}}),Fd=qa({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,r,s,a=[1,1],o){let i=e;3===e.rank&&(i=sc(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=sc(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const u={x:i,dy:l},c={strides:r,pad:s,dimRoundingMode:o,dilations:a,filterShape:n};return Oa.runKernel(Gt,u,c)}}),Od=qa({depthwiseConv2dNativeBackpropInput_:function(e,t,n,r,s,a=[1,1],o){let i=t,l=!1;3===t.rank&&(l=!0,i=sc(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const u={dy:i,filter:n},c={strides:r,pad:s,dimRoundingMode:o,dilations:a,inputShape:e},p=Oa.runKernel(Ht,u,c);return l?sc(p,[p.shape[1],p.shape[2],p.shape[3]]):p}}),Md=qa({fusedDepthwiseConv2d_:function({x:e,filter:t,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:o,bias:i,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(!1===Rd(Oa.state.gradientDepth,l)){let p=Bc(e,t,n,r,s,a,o);return null!=i&&(p=Ii(p,i)),_d(p,l,u,c)}const p=Ha(e,"x","depthwiseConv2d","float32"),h=Ha(t,"filter","depthwiseConv2d","float32");let d=p,f=!1;3===p.rank&&(f=!0,d=sc(p,[1,p.shape[0],p.shape[1],p.shape[2]])),oe(4===d.rank,(()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${d.rank}.`)),oe(4===h.rank,(()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${h.rank}.`)),oe(d.shape[3]===h.shape[2],(()=>`Error in fused depthwiseConv2d: number of input channels (${d.shape[3]}) must match the inChannels dimension in filter ${h.shape[2]}.`)),null==a&&(a=[1,1]),oe(ec(n,a),(()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),rc("fused depthwiseConv2d",r,o);const m=ju(d.shape,h.shape,n,a,r,o,!0);let g,y;null!=i&&(g=Ha(i,"bias","fused conv2d"),[g]=Ia(g,p),rl(m.outShape,g.shape)),null!=u&&(y=Ha(u,"prelu weights","fused depthwiseConv2d"));const b=(e,t)=>{oe(Ju(a),(()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`));const[s,i,u,c]=t,p=Cd(e,u,l),h=Od(i.shape,p,s,n,r,a,o),d=Fd(i,p,s.shape,n,r,a,o);return null!=c?[h,d,Ad(g,p)]:[h,d]},x={x:d,filter:h,bias:g,preluActivationWeights:y},w={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o,activation:l,leakyreluAlpha:c};if(null==i){const e=zi(((e,t,n)=>{let r=Oa.runKernel(bs,x,w);return n([t,e,r]),f&&(r=sc(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:b}}));return e(d,h)}{const e=zi(((e,t,n,r)=>{let s=Oa.runKernel(bs,x,w);return r([t,e,s,n]),f&&(s=sc(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:b}}));return e(d,h,g)}}}),Ld=qa({fusedMatMul_:function({a:e,b:t,transposeA:n=!1,transposeB:r=!1,bias:s,activation:a="linear",preluActivationWeights:o,leakyreluAlpha:i=.2}){if(!1===Rd(Oa.state.gradientDepth,a)){let l=Al(e,t,n,r);return null!=s&&(l=Ii(l,s)),_d(l,a,o,i)}let l=Ha(e,"a","fused matMul"),u=Ha(t,"b","fused matMul");[l,u]=Ia(l,u);const c=n?l.shape[l.rank-2]:l.shape[l.rank-1],p=r?u.shape[u.rank-1]:u.shape[u.rank-2],h=n?l.shape[l.rank-1]:l.shape[l.rank-2],d=r?u.shape[u.rank-2]:u.shape[u.rank-1],f=l.shape.slice(0,-2),m=u.shape.slice(0,-2),g=ue(f),y=ue(m);oe(c===p,(()=>`Error in fused matMul: inner shapes (${c}) and (${p}) of Tensors with shapes ${l.shape} and ${u.shape} and transposeA=${n} and transposeB=${r} must match.`));const b=rl(l.shape.slice(0,-2),u.shape.slice(0,-2)).concat([h,d]),x=sc(l,n?[g,c,h]:[g,h,c]),w=sc(u,r?[y,d,p]:[y,p,d]);let v,k;null!=s&&(v=Ha(s,"bias","fused matMul"),[v]=Ia(v,l),rl(b,v.shape)),null!=o&&(k=Ha(o,"prelu weights","fused matMul"));const N=(e,t)=>{const[o,i,l,u]=t,c=Cd(sc(e,l.shape),l,a);let p,h;return n||r?!n&&r?(p=Al(c,i,!1,!1),h=Al(c,o,!0,!1)):n&&!r?(p=Al(i,c,!1,!0),h=Al(o,c,!1,!1)):(p=Al(i,c,!0,!0),h=Al(c,o,!0,!0)):(p=Al(c,i,!1,!0),h=Al(o,c,!0,!1)),null!=s?[p,h,Ad(u,c)]:[p,h]},T={a:x,b:w,bias:v,preluActivationWeights:k},S={transposeA:n,transposeB:r,activation:a,leakyreluAlpha:i};if(null==s){const e=zi(((e,t,n)=>{const r=Oa.runKernel(gs,T,S);return n([e,t,r]),{value:sc(r,b),gradFunc:N}}));return e(x,w)}{const e=zi(((e,t,n,r)=>{const s=Oa.runKernel(gs,T,S);return r([e,t,s,n]),{value:sc(s,b),gradFunc:N}}));return e(x,w,v)}}}),zd=qa({hammingWindow_:function(e){return Id(e,.54,.46)}}),Pd=qa({hannWindow_:function(e){return Id(e,.5,.5)}}),Bd=qa({frame_:function(e,t,n,r=!1,s=0){let a=0;const o=[];for(;a+t<=e.size;)o.push(uc(e,a,t)),a+=n;if(r)for(;a<e.size;){const r=a+t-e.size,i=ic([uc(e,a,t-r),Yi([r],s)]);o.push(i),a+=n}return 0===o.length?ad([],[0,t]):sc(ic(o),[o.length,t])}}),Vd=qa({stft_:function(e,t,n,r,s=Pd){null==r&&(r=Sd(t));const a=Bd(e,t,n),o=Ci(a,s(t));return Zh(o,r)}}),Wd=qa({cropAndResize_:function(e,t,n,r,s="bilinear",a=0){const o=Ha(e,"image","cropAndResize"),i=Ha(t,"boxes","cropAndResize","float32"),l=Ha(n,"boxInd","cropAndResize","int32"),u=i.shape[0];oe(4===o.rank,(()=>`Error in cropAndResize: image must be rank 4,but got rank ${o.rank}.`)),oe(2===i.rank&&4===i.shape[1],(()=>`Error in cropAndResize: boxes must be have size [${u},4] but had shape ${i.shape}.`)),oe(1===l.rank&&l.shape[0]===u,(()=>`Error in cropAndResize: boxInd must be have size [${u}] but had shape ${i.shape}.`)),oe(2===r.length,(()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${r.length}.`)),oe(r[0]>=1&&r[1]>=1,(()=>`cropSize must be atleast [1,1], but was ${r}`)),oe("bilinear"===s||"nearest"===s,(()=>`method must be bilinear or nearest, but was ${s}`));const c={image:o,boxes:i,boxInd:l},p={method:s,extrapolationValue:a,cropSize:r};return Oa.runKernel(Bt,c,p)}}),Ud=qa({flipLeftRight_:function(e){const t=Ha(e,"image","flipLeftRight","float32");oe(4===t.rank,(()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`));const n={image:t};return Oa.runKernel(un,n,{})}}),Gd=qa({grayscaleToRGB_:function(e){const t=Ha(e,"image","grayscaleToRGB"),n=t.rank-1,r=t.shape[n];oe(t.rank>=2,(()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`)),oe(1===r,(()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${r}.`));const s=new Array(t.rank);return s.fill(1,0,n),s[n]=3,fp(t,s)}}),Hd=qa({rgbToGrayscale_:function(e){const t=Ha(e,"image","RGBToGrayscale"),n=t.rank-1,r=t.shape[n];oe(t.rank>=2,(()=>`Error in RGBToGrayscale: images must be at least rank 2, but got rank ${t.rank}.`)),oe(3===r,(()=>`Error in RGBToGrayscale: last dimension of an RGB image should be size 3, but got size ${r}.`));const s=t.dtype,a=Ni(t,"float32"),o=sd([.2989,.587,.114]);let i;switch(t.rank){case 2:i=Kc("ij,j->i",a,o);break;case 3:i=Kc("ijk,k->ij",a,o);break;case 4:i=Kc("ijkl,l->ijk",a,o);break;case 5:i=Kc("ijklm,m->ijkl",a,o);break;case 6:i=Kc("ijklmn,n->ijklm",a,o);break;default:throw new Error("Not a valid tensor rank.")}return i=hp(i,-1),Ni(i,s)}}),jd=qa({rotateWithOffset_:function(e,t,n=0,r=.5){const s=Ha(e,"image","rotateWithOffset","float32");oe(4===s.rank,(()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${s.rank}.`));const a={image:s},o={radians:t,fillValue:n,center:r};return Oa.runKernel(ms,a,o)}});function Kd(e,t,n,r,s,a){null==r&&(r=.5),null==s&&(s=Number.NEGATIVE_INFINITY),null==a&&(a=0);const o=e.shape[0];return n=Math.min(n,o),oe(0<=r&&r<=1,(()=>`iouThreshold must be in [0, 1], but was '${r}'`)),oe(2===e.rank,(()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`)),oe(4===e.shape[1],(()=>`boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`)),oe(1===t.rank,(()=>"scores must be a 1D tensor")),oe(t.shape[0]===o,(()=>`scores has incompatible shape with boxes. Expected ${o}, but was ${t.shape[0]}`)),oe(0<=a&&a<=1,(()=>`softNmsSigma must be in [0, 1], but was '${a}'`)),{maxOutputSize:n,iouThreshold:r,scoreThreshold:s,softNmsSigma:a}}const qd=qa({nonMaxSuppression_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=Ha(e,"boxes","nonMaxSuppression","float32"),o=Ha(t,"scores","nonMaxSuppression","float32"),i=Kd(a,o,n,r,s),l={maxOutputSize:n=i.maxOutputSize,iouThreshold:r=i.iouThreshold,scoreThreshold:s=i.scoreThreshold};return Oa.runKernel(er,{boxes:a,scores:o},l)}});function Yd(e,t,n){const r=function(e,t,n){return function(e,t,n){let r=0,s=e.length,a=0,o=!1;for(;r<s;){a=r+(s-r>>>1);const i=n(t,e[a]);i>0?r=a+1:(s=a,o=!i)}return o?r:-r-1}(e,t,n||Xd)}(e,t,n),s=r<0?-(r+1):r;e.splice(s,0,t)}function Xd(e,t){return e>t?1:e<t?-1:0}function Zd(e,t,n,r,s){return ef(e,t,n,r,s,0)}function Qd(e,t,n,r,s,a){return ef(e,t,n,r,s,0,!1,a,!0)}function Jd(e,t,n,r,s,a){return ef(e,t,n,r,s,a,!0)}function ef(e,t,n,r,s,a,o=!1,i=!1,l=!1){const u=[];for(let e=0;e<t.length;e++)t[e]>s&&u.push({score:t[e],boxIndex:e,suppressBeginIndex:0});u.sort(rf);const c=a>0?-.5/a:0,p=[],h=[];for(;p.length<n&&u.length>0;){const t=u.pop(),{score:n,boxIndex:a,suppressBeginIndex:o}=t;if(n<s)break;let i=!1;for(let n=p.length-1;n>=o;--n){const o=tf(e,a,p[n]);if(o>=r){i=!0;break}if(t.score=t.score*nf(r,c,o),t.score<=s)break}t.suppressBeginIndex=p.length,i||(t.score===n?(p.push(a),h.push(t.score)):t.score>s&&Yd(u,t,rf))}const d=p.length,f=n-d;i&&f>0&&(p.push(...new Array(f).fill(0)),h.push(...new Array(f).fill(0)));const m={selectedIndices:p};return o&&(m.selectedScores=h),l&&(m.validOutputs=d),m}function tf(e,t,n){const r=e.subarray(4*t,4*t+4),s=e.subarray(4*n,4*n+4),a=Math.min(r[0],r[2]),o=Math.min(r[1],r[3]),i=Math.max(r[0],r[2]),l=Math.max(r[1],r[3]),u=Math.min(s[0],s[2]),c=Math.min(s[1],s[3]),p=Math.max(s[0],s[2]),h=Math.max(s[1],s[3]),d=(i-a)*(l-o),f=(p-u)*(h-c);if(d<=0||f<=0)return 0;const m=Math.max(a,u),g=Math.max(o,c),y=Math.min(i,p),b=Math.min(l,h),x=Math.max(y-m,0)*Math.max(b-g,0);return x/(d+f-x)}function nf(e,t,n){const r=Math.exp(t*n*n);return n<=e?r:0}function rf(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}const sf=qa({nonMaxSuppressionWithScore_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const o=Ha(e,"boxes","nonMaxSuppression"),i=Ha(t,"scores","nonMaxSuppression"),l=Kd(o,i,n,r,s,a),u={boxes:o,scores:i},c={maxOutputSize:n=l.maxOutputSize,iouThreshold:r=l.iouThreshold,scoreThreshold:s=l.scoreThreshold,softNmsSigma:a=l.softNmsSigma},p=Oa.runKernel(nr,u,c);return{selectedIndices:p[0],selectedScores:p[1]}}}),af=qa({nonMaxSuppressionPadded_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const o=Ha(e,"boxes","nonMaxSuppression"),i=Ha(t,"scores","nonMaxSuppression"),l=Kd(o,i,n,r,s,null),u={boxes:o,scores:i},c={maxOutputSize:l.maxOutputSize,iouThreshold:l.iouThreshold,scoreThreshold:l.scoreThreshold,padToMaxOutputSize:a},p=Oa.runKernel(tr,u,c);return{selectedIndices:p[0],validOutputs:p[1]}}}),of=qa({resizeBilinear_:function(e,t,n=!1,r=!1){const s=Ha(e,"images","resizeBilinear");oe(3===s.rank||4===s.rank,(()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${s.rank}.`)),oe(2===t.length,(()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`)),oe(!1===r||!1===n,(()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false."));let a=s,o=!1;3===s.rank&&(o=!0,a=sc(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const[]=t,i={images:a},l={alignCorners:n,halfPixelCenters:r,size:t},u=Oa.runKernel(vr,i,l);return o?sc(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),lf=qa({resizeNearestNeighbor_:function(e,t,n=!1,r=!1){const s=Ha(e,"images","resizeNearestNeighbor");oe(3===s.rank||4===s.rank,(()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${s.rank}.`)),oe(2===t.length,(()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`)),oe("float32"===s.dtype||"int32"===s.dtype,(()=>"`images` must have `int32` or `float32` as dtype")),oe(!1===r||!1===n,(()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false."));let a=s,o=!1;3===s.rank&&(o=!0,a=sc(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const[]=t,i={images:a},l={alignCorners:n,halfPixelCenters:r,size:t},u=Oa.runKernel(xr,i,l);return o?sc(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),uf=qa({threshold_:function(e,t="binary",n=!1,r=.5){const s=Ha(e,"image","threshold"),a=s.shape[0]*s.shape[1];let o,i,l,u,c=Ci(sd([r]),255);if(oe(3===s.rank,(()=>`Error in threshold: image must be rank 3,but got rank ${s.rank}.`)),oe(3===s.shape[2]||1===s.shape[2],(()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${s.shape[2]}.`)),oe("int32"===s.dtype||"float32"===s.dtype,(()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${s.dtype}.`)),oe("otsu"===t||"binary"===t,(()=>`Method must be binary or otsu, but was ${t}`)),3===s.shape[2]){[o,i,l]=Xh(s,[1,1,1],-1);const e=Ci(o,.2989),t=Ci(i,.587),n=Ci(l,.114);u=Ii(Ii(e,t),n)}else u=e;"otsu"===t&&(c=function(e,t){let n,r,s,a,o,i,l=sd([-1]),u=sd([0]),c=sd([0]);for(let p=0;p<e.size-1;p++){n=uc(e,0,p+1),r=uc(e,p+1),o=$i(ip(n),t),i=$i(ip(r),t);const h=ip(Ci(n,Sh(0,n.size)));s=$i(h,ip(n));const d=Yi(r.shape,n.size),f=Ii(Sh(0,r.size),d),m=Ci(r,f);a=$i(ip(m),ip(r));const g=Qi(s,a),y=Qi(s,a),b=Ci(o,i);c=Ci(Ci(b,g),y);const x=bp(c,u);u=Gc(x,c,u),l=Gc(x,sd([p]),l)}return l}(yc(Ni(Fh(u),"int32"),Za([]),256),a));const p=n?Sp(u,c):bp(u,c);return Ni(Ci(p,255),"int32")}}),cf=qa({transform_:function(e,t,n="nearest",r="constant",s=0,a){const o=Ha(e,"image","transform","float32"),i=Ha(t,"transforms","transform","float32");oe(4===o.rank,(()=>`Error in transform: image must be rank 4,but got rank ${o.rank}.`)),oe(2===i.rank&&(i.shape[0]===o.shape[0]||1===i.shape[0])&&8===i.shape[1],(()=>"Error in transform: Input transform should be batch x 8 or 1 x 8")),oe(null==a||2===a.length,(()=>`Error in transform: outputShape must be [height, width] or null, but got ${a}.`));const l={image:o,transforms:i},u={interpolation:n,fillMode:r,fillValue:s,outputShape:a};return Oa.runKernel(os,l,u)}}),pf=qa({bandPart_:function(e,t,n){const r=Ha(e,"a","bandPart");oe(r.rank>=2,(()=>`bandPart(): Rank must be at least 2, got ${r.rank}.`));const s=r.shape,[a,o]=r.shape.slice(-2);let i,l;"number"==typeof t?(oe(t%1==0,(()=>`bandPart(): numLower must be an integer, got ${t}.`)),oe(t<=a,(()=>`bandPart(): numLower (${t}) must not be greater than the number of rows (${a}).`)),i=Ha(t<0?a:t,"numLower","bandPart")):(oe("int32"===t.dtype,(()=>"bandPart(): numLower's dtype must be an int32.")),i=Gc(Tp(t,0),a,qp(t,a))),"number"==typeof n?(oe(n%1==0,(()=>`bandPart(): numUpper must be an integer, got ${n}.`)),oe(n<=o,(()=>`bandPart(): numUpper (${n}) must not be greater than the number of columns (${o}).`)),l=Ha(n<0?o:n,"numUpper","bandPart")):(oe("int32"===n.dtype,(()=>"bandPart(): numUpper's dtype must be an int32.")),l=Gc(Tp(n,0),o,qp(n,o)));const u=sc(Sh(0,a,1,"int32"),[-1,1]),c=Sh(0,o,1,"int32"),p=Qi(u,c),h=Fp(Sp(p,i),xp(p,Dl(l))),d=Hp([a,o],r.dtype);return sc(ed(fd(sc(r,[-1,a,o])).map((e=>Gc(h,e,d)))),s)}}),hf=qa({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,oe(null!=e&&e.length>0,(()=>"Gram-Schmidt process: input must not be null, undefined, or empty"));const n=e[0].shape[0];for(let t=1;t<e.length;++t)oe(e[t].shape[0]===n,(()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`))}else t=!0,e=Xh(e,e.shape[0],0).map((e=>Jh(e,[0])));oe(e.length<=e[0].shape[0],(()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`));const n=[],r=e;for(let t=0;t<e.length;++t)n.push(Oa.tidy((()=>{let e=r[t];if(t>0)for(let r=0;r<t;++r){const t=Ci(ip(Ci(n[r],e)),n[r]);e=Qi(e,t)}return $i(e,up(e,"euclidean"))})));return t?ed(n,0):n}});function df(e,t=!1){return Oa.tidy((()=>{oe(2===e.shape.length,(()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`));const n=e.shape[0],r=e.shape[1];let s=mp(n),a=Ti(e);const o=ad([[1]],[1,1]);let i=Ti(o);const l=n>=r?r:n;for(let e=0;e<l;++e){const t=a,l=i,u=s;[i,a,s]=Oa.tidy((()=>{const t=uc(a,[e,e],[n-e,1]),l=up(t),u=uc(a,[e,e],[1,1]),c=Gc(bp(u,0),ad([[-1]]),ad([[1]])),p=Qi(u,Ci(c,l)),h=$i(t,p);i=1===h.shape[0]?Ti(o):ic([o,uc(h,[1,0],[h.shape[0]-1,h.shape[1]])],0);const d=Dl($i(Al(c,p),l)),f=uc(a,[e,0],[n-e,r]),m=Ci(d,i),g=Ol(i);if(0===e)a=Qi(f,Al(m,Al(g,f)));else{const t=Qi(f,Al(m,Al(g,f)));a=ic([uc(a,[0,0],[e,r]),t],0)}const y=Ol(m),b=uc(s,[0,e],[n,s.shape[1]-e]);if(0===e)s=Qi(b,Al(Al(b,i),y));else{const t=Qi(b,Al(Al(b,i),y));s=ic([uc(s,[0,0],[n,e]),t],1)}return[i,a,s]})),uo([t,l,u])}return!t&&n>r&&(s=uc(s,[0,0],[n,r]),a=uc(a,[0,0],[r,r])),[s,a]}))}const ff=qa({qr_:function(e,t=!1){if(oe(e.rank>=2,(()=>`qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`)),2===e.rank)return df(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce(((e,t)=>e*t)),r=fd(sc(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),s=[],a=[];return r.forEach((e=>{const[n,r]=df(e,t);s.push(n),a.push(r)})),[sc(ed(s,0),e.shape),sc(ed(a,0),e.shape)]}}});var mf;!function(e){e[e.NONE=0]="NONE",e[e.MEAN=1]="MEAN",e[e.SUM=2]="SUM",e[e.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(mf||(mf={}));const gf=qa({computeWeightedLoss_:function(e,t,n=mf.SUM_BY_NONZERO_WEIGHTS){const r=Ha(e,"losses","computeWeightedLoss");let s=null;null!=t&&(s=Ha(t,"weights","computeWeightedLoss"));const a=null==s?r:Ci(r,s);if(n===mf.NONE)return a;if(n===mf.SUM)return ip(a);if(n===mf.MEAN){if(null==s)return Gp(a);{const e=r.size/s.size,t=$i(ip(a),ip(s));return e>1?$i(t,Bi(e)):t}}if(n===mf.SUM_BY_NONZERO_WEIGHTS){if(null==s)return $i(ip(a),Bi(r.size));{const e=Ci(s,jp(r.shape)),t=Ni(ip(eh(e,Bi(0))),"float32");return $i(ip(a),t)}}throw Error(`Unknown reduction: ${n}`)}}),yf=qa({absoluteDifference_:function(e,t,n,r=mf.SUM_BY_NONZERO_WEIGHTS){const s=Ha(e,"labels","absoluteDifference"),a=Ha(t,"predictions","absoluteDifference");let o=null;null!=n&&(o=Ha(n,"weights","absoluteDifference")),ie(s.shape,a.shape,"Error in absoluteDifference: ");const i=el(Qi(s,a));return gf(i,o,r)}}),bf=qa({cosineDistance_:function(e,t,n,r,s=mf.SUM_BY_NONZERO_WEIGHTS){const a=Ha(e,"labels","cosineDistance"),o=Ha(t,"predictions","cosineDistance");let i=null;null!=r&&(i=Ha(r,"weights","cosineDistance")),ie(a.shape,o.shape,"Error in cosineDistance: ");const l=Bi(1),u=Qi(l,ip(Ci(a,o),n,!0));return gf(u,i,s)}}),xf=qa({hingeLoss_:function(e,t,n,r=mf.SUM_BY_NONZERO_WEIGHTS){let s=Ha(e,"labels","hingeLoss");const a=Ha(t,"predictions","hingeLoss");let o=null;null!=n&&(o=Ha(n,"weights","hingeLoss")),ie(s.shape,a.shape,"Error in hingeLoss: ");const i=Bi(1);s=Qi(Ci(Bi(2),s),i);const l=Eh(Qi(i,Ci(s,a)));return gf(l,o,r)}}),wf=qa({huberLoss_:function(e,t,n,r=1,s=mf.SUM_BY_NONZERO_WEIGHTS){const a=Ha(e,"labels","huberLoss"),o=Ha(t,"predictions","huberLoss");let i=null;null!=n&&(i=Ha(n,"weights","huberLoss")),ie(a.shape,o.shape,"Error in huberLoss: ");const l=Bi(r),u=el(Qi(o,a)),c=qp(u,l),p=Qi(u,c),h=Ii(Ci(Bi(.5),_i(c)),Ci(l,p));return gf(h,i,s)}}),vf=qa({logLoss_:function(e,t,n,r=1e-7,s=mf.SUM_BY_NONZERO_WEIGHTS){const a=Ha(e,"labels","logLoss"),o=Ha(t,"predictions","logLoss");let i=null;null!=n&&(i=Ha(n,"weights","logLoss")),ie(a.shape,o.shape,"Error in logLoss: ");const l=Bi(1),u=Bi(r),c=Dl(Ci(a,$p(Ii(o,u)))),p=Ci(Qi(l,a),$p(Ii(Qi(l,o),u))),h=Qi(c,p);return gf(h,i,s)}}),kf=qa({meanSquaredError_:function(e,t,n,r=mf.SUM_BY_NONZERO_WEIGHTS){const s=Ha(e,"labels","meanSquaredError"),a=Ha(t,"predictions","meanSquaredError");let o=null;null!=n&&(o=Ha(n,"weights","meanSquaredError")),ie(s.shape,a.shape,"Error in meanSquaredError: ");const i=Qh(s,a);return gf(i,o,r)}}),Nf=qa({sigmoidCrossEntropy_:function(e,t,n,r=0,s=mf.SUM_BY_NONZERO_WEIGHTS){let a=Ha(e,"multiClassLabels","sigmoidCrossEntropy");const o=Ha(t,"logits","sigmoidCrossEntropy");let i=null;if(null!=n&&(i=Ha(n,"weights","sigmoidCrossEntropy")),ie(a.shape,o.shape,"Error in sigmoidCrossEntropy: "),r>0){const e=Bi(r),t=Bi(1),n=Bi(.5);a=Ii(Ci(a,Qi(t,e)),Ci(n,e))}const l=function(e,t){const n=Ha(e,"labels","sigmoidCrossEntropyWithLogits"),r=Ha(t,"logits","sigmoidCrossEntropyWithLogits");ie(n.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");const s=Eh(r),a=Ci(r,n),o=Cp(pp(Dl(el(r))));return Ii(Qi(s,a),o)}(a,o);return gf(l,i,s)}}),Tf=qa({softmaxCrossEntropy_:function(e,t,n,r=0,s=mf.SUM_BY_NONZERO_WEIGHTS){let a=Ha(e,"onehotLabels","softmaxCrossEntropy");const o=Ha(t,"logits","softmaxCrossEntropy");let i=null;if(null!=n&&(i=Ha(n,"weights","softmaxCrossEntropy")),ie(a.shape,o.shape,"Error in softmaxCrossEntropy: "),r>0){const e=Bi(r),t=Bi(1),n=Bi(a.shape[1]);a=Ii(Ci(a,Qi(t,e)),$i(e,n))}const l=function(e,t,n=-1){if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${n}`);const r=zi(((e,t,r)=>{const s=Dp(t,[n],!0),a=Qi(Ni(t,"float32"),s);r([e,a]);const o=Dl(Ci(a,e));return{value:ip(o,[n]),gradFunc:(e,t)=>{const[r,s]=t,a=ep(e.shape,[n]);return[Ci(sc(e,a),Qi(Ni(r,"float32"),pp(s))),Ci(sc(e,a),Qi(pp(s),Ni(r,"float32")))]}}}));return r(e,t)}(a,o);return gf(l,i,s)}}),Sf=qa({sparseFillEmptyRows_:function(e,t,n,r){const s=Ha(e,"indices","sparseFillEmptyRows","int32"),a=Ha(t,"values","sparseFillEmptyRows"),o=Ha(n,"denseShape","sparseFillEmptyRows","int32"),i=Ha(r,"defaultValue","sparseFillEmptyRows",a.dtype);if(2!==s.rank)throw new Error(`Indices should be Tensor2D but received shape\n        ${s.shape}`);if(1!==a.rank)throw new Error(`Values should be Tensor1D but received shape ${a.shape}`);if(1!==o.rank)throw new Error(`Dense shape should be Tensor1D but received shape ${o.shape}`);if(0!==i.rank)throw new Error(`Default value should be a scalar but received shape ${i.shape}`);const l={indices:s,values:a,denseShape:o,defaultValue:i},u=Oa.runKernel(Ur,l);return{outputIndices:u[0],outputValues:u[1],emptyRowIndicator:u[2],reverseIndexMap:u[3]}}}),If=qa({sparseReshape_:function(e,t,n){const r=Ha(e,"inputIndices","sparseReshape","int32"),s=Ha(t,"inputShape","sparseReshape","int32"),a=Ha(n,"newShape","sparseReshape","int32");if(2!==r.rank)throw new Error(`Input indices should be Tensor2D but received shape\n        ${r.shape}`);if(1!==s.rank)throw new Error(`Input shape should be Tensor1D but received shape ${s.shape}`);if(1!==a.rank)throw new Error(`New shape should be Tensor1D but received shape ${a.shape}`);const o={inputIndices:r,inputShape:s,newShape:a},i=Oa.runKernel(Gr,o);return{outputIndices:i[0],outputShape:i[1]}}}),Ef=qa({sparseSegmentMean_:function(e,t,n){const r=Ha(e,"data","sparseSegmentMean"),s=Ha(t,"indices","sparseSegmentMean","int32"),a=Ha(n,"segmentIds","sparseSegmentMean","int32");if(r.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.rank)throw new Error(`Indices should be Tensor1D but received shape\n          ${s.shape}`);if(1!==a.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n          ${a.shape}`);const o={data:r,indices:s,segmentIds:a};return Oa.runKernel(Hr,o)}}),$f=qa({sparseSegmentSum_:function(e,t,n){const r=Ha(e,"data","sparseSegmentSum"),s=Ha(t,"indices","sparseSegmentSum","int32"),a=Ha(n,"segmentIds","sparseSegmentSum","int32");if(r.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.rank)throw new Error(`Indices should be Tensor1D but received shape\n         ${s.shape}`);if(1!==a.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n         ${a.shape}`);const o={data:r,indices:s,segmentIds:a};return Oa.runKernel(jr,o)}}),Cf=qa({stringNGrams_:function(e,t,n,r,s,a,o,i){const l=Ha(e,"data","stringNGrams","string");if("string"!==l.dtype)throw new Error("Data must be of datatype string");if(1!==l.shape.length)throw new Error(`Data must be a vector, saw: ${l.shape}`);const u=Ha(t,"dataSplits","stringNGrams");if("int32"!==u.dtype)throw new Error("Data splits must be of datatype int32");const c={separator:n,nGramWidths:r,leftPad:s,rightPad:a,padWidth:o,preserveShortSequences:i},p={data:l,dataSplits:u},h=Oa.runKernel(Qr,p,c);return{nGrams:h[0],nGramsSplits:h[1]}}}),Af=qa({stringSplit_:function(e,t,n=!0){const r=Ha(e,"input","stringSplit","string"),s=Ha(t,"delimiter","stringSplit","string");if(1!==r.rank)throw new Error(`Input should be Tensor1D but received shape ${r.shape}`);if(0!==s.rank)throw new Error(`Delimiter should be a scalar but received shape ${s.shape}`);const a={skipEmpty:n},o={input:r,delimiter:s},i=Oa.runKernel(Jr,o,a);return{indices:i[0],values:i[1],shape:i[2]}}}),_f=qa({stringToHashBucketFast_:function(e,t){const n=Ha(e,"input","stringToHashBucketFast","string"),r={numBuckets:t};if(t<=0)throw new Error("Number of buckets must be at least 1");const s={input:n};return Oa.runKernel(es,s,r)}}),Rf=qa({staticRegexReplace_:function(e,t,n,r=!0){const s=Ha(e,"input","staticRegexReplace","string"),a={pattern:t,rewrite:n,replaceGlobal:r};return Oa.runKernel(Xr,{x:s},a)}}),Df={fft:Kh,ifft:qh,rfft:Zh,irfft:Yh},Ff={hammingWindow:zd,hannWindow:Pd,frame:Bd,stft:Vd},Of={flipLeftRight:Ud,grayscaleToRGB:Gd,resizeNearestNeighbor:lf,resizeBilinear:of,rgbToGrayscale:Hd,rotateWithOffset:jd,cropAndResize:Wd,nonMaxSuppression:qd,nonMaxSuppressionAsync:async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=Ha(e,"boxes","nonMaxSuppressionAsync"),o=Ha(t,"scores","nonMaxSuppressionAsync"),i=Kd(a,o,n,r,s);n=i.maxOutputSize,r=i.iouThreshold,s=i.scoreThreshold;const l=await Promise.all([a.data(),o.data()]),u=l[0],c=l[1],{selectedIndices:p}=Zd(u,c,n,r,s);return a!==e&&a.dispose(),o!==t&&o.dispose(),sd(p,"int32")},nonMaxSuppressionWithScore:sf,nonMaxSuppressionWithScoreAsync:async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const o=Ha(e,"boxes","nonMaxSuppressionAsync"),i=Ha(t,"scores","nonMaxSuppressionAsync"),l=Kd(o,i,n,r,s,a);n=l.maxOutputSize,r=l.iouThreshold,s=l.scoreThreshold,a=l.softNmsSigma;const u=await Promise.all([o.data(),i.data()]),c=u[0],p=u[1],{selectedIndices:h,selectedScores:d}=Jd(c,p,n,r,s,a);return o!==e&&o.dispose(),i!==t&&i.dispose(),{selectedIndices:sd(h,"int32"),selectedScores:sd(d)}},nonMaxSuppressionPadded:af,nonMaxSuppressionPaddedAsync:async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const o=Ha(e,"boxes","nonMaxSuppressionAsync"),i=Ha(t,"scores","nonMaxSuppressionAsync"),l=Kd(o,i,n,r,s,null),u=l.maxOutputSize,c=l.iouThreshold,p=l.scoreThreshold,[h,d]=await Promise.all([o.data(),i.data()]),{selectedIndices:f,validOutputs:m}=Qd(h,d,u,c,p,a);return o!==e&&o.dispose(),i!==t&&i.dispose(),{selectedIndices:sd(f,"int32"),validOutputs:Bi(m,"int32")}},threshold:uf,transform:cf},Mf={bandPart:pf,gramSchmidt:hf,qr:ff},Lf={absoluteDifference:yf,computeWeightedLoss:gf,cosineDistance:bf,hingeLoss:xf,huberLoss:wf,logLoss:vf,meanSquaredError:kf,sigmoidCrossEntropy:Nf,softmaxCrossEntropy:Tf},zf={sparseFillEmptyRows:Sf,sparseReshape:If,sparseSegmentMean:Ef,sparseSegmentSum:$f},Pf={stringNGrams:Cf,stringSplit:Af,stringToHashBucketFast:_f,staticRegexReplace:Rf},Bf=Au,Vf="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:e=>e();function Wf(){return new Promise((e=>Vf((()=>e()))))}function Uf(e,t){const n=e[0].length;e.forEach(((e,t)=>{oe(e.length===n,(()=>`Error in concat${n}D: rank of tensors[${t}] must be the same as the rank of the rest (${n})`))})),oe(t>=0&&t<n,(()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`));const r=e[0];e.forEach(((e,s)=>{for(let a=0;a<n;a++)oe(a===t||e[a]===r[a],(()=>`Error in concat${n}D: Shape of tensors[${s}] (${e}) does not match the shape of the rest (${r}) along the non-concatenated axis ${s}.`))}))}function Gf(e,t){const n=e[0].slice();for(let r=1;r<e.length;r++)n[t]+=e[r][t];return n}var Hf;function jf(e,t,n){let r=new Array;if(null==n&&null==t)return r;if(null==t)for(;r.length<e+n.length;)r.push(-1);else r=t.slice();if(null==n)return r;if(e+n.length!==r.length)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.rank = ${e+n.length}, but shape.rank = ${r.length}`);for(let s=1;s<n.length;++s){const a=n[s],o=r[r.length-n.length+s],i=r[o];if(a>=0)if(i>=0){if(i!==a)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.shape[${s+e}] = ${a} but shape[${s+e}] = ${i}`)}else r[o]=a}return r}function Kf(e){const t={FIRST_DIM_SIZE:Hf.FIRST_DIM_SIZE,VALUE_ROWIDS:Hf.VALUE_ROWIDS,ROW_LENGTHS:Hf.ROW_LENGTHS,ROW_SPLITS:Hf.ROW_SPLITS,ROW_LIMITS:Hf.ROW_LIMITS,ROW_STARTS:Hf.ROW_STARTS},n=[];for(const r of e){if(!(r in t))break;n.push(t[r])}return n}function qf(e){return 0===e.length?0:e[0]===Hf.FIRST_DIM_SIZE?e.length-1:e.length}function Yf(e,t){if(null==e||null==t)return;const n=e.length,r=t.length;if(n>=r)throw new Error(`defaultValue.shape=${e} and ragged tensor flatValues.shape=${t}, are incompatible: defaultValue.rank = ${n} must be less than ragged tensor input flatValues.rank = ${r})`);for(let s=0;s<Math.min(n,r-1);++s){const n=e[s],r=t[s+1];if(n>=0&&r>=0&&1!==n&&n!==r)throw new Error(`defaultValue.shape=${e}, and ragged tensor input flatValues.shape=${t} are incompatible: defaultValue.shape[${s-e.length}] = ${n} but ragged tensor input.flatValues.shape[${s-e.length}] = ${r}`)}}!function(e){e[e.FIRST_DIM_SIZE=0]="FIRST_DIM_SIZE",e[e.VALUE_ROWIDS=1]="VALUE_ROWIDS",e[e.ROW_LENGTHS=2]="ROW_LENGTHS",e[e.ROW_SPLITS=3]="ROW_SPLITS",e[e.ROW_LIMITS=4]="ROW_LIMITS",e[e.ROW_STARTS=5]="ROW_STARTS"}(Hf||(Hf={}));const Xf=30;function Zf(e){return e<=Xf?e:Fe(e,Math.floor(Math.sqrt(e)))}function Qf(e,t,n){return[n*("number"==typeof e?e:e[0]),t*("number"==typeof e?e:e[1])]}function Jf(e,t,n,r=!0){let s=[];if(r)s=s.concat(t.slice(0)),s.push(e[0]/n),s=s.concat(e.slice(1));else{s=s.concat(e[0]);const n=t.length;for(let r=0;r<n;++r)s=s.concat([e[r+1]/t[r],t[r]]);s=s.concat(e.slice(n+1))}return s}function em(e,t,n=!0){const r=[];if(n){r.push(t);for(let n=t+1;n<e;++n)n<=2*t?(r.push(n),r.push(n-(t+1))):r.push(n)}else{const n=[],s=[];for(let r=1;r<e;++r)r>=2*t+1||r%2==1?s.push(r):n.push(r);r.push(...n),r.push(0),r.push(...s)}return r}function tm(e,t,n,r=!0){const s=[];r?s.push(e[0]/n):s.push(e[0]*n);for(let n=1;n<e.length;++n)n<=t.length?r?s.push(t[n-1]*e[n]):s.push(e[n]/t[n-1]):s.push(e[n]);return s}function nm(e,t){const n=[0];for(let r=0;r<t;++r)n.push(e[r][0]);return n}function rm(e,t,n){const r=e.slice(0,1);for(let s=0;s<n;++s)r.push(e[s+1]-t[s][0]-t[s][1]);return r}const sm=1.7580993408473768,am=1.0507009873554805,om=.3275911,im=.254829592,lm=-.284496736,um=1.421413741,cm=-1.453152027,pm=1.061405429;function hm(e,t){if(e.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);const n=new Float32Array(2*e.length);for(let r=0;r<n.length;r+=2)n[r]=e[r/2],n[r+1]=t[r/2];return n}function dm(e){const t=new Float32Array(e.length/2),n=new Float32Array(e.length/2);for(let r=0;r<e.length;r+=2)t[r/2]=e[r],n[r/2]=e[r+1];return{real:t,imag:n}}function fm(e){const t=Math.ceil(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let t=0;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],r[Math.floor(t/4)]=e[t+1];return{real:n,imag:r}}function mm(e){const t=Math.floor(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let t=2;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],r[Math.floor(t/4)]=e[t+1];return{real:n,imag:r}}function gm(e,t){return{real:e[2*t],imag:e[2*t+1]}}function ym(e,t,n,r){e[2*r]=t,e[2*r+1]=n}function bm(e,t){const n=new Float32Array(e/2),r=new Float32Array(e/2);for(let s=0;s<Math.ceil(e/2);s++){const a=(t?2:-2)*Math.PI*(s/e);n[s]=Math.cos(a),r[s]=Math.sin(a)}return{real:n,imag:r}}function xm(e,t,n){const r=(n?2:-2)*Math.PI*(e/t);return{real:Math.cos(r),imag:Math.sin(r)}}const wm="->",vm=/->/g,km=",",Nm="...";function Tm(e,t){const n=((e=e.replace(/\s/g,"")).length-e.replace(vm,"").length)/wm.length;if(n<1)throw new Error("Equations without an arrow are not supported.");if(n>1)throw new Error(`Equation must contain exactly one arrow ("${wm}").`);const[r,s]=e.split(wm);oe(-1===r.indexOf(Nm),(()=>`The ellipsis notation ("${Nm}") is not supported yet.`));const a=r.split(km),o=a.length;if(t!==o)throw new Error(`Expected ${o} input tensors, received ${t}`);if(o>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");const i=[];for(let e=0;e<s.length;++e){const t=s[e];if(!a.some((e=>-1!==e.indexOf(t))))throw new Error(`Output subscripts contain the label ${t} not present in the input subscripts.`);-1===i.indexOf(t)&&i.push(t)}for(let e=0;e<r.length;++e){const t=r[e];-1===i.indexOf(t)&&t!==km&&i.push(t)}const l=new Array(a.length);for(let e=0;e<o;++e){if(new Set(a[e].split("")).size!==a[e].length)throw new Error(`Found duplicate axes in input component ${a[e]}. Support for duplicate axes in input is not implemented yet.`);l[e]=[];for(let t=0;t<a[e].length;++t)l[e].push(i.indexOf(a[e][t]))}const u=i.length,c=[];for(let e=s.length;e<u;++e)c.push(e);return{allDims:i,summedDims:c,idDims:l}}function Sm(e,t){let n=new Array(e);n.fill(-1);for(let e=0;e<t.length;++e)n[t[e]]=e;const r=[];for(let t=0;t<e;++t)-1===n[t]&&r.push(t);return n=n.filter((e=>-1!==e)),{permutationIndices:n,expandDims:r}}function Im(e,t,n){const r=new Array(e);for(let e=0;e<n.length;++e){const s=n[e].shape;for(let n=0;n<t[e].length;++n)void 0===r[t[e][n]]?r[t[e][n]]=s[n]:oe(r[t[e][n]]===s[n],(()=>`Expected dimension ${r[t[e][n]]} at axis ${n} of input shaped ${JSON.stringify(s)}, but got dimension ${s[n]}`))}}function Em(e,t){const n=e,r=[];let s=0;0===e.length&&n.push(-1),s=e.length+1;for(let e=0;e<s;++e)r.push([]);const a=[];for(let e=0;e<n.length;++e){const s=Cm(t,n[e]);for(const t of s)-1===a.indexOf(t)&&(r[e].push(t),a.push(t))}return{path:n,steps:r}}function $m(e){return e.every(((e,t)=>e===t))}function Cm(e,t){const n=[];for(let r=0;r<e.length;++r)0!==e[r].length&&-1===e[r].indexOf(t)&&-1!==t||n.push(r);return n}function Am(e,t,n=0){let r=[];if("number"==typeof t)oe(e.shape[n]%t==0,(()=>"Number of splits must evenly divide the axis.")),r=new Array(t).fill(e.shape[n]/t);else{const s=t.reduce(((e,t)=>(-1===t&&(e+=1),e)),0);oe(s<=1,(()=>"There should be only one negative value in split array."));const a=t.indexOf(-1);if(-1!==a){const r=t.reduce(((e,t)=>t>0?e+t:e));t[a]=e.shape[n]-r}oe(e.shape[n]===t.reduce(((e,t)=>e+t)),(()=>"The sum of sizes must match the size of the axis dimension.")),r=t}return r}function _m(e){return`Received SparseTensor with denseShape[0] = 0 but\n  indices.shape[0] = ${e}`}function Rm(e,t){return`indices(${e}, 0) is invalid: ${t} < 0`}function Dm(e,t,n){return`indices(${e}, 0) is invalid: ${t} >= ${n}`}function Fm(e,t){return`only one output dimension may be -1, not both ${e} and ${t}`}function Om(e,t){return`size ${e} must be non-negative, not ${t}`}function Mm(){return"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero"}function Lm(e,t){return`Input to reshape is a SparseTensor with ${ue(e)}\n  dense values, but the requested shape requires a multiple of ${ue(t)}. inputShape=${e} outputShape= ${t}`}function zm(e,t){return`Input to reshape is a tensor with ${ue(e)} dense values, but the requested shape has ${ue(t)}. inputShape=${e} outputShape=${t}`}function Pm(){return"segment ids must be >= 0"}function Bm(){return"segment ids are not increasing"}function Vm(e,t){return`Segment id ${e} out of range [0, ${t}), possibly because segmentIds input is not sorted.`}function Wm(e,t,n){return`Bad: indices[${e}] == ${t} out of range [0, ${n})`}function Um(e,t){let n,r=!1;for(e<=Xf?(n=e,r=!0):n=Fe(e,Math.floor(Math.sqrt(e)));!r;)n>t||n===e?r=!0:n=Fe(e,n+1);return n}function Gm(e,t,n){const r=[],s=e.length;for(let a=0;a<s;a++)a!==t?r.push(e[a]):r.push(n);return r}function Hm(e,t,n,r){const s=t.shape.length,a=e.shape.length;if(0!==r&&(r<-s||r>s))throw new Error(`Expect batchDims in the range of [-${s}, ${s}], but got ${r}`);if(r<0&&(r+=s),r>a)throw new Error(`batchDims (${r}) must be less than rank(x) (\n    ${a}).`);if(n<r)throw new Error(`batchDims (${r}) must be less than or equal to axis (${n}).`);for(let n=0;n<r;++n)if(e.shape[n]!==t.shape[n])throw new Error(`x.shape[${n}]: ${e.shape[n]} should be equal to indices.shape[${n}]: ${t.shape[n]}.`);const o=e.shape[n],i=[];let l=1,u=1,c=1;for(let t=0;t<r;++t)i.push(e.shape[t]),l*=e.shape[t];for(let t=r;t<n;t++)i.push(e.shape[t]),u*=e.shape[t];for(let e=r;e<s;e++)i.push(t.shape[e]);for(let t=n+1;t<a;t++)i.push(e.shape[t]),c*=e.shape[t];return{batchSize:l,sliceSize:c,outerSize:u,dimSize:o,outputShape:i}}function jm(e){try{return e.map((e=>Qs(e)))}catch(e){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${e}`)}}function Km(e){return e.map((e=>Zs(e)))}!function(){for(const e of ul)Hi(e)}();const qm={kernelName:et,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ci(e,td(Ni(n,"float32"),-1))}}},Ym={kernelName:tt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=_i(Ni(n,"float32")),r=Ai(Qi(Bi(1),t));return Dl($i(e,r))}}}},Xm={kernelName:nt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Ai(Qi(_i(Ni(n,"float32")),1));return $i(e,t)}}}},Zm={kernelName:rt,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=rl(n.shape,r.shape);return{a:()=>{let t=e;const r=nl(n.shape,s);return r.length>0&&(t=ip(t,r)),sc(t,n.shape)},b:()=>{let t=e;const n=nl(r.shape,s);return n.length>0&&(t=ip(t,n)),sc(t,r.shape)}}}},Qm={kernelName:st,saveAllInputs:!0,gradFunc:(e,t)=>{const n={};return t.forEach(((t,r)=>{n[r]=()=>e.clone()})),n}},Jm={kernelName:it,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ri(n)}}},eg={kernelName:lt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ri(n)}}},tg={kernelName:ut,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>$i(e,Ai(Qi(Bi(1),_i(Ni(n,"float32")))))}}},ng={kernelName:ct,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Ai(Ii(Bi(1),_i(Ni(n,"float32"))));return $i(e,t)}}}},rg={kernelName:dt,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=rl(n.shape,r.shape);return{a:()=>{const t=Ii(_i(n),_i(r));let a=Ci(e,$i(r,t));const o=nl(n.shape,s);return o.length>0&&(a=ip(a,o)),sc(a,n.shape)},b:()=>{const t=Ii(_i(n),_i(r));let a=Dl(Ci(e,$i(n,t)));const o=nl(r.shape,s);return o.length>0&&(a=ip(a,o)),sc(a,r.shape)}}}},sg={kernelName:pt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>$i(e,Ii(_i(Ni(n,"float32")),1))}}},ag={kernelName:ht,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>$i(e,Qi(Bi(1),_i(Ni(n,"float32"))))}}},og=qa({avgPool3dGrad_:function(e,t,n,r,s,a){const o=Ha(e,"dy","avgPool3dGrad"),i=Ha(t,"input","avgPool3dGrad");let l=o,u=i,c=!1;4===i.rank&&(c=!0,l=sc(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]]),u=sc(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),oe(5===l.rank,(()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${l.rank}.`)),oe(5===u.rank,(()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${u.rank}.`)),rc("avgPool3dGrad",s,a);const p={dy:l,input:u},h={filterSize:n,strides:r,pad:s,dimRoundingMode:a},d=Oa.runKernel(yt,p,h);return c?sc(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),ig={kernelName:gt,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{filterSize:s,strides:a,pad:o,dimRoundingMode:i}=n;return{x:()=>og(e,r,s,a,o,i)}}},lg=qa({avgPoolGrad_:function(e,t,n,r,s){const a=Ha(e,"dy","avgPoolGrad"),o=Ha(t,"input","avgPoolGrad");oe(o.rank===a.rank,(()=>`Rank of input (${o.rank}) does not match rank of dy (${a.rank})`));let i=o,l=a,u=!1;3===o.rank&&(u=!0,i=sc(o,[1,o.shape[0],o.shape[1],o.shape[2]]),l=sc(a,[1,a.shape[0],a.shape[1],a.shape[2]])),oe(4===l.rank,(()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${l.rank}.`)),oe(4===i.rank,(()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${i.rank}.`));const c={dy:l,input:i},p={filterSize:n,strides:r,pad:s},h=Oa.runKernel(mt,c,p);return u?sc(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),ug={kernelName:ft,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{filterSize:s,strides:a,pad:o}=n;return{x:()=>lg(e,r,s,a,o)}}},cg={kernelName:bt,inputsToSave:["a","b"],gradFunc:(e,t,n)=>{const[r,s]=t,{transposeA:a,transposeB:o}=n;return a||o?!a&&o?{a:()=>Al(e,s,!1,!1),b:()=>Al(e,r,!0,!1)}:a&&!o?{a:()=>Al(s,e,!1,!0),b:()=>Al(r,e,!1,!1)}:{a:()=>Al(s,e,!0,!0),b:()=>Al(e,r,!0,!0)}:{a:()=>Al(e,s,!1,!0),b:()=>Al(r,e,!0,!1)}}},pg={kernelName:xt,gradFunc:(e,t,n)=>{const{blockShape:r,crops:s}=n;return{x:()=>lh(e,r,s)}}},hg={kernelName:kt,gradFunc:(e,t,n)=>{const r=n,s=r.inputShape,a=r.shape,o=Array.from(a);for(let e=s.length-1;e>=0;e--)if(s[e]===a[e])o[e]=1;else if(1!==s[e])throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${a}].`);const i=[];for(let e=0;e<o.length;e++)o[e]>1&&i.push(e);return{x:()=>ip(e,i,!0)}}},dg={kernelName:Tt,gradFunc:e=>({x:()=>e.clone()})},fg={kernelName:St,gradFunc:e=>({x:()=>Ri(e)})},mg={kernelName:It,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{clipValueMin:s,clipValueMax:a}=n;return{x:()=>Gc(Fp(xp(r,s),Sp(r,a)),e,Ri(e))}}},gg={kernelName:$t,inputsToSave:["x"],gradFunc:qm.gradFunc},yg={kernelName:Ct,saveAllInputs:!0,gradFunc:(e,t,n)=>{const r=t.map((e=>e.shape)),{axis:s}=n,a=we(s,t[0].shape)[0],o=r.map((e=>e[a]));return Xh(e,o,a).map((e=>()=>e))}},bg={kernelName:At,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[r,s]=t,{dilations:a,strides:o,pad:i,dataFormat:l}=n;return oe(Ju(a),(()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`)),{x:()=>Cc(r.shape,e,s,o,i,l),filter:()=>$d(r,e,s.shape,o,i,l)}}},xg={kernelName:Rt,inputsToSave:["dy","filter"],gradFunc:(e,t,n)=>{const[r,s]=t,{strides:a,pad:o,dataFormat:i,dimRoundingMode:l}=n;return{dy:()=>Ec(e,s,a,o,i,1,l),filter:()=>$d(e,r,s.shape,a,o,i,l)}}},wg=qa({conv3DBackpropFilter_:function(e,t,n,r,s){let a=e;4===e.rank&&(a=sc(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]));let o=t;4===o.rank&&(o=sc(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),oe(5===a.rank,(()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${a.shape}.`)),oe(5===o.rank,(()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${o.shape}.`)),oe(5===n.length,(()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${n}.`)),oe(a.shape[4]===n[3],(()=>`Error in conv3dDerFilter: depth of input ${a.shape[4]}) must match input depth in filter (${n[3]}.`)),oe(o.shape[4]===n[4],(()=>`Error in conv3dDerFilter: depth of dy (${o.shape[4]}) must match output depth for filter (${n[4]}).`));const i={x:a,dy:o},l={strides:r,pad:s,filterShape:n};return Oa.runKernel(Ft,i,l)}}),vg={kernelName:Dt,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:r,strides:s,pad:a}=n;oe(Ju(r),(()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${r}'`));const[o,i]=t;return{x:()=>Rc(o.shape,e,i,s,a),filter:()=>wg(o,e,i.shape,s,a)}}},kg={kernelName:Mt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ci(Dl(Bh(Ni(n,"float32"))),e)}}},Ng={kernelName:Lt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ci(Vh(Ni(n,"float32")),e)}}},Tg={kernelName:Pt,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{axis:s,exclusive:a,reverse:o}=n;return{x:()=>{const t=np([s],r.rank);let n=Lc(e,s,a,!o);return null!=t&&(n=Ol(n,t)),n}}}},Sg={kernelName:Ut,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:r,strides:s,pad:a,dimRoundingMode:o}=n,i=null==r?[1,1]:r;oe(Ju(i),(()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${i}'`));const[l,u]=t;return oe(4===l.rank,(()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`)),oe(4===u.rank,(()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${u.rank}.`)),oe(l.shape[3]===u.shape[2],(()=>`Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`)),oe(ec(s,i),(()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${s} and dilations '${i}'.`)),rc("depthwiseConv2d",a,o),{x:()=>Od(l.shape,e,u,s,a,i,o),filter:()=>Fd(l,e,u.shape,s,a,i,o)}}},Ig={kernelName:Kt,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[r,s]=t,a={x:r,filter:s,dy:e},o={x:r,filter:s,dy:e};return{x:()=>Oa.runKernel(qt,a,n),filter:()=>Oa.runKernel(Yt,o,n)}}},Eg={kernelName:Jt,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t,r={dy:e,y:n};return{x:()=>Oa.runKernel(en,r)}}},$g={kernelName:tn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,r=Ci(pp(Dl(_i(n))),2/Math.sqrt(Math.PI));return{x:()=>Ci(e,r)}}},Cg={kernelName:rn,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ci(e,n)}}},Ag={kernelName:sn,inputsToSave:["input"],gradFunc:(e,t)=>{const[n]=t;return{input:()=>sc(e,n.shape)}}},_g={kernelName:an,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ci(e,pp(n))}}},Rg={kernelName:cn,gradFunc:e=>({x:()=>Ri(e)})},Dg={kernelName:pn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=rl(n.shape,r.shape);return{a:()=>{const t=$i(e,Ni(r,"float32")),a=nl(n.shape,s);return a.length>0?sc(ip(t,a),n.shape):t},b:()=>{let t=Ci(e,Ni(n,"float32"));const a=nl(r.shape,s);a.length>0&&(t=sc(ip(t,a),r.shape));const o=_i(r);return Dl($i(t,Ni(o,"float32")))}}}},Fg={kernelName:hn,inputsToSave:["x","mean","variance","scale"],gradFunc:(e,t,n)=>{const{varianceEpsilon:r}=n,[s,a,o,i]=t,l=null==i?Bi(1):i,u=nl(a.shape,s.shape),c=[];if(1===a.rank){for(let e=0;e<s.shape.length-1;++e)c.push(s.shape[e]);c.push(1)}const p=Qi(s,a),h=Ci(e,l),d=Oh(Ii(o,Bi(r))),f=Ci(Ci(Ci(d,d),d),Bi(-.5));return{x:()=>1===a.rank?sc(Ci(Ci(e,fp(sc(d,[1,1,1,a.shape[0]]),c)),l),s.shape):sc(Ci(Ci(e,d),l),s.shape),mean:()=>{let e=Ci(Ci(d,Bi(-1)),h);return 1===a.rank&&(e=ip(e,u)),sc(e,a.shape)},variance:()=>{let e=Ci(Ci(f,p),h);return 1===a.rank&&(e=ip(e,u)),sc(e,a.shape)},scale:()=>{const t=Ci(p,d);let n=Ci(e,t);return 1===a.rank&&(n=ip(n,u)),sc(n,a.shape)},offset:()=>{let t=e;return 1===a.rank&&(t=ip(t,u)),sc(t,a.shape)}}}},Og={kernelName:dn,inputsToSave:["x","indices"],gradFunc:(e,t,n)=>{const[r,s]=t,{axis:a,batchDims:o}=n,i=we(a,r.shape)[0],l=(e,t,n)=>()=>{const r=e.shape,s=t.size,o=r.slice(0,i),l=o.length,u=r.slice(a,r.length).slice(1),c=u.length,p=Mg(0,l),h=Mg(l+1,l+1+c),d=Lg([o,[s],u]),f=sc(n,d),m=sc(t,[s]),g=Lg([[l],p,h]),y=Ol(f,g);let b=dd(y,m,e.shape[i]);const x=rp(g);return b=Ol(b,x),b};if(1===o){const t=r.shape[0],n=r.split(t,0);return{x:()=>{const t=ed(n.map(((t,n)=>l(t,s.slice(n,1),e.slice(n,1))())));return t.reshape(r.shape)},indices:()=>s}}return{x:l(r,s,e),indices:()=>s}}};function Mg(e,t){const n=[];for(let r=e;r<t;++r)n.push(r);return n}function Lg(e){const t=[];for(let n=0;n<e.length;++n)for(let r=0;r<e[n].length;++r)t.push(e[n][r]);return t}const zg={kernelName:gn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t;return{a:()=>Ri(n),b:()=>Ri(r)}}},Pg={kernelName:yn,gradFunc:e=>({x:()=>Ni(e,"float32")})},Bg={kernelName:wn,gradFunc:e=>({x:()=>Ri(e)})},Vg={kernelName:vn,gradFunc:e=>({x:()=>Ri(e)})},Wg={kernelName:kn,gradFunc:e=>({x:()=>Ri(e)})},Ug={kernelName:Nn,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{alpha:s}=n,a=bp(r,0);return{x:()=>Gc(a,e,Ci(e,s))}}},Gg={kernelName:$n,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>$i(e,Ii(n,1))}}},Hg={kernelName:En,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>$i(e,Ni(n,"float32"))}}},jg={kernelName:Dn,inputsToSave:[],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r]=t,{axis:s}=n;return{logits:()=>{const t=pp(r);return Qi(e,Ci(ip(e,s,!0),t))}}}},Kg=qa({localResponseNormalizationBackprop_:function(e,t,n,r=5,s=1,a=1,o=.5){const i={x:e,y:t,dy:n},l={depthRadius:r,bias:s,alpha:a,beta:o};return Oa.runKernel(Mn,i,l)}}),qg={kernelName:On,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r,s]=t,{depthRadius:a,bias:o,alpha:i,beta:l}=n;return{x:()=>Kg(r,s,e,a,o,i,l)}}};function Yg(e,t,n,r){return t.rank<n.rank&&(t=sc(t,ep(t.shape,r))),e.rank<n.rank&&(e=sc(e,ep(e.shape,r))),{x:()=>Ci(e,Ni(Uc(n,t),e.dtype))}}const Xg={kernelName:zn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const r=n,{reductionIndices:s}=r,a=t[0],o=Yg(e,t[1],a,we(s,a.shape));return{x:()=>o.x()}}},Zg={kernelName:Pn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t;return{a:()=>Ci(e,Ni(xp(n,r),"float32")),b:()=>Ci(e,Ni(Tp(n,r),"float32"))}}},Qg=qa({maxPool3dGrad_:function(e,t,n,r,s,a,o){const i=Ha(e,"dy","maxPool3dGrad"),l=Ha(t,"input","maxPool3dGrad"),u=Ha(n,"output","maxPool3dGrad");let c=i,p=l,h=u,d=!1;4===l.rank&&(d=!0,c=sc(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]]),p=sc(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),h=sc(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]])),oe(5===c.rank,(()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${c.rank}.`)),oe(5===p.rank,(()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${p.rank}.`)),oe(5===h.rank,(()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${h.rank}.`)),rc("maxPool3dGrad",a,o);const f={dy:c,input:p,output:h},m={filterSize:r,strides:s,pad:a,dimRoundingMode:o},g=Oa.runKernel(Un,f,m);return d?sc(g,[g.shape[1],g.shape[2],g.shape[3],g.shape[4]]):g}}),Jg={kernelName:Wn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r,s]=t,{filterSize:a,strides:o,pad:i,dimRoundingMode:l}=n;return{x:()=>Qg(e,r,s,a,o,i,l)}}},ey=qa({maxPoolGrad_:function(e,t,n,r,s,a,o){const i=Ha(e,"dy","maxPoolGrad"),l=Ha(t,"input","maxPoolGrad"),u=Ha(n,"output","maxPoolGrad");oe(l.rank===i.rank,(()=>`Rank of input (${l.rank}) does not match rank of dy (${i.rank})`)),oe(4===i.rank,(()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${i.rank}.`)),oe(4===l.rank,(()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${l.rank}.`)),rc("maxPoolGrad",a,o);const c={dy:i,input:l,output:u},p={filterSize:r,strides:s,pad:a,dimRoundingMode:o};return Oa.runKernel(Vn,c,p)}}),ty={kernelName:Bn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r,s]=t,{filterSize:a,strides:o,pad:i}=n;return{x:()=>ey(e,r,s,a,o,i)}}},ny={kernelName:qn,inputsToSave:["x"],gradFunc:(e,t,n)=>{const r=t[0],{paddings:s}=n,a=s.map((e=>e[0]));return{x:()=>uc(e,a,r.shape)}}},ry={kernelName:or,inputsToSave:["x"],gradFunc:(e,t,n)=>{const r=t[0],{paddings:s}=n,a=s.map((e=>e[0]));return{x:()=>uc(e,a,r.shape)}}},sy={kernelName:lr,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(e,t)=>{const[n,r,s]=t,a=n,o=r,i=rl(a.shape,o.shape);return{a:()=>{const t=Ni(o,"float32");let n=Ci(e,Ci(t,Zi(a,Qi(t,Bi(1)))));const r=nl(a.shape,i);return r.length>0&&(n=ip(n,r)),sc(n,a.shape)},b:()=>{const t=bp(a,0),n=Gc(t,$p(a),Ri(a));let r=Ci(e,Ci(s,n));const l=nl(o.shape,i);return l.length>0&&(r=ip(r,l)),sc(r,o.shape)}}}};const ay={kernelName:_r,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=bp(n,Bi(0)),r=Bi(sm),s=Bi(am),a=Ci(e,s),o=Ci(Ci(e,r),pp(Ni(n,"float32")));return Gc(t,a,o)}}}},oy={kernelName:Br,gradFunc:(e,t,n)=>{const{blockShape:r,paddings:s}=n;return{x:()=>hc(e,r,s)}}},iy={kernelName:Vr,gradFunc:(e,t,n)=>{const{axis:r}=n;return{x:()=>ic(e,r)}}},ly=[qm,Ym,Xm,Zm,Qm,Jm,eg,tg,ng,rg,sg,ag,ig,ug,cg,pg,hg,dg,fg,mg,gg,yg,xg,bg,vg,kg,Ng,Tg,Sg,Ig,{kernelName:Zt,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=rl(n.shape,r.shape);return{a:()=>{const t=$i(e,Ni(r,"float32")),a=nl(n.shape,s);return a.length>0?sc(ip(t,a),n.shape):t},b:()=>{let t=Ci(e,Ni(n,"float32"));const a=nl(r.shape,s);a.length>0&&(t=sc(ip(t,a),r.shape));const o=_i(r);return Dl($i(t,Ni(o,"float32")))}}}},Eg,$g,Cg,Ag,_g,Dg,Rg,Fg,Og,zg,Pg,Bg,Vg,Wg,Ug,Gg,Hg,jg,qg,Xg,Xg,Zg,Jg,ty,{kernelName:Hn,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{axis:s}=n,a=we(s,r.shape),o=ue(Jc(r.shape,a)[1]);return{x:()=>{const t=r.shape.slice();a.forEach((e=>{t[e]=1}));const n=sc(e,t);return $i(Ci(n,jp(r.shape,"float32")),o)}}}},{kernelName:jn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const r=n,{axis:s}=r,[a,o]=t,i=Yg(e,o,a,we(s,a.shape));return{x:()=>i.x()}}},{kernelName:Kn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t;return{a:()=>Ci(e,Ni(Sp(n,r),"float32")),b:()=>Ci(e,Ni(bp(n,r),"float32"))}}},ny,{kernelName:Yn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=rl(n.shape,r.shape);return{a:()=>{const t=nl(n.shape,s);return t.length>0?sc(ip(e,t),n.shape):e},b:()=>{const t=Ci(e,Dl(gp($i(n,r)))),a=nl(r.shape,s);return a.length>0?sc(ip(t,a),r.shape):t}}}},{kernelName:Zn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=rl(n.shape,r.shape);return{a:()=>{const t=Ci(e,Ni(r,"float32")),a=nl(n.shape,s);return a.length>0?sc(ip(t,a),n.shape):t},b:()=>{const t=Ci(e,Ni(n,"float32")),a=nl(r.shape,s);return a.length>0?sc(ip(t,a),r.shape):t}}}},{kernelName:Qn,gradFunc:e=>({x:()=>Dl(e)})},{kernelName:sr,inputsToSave:["indices"],gradFunc:(e,t)=>{const n=t[0];return{indices:()=>Hp(n.shape,"float32")}}},{kernelName:rr,gradFunc:e=>({x:()=>Ri(e)})},{kernelName:ar,saveAllInputs:!0,gradFunc:(e,t,n)=>{const{axis:r}=n;return fd(e,r).map((e=>()=>e))}},ry,ry,sy,{kernelName:ur,inputsToSave:["x","alpha"],gradFunc:(e,t)=>{const[n,r]=t,s=bp(n,0);return{x:()=>Gc(s,e,Ci(e,r)),alpha:()=>{let t=Gc(s,Ri(e),Ci(e,n));const a=nl(r.shape,e.shape);return a.length>0&&(t=ip(t,a)),sc(t,r.shape)}}}},{kernelName:cr,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{axis:s}=n;let a=[];return a=null==s?r.shape.map(((e,t)=>t)):"number"==typeof s?[s]:s,{x:()=>function(e,t,n){const r=e.shape.length,s=r-n.length,a=np(n,r);let o=e;null!=a&&(o=Ol(e,a));const i=o.shape.slice(),l=i.splice(r-n.length,n.length).reduce(((e,t)=>e*t),1);i.push(l);let u=function(e,t,n){const r=e.shape.slice();r[n]=1;const s=sc(t,r),a=Mc(e,n,!0,!1),o=Mc(e,n,!0,!0),i=Ci(a,o);return Ci(s,i)}(o.reshape(i),t,s);if(u=u.reshape(o.shape),null!=a){const e=rp(a);u=Ol(u,e)}return u}(r,e,a)}}},{kernelName:gr,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>$i(e,Dl(_i(n)))}}},{kernelName:Nr,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,r=Ci(Sp(n,6),td(n));return{x:()=>Ci(e,Ni(r,"float32"))}}},{kernelName:yr,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ci(e,Ni(td(n),"float32"))}}},{kernelName:br,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>sc(e,n.shape)}}},{kernelName:vr,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[r]=t,s={dy:e,images:r};return{images:()=>Oa.runKernel(kr,s,n)}}},{kernelName:xr,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[r]=t,s={dy:e,images:r};return{images:()=>Oa.runKernel(wr,s,n)}}},{kernelName:Tr,gradFunc:(e,t,n)=>{const{dims:r}=n,s=we(r,e.shape);return{x:()=>Ch(e,s)}}},{kernelName:Sr,gradFunc:e=>({x:()=>Ri(e)})},{kernelName:Ir,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Dl($i(e,Ci(Zi(n,1.5),2)))}}},{kernelName:Ar,inputsToSave:["condition"],gradFunc:(e,t)=>{const[n]=t;return{condition:()=>Ni(Ri(n),"float32"),t:()=>Ci(e,Ni(n,e.dtype)),e:()=>Ci(e,Ni(Op(n),e.dtype))}}},ay,{kernelName:Mr,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ci(e,Ci(n,Qi(Bi(1),n)))}}},{kernelName:Or,gradFunc:e=>({x:()=>Ri(e)})},{kernelName:Dr,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ci(Fc(Ni(n,"float32")),e)}}},{kernelName:Fr,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ci(Oc(Ni(n,"float32")),e)}}},{kernelName:Rr,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{begin:s,size:a}=n,o=r.shape,[i,l]=hu(r,s,a),u=[];for(let t=0;t<e.rank;t++)u.push([i[t],o[t]-i[t]-l[t]]);return{x:()=>rh(e,u)}}},{kernelName:Wr,outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r]=t,{dim:s}=n,a=Ci(e,r);return{logits:()=>Qi(a,Ci(ip(a,[s],!0),r))}}},{kernelName:Lr,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ci(e,lc(n))}}},oy,oy,iy,iy,{kernelName:zr,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>$i(e,Ci(Ai(Ni(n,"float32")),2))}}},{kernelName:qr,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=Bi(2);return{a:()=>Ci(e,Ci(s,Qi(n,r))),b:()=>Ci(e,Ci(s,Qi(r,n)))}}},{kernelName:Yr,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ci(e,Ci(Ni(n,"float32"),2))}}},{kernelName:ds,gradFunc:e=>({x:()=>Ri(e)})},{kernelName:ts,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=rl(n.shape,r.shape);return{a:()=>{let t=e;const r=nl(n.shape,s);return r.length>0&&(t=ip(t,r)),sc(t,n.shape)},b:()=>{let t=e;const n=nl(r.shape,s);return n.length>0&&(t=ip(t,n)),sc(Dl(t),r.shape)}}}},{kernelName:Pr,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,s=r.shape.slice(),{axis:a}=n;we(a,r.shape).forEach((e=>{s[e]=1}));const o=sc(e,s),i=Ci(o,jp(r.shape,"float32"));return{x:()=>i}}},{kernelName:ns,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>$i(e,_i(Fc(n)))}}},{kernelName:rs,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ci(Qi(Bi(1),_i(n)),e)}}},{kernelName:ss,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{reps:s}=n;return{x:()=>{let t=Ri(r);if(1===r.rank)for(let n=0;n<s[0];++n)t=Ii(t,uc(e,[n*r.shape[0]],[r.shape[0]]));else if(2===r.rank)for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)t=Ii(t,uc(e,[n*r.shape[0],a*r.shape[1]],[r.shape[0],r.shape[1]]));else if(3===r.rank)for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)for(let o=0;o<s[2];++o)t=Ii(t,uc(e,[n*r.shape[0],a*r.shape[1],o*r.shape[2]],[r.shape[0],r.shape[1],r.shape[2]]));else{if(4!==r.rank)throw new Error(`Gradient for tile operation is not implemented for rank-${r.rank} tensors yet.`);for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)for(let o=0;o<s[2];++o)for(let i=0;i<s[3];++i)t=Ii(t,uc(e,[n*r.shape[0],a*r.shape[1],o*r.shape[2],i*r.shape[3]],[r.shape[0],r.shape[1],r.shape[2],r.shape[3]]))}return t}}}},{kernelName:is,gradFunc:(e,t,n)=>{const r=n,{perm:s}=r,a=rp(s);return{x:()=>Ol(e,a)}}},{kernelName:us,gradFunc:(e,t,n)=>{const r=n,{axis:s}=r;return{value:()=>ed(e,s)}}},{kernelName:cs,inputsToSave:["segmentIds"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>function(e,t){const n=sl(t,Ri(t)),r=yp(e,n);let s=xp(t,Bi(0,"int32"));const a=r.rank-s.rank;for(let e=0;e<a;++e)s=hp(s,e+1);s=Fp(s,jp(r.shape,"bool"));const o=Ri(r);return Gc(s,r,o)}(e,n)}}},{kernelName:hs,gradFunc:e=>({x:()=>Ri(e)})}];for(const e of ly)Es(e);fa().prototype.abs=function(){return this.throwIfDisposed(),el(this)},fa().prototype.acos=function(){return this.throwIfDisposed(),_u(this)},fa().prototype.acosh=function(){return this.throwIfDisposed(),Ru(this)},fa().prototype.add=function(e){return this.throwIfDisposed(),Ii(this,e)},fa().prototype.all=function(e,t){return this.throwIfDisposed(),Fu(this,e,t)},fa().prototype.any=function(e,t){return this.throwIfDisposed(),Ou(this,e,t)},fa().prototype.argMax=function(e){return this.throwIfDisposed(),Mu(this,e)},fa().prototype.argMin=function(e){return this.throwIfDisposed(),Lu(this,e)},fa().prototype.asScalar=function(){return this.throwIfDisposed(),oe(1===this.size,(()=>"The array must have only 1 element.")),sc(this,[])},fa().prototype.asType=function(e){return this.throwIfDisposed(),Ni(this,e)},fa().prototype.as1D=function(){return this.throwIfDisposed(),sc(this,[this.size])},fa().prototype.as2D=function(e,t){return this.throwIfDisposed(),sc(this,[e,t])},fa().prototype.as3D=function(e,t,n){return this.throwIfDisposed(),sc(this,[e,t,n])},fa().prototype.as4D=function(e,t,n,r){return this.throwIfDisposed(),sc(this,[e,t,n,r])},fa().prototype.as5D=function(e,t,n,r,s){return this.throwIfDisposed(),sc(this,[e,t,n,r,s])},fa().prototype.asin=function(){return this.throwIfDisposed(),zu(this)},fa().prototype.asinh=function(){return this.throwIfDisposed(),Pu(this)},fa().prototype.atan=function(){return this.throwIfDisposed(),Bu(this)},fa().prototype.atan2=function(e){return this.throwIfDisposed(),Vu(this,e)},fa().prototype.atanh=function(){return this.throwIfDisposed(),Wu(this)},fa().prototype.avgPool=function(e,t,n,r){return this.throwIfDisposed(),ac(this,e,t,n,r)},fa().prototype.batchToSpaceND=function(e,t){return this.throwIfDisposed(),hc(this,e,t)},fa().prototype.batchNorm=function(e,t,n,r,s){return this.throwIfDisposed(),dc(this,e,t,n,r,s)},fa().prototype.broadcastTo=function(e){return this.throwIfDisposed(),wc(this,e)},fa().prototype.cast=function(e){return this.throwIfDisposed(),Ni(this,e)},fa().prototype.ceil=function(){return this.throwIfDisposed(),vc(this)},fa().prototype.clipByValue=function(e,t){return this.throwIfDisposed(),kc(this,e,t)},fa().prototype.concat=function(e,t){return this.throwIfDisposed(),e instanceof da&&(e=[e]),ic([this,...e],t)},fa().prototype.conv1d=function(e,t,n,r,s,a){return this.throwIfDisposed(),$c(this,e,t,n,r,s,a)},fa().prototype.conv2dTranspose=function(e,t,n,r,s){return this.throwIfDisposed(),Ac(this,e,t,n,r,s)},fa().prototype.conv2d=function(e,t,n,r,s,a){return this.throwIfDisposed(),Ec(this,e,t,n,r,s,a)},fa().prototype.cos=function(){return this.throwIfDisposed(),Fc(this)},fa().prototype.cosh=function(){return this.throwIfDisposed(),Oc(this)},fa().prototype.cumprod=function(e,t,n){return this.throwIfDisposed(),Mc(this,e,t,n)},fa().prototype.cumsum=function(e,t,n){return this.throwIfDisposed(),Lc(this,e,t,n)},fa().prototype.depthToSpace=function(e,t){return this.throwIfDisposed(),Pc(this,e,t)},fa().prototype.depthwiseConv2d=function(e,t,n,r,s,a){return this.throwIfDisposed(),Bc(this,e,t,n,r,s,a)},fa().prototype.dilation2d=function(e,t,n,r,s){return this.throwIfDisposed(),Wc(this,e,t,n,r,s)},fa().prototype.divNoNan=function(e){return this.throwIfDisposed(),Hc(this,e)},fa().prototype.div=function(e){return this.throwIfDisposed(),$i(this,e)},fa().prototype.dot=function(e){return this.throwIfDisposed(),jc(this,e)},fa().prototype.elu=function(){return this.throwIfDisposed(),qc(this)},fa().prototype.equal=function(e){return this.throwIfDisposed(),Uc(this,e)},fa().prototype.erf=function(){return this.throwIfDisposed(),Xc(this)},fa().prototype.euclideanNorm=function(e,t){return this.throwIfDisposed(),cp(this,e,t)},fa().prototype.exp=function(){return this.throwIfDisposed(),pp(this)},fa().prototype.expandDims=function(e){return this.throwIfDisposed(),hp(this,e)},fa().prototype.expm1=function(){return this.throwIfDisposed(),dp(this)},fa().prototype.fft=function(){return this.throwIfDisposed(),Kh(this)},fa().prototype.flatten=function(){return this.throwIfDisposed(),sc(this,[this.size])},fa().prototype.floor=function(){return this.throwIfDisposed(),gp(this)},fa().prototype.floorDiv=function(e){return this.throwIfDisposed(),Ei(this,e)},fa().prototype.gather=function(e,t,n){return this.throwIfDisposed(),yp(this,e,t,n)},fa().prototype.greaterEqual=function(e){return this.throwIfDisposed(),xp(this,e)},fa().prototype.greater=function(e){return this.throwIfDisposed(),bp(this,e)},fa().prototype.ifft=function(){return this.throwIfDisposed(),qh(this)},fa().prototype.irfft=function(){return this.throwIfDisposed(),Yh(this)},fa().prototype.isFinite=function(){return this.throwIfDisposed(),wp(this)},fa().prototype.isInf=function(){return this.throwIfDisposed(),vp(this)},fa().prototype.isNaN=function(){return this.throwIfDisposed(),kp(this)},fa().prototype.leakyRelu=function(e){return this.throwIfDisposed(),Np(this,e)},fa().prototype.lessEqual=function(e){return this.throwIfDisposed(),Sp(this,e)},fa().prototype.less=function(e){return this.throwIfDisposed(),Tp(this,e)},fa().prototype.localResponseNormalization=function(e,t,n,r){return this.throwIfDisposed(),Ep(this,e,t,n,r)},fa().prototype.logSigmoid=function(){return this.throwIfDisposed(),_p(this)},fa().prototype.logSoftmax=function(e){return this.throwIfDisposed(),Rp(this,e)},fa().prototype.logSumExp=function(e,t){return this.throwIfDisposed(),Dp(this,e,t)},fa().prototype.log=function(){return this.throwIfDisposed(),$p(this)},fa().prototype.log1p=function(){return this.throwIfDisposed(),Cp(this)},fa().prototype.logicalAnd=function(e){return this.throwIfDisposed(),Fp(this,e)},fa().prototype.logicalNot=function(){return this.throwIfDisposed(),Op(this)},fa().prototype.logicalOr=function(e){return this.throwIfDisposed(),Mp(this,e)},fa().prototype.logicalXor=function(e){return this.throwIfDisposed(),Lp(this,e)},fa().prototype.matMul=function(e,t,n){return this.throwIfDisposed(),Al(this,e,t,n)},fa().prototype.maxPool=function(e,t,n,r){return this.throwIfDisposed(),Vp(this,e,t,n,r)},fa().prototype.max=function(e,t){return this.throwIfDisposed(),ap(this,e,t)},fa().prototype.maximum=function(e){return this.throwIfDisposed(),sl(this,e)},fa().prototype.mean=function(e,t){return this.throwIfDisposed(),Gp(this,e,t)},fa().prototype.min=function(e,t){return this.throwIfDisposed(),op(this,e,t)},fa().prototype.minimum=function(e){return this.throwIfDisposed(),qp(this,e)},fa().prototype.mirrorPad=function(e,t){return this.throwIfDisposed(),Yp(this,e,t)},fa().prototype.mod=function(e){return this.throwIfDisposed(),Xp(this,e)},fa().prototype.mul=function(e){return this.throwIfDisposed(),Ci(this,e)},fa().prototype.neg=function(){return this.throwIfDisposed(),Dl(this)},fa().prototype.norm=function(e,t,n){return this.throwIfDisposed(),up(this,e,t,n)},fa().prototype.notEqual=function(e){return this.throwIfDisposed(),eh(this,e)},fa().prototype.oneHot=function(e,t=1,n=0){return this.throwIfDisposed(),_l(this,e,t,n)},fa().prototype.onesLike=function(){return this.throwIfDisposed(),th(this)},fa().prototype.pad=function(e,t){return this.throwIfDisposed(),rh(this,e,t)},fa().prototype.pool=function(e,t,n,r,s,a){return this.throwIfDisposed(),uh(this,e,t,n,r,s,a)},fa().prototype.pow=function(e){return this.throwIfDisposed(),Zi(this,e)},fa().prototype.prelu=function(e){return this.throwIfDisposed(),ch(this,e)},fa().prototype.prod=function(e,t){return this.throwIfDisposed(),ph(this,e,t)},fa().prototype.reciprocal=function(){return this.throwIfDisposed(),Ih(this)},fa().prototype.relu=function(){return this.throwIfDisposed(),Eh(this)},fa().prototype.relu6=function(){return this.throwIfDisposed(),$h(this)},fa().prototype.reshapeAs=function(e){return this.throwIfDisposed(),sc(this,e.shape)},fa().prototype.reshape=function(e){return this.throwIfDisposed(),sc(this,e)},fa().prototype.resizeBilinear=function(e,t,n){return this.throwIfDisposed(),of(this,e,t,n)},fa().prototype.resizeNearestNeighbor=function(e,t,n){return this.throwIfDisposed(),lf(this,e,t,n)},fa().prototype.reverse=function(e){return this.throwIfDisposed(),Ch(this,e)},fa().prototype.rfft=function(){return this.throwIfDisposed(),Zh(this)},fa().prototype.round=function(){return this.throwIfDisposed(),Fh(this)},fa().prototype.rsqrt=function(){return this.throwIfDisposed(),Oh(this)},fa().prototype.selu=function(){return this.throwIfDisposed(),Mh(this)},fa().prototype.separableConv2d=function(e,t,n,r,s,a){return this.throwIfDisposed(),Lh(this,e,t,n,r,s,a)},fa().prototype.sigmoid=function(){return this.throwIfDisposed(),lc(this)},fa().prototype.sign=function(){return this.throwIfDisposed(),Ph(this)},fa().prototype.sin=function(){return this.throwIfDisposed(),Bh(this)},fa().prototype.sinh=function(){return this.throwIfDisposed(),Vh(this)},fa().prototype.slice=function(e,t){return this.throwIfDisposed(),uc(this,e,t)},fa().prototype.softmax=function(e){return this.throwIfDisposed(),jh(this,e)},fa().prototype.softplus=function(){return this.throwIfDisposed(),Ap(this)},fa().prototype.spaceToBatchND=function(e,t){return this.throwIfDisposed(),lh(this,e,t)},fa().prototype.split=function(e,t){return this.throwIfDisposed(),Xh(this,e,t)},fa().prototype.sqrt=function(){return this.throwIfDisposed(),Ai(this)},fa().prototype.square=function(){return this.throwIfDisposed(),_i(this)},fa().prototype.squaredDifference=function(e){return this.throwIfDisposed(),Qh(this,e)},fa().prototype.squeeze=function(e){return this.throwIfDisposed(),Jh(this,e)},fa().prototype.stack=function(e,t){this.throwIfDisposed();const n=e instanceof da?[this,e]:[this,...e];return ed(n,t)},fa().prototype.step=function(e){return this.throwIfDisposed(),td(this,e)},fa().prototype.stridedSlice=function(e,t,n,r,s,a,o,i){return this.throwIfDisposed(),nd(this,e,t,n,r,s,a,o,i)},fa().prototype.sub=function(e){return this.throwIfDisposed(),Qi(this,e)},fa().prototype.sum=function(e,t){return this.throwIfDisposed(),ip(this,e,t)},fa().prototype.tan=function(){return this.throwIfDisposed(),rd(this)},fa().prototype.tanh=function(){return this.throwIfDisposed(),cc(this)},fa().prototype.tile=function(e){return this.throwIfDisposed(),fp(this,e)},fa().prototype.toBool=function(){return this.throwIfDisposed(),Ni(this,"bool")},fa().prototype.toFloat=function(){return this.throwIfDisposed(),Ni(this,"float32")},fa().prototype.toInt=function(){return this.throwIfDisposed(),Ni(this,"int32")},fa().prototype.topk=function(e,t){return this.throwIfDisposed(),cd(this,e,t)},fa().prototype.transpose=function(e){return this.throwIfDisposed(),Ol(this,e)},fa().prototype.unique=function(e){return this.throwIfDisposed(),hd(this,e)},fa().prototype.unsortedSegmentSum=function(e,t){return this.throwIfDisposed(),dd(this,e,t)},fa().prototype.unstack=function(e){return this.throwIfDisposed(),fd(this,e)},fa().prototype.where=function(e,t){return this.throwIfDisposed(),Gc(e,this,t)},fa().prototype.zerosLike=function(){return this.throwIfDisposed(),Ri(this)};class uy extends Error{constructor(e){super(e),Object.setPrototypeOf(this,uy.prototype)}}class cy extends Error{constructor(e){super(e),Object.setPrototypeOf(this,cy.prototype)}}class py extends Error{constructor(e){super(e),Object.setPrototypeOf(this,py.prototype)}}class hy extends Error{constructor(e){super(e),Object.setPrototypeOf(this,hy.prototype)}}class dy extends Error{constructor(e){super(e),Object.setPrototypeOf(this,dy.prototype)}}Error;class fy{constructor(e){this.maxEntries=e||100,this.cache=new Map}get(e){let t;return this.cache.has(e)&&(t=this.cache.get(e),this.cache.delete(e),this.cache.set(e,t)),t}put(e,t){if(this.cache.has(e))this.cache.delete(e);else if(this.cache.size>=this.maxEntries){const e=this.cache.keys().next().value;this.cache.delete(e)}this.cache.set(e,t)}getMaxEntries(){return this.maxEntries}setMaxEntries(e){if(e<0)throw new Error(`The maxEntries of LRU caches must be at least 0, but got ${e}.`);if(this.maxEntries>e)for(let t=0;t<this.maxEntries-e;t++){const e=this.cache.keys().next().value;this.cache.delete(e)}this.maxEntries=e}}function my(e,t){if(Array.isArray(e)){let n=[];for(let r=0;r<t;r++)n=n.concat(e);return n}{const n=new Array(t);return n.fill(e),n}}function gy(e,t){if(!e)throw new dy(t)}function yy(e,t){let n=0;for(const r of e)r===t&&n++;return n}function by(e){return 1===e.length?e[0]:e}function xy(e){return Array.isArray(e)?e:[e]}function wy(e){const t=e.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==t[0]?t:"private"+t}function vy(e){return e.length<=1||-1===e.indexOf("_")?e:e.replace(/[_]+(\w|$)/g,((e,t)=>t.toUpperCase()))}let ky={};function Ny(e){if(null==e)return null;const t={};return t.className=e.getClassName(),t.config=e.getConfig(),t}function Ty(e){if(null!=e&&"object"==typeof e)if(Array.isArray(e))e.forEach((e=>Ty(e)));else{const t=Object.keys(e);for(const n of t){const t=e[n];null!=t&&"object"==typeof t&&(Array.isArray(t)||"ndarray"!==t.type||"number"!=typeof t.value?Ty(t):e[n]=t.value)}}}function Sy(e,t={},n={},r="object",s=!1){if("string"==typeof e){const s=e;let a;if(s in n)a=n[s];else if(s in ky)a=ky[s];else if(a=t[s],null==a)throw new py(`Unknown ${r}: ${e}. This may be due to one of the following reasons:\n1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return a}{const a=e;if(null==a.className||null==a.config)throw new py(`${r}: Improper config format: ${JSON.stringify(a)}.\n'className' and 'config' must set.`);const o=a.className;let i,l;if(o in n?[i,l]=n[o]:o in ky?[i,l]=ky.className:o in t&&([i,l]=t[o]),null==i)throw new py(`Unknown ${r}: ${o}. This may be due to one of the following reasons:\n1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=l){const e={};for(const t of Object.keys(ky))e[t]=ky[t];for(const t of Object.keys(n))e[t]=n[t];a.config.customObjects=e;const t=Object.assign({},ky);for(const e of Object.keys(n))ky[e]=n[e];Ty(a.config);const r=l(i,a.config,n,s);return ky=Object.assign({},t),r}{const e=Object.assign({},ky);for(const e of Object.keys(n))ky[e]=n[e];const t=new i(a.config);return ky=Object.assign({},e),t}}}function Iy(e,t){return-1*function(e,t){return e<t?-1:e>t?1:0}(e,t)}function Ey(e){if(null==e)return e;const t=[];for(const n of e)-1===t.indexOf(n)&&t.push(n);return t}function $y(e){if(null==e)throw new py(`Invalid value in obj: ${JSON.stringify(e)}`);for(const t in e)if(e.hasOwnProperty(t))return!1;return!0}function Cy(e,t,n){if(null!=n&&e.indexOf(n)<0)throw new py(`${n} is not a valid ${t}.  Valid values are ${e} or null/undefined.`)}function Ay(e,t,n=0,r=1/0){return gy(n>=0),gy(r>=n),Array.isArray(e)&&e.length>=n&&e.length<=r&&e.every((e=>typeof e===t))}function _y(e,t){Array.isArray(e)?(oe(e.length>0,(()=>`${t} is unexpectedly an empty array.`)),e.forEach(((e,n)=>_y(e,`element ${n+1} of ${t}`)))):oe(Number.isInteger(e)&&e>0,(()=>`Expected ${t} to be a positive integer, but got ${Ry(e)}.`))}function Ry(e){return null===e?"null":Array.isArray(e)?"["+e.map((e=>Ry(e))).join(",")+"]":"string"==typeof e?`"${e}"`:`${e}`}function Dy(e){return"relu"===e?"relu":"linear"===e?"linear":"elu"===e?"elu":null}let Fy=0;function Oy(){return Fy++}const My={};function Ly(e=""){return e in My||(My[e]=0),My[e]+=1,e+My[e].toString()}const zy=["channelsFirst","channelsLast"],Py=["nearest","bilinear"],By=["valid","same","causal"],Vy=["max","avg"],Wy=["sum","mul","concat","ave"],Uy=new Map;function Gy(e){Cy(zy,"DataFormat",e)}function Hy(e){Cy(By,"PaddingMode",e)}function jy(e){Cy(Vy,"PoolMode",e)}const Ky=[];function qy(e,t){Ky.push(e);try{const e=t();return Ky.pop(),e}catch(e){throw Ky.pop(),e}}function Yy(e){if(!Qy(e))throw new Error("Not a valid tensor name: '"+e+"'");return(0===Ky.length?"":Ky.join("/")+"/")+e}function Xy(e){if(!Qy(e))throw new Error("Not a valid tensor name: '"+e+"'");Uy.has(e)||Uy.set(e,0);const t=Uy.get(e);if(Uy.set(e,Uy.get(e)+1),t>0){const n=`${e}_${t}`;return Uy.set(n,1),n}return e}const Zy=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function Qy(e){return!!e.match(Zy)}function Jy(e,t,n){null==t&&(t=0),null==n&&(n=e.length);let r=1;for(let s=t;s<n;++s)r*=e[s];return r}function eb(e){if(0===e.length)return Number.NaN;let t=Number.POSITIVE_INFINITY;for(let n=0;n<e.length;n++){const r=e[n];r<t&&(t=r)}return t}function tb(e){if(0===e.length)return Number.NaN;let t=Number.NEGATIVE_INFINITY;for(let n=0;n<e.length;n++){const r=e[n];r>t&&(t=r)}return t}function nb(e,t){if(t<e)throw new py(`end (${t}) < begin (${e}) is forbidden.`);const n=[];for(let r=e;r<t;++r)n.push(r);return n}let rb;function sb(){return null==rb&&(rb=wo().epsilon()),rb}function ab(e,t){return Ni(e,t)}function ob(e,t=-1){const n=e.shape.slice();return t<0&&(t=n.length+t+1),n.splice(t,0,1),sc(e,n)}function ib(e,t,n){return lo((()=>{switch(e.rank){case 1:return Wh(e,t,n);case 2:return Uh(e,[t,0],[n,e.shape[1]]);case 3:return Gh(e,[t,0,0],[n,e.shape[1],e.shape[2]]);case 4:return Hh(e,[t,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3]]);case 5:return uc(e,[t,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4]]);case 6:return uc(e,[t,0,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4],e.shape[5]]);default:throw new py(`sliceAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function lb(e,t,n){return lo((()=>{switch(e.rank){case 1:return Wh(e,t,n);case 2:return Uh(e,[0,t],[e.shape[0],n]);case 3:return Gh(e,[0,0,t],[e.shape[0],e.shape[1],n]);case 4:return Hh(e,[0,0,0,t],[e.shape[0],e.shape[1],e.shape[2],n]);default:throw new py(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function ub(e,t,n,r){return lo((()=>{switch(e.rank){case 1:return Wh(e,t,n);case 2:switch(r){case 1:return ib(e,t,n);case 2:return lb(e,t,n);default:throw new py(`The axis is not within the rank of the tensor ${r}`)}case 3:switch(r){case 1:return ib(e,t,n);case 2:return Gh(e,[0,t,0],[e.shape[0],n,e.shape[2]]);case 3:return lb(e,t,n);default:throw new py(`The axis is not within the rank of the tensor ${r}`)}case 4:switch(r){case 1:return ib(e,t,n);case 2:return Hh(e,[0,t,0,0],[e.shape[0],n,e.shape[2],e.shape[3]]);case 3:return Hh(e,[0,0,t,0],[e.shape[0],e.shape[1],n,e.shape[3]]);case 4:return lb(e,t,n);default:throw new py(`The axis is not within the rank of the tensor ${r}`)}default:throw new py(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function cb(e,t=-1){let n;return t<0&&(n=e[0].rank,t=0!==n?n:0),t===e[0].rank&&(t=-1),ic(e,t)}function pb(e,t){switch(e.rank){case 1:return Nc([e,t]);case 2:return Tc([e,t],0);case 3:return Sc([e,t],0);case 4:return Ic([e,t],0);default:throw new py(`concatAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}function hb(e,t){if(Array.isArray(t)||(t=[t]),e.rank!==t.length)throw new py(`The length of input n (${t.length}) does not match the number of dimensions in input x (${e.rank})`);return fp(e,t)}function db(e,t=0,n=1,r,s){return vh(e,t,n,r,s)}function fb(e,t,n,r){if(e.rank<2||t.rank<2)throw new hy(`dot requires both inputs to be rank >= 2 but got x shape = ${e.shape} and y shape = ${t.shape}`);if(t.rank>=3&&e.shape.slice(-1)[0]!==t.shape.slice(-2)[0])throw new hy(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${e.shape} and  y shape = ${t.shape}`);if(2===e.rank&&2===t.rank)return Ld({a:e,b:t,transposeA:!1,transposeB:!1,bias:r?yb(e.rank,r,"channelsLast"):null,activation:n});{const s=e.shape.slice(),a=s.pop();e=sc(e,[-1,a]);const o=t.shape.slice(),i=o.pop(),l=o.pop(),u=[...o,i],c=Array.from({length:t.rank},((e,n)=>0===n?t.rank-2:n<=t.rank-2?n-1:n));t=sc(Ol(t,c),[l,-1]);const p=[...s,...u];return sc(Ld({a:e,b:t,transposeA:!1,transposeB:!1,bias:r?yb(e.rank,r,"channelsLast"):null,activation:n}),p)}}function mb(e,t,n){return lo((()=>(t=Array.isArray(t)?sd(t,"int32"):Ni(t,"int32"),yp(e,t,n))))}function gb(e){return Ci(e,e)}function yb(e,t,n){const r=t.shape;if(1!==t.rank&&t.rank!==e)throw new py(`Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${e}`);if(5===e){if("channelsFirst"===n)return 1===r.length?sc(t,[1,r[0],1,1,1]):sc(t,[1,r[3],r[0],r[1],r[2]]);if("channelsLast"===n)return 1===r.length?sc(t,[1,1,1,1,r[0]]):sc(t,[1].concat(r))}else if(4===e){if("channelsFirst"===n)return 1===r.length?sc(t,[1,r[0],1,1]):sc(t,[1,r[2],r[0],r[1]]);if("channelsLast"===n)return 1===r.length?sc(t,[1,1,1,r[0]]):sc(t,[1].concat(r))}else if(3===e){if("channelsFirst"===n)return 1===r.length?sc(t,[1,r[0],1]):sc(t,[1,r[1],r[0]]);if("channelsLast"===n)return 1===r.length?sc(t,[1,1,r[0]]):sc(t,[1].concat(r))}else if(e<3)return t;throw new py(`Unsupported input rank by biasAdd: ${t.rank}`)}function bb(e,t,n){return lo((()=>(null==n&&(n="channelsLast"),Gy(n),Ii(e,yb(e.rank,t,n)))))}function xb(e,t,n,r){return lo((()=>Td(e,t,n,r)))}function wb(e,t,n=!1){return n?e():t()}const vb=["fanIn","fanOut","fanAvg"],kb=["normal","uniform","truncatedNormal"];class Nb extends Ui{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class Tb extends Nb{apply(e,t){return Hp(e,t)}}Tb.className="Zeros",Hi(Tb);class Sb extends Nb{apply(e,t){return jp(e,t)}}Sb.className="Ones",Hi(Sb);class Ib extends Nb{constructor(e){if(super(),"object"!=typeof e)throw new py(`Expected argument of type ConstantConfig but got ${e}`);if(void 0===e.value)throw new py(`config must have value set but got ${e}`);this.value=e.value}apply(e,t){return lo((()=>Ci(Bi(this.value),jp(e,t))))}getConfig(){return{value:this.value}}}Ib.className="Constant",Hi(Ib);class Eb extends Nb{constructor(e){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=e.minval||this.DEFAULT_MINVAL,this.maxval=e.maxval||this.DEFAULT_MAXVAL,this.seed=e.seed}apply(e,t){return Nh(e,this.minval,this.maxval,t,this.seed)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}Eb.className="RandomUniform",Hi(Eb);class $b extends Nb{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new hy(`randomNormal does not support dType ${t}.`);return db(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}$b.className="RandomNormal",Hi($b);class Cb extends Nb{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new hy(`truncatedNormal does not support dType ${t}.`);return pd(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}Cb.className="TruncatedNormal",Hi(Cb);class Ab extends Nb{constructor(e){super(),this.gain=null!=e.gain?e.gain:1}apply(e,t){return lo((()=>{if(2!==e.length||e[0]!==e[1])throw new py("Identity matrix initializer can only be used for 2D square matrices.");return Ci(this.gain,mp(e[0]))}))}getConfig(){return{gain:this.gain}}}Ab.className="Identity",Hi(Ab);class _b extends Nb{constructor(e){if(super(),e.scale<0)throw new py(`scale must be a positive float. Got: ${e.scale}`);var t;this.scale=null==e.scale?1:e.scale,this.mode=null==e.mode?"fanIn":e.mode,t=this.mode,Cy(vb,"FanMode",t),this.distribution=null==e.distribution?"normal":e.distribution,function(e){Cy(kb,"Distribution",e)}(this.distribution),this.seed=e.seed}apply(e,t){const n=function(e,t="channelsLast"){let n,r;if(Gy(t),2===e.length)n=e[0],r=e[1];else if(-1!==[3,4,5].indexOf(e.length)){if("channelsFirst"===t){const t=Jy(e,2);n=e[1]*t,r=e[0]*t}else if("channelsLast"===t){const t=Jy(e,0,e.length-2);n=e[e.length-2]*t,r=e[e.length-1]*t}}else{const t=Jy(e);n=Math.sqrt(t),r=Math.sqrt(t)}return[n,r]}(e),r=n[0],s=n[1];let a=this.scale;if("fanIn"===this.mode?a/=Math.max(1,r):"fanOut"===this.mode?a/=Math.max(1,s):a/=Math.max(1,(r+s)/2),"normal"===this.distribution){const n=Math.sqrt(a);if("float32"!==(t=t||"float32")&&"int32"!==t)throw new hy(`${this.getClassName()} does not support dType ${t}.`);return pd(e,0,n,t,this.seed)}{const n=Math.sqrt(3*a);return Nh(e,-n,n,t,this.seed)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}_b.className="VarianceScaling",Hi(_b);class Rb extends _b{constructor(e){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return _b.className}}Rb.className="GlorotUniform",Hi(Rb);class Db extends _b{constructor(e){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return _b.className}}Db.className="GlorotNormal",Hi(Db);class Fb extends _b{constructor(e){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return _b.className}}Fb.className="HeNormal",Hi(Fb);class Ob extends _b{constructor(e){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return _b.className}}Ob.className="HeUniform",Hi(Ob);class Mb extends _b{constructor(e){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return _b.className}}Mb.className="LeCunNormal",Hi(Mb);class Lb extends _b{constructor(e){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return _b.className}}Lb.className="LeCunUniform",Hi(Lb);class zb extends Nb{constructor(e){super(),this.DEFAULT_GAIN=1,this.ELEMENTS_WARN_SLOW=2e3,this.gain=null==e.gain?this.DEFAULT_GAIN:e.gain,this.seed=e.seed}apply(e,t){return lo((()=>{if(e.length<2)throw new hy("Shape must be at least 2D.");if("int32"!==t&&"float32"!==t&&void 0!==t)throw new TypeError(`Unsupported data type ${t}.`);const n=ue(e.slice(0,-1)),r=e[e.length-1],s=n*r;s>this.ELEMENTS_WARN_SLOW&&console.warn(`Orthogonal initializer is being called on a matrix with more than ${this.ELEMENTS_WARN_SLOW} (${s}) elements: Slowness may result.`);const a=db([Math.max(r,n),Math.min(r,n)],0,1,t,this.seed),o=Mf.qr(a,!1);let i=o[0];const l=o[1].flatten().stridedSlice([0],[Math.min(r,n)*Math.min(r,n)],[Math.min(r,n)+1]);return i=Ci(i,l.sign()),n<r&&(i=i.transpose()),Ci(Bi(this.gain),i.reshape(e))}))}getConfig(){return{gain:this.gain,seed:this.seed}}}zb.className="Orthogonal",Hi(zb);const Pb={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function Bb(e,t={}){return Sy(e,Gi.getMap().classNameMap,t,"initializer")}function Vb(e){return Ny(e)}function Wb(e){if("string"==typeof e){const t=e in Pb?Pb[e]:e;if("GlorotNormal"===t)return new Db;if("GlorotUniform"===t)return new Rb;if("HeNormal"===t)return new Fb;if("HeUniform"===t)return new Ob;if("LeCunNormal"===t)return new Mb;if("LeCunUniform"===t)return new Lb;{const e={};return e.className=t,e.config={},Bb(e)}}return e instanceof Nb?e:Bb(e)}function Ub(e){return Array.isArray(e)&&Array.isArray(e[0])}function Gb(e){return 0===e.length?[]:Array.isArray(e[0])?e:[e]}function Hb(e){let t;if(Array.isArray(e)){if(1!==e.length)throw new py(`Expected Tensor length to be 1; got ${e.length}`);t=e[0]}else t=e;return t}function jb(e){if(Array.isArray(e)&&Array.isArray(e[0])){if(1===e.length)return e[0];throw new py(`Expected exactly 1 Shape; got ${e.length}`)}return e}function Kb(e){let t=0;for(const n of e)0===n.shape.length?t+=1:t+=n.shape.reduce(((e,t)=>e*t));return t}const qb="Variable";class Yb{constructor(e,t="float32",n=qb,r=!0,s=null){this.dtype=null==t?"float32":t,this.shape=e.shape,this.id=Oy(),n=null==n?qb:n,this.originalName=Yy(n),this.name=Xy(this.originalName),this.trainable_=r,this.constraint=s,this.val=gd(e,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(e){return this.assertNotDisposed(),function(e,t){if(e.shape.toString()!==t.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(e.shape)+" vs. "+JSON.stringify(t.shape))}(this.val,e),this.val.id!==e.id&&(this.val.assign(e),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(e){this.trainable_=e,this.val.trainable=e}}function Xb(e){return e.map((e=>e.read()))}function Zb(e){e.forEach((e=>{e[0].write(e[1])}))}class Qb{constructor(e){this.dtype=e.dtype,this.shape=e.shape,null!=e.shape?this.ndim=e.shape.length:this.ndim=e.ndim,this.maxNDim=e.maxNDim,this.minNDim=e.minNDim,this.axes=e.axes||{}}}class Jb{constructor(e,t,n,r,s,a,o){this.dtype=e,this.shape=t,this.sourceLayer=n,this.inputs=r,this.callArgs=s,this.outputTensorIndex=o,this.id=Oy(),null!=a&&(this.originalName=Yy(a),this.name=Xy(this.originalName)),this.rank=t.length}}let ex=0;class tx{constructor(e,t){this.callArgs=t,this.id=ex++,this.outboundLayer=e.outboundLayer,this.inboundLayers=e.inboundLayers,this.nodeIndices=e.nodeIndices,this.tensorIndices=e.tensorIndices,this.inputTensors=e.inputTensors,this.outputTensors=e.outputTensors,this.inputMasks=e.inputMasks,this.outputMasks=e.outputMasks,this.inputShapes=e.inputShapes,this.outputShapes=e.outputShapes;for(const t of e.inboundLayers)null!=t&&t.outboundNodes.push(this);e.outboundLayer.inboundNodes.push(this)}getConfig(){const e=[];for(const t of this.inboundLayers)null!=t?e.push(t.name):e.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:e,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let nx=0;class rx extends Ui{constructor(e={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=nx++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let t=e.name;if(!t){const e=this.getClassName();t=wy(e)+"_"+Ly(e)}if(this.name=t,this.trainable_=null==e.trainable||e.trainable,null!=e.inputShape||null!=e.batchInputShape){let t;if(null!=e.batchInputShape)t=e.batchInputShape;else if(null!=e.inputShape){let n=null;null!=e.batchSize&&(n=e.batchSize),t=[n].concat(e.inputShape)}this.batchInputShape=t;let n=e.dtype;null==n&&(n=e.inputDType),null==n&&(n="float32"),this.dtype=n}null!=e.weights?this.initialWeights=e.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(e,t){return e.name+"_ib-"+t.toString()}getNodeAtIndex(e,t){if(0===this.inboundNodes.length)throw new cy(`The layer has never been called and thus has no defined ${t}.`);if(this.inboundNodes.length<=e)throw new py(`Asked to get ${t} at node ${e}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[e]}getInputAt(e){return by(this.getNodeAtIndex(e,"input").inputTensors)}getOutputAt(e){return by(this.getNodeAtIndex(e,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new uy(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(0===this.inboundNodes.length)throw new uy(`Layer ${this.name} is not connected, no input to return.`);return by(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new uy(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new uy(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return by(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map((e=>e()))}get updates(){return this._updates}get built(){return this._built}set built(e){this._built=e}get trainable(){return this.trainable_}set trainable(e){this._trainableWeights.forEach((t=>t.trainable=e)),this.trainable_=e}get trainableWeights(){return this.trainable_?this._trainableWeights.filter((e=>e.trainable)):[]}set trainableWeights(e){this._trainableWeights=e}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter((e=>!e.trainable)).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(e){this._nonTrainableWeights=e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(e){const t=xy(e);if(null==this.inputSpec||0===this.inputSpec.length)return;const n=xy(this.inputSpec);if(t.length!==n.length)throw new py(`Layer ${this.name} expects ${n.length} inputs, but it received ${t.length} input tensors. Input received: ${e}`);for(let e=0;e<t.length;e++){const r=t[e],s=n[e];if(null==s)continue;const a=r.rank;if(null!=s.ndim&&a!==s.ndim)throw new py(`Input ${e} is incompatible with layer ${this.name}: expected ndim=${s.ndim}, found ndim=${a}`);if(null!=s.maxNDim&&a>s.maxNDim)throw new py(`Input ${e} is incompatible with layer ${this.name}: expected max_ndim=${s.maxNDim}, found ndim=${a}`);if(null!=s.minNDim&&a<s.minNDim)throw new py(`Input ${e} is incompatible with layer ${this.name}: expected min_ndim=${s.minNDim}, found ndim=${a}.`);if(null!=s.dtype&&r.dtype!==s.dtype)throw new py(`Input ${e} is incompatible with layer ${this.name} : expected dtype=${s.dtype}, found dtype=${r.dtype}.`);if(s.axes){const t=r.shape;for(const n in s.axes){const r=Number(n),a=s.axes[n],o=r>=0?t[r]:t[t.length+r];if(null!=a&&-1===[a,null].indexOf(o))throw new py(`Input ${e} is incompatible with layer ${this.name}: expected axis ${r} of input shape to have value ${a} but got shape ${t}.`)}}if(null!=s.shape)for(let t=0;t<s.shape.length;++t){const n=s.shape[t],a=r.shape[t];if(null!=n&&null!=a&&n!==a)throw new py(`Input ${e} is incompatible with layer ${this.name}: expected shape=${s.shape}, found shape=${r.shape}.`)}}}call(e,t){return e}invokeCallHook(e,t){null!=this._callHook&&this._callHook(e,t)}setCallHook(e){this._callHook=e}clearCallHook(){this._callHook=null}apply(e,t){t=t||{},this.assertNotDisposed();const n=xy(e),r=function(e){let t=!0;for(const n of xy(e))if(!(n instanceof Jb)){t=!1;break}return t}(e),s=function(e){let t=!0;for(const n of xy(e))if(n instanceof Jb){t=!1;break}return t}(e);if(r===s)throw new py("Arguments to apply() must be all SymbolicTensors or all Tensors");return qy(this.name,(()=>{if(!this.built){this.assertInputCompatibility(e);const t=[];for(const n of xy(e))t.push(n.shape);this.build(by(t)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&s&&(this._refCount=1)}if(this.assertInputCompatibility(e),s){let r=this.call(e,t);this.supportsMasking&&this.setMaskMetadata(e,r);const s=xy(r),a=[];for(let e of s)-1!==n.indexOf(e)&&(e=e.clone()),a.push(e);if(r=by(a),null!=this.activityRegularizer)throw new hy("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return r}{const n=function(e){e=xy(e);const t=[];for(const n of e)t.push(n.shape);return by(t)}(e),r=this.computeOutputShape(n);let s;const a="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(e)?n[0]:n),s=null!=r&&r.length>0&&Array.isArray(r[0])?r.map(((n,r)=>new Jb(a,n,this,xy(e),t,this.name,r))):new Jb(a,r,this,xy(e),t,this.name),this.addInboundNode(e,s,null,null,n,r,t),this._refCount++,null!=this.activityRegularizer)throw new hy("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return s}}))}warnOnIncompatibleInputShape(e){if(null!=this.batchInputShape)if(e.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(e)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let t=!1;this.batchInputShape.forEach(((n,r)=>{null!=n&&null!=e[r]&&e[r]!==n&&(t=!0)})),t&&console.warn(`The shape of the input tensor (${JSON.stringify(e)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new uy(`The layer ${this.name} has never been called and thus has no defined output shape.`);const e=[];for(const t of this.inboundNodes){const n=JSON.stringify(t.outputShapes);-1===e.indexOf(n)&&e.push(n)}if(1===e.length){const e=this.inboundNodes[0].outputShapes;return Array.isArray(e)&&Array.isArray(e[0])&&1===e.length?e[0]:e}throw new uy(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new cy(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return Kb(this.weights)}build(e){this.built=!0}getWeights(e=!1){return Xb(e?this.trainableWeights:this.weights)}setWeights(e){lo((()=>{const t=this.weights;if(t.length!==e.length)throw new py(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${e.length}, but the layer was expecting ${t.length} weights. Provided weights: ${e}...`);if(0===t.length)return;const n=[],r=Xb(t);for(let s=0;s<r.length;++s){const a=r[s],o=t[s],i=e[s];if(!he(a.shape,i.shape))throw new py(`Layer weight shape ${a.shape} not compatible with provided weight shape ${i.shape}`);n.push([o,i])}Zb(n)}))}addWeight(e,t,n,r,s,a,o,i){if(-1!==this._addedWeightNames.indexOf(e))throw new py(`Duplicate weight name ${e} for layer ${this.name}`);this._addedWeightNames.push(e),null==n&&(n="float32"),this.fastWeightInitDuringBuild&&(r=null!=i?i():Wb("zeros"));const l=r.apply(t,n),u=new Yb(l,n,e,a,o);return l.dispose(),null!=s&&this.addLoss((()=>s.apply(u.read()))),null==a&&(a=!0),a?this._trainableWeights.push(u):this._nonTrainableWeights.push(u),u}setFastWeightInitDuringBuild(e){this.fastWeightInitDuringBuild=e}addLoss(e){null==e||Array.isArray(e)&&0===e.length||(e=xy(e),void 0!==this._losses&&null!==this._losses&&this.losses.push(...e))}computeOutputShape(e){return e}computeMask(e,t){if(!this.supportsMasking){if(null!=t){if(!Array.isArray(t))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);t.forEach((e=>{if(null!=e)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)}))}return null}return t}setMaskMetadata(e,t,n){if(!this.supportsMasking)return;const r=this.computeMask(e,n),s=xy(t),a=xy(r);if(s.length!==a.length)throw new Error(`${this.name} outputs ${s.length} tensors but ${s.length} masks for those tensors`);for(let e=0;e<s.length;e++)s[e].kerasMask=a[e]}addInboundNode(e,t,n,r,s,a,o=null){const i=xy(e);t=xy(t),n=xy(n),r=xy(r),s=Gb(s),a=Gb(a);const l=[],u=[],c=[];for(const e of i)l.push(e.sourceLayer),u.push(e.nodeIndex),c.push(e.tensorIndex);new tx({outboundLayer:this,inboundLayers:l,nodeIndices:u,tensorIndices:c,inputTensors:i,outputTensors:t,inputMasks:n,outputMasks:r,inputShapes:s,outputShapes:a},o);for(let e=0;e<t.length;e++)t[e].sourceLayer=this,t[e].nodeIndex=this.inboundNodes.length-1,t[e].tensorIndex=e}getConfig(){const e={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(e.batchInputShape=this.batchInputShape),null!=this.dtype&&(e.dtype=this.dtype),e}disposeWeights(){return this.weights.forEach((e=>e.dispose())),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let e=0;return 0==--this._refCount&&(e=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:e}}}function sx(e,t,n){if((null==t||null!=n&&n>0)&&(t=e.sourceLayer,n=e.nodeIndex),0===t.inboundNodes.length)return[e];{const e=t.inboundNodes[n];if(0===e.inboundLayers.length)return e.inputTensors;{const t=[];for(let n=0;n<e.inboundLayers.length;n++){const r=sx(e.inputTensors[n],e.inboundLayers[n],e.nodeIndices[n]);for(const e of r)-1===t.indexOf(e)&&t.push(e)}return t}}}class ax extends rx{constructor(e){if(super({dtype:e.dtype,name:null!=e.name?e.name:Ly("input").toString()}),null==e.batchSize&&(e.batchSize=null),null==e.sparse&&(e.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=e.sparse,null!=e.inputShape&&null!=e.batchInputShape)throw new py("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let t=e.batchInputShape;if(null==t){if(null==e.inputShape)throw new py("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");t=[e.batchSize].concat(e.inputShape)}else if(null!=e.batchSize)throw new py("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const n=e.dtype||"float32";this.batchInputShape=t,this.dtype=n,this.inputSpec=[{shape:t}];const r=new Jb(this.dtype,this.batchInputShape,this,[],{},this.name);r.nodeIndex=0,r.tensorIndex=0,new tx({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[r],outputTensors:[r],inputMasks:[null],outputMasks:[null],inputShapes:[t],outputShapes:[t]})}apply(e,t){throw new py(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}function ox(e){if(null==e.batchShape&&null==e.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=e.batchShape&&null!=e.shape)throw new py("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let t=e.batchShape;null!=e.shape&&null==t&&(t=[null].concat(e.shape));let n=e.dtype;return null==n&&(n="float32"),new ax({batchInputShape:t,name:e.name,dtype:n,sparse:e.sparse}).inboundNodes[0].outputTensors[0]}ax.className="InputLayer",Hi(ax);class ix{constructor(e){if(this.id2Value={},this.id2Mask={},this.name2Id={},e instanceof ix)for(const t in e.id2Value)this.id2Value[t]=e.id2Value[t],t in e.id2Mask&&(this.id2Mask[t]=e.id2Mask[t]);else{if(null==e)return;for(const t of e)this.add(t.key,t.value)}}add(e,t,n){if(null!=this.id2Value[e.id])throw new py(`Duplicate key: name=${e.name}, id=${e.id}`);return this.id2Value[e.id]=function(e,t){if(null==e.dtype||e.dtype===t.dtype)return t;try{return Ni(t,e.dtype)}catch(n){throw new py(`The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${e.name}' (${e.dtype}).`)}}(e,t),this.name2Id[e.name]=e.id,null!=n&&(this.id2Mask[e.id]=n),this}addFeed(e){this.add(e.key,e.value)}hasKey(e){return null!=this.id2Value[e.id]}names(){return Object.keys(this.name2Id)}getValue(e){if(e instanceof Jb){if(null==this.id2Value[e.id])throw new py(`Nonexistent key: ${e.name}`);return this.id2Value[e.id]}{const t=this.name2Id[e];if(null==t)throw new py(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Value[t]}}getMask(e){if(e instanceof Jb){if(null==this.id2Value[e.id])throw new py(`Nonexistent key: ${e.name}`);return this.id2Mask[e.id]}{const t=this.name2Id[e];if(null==t)throw new py(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Mask[t]}}disposeMasks(){null!=this.id2Mask&&uo(this.id2Mask)}}const lx=new fy,ux=new fy;function cx(e,t,n,r){const s=null!=n&&n.training,a=Array.isArray(e),o=a?e:[e],i=o.map((e=>e.name)),l=[],u=t.names();for(const e of i)-1!==u.indexOf(e)?l.push(t.getValue(e)):l.push(null);null!=r&&(r.maxNumTensors=-1/0,r.minNumTensors=1/0);const c=i.join(",")+"|"+t.names().sort().join(",");let p,h=lx.get(c);if(null==h){const e=function(e,t){oe(null!=e&&e.length>0,(()=>"Expected at least one fetch, got none"));let n=[],r={};if(1===e.length){const s=hx(e[0],t);n=s.sorted,r=s.recipientMap}else{const s=new Set;for(const a of e){const{sorted:e,recipientMap:o}=hx(a,t);for(const t of e)s.has(t.name)||(n.push(t),s.add(t.name));for(const e in o)null==r[e]&&(r[e]=new Set),o[e].forEach((t=>r[e].add(t)))}}return{sorted:n,recipientCounts:px(r)}}(o,t);h=e.sorted,p=e.recipientCounts,lx.put(c,h),ux.put(c,p)}p={},s||Object.assign(p,ux.get(c));const d=new ix(t);for(let e=0;e<h.length;++e){if(null!=r){const e=oo().numTensors;e>r.maxNumTensors&&(r.maxNumTensors=e),e<r.minNumTensors&&(r.minNumTensors=e)}const a=h[e],o=a.sourceLayer;if(o instanceof ax)continue;const u=[],c=[],f=[];let m=!1;for(const e of a.inputs){const n=d.getValue(e),r=d.getMask(e);u.push(n),c.push(r),null!=r&&(m=!0),s||(p[e.name]--,0!==p[e.name]||t.hasKey(e)||-1!==i.indexOf(e.name)||n.isDisposed||!0===e.sourceLayer.stateful||f.push(n))}m&&((n=n||{}).mask=c[0]);const g=xy(o.apply(u,n));let y=null;o.supportsMasking&&(y=o.computeMask(u,c));const b=dx(a),x=Array.isArray(b)?b:[b];for(let e=0;e<x.length;++e){d.hasKey(x[e])||d.add(x[e],g[e],Array.isArray(y)?y[0]:y);const t=i.indexOf(x[e].name);-1!==t&&(l[t]=g[e])}s||uo(f)}return d.disposeMasks(),a?l:l[0]}function px(e){const t={};for(const n in e)t[n]=e[n].size;return t}function hx(e,t){const n=new Set,r=[],s={};for(const e of t.names())n.add(e);const a=[],o=[];for(a.push(e);a.length>0;){const e=a[a.length-1];if(n.has(e.name)){a.pop();continue}const t=o[o.length-1]===a.length-1;if(0===e.inputs.length||t)a.pop(),r.push(e),n.add(e.name),t&&o.pop();else{o.push(a.length-1);for(const t of e.inputs)null==s[t.name]&&(s[t.name]=new Set),s[t.name].add(e.name),n.has(t.name)||a.push(t)}}return{sorted:r,recipientMap:s}}function dx(e){let t;if(1===e.sourceLayer.inboundNodes.length)t=e.sourceLayer.output;else{let n=null;for(let t=0;t<e.sourceLayer.inboundNodes.length;++t)for(const r of e.sourceLayer.inboundNodes[t].outputTensors)if(r.id===e.id){n=t;break}t=e.sourceLayer.getOutputAt(n)}return t}function fx(e,t){return lo((()=>Ai(ip(Ci(e,e),t,!0))))}Ye().registerFlag("TOPOLOGICAL_SORT_CACHE_MAX_ENTRIES",(()=>100),(function(e){null!=lx&&lx.setMaxEntries(e),null!=ux&&ux.setMaxEntries(e)}));class mx extends Ui{getConfig(){return{}}}class gx extends mx{constructor(e){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return lo((()=>{const t=fx(e,this.axis),n=kc(t,0,this.maxValue);return Ci(e,$i(n,Ii(sb(),t)))}))}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}gx.className="MaxNorm",Hi(gx);class yx extends mx{constructor(e){super(),this.defaultAxis=0,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return lo((()=>$i(e,Ii(sb(),fx(e,this.axis)))))}getConfig(){return{axis:this.axis}}}yx.className="UnitNorm",Hi(yx);class bx extends mx{apply(e){return Eh(e)}}bx.className="NonNeg",Hi(bx);class xx extends mx{constructor(e){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=e.minValue?e.minValue:this.defaultMinValue,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.rate=null!=e.rate?e.rate:this.defaultRate,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return lo((()=>{const t=fx(e,this.axis),n=Ii(Ci(this.rate,kc(t,this.minValue,this.maxValue)),Ci(1-this.rate,t));return Ci(e,$i(n,Ii(sb(),t)))}))}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}xx.className="MinMaxNorm",Hi(xx);const wx={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function vx(e){return Ny(e)}function kx(e,t={}){return Sy(e,Gi.getMap().classNameMap,t,"constraint")}function Nx(e){return null==e?null:"string"==typeof e?kx({className:e in wx?wx[e]:e,config:{}}):e instanceof mx?e:kx(e)}function Tx(e){return new gx(e)}function Sx(e){return new yx(e)}function Ix(){return new bx}function Ex(e){return new xx(e)}function $x(){return new Tb}function Cx(){return new Sb}function Ax(e){return new Ib(e)}function _x(e){return new Eb(e)}function Rx(e){return new $b(e)}function Dx(e){return new Cb(e)}function Fx(e){return new Ab(e)}function Ox(e){return new _b(e)}function Mx(e){return new Rb(e)}function Lx(e){return new Db(e)}function zx(e){return new Fb(e)}function Px(e){return new Ob(e)}function Bx(e){return new Mb(e)}function Vx(e){return new Lb(e)}function Wx(e){return new zb(e)}async function Ux(e){if(null==e)return;const t=[],n=[],r=[];for(const s in e){const a=e[s];if("number"!=typeof a){const e=a;t.push(e.data()),n.push(s),r.push(e)}}if(t.length>0){const s=await Promise.all(t);for(let t=0;t<s.length;++t)e[n[t]]=s[t][0];uo(r)}}function Gx(e){if(null!=e)for(const t in e){const n=e[t];"number"!=typeof n&&n.dispose()}}var Hx;!function(e){e[e.SILENT=0]="SILENT",e[e.VERBOSE=1]="VERBOSE"}(Hx||(Hx={}));class jx{constructor(){this.validationData=null}setParams(e){this.params=e}async onEpochBegin(e,t){}async onEpochEnd(e,t){}async onBatchBegin(e,t){}async onBatchEnd(e,t){}async onTrainBegin(e){}async onTrainEnd(e){}setModel(e){}}class Kx{constructor(e,t=10){null==e&&(e=[]),this.callbacks=e,this.queueLength=t}append(e){this.callbacks.push(e)}setParams(e){for(const t of this.callbacks)t.setParams(e)}setModel(e){for(const t of this.callbacks)t.setModel(e)}async onEpochBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochBegin(e,t)}async onEpochEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochEnd(e,t)}async onBatchBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchBegin(e,t)}async onBatchEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchEnd(e,t)}async onTrainBegin(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainBegin(e)}async onTrainEnd(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainEnd(e)}}class qx extends jx{constructor(){super()}async onEpochBegin(e){this.seen=0,this.totals={}}async onBatchEnd(e,t){null==t&&(t={});const n=null==t.size?0:t.size;this.seen+=n;for(const e in t){const r=t[e];if("number"==typeof r)this.totals.hasOwnProperty(e)||(this.totals[e]=0),this.totals[e]=this.totals[e]+r*n;else{let t;e in this.totals?t=this.totals[e]:this.totals[e]=0;const s=lo((()=>Ii(this.totals[e],Ci(r,n))));this.totals[e]=s,null!=t&&t.dispose()}}}async onEpochEnd(e,t){if(null!=t)for(const e of this.params.metrics)null!=this.totals[e]&&("number"==typeof this.totals[e]?t[e]=this.totals[e]/this.seen:lo((()=>{const n=Ci($i(1,this.seen),this.totals[e]);t[e]=n,this.totals[e].dispose(),co(t[e])})))}}class Yx extends jx{async onTrainBegin(e){this.epoch=[],this.history={}}async onEpochEnd(e,t){null==t&&(t={}),this.epoch.push(e);for(const e in t)null==this.history[e]&&(this.history[e]=[]),this.history[e].push(t[e])}async syncData(){const e=[],t=[],n=[];for(const r in this.history){const s=this.history[r];for(let a=0;a<s.length;++a)if("number"!=typeof s[a]){const o=s[a];e.push(o.data()),t.push(r),n.push(a)}}const r=await Promise.all(e);for(let e=0;e<r.length;++e)this.history[t[e]][n[e]].dispose(),this.history[t[e]][n[e]]=r[e][0]}}class Xx extends jx{constructor(e,t){if(super(),this.currentEpoch=0,this.nowFunc=e.nowFunc,this.nextFrameFunc=e.nextFrameFunc||Wf,this.yieldEvery=t||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=e.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");_e(this.yieldEvery)&&(this.maybeWait=function(e,t,n){let r,s=null!=n?n():Ys();return(...a)=>{const o=null!=n?n():Ys();return o-s<t||(s=o,r=e(...a)),r}}(this.maybeWait.bind(this),this.yieldEvery,this.nowFunc)),this.trainBegin=e.onTrainBegin,this.trainEnd=e.onTrainEnd,this.epochBegin=e.onEpochBegin,this.epochEnd=e.onEpochEnd,this.batchBegin=e.onBatchBegin,this.batchEnd=e.onBatchEnd,this.yield=e.onYield}async maybeWait(e,t,n){const r=[];null!=this.yield&&(await Ux(n),r.push(this.yield(e,t,n))),r.push(this.nextFrameFunc()),await Promise.all(r)}async onEpochBegin(e,t){this.currentEpoch=e,null!=this.epochBegin&&(await Ux(t),await this.epochBegin(e,t))}async onEpochEnd(e,t){const n=[];null!=this.epochEnd&&(await Ux(t),n.push(this.epochEnd(e,t))),"epoch"===this.yieldEvery&&n.push(this.nextFrameFunc()),await Promise.all(n)}async onBatchBegin(e,t){null!=this.batchBegin&&(await Ux(t),await this.batchBegin(e,t))}async onBatchEnd(e,t){const n=[];null!=this.batchEnd&&(await Ux(t),n.push(this.batchEnd(e,t))),"batch"===this.yieldEvery?n.push(this.nextFrameFunc()):_e(this.yieldEvery)&&n.push(this.maybeWait(this.currentEpoch,e,t)),await Promise.all(n)}async onTrainBegin(e){null!=this.trainBegin&&(await Ux(e),await this.trainBegin(e))}async onTrainEnd(e){null!=this.trainEnd&&(await Ux(e),await this.trainEnd(e))}}function Zx(e,t){return null==e&&(e={}),e instanceof jx?[e]:Array.isArray(e)&&e[0]instanceof jx?e:xy(e).map((e=>new Xx(e,t)))}class Qx{constructor(){}static registerCallbackConstructor(e,t){oe(e>=0&&Number.isInteger(e),(()=>`Verbosity level is expected to be an integer >= 0, but got ${e}`)),Qx.checkForDuplicate(t),null==Qx.constructors[e]&&(Qx.constructors[e]=[]),Qx.constructors[e].push(t)}static checkForDuplicate(e){for(const t in Qx.constructors)Qx.constructors[+t].forEach((t=>{if(t===e)throw new py("Duplicate callback constructor.")}))}static clear(){Qx.constructors={}}static createCallbacks(e){const t=[];for(const n in Qx.constructors){const r=+n;e>=r&&t.push(...Qx.constructors[r])}return t.map((e=>new e))}}function Jx(e,t,n,r,s,a,o,i,l){const u=new Yx,c=[new qx,...Qx.createCallbacks(t)];null!=e&&c.push(...e),c.push(u);const p=new Kx(c);return p.setParams({epochs:n,initialEpoch:r,samples:s,steps:a,batchSize:o,verbose:t,doValidation:i,metrics:l}),{callbackList:p,history:u}}function ew(e,t={},n=!1){return Sy(e,Gi.getMap().classNameMap,t,"layer",n)}function tw(e,t){return lo((()=>{"float32"!==e.dtype&&(e=Ni(e,"float32"));const n=ip(gb(e),t,!0),r=Yi(n.shape,sb()),s=Ai(sl(n,r));return $i(e,s)}))}function nw(e,t){return lo((()=>Gp(gb(Qi(t,e)),-1)))}function rw(e,t){return lo((()=>Gp(el(Qi(t,e)),-1)))}function sw(e,t){return lo((()=>{const n=Qi(e,t),r=kc(el(e),sb(),Number.MAX_VALUE),s=el($i(n,r));return Ci(100,Gp(s,-1))}))}function aw(e,t,n=!1){return lo((()=>{if(n)t=jh(t);else{const e=ip(t,t.shape.length-1,!0);t=$i(t,e)}return t=kc(t,sb(),1-sb()),Dl(ip(Ci(Ni(e,"float32"),$p(t)),t.shape.length-1))}))}function ow(e,t,n=!1){return lo((()=>{const r=Ni(gp(function(e){const t=[Jy(e.shape)];return sc(e,t)}(e)),"int32"),s=(t=kc(t,sb(),1-sb())).shape;return aw(sc(_l(r,s[s.length-1]),s),t,n)}))}function iw(e,t){return lo((()=>{let n;return n=kc(t,sb(),1-sb()),n=$p($i(n,Qi(1,n))),Gp(function(e,t){if(!he(e.shape,t.shape))throw new py(`logits and labels must have the same shape, but got shapes ${JSON.stringify(e.shape)} and ${JSON.stringify(t.shape)}`);return lo((()=>{const n=Eh(t),r=Dl(el(t));return Ii(Qi(n,Ci(t,e)),Cp(pp(r)))}))}(e,n),-1)}))}function lw(e,t){return lo((()=>{const n=tw(e,-1),r=tw(t,-1),s=Ci(n,r);return Dl(ip(s,-1))}))}Qx.constructors={};const uw={meanSquaredError:nw,meanAbsoluteError:rw,meanAbsolutePercentageError:sw,meanSquaredLogarithmicError:function(e,t){return lo((()=>{const n=kc(t,sb(),Number.MAX_VALUE),r=$p(Ii(1,n)),s=kc(e,sb(),Number.MAX_VALUE),a=$p(Ii(1,s));return Gp(gb(Qi(r,a)),-1)}))},squaredHinge:function(e,t){return lo((()=>{const n=sl(0,Qi(1,Ci(e,t)));return Gp(gb(n),-1)}))},hinge:function(e,t){return lo((()=>{const n=sl(0,Qi(1,Ci(e,t)));return Gp(n,-1)}))},categoricalHinge:function(e,t){return lo((()=>{const n=ip(Ci(e,t),-1),r=ap(Ci(Qi(1,e),t),-1);return sl(0,Ii(1,Qi(r,n)))}))},logcosh:function(e,t){return lo((()=>{const n=Math.log(2),r=Qi(t,e),s=Qi(Ii(r,Ap(Ci(-2,r))),n);return Gp(s,-1)}))},categoricalCrossentropy:aw,sparseCategoricalCrossentropy:ow,binaryCrossentropy:iw,kullbackLeiblerDivergence:function(e,t){return lo((()=>{const n=kc(e,sb(),1),r=kc(t,sb(),1);return ip(Ci(e,$p($i(n,r))),-1)}))},poisson:function(e,t){return lo((()=>{const n=$p(Ii(sb(),t));return Gp(Qi(t,Ci(e,n)),-1)}))},cosineProximity:lw};function cw(e){if("string"==typeof e){if(e in uw)return uw[e];let t=`Unknown loss ${e}`;throw e.toLowerCase().includes("softmaxcrossentropy")&&(t=`Unknown loss ${e}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new py(t)}return e}function pw(e,t){return lo((()=>{const n=Ci(.5,th(t)),r=ab(bp(t,n),e.dtype);return Gp(Uc(e,r),-1)}))}function hw(e,t){return lo((()=>ab(Uc(Mu(e,-1),Mu(t,-1)),"float32")))}function dw(e,t){return lo((()=>Ni(ip(Fp(Uc(e,1),Uc(t,1))),"float32")))}function fw(e,t){return lo((()=>{const n=dw(e,t),r=function(e,t){return lo((()=>Ni(ip(Fp(Uc(e,0),Uc(t,1))),"float32")))}(e,t),s=Ii(n,r);return Ni(Gc(bp(s,0),$i(n,s),0),"float32")}))}function mw(e,t){return iw(e,t)}function gw(e,t){return e.rank===t.rank&&(e=Jh(e,[e.rank-1])),(t=Mu(t,-1)).dtype!==e.dtype&&(t=Ni(t,e.dtype)),Ni(Uc(e,t),"float32")}const yw=aw,bw=ow,xw={binaryAccuracy:pw,categoricalAccuracy:hw,precision:fw,categoricalCrossentropy:yw,sparseCategoricalCrossentropy:bw,mse:nw,MSE:nw,mae:rw,MAE:rw,mape:sw,MAPE:sw,cosine:lw};function ww(e){if("string"==typeof e&&e in xw)return xw[e];if("string"!=typeof e&&null!=e)return e;throw new py(`Unknown metric ${e}`)}function vw(e){if(gy(null!==e,`Unknown LossOrMetricFn ${e}`),"string"==typeof e)return e;{let t;for(const n of Object.keys(uw))if(uw[n]===e){t=n;break}if(void 0!==t)return t;for(const n of Object.keys(xw))if(xw[n]===e){t=n;break}return void 0!==t?t:e.name}}function kw(e,t,n=!1){if(null==e||"object"!=typeof e||Object.getPrototypeOf(e)!==Object.prototype||!Nw(e))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(n){const n=JSON.stringify(e);n.length>1048576&&console.warn(`User-defined metadata of model "${t}" is too large in size (length=${n.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function Nw(e){if(null===e)return!0;if("object"==typeof e){if(Object.getPrototypeOf(e)===Object.prototype){const t=Object.keys(e);for(const n of t){if("string"!=typeof n)return!1;if(!Nw(e[n]))return!1}return!0}if(Array.isArray(e)){for(const t of e)if(!Nw(t))return!1;return!0}return!1}{const t=typeof e;return"string"===t||"number"===t||"boolean"===t}}function Tw(e,t,n=console.log){let r="";for(let n=0;n<e.length;++n)n>0&&(r=r.slice(0,r.length-1)+" "),r+=e[n],r=r.slice(0,t[n]),r+=" ".repeat(t[n]-r.length);n(r)}function Sw(e,t,n){let r,s;try{s=e.inboundNodes.map((e=>JSON.stringify(e.inputShapes))).join(",")}catch(e){s="multiple"}try{r=JSON.stringify(e.outputShape)}catch(e){r="multiple"}Tw([`${e.name} (${e.getClassName()})`,s,r,e.countParams().toString()],t,n)}function Iw(e,t,n,r){let s,a;try{a=e.inboundNodes.map((e=>JSON.stringify(e.inputShapes))).join(",")}catch(e){a="multiple"}try{s=JSON.stringify(e.outputShape)}catch(e){s="multiple"}const o=[];for(const t of e.inboundNodes)if(!(null!=n&&n.length>0&&-1===n.indexOf(t)))for(let e=0;e<t.inboundLayers.length;++e){const n=t.inboundLayers[e].name,r=t.nodeIndices[e],s=t.tensorIndices[e];o.push(`${n}[${r}][${s}]`)}const i=e.name,l=e.getClassName(),u=0===o.length?"":o[0];Tw([`${i} (${l})`,a,s,e.countParams().toString(),u],t,r);for(let e=1;e<o.length;++e)Tw(["","","","",o[e]],t,r)}function Ew(e,t,n){return("inboundNodes"===e||"outputLayers"===e||"inputLayers"===e)&&0===t&&"string"==typeof n}function $w(e,t){if(null===e)return null;if("string"==typeof e)return vy(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],r=e.length;for(let s=0;s<r;++s){const r=e[s];Ew(t,s,r)?n.push(r):n.push($w(r,t))}return n}{const t={};for(const n of Object.keys(e)){const r=e[n];if("name"===n&&"string"==typeof r)t[n]=r;else{const e=vy(n);t[e]=$w(r,e)}}return t}}function Cw(e,t){if(null==e)return null;if("string"==typeof e)return wy(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],r=e.length;for(let s=0;s<r;++s){const r=e[s];Ew(t,s,r)?n.push(r):n.push(Cw(r,t))}return n}{const t={};for(const n of Object.keys(e)){const r=e[n];t[wy(n)]="name"!==n&&"className"!==n||"string"!=typeof r?Cw(r,n):r}return t}}const Aw="4.22.0";class _w extends rx{constructor(e){if(super({}),this.containerNodes=new Set,this.name=e.name,null==this.name){const e=this.getClassName().toLowerCase();this.name=Ly(e)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(e.inputs)?this.inputs=e.inputs.slice():this.inputs=[e.inputs],Array.isArray(e.outputs)?this.outputs=e.outputs.slice():this.outputs=[e.outputs],Ey(this.inputs).length!==this.inputs.length)throw new py(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map((e=>e.name))}`);Ey(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map((e=>e.name))}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const e of this.outputs){const t=e.sourceLayer,n=e.nodeIndex,r=e.tensorIndex;this.outputLayers.push(t),this.outputLayersNodeIndices.push(n),this.outputLayersTensorIndices.push(r)}for(const e of this.inputs){const t=e.sourceLayer,n=e.nodeIndex,r=e.tensorIndex;gy(0===n,"input layer has >1 nodes"),gy(0===r,"input layer has >1 tensors"),this.inputLayers.push(t),this.inputLayersNodeIndices.push(n),this.inputLayersTensorIndices.push(r)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let t=0;t<this.inputLayers.length;t++){const n=this.inputLayers[t];if(!(n instanceof ax))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${e.inputs}. Input ${t} (0-based) originates from layer type ${n.getClassName()}.`);this.inputNames.push(n.name),this.feedInputShapes.push(n.batchInputShape),this.feedInputNames.push(n.name)}for(const e of this.outputLayers)this.outputNames.push(e.name);this.internalInputShapes=this.inputs.map((e=>e.shape)),this.internalOutputShapes=this.outputs.map((e=>e.shape));const t={},n={},r={},s={},a={},o=[],i=(e,t,n,r,s,l)=>{null!=r&&null!=s&&null!=l||(r=e.sourceLayer,s=e.nodeIndex,l=e.tensorIndex);const u=r.inboundNodes[s];if(-1!==n.indexOf(u))throw new cy(`The tensor ${e.name} at layer "${r.name}" is part of a cycle.`);if(-1!==t.indexOf(u))return;this.containerNodes.add(_w.nodeKey(r,s)),r.id in a||(a[r.id]=Object.keys(a).length),-1===n.indexOf(u)&&n.push(u);const c=u.inboundLayers.length;for(let e=0;e<c;e++){const r=u.inputTensors[e],s=u.inboundLayers[e],a=u.nodeIndices[e],o=u.tensorIndices[e];i(r,t,n,s,a,o)}for(t.push(u);n.indexOf(u)>=0;)n.splice(n.indexOf(u),1);o.push(u)},l=[],u=[];for(const e of this.outputs)i(e,l,u);const c=o.slice().reverse();for(const e of c){n[e.id]=e,e.id in t||(t[e.id]=0);let a=t[e.id];const o=null==r[e.outboundLayer.id]?0:r[e.outboundLayer.id];a=Math.max(a,o),r[e.outboundLayer.id]=a,s[e.outboundLayer.id]=e.outboundLayer,t[e.id]=a;for(let r=0;r<e.inboundLayers.length;r++){const s=e.inboundLayers[r],o=e.nodeIndices[r],i=s.inboundNodes[o],l=null==t[i.id]?0:t[i.id];t[i.id]=Math.max(a+1,l),n[i.id]=i}}const p={};for(const e in t){const r=t[e];r in p||(p[r]=[]),p[r].push(n[e])}const h={};for(const e in r){const t=r[e];t in h||(h[t]=[]),h[t].push(s[e])}let d=Object.keys(h).map((e=>parseInt(e,10))).sort(Iy);this.layers=[];for(const e of d){const t=h[e];t.sort(((e,t)=>{const n=a[e.id],r=a[t.id];return n<r?-1:n>r?1:0}));for(const e of t)e instanceof _w&&this.internalContainerRefs.push(e),this.layers.push(e)}this.layersByDepth=h,d=Object.keys(p).map((e=>parseInt(e,10))).sort(Iy);const f=this.inputs.slice(),m=[];for(const e of d)for(const t of p[e]){const e=t.outboundLayer;if(null!=e){for(const n of t.inputTensors)if(-1===f.indexOf(n))throw new cy(`Graph disconnected: cannot obtain value for tensor ${n} at layer "${e.name}". The following previous layers were accessed without issue: ${m}`);for(const e of t.outputTensors)f.push(e);m.push(e.name)}}this.nodesByDepth=p;const g=this.layers.map((e=>e.name));for(const e of g){const t=g.filter((t=>t===e)).length;if(1!==t)throw new cy(`The name "${e}" is used ${t} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(g))}this.outboundNodes=[],this.inboundNodes=[],new tx({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map((e=>null)),outputMasks:this.outputs.map((e=>null)),inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs.map((e=>e.shape))}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const e={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(const t of this.layers)e.numDisposedVariables+=t.dispose().numDisposedVariables;for(const t of this.internalContainerRefs)e.numDisposedVariables+=t.dispose().numDisposedVariables}return e.refCountAfterDispose=this._refCount,e}get trainable(){return this.trainable_}set trainable(e){this.layers.forEach((t=>{t._trainableWeights.forEach((t=>t.trainable=e))})),this.trainable_=e}get trainableWeights(){if(this._trainableWeights.length>0)throw new py("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let e=[];for(const t of this.layers)e=e.concat(t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.layers)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.layers)t.push(...e.trainableWeights);return t.concat(e)}return e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(e,t=!0){const n={};let r=0;const s=(e=>{const t=Object.keys(e);if(0===t.length)return!1;const n=t[0].split("/");return!isNaN(parseInt(n[n.length-1],10))})(e);s&&this.parseWeights(e);for(const e of this.layers)for(const[t,a]of e.weights.entries()){const e=s?`${a.name.split("/").slice(0,-1).join("/")+"/"}${t}`:a.originalName;if(null!=n[e])throw new py(`Duplicate weight name: ${e}`);n[e]=a,r++}const a=[];for(const r in e){let s=r;if(null==n[r]){const e=r.split("/");s=e.slice(0,-2).concat([e[e.length-1]]).join("/")}if(null!=n[s])a.push([n[s],e[r]]);else if(t)throw new py(`Provided weight data has no target variable: ${r}`);delete n[s]}if(t){const e=[];for(const t in n)e.push(t);if(e.length>0)throw new py(`${e.length} of ${r} weights are not set: ${e}`)}Zb(a)}parseWeights(e){for(const t in Object.keys(e)){const n=t.split("/"),r=["vars","layer_checkpoint_dependencies"],s=n.map((e=>e.startsWith("_")?e.slice(1):e)).filter((e=>!r.includes(e))).join("/");s!==t&&(e[s]=e[t],delete e[t])}}updatedConfig(){const e=this.getConfig(),t={};return t.className=this.getClassName(),t.config=e,t.kerasVersion=`tfjs-layers ${Aw}`,t.backend="TensorFlow.js",t}toJSON(e,t=!0){const n=Cw(this.updatedConfig());return t?JSON.stringify(n):n}call(e,t){return lo((()=>{e=xy(e);const n=new ix;for(let t=0;t<this.inputs.length;++t)n.add(this.inputs[t],e[t]);return cx(this.outputs,n,t)}))}computeMask(e,t){return lo((()=>{let n;return e=xy(e),n=null==t?my(null,e.length):xy(t),this.runInternalGraph(e,n)[1]}))}computeOutputShape(e){const t=Gb(e);if(t.length!==this.inputLayers.length)throw new py(`Invalid inputShape argument ${e}: model has ${this.inputLayers.length} tensor inputs.`);const n={};for(let e=0;e<t.length;e++){const r=this.inputLayers[e],s=t[e];n[r.name+"_0_0"]=s}const r=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort(Iy);if(r.length>1)for(const e of r){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer;if(-1!==this.inputLayers.map((e=>e.id)).indexOf(t.id))continue;const r=[];for(let t=0;t<e.inboundLayers.length;t++){const s=e.inboundLayers[t],a=e.nodeIndices[t],o=e.tensorIndices[t],i=n[`${s.name}_${a}_${o}`];r.push(i)}const s=Gb(t.computeOutputShape(by(r))),a=t.inboundNodes.indexOf(e);for(let e=0;e<s.length;e++)n[`${t.name}_${a}_${e}`]=s[e]}}const s=[],a=[];for(let e=0;e<this.outputLayers.length;e++){const t=this.outputLayers[e],n=this.outputLayersNodeIndices[e],r=this.outputLayersTensorIndices[e],s=`${t.name}_${n}_${r}`;a.push(s)}for(let e=0;e<a.length;e++){const t=a[e];gy(t in n),s.push(n[t])}return by(s)}runInternalGraph(e,t){null==t&&(t=my(null,e.length));const n={};for(let r=0;r<this.inputs.length;++r){const s=this.inputs[r],a=e[r],o=t[r];n[s.id]=[a,o]}const r=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort(Iy);for(const e of r){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer,r=e.inputTensors,s=e.outputTensors,a=new Array;for(const e of r)e.id in n&&a.push(n[e.id]);if(a.length===r.length){let r,o,i,l,u={};if(null!=e.callArgs&&(u=e.callArgs),1===a.length){const[e,n]=a[0];null==u.mask&&(u.mask=n),i=xy(t.call(e,u)),l=xy(t.computeMask(e,n)),r=[e],o=[n]}else r=a.map((e=>e[0])),o=a.map((e=>e[1])),null==u.mask&&(u.mask=o),i=xy(t.call(r,u)),l=xy(t.computeMask(r,o));if(t.activityRegularizer)throw new hy("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let e=0;e<s.length;++e){const t=s[e],r=i[e],a=l[e];n[t.id]=[r,a]}}}}const s=[],a=[],o=[];for(const e of this.outputs){gy(e.id in n,`Could not compute output ${e.name} : ${e.id}`);const[t,r]=n[e.id];o.push(t.shape),s.push(t),a.push(r)}return[s,a,o]}buildNodeConversionMap(e){const t={};let n;for(const e of this.layers){n=e instanceof _w?1:0;for(let r=0;r<e.inboundNodes.length;r++){const s=_w.nodeKey(e,r);this.containerNodes.has(s)&&(t[s]=n,n+=1)}}return t}getLayer(e,t){if(null!=t)return this.findLayer(t);if(null==e)throw new py("Provide either a layer name or layer index");if("number"==typeof e)return this.findLayer(e);for(const t of this.layers)if(t.name===e)return t;throw new py(`No such layer: ${e}`)}findLayer(e){if(this.layers.length<=e)throw new py(`Was asked to retrieve layer at index ${e}, but model only has ${this.layers.length} layer(s).`);return this.layers[e]}calculateLosses(){return lo((()=>{const e=[];for(const t of this.layers)for(let n=0;n<t.inboundNodes.length;++n){const r=_w.nodeKey(t,n);this.containerNodes.has(r)&&e.push(...t.calculateLosses())}return e}))}getConfig(){const e={name:this.name},t=this.buildNodeConversionMap(this.layers),n=[];for(const e of this.layers){const r=e.getClassName(),s=e.getConfig(),a=[];for(let n=0;n<e.inboundNodes.length;n++){const r=e.inboundNodes[n],s=_w.nodeKey(e,n);let o={};if(this.containerNodes.has(s)){if(r.callArgs)try{JSON.stringify(r.callArgs),o=r.callArgs}catch(t){console.warn(`Layer ${e.name} was passed non-serializable keyword arguments: ${r.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),o={}}if(r.inboundLayers.length>0){const e=[];for(let n=0;n<r.inboundLayers.length;n++){const s=r.inboundLayers[n],a=r.nodeIndices[n],i=r.tensorIndices[n];let l=t[_w.nodeKey(s,a)];null==l&&(l=0),e.push([s.name,l,i,o])}a.push(e)}}}const o={};o.name=e.name,o.className=r,o.config=s,o.inboundNodes=a,n.push(o)}e.layers=n;const r=[];for(let e=0;e<this.inputLayers.length;e++){const n=this.inputLayers[e],s=this.inputLayersNodeIndices[e],a=_w.nodeKey(n,s);if(!this.containerNodes.has(a))continue;let o=t[a];null==o&&(o=0);const i=this.inputLayersTensorIndices[e];r.push([n.name,o,i])}e.inputLayers=r;const s=[];for(let e=0;e<this.outputLayers.length;e++){const n=this.outputLayers[e],r=this.outputLayersNodeIndices[e],a=_w.nodeKey(n,r);if(!this.containerNodes.has(a))continue;let o=t[a];null==o&&(o=0);const i=this.outputLayersTensorIndices[e];s.push([n.name,o,i])}return e.outputLayers=s,e}static fromConfig(e,t,n={},r=!1){const s={},a={};function o(e,t){e.name in a?a[e.name].push(t):a[e.name]=[t]}function i(e,t){const n=[];let r;for(const a of t){const i=a[0],l=a[1],u=a[2];if(r=null==a[3]?{}:a[3],!(i in s))return void o(e,t);const c=s[i];if(c.inboundNodes.length<=l)return void o(e,t);const p=c.inboundNodes[l];n.push(p.outputTensors[u])}n.length>0&&e.apply(by(n),r)}function l(e){const n=e.name,a=ew(e,null!=t.customObjects?t.customObjects:{});a.setFastWeightInitDuringBuild(r),s[n]=a,e.inboundNodes.forEach((e=>{if(!(e instanceof Array))throw new py(`Corrupted configuration, expected array for nodeData: ${e}`);o(a,e)}))}const u=t.name,c=t.layers;for(const e of c)l(e);for(;!$y(a);)for(const e of c){const t=s[e.name];if(t.name in a){const e=a[t.name];delete a[t.name];for(const n of e)i(t,n)}}const p=[],h=[],d=t.inputLayers;for(const e of d){const t=e[0],n=e[1],r=e[2];gy(t in s);const a=s[t].inboundNodes[n].outputTensors;p.push(a[r])}const f=t.outputLayers;for(const e of f){const t=e[0],n=e[1],r=e[2];gy(t in s);const a=s[t].inboundNodes[n].outputTensors;h.push(a[r])}return new e({inputs:p,outputs:h,name:u})}get stateful(){if(this._stateful)throw new py("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const e of this.layers)if(e.stateful)return!0;return!1}resetStates(){lo((()=>{this.layers.forEach((e=>{e.stateful&&e.resetStates()}))}))}}function Rw(e,t){return function(e,t,n){const r=t.length;if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>null));if(1===r)return Array.isArray(e)&&1===e.length?e:"object"==typeof e&&t[0]in e?[e[t[0]]]:[e];if(Array.isArray(e)){if(e.length!==r)throw new Error(`Provided ${n} is an array of ${e.length} element(s), but the model has ${r} outputs. Make sure a set of weights is provided for each model output.`);return e}if("object"==typeof e&&Object.keys(e).length>0&&"object"==typeof e[Object.keys(e)[0]]){const n=[];return t.forEach((t=>{t in e?n.push(e[t]):n.push(null)})),n}throw new Error(`The model has multiple (${r}) outputs, so ${n} must be either an array with ${r} elements or an object with ${t} keys. Provided ${n} not understood: ${JSON.stringify(e)}`)}(e,t,"classWeight")}async function Dw(e,t,n,r){if(null!=t||null!=r)throw new Error("Support sampleWeight is not implemented yet");if(null!=n){const t=lo((()=>{if(1===e.shape.length)return Ti(e);if(2===e.shape.length){if(e.shape[1]>1)return Mu(e,1);if(1===e.shape[1])return sc(e,[e.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${e.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${e.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)})),r=Array.from(await t.data());uo(t);const s=[];return r.forEach((e=>{if(null==n[e])throw new Error(`classWeight must contain all classes in the training data. The class ${e} exists in the data but not in classWeight`);s.push(n[e])})),sd(s,"float32")}return null}function Fw(e,t){return Ci(e,t)}function Ow(e,t){let n,r;const s=t;n=s.xs,r=s.ys,oe(null!=n&&null!=r,(()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${t}`));const a=Mw("input",e.inputNames,n),o=Mw("output",e.outputNames,r),i=a[0].shape[0];oe(a.length===e.inputs.length,(()=>`LayersModel has ${e.inputs.length} inputs, but the dataset provides ${a.length} inputs.  (Expected input keys: ${JSON.stringify(e.inputNames)})`)),oe(o.length===e.outputs.length,(()=>`LayersModel has ${e.outputs.length} outputs, but the dataset provides ${o.length} outputs.  (Expected output keys: ${JSON.stringify(e.outputNames)})`));for(let t=0;t<a.length;t++)oe(a[t].shape[0]===i,(()=>`Batch size mismatch: input ${e.inputNames[t]} has ${a[t].shape[0]}; expected  ${i} based on input ${e.inputNames[0]}.`));for(let t=0;t<o.length;t++)oe(o[t].shape[0]===i,(()=>`Batch size mismatch: output ${e.outputNames[t]} has ${o[t].shape[0]}; expected  ${i} based on input ${e.inputNames[0]}.`));return{xs:a,ys:o}}function Mw(e,t,n){if(n instanceof da)return[n];if(Array.isArray(n))return oe(n.length===t.length,(()=>`Received an array of ${n.length} Tensors, but expected ${t.length} to match the ${e} keys ${t}.`)),n;{const r=[];for(const s of t){if(null==n[s])throw new py(`The feature data generated by the dataset lacks the required ${e} key '${s}'.`);r.push(n[s])}return r}}function Lw(e){return"function"==typeof e.iterator}function zw(e){oe(e>0&&Number.isInteger(e),(()=>`batchSize is required to be a positive integer, but got ${e}`))}function Pw(e,t,n){return null==e?[null]:Array.isArray(e)?e.map((e=>ib(e,t,n-t))):ib(e,t,n-t)}function Bw(e,t){return lo((()=>null==e?null:Array.isArray(e)?e.map((e=>Bw(e,t))):mb(e,"int32"===t.dtype?t:Ni(t,"int32"))))}function Vw(e,t){const n=[];let r=0,s=null;for(;r<e;)s=r+t,s>=e&&(s=e),n.push([r,s]),r=s;return n}function Ww(e){const t=[];e instanceof da&&(e=[e]);for(let n=0;n<e.length;++n){const r=e[n];if(1===r.rank)t.push(ob(r,1));else{if(0===r.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");t.push(r)}}return t}function Uw(e,t){if(null==e)return;const n=[];if(t instanceof da)n.push(t.id);else if(Array.isArray(t))t.forEach((e=>n.push(e.id)));else if(null!=t)for(const e in t){const r=t[e];n.push(r.id)}const r=[];if(e instanceof da)-1===n.indexOf(e.id)&&r.push(e);else if(Array.isArray(e))e.forEach((e=>{-1===n.indexOf(e.id)&&r.push(e)}));else if(null!=e)for(const t in e){const s=e[t];-1===n.indexOf(s.id)&&r.push(s)}r.forEach((e=>{e.isDisposed||e.dispose()}))}function Gw(e){return Array.isArray(e)}function Hw(e){return!function(e){return e instanceof da}(e)&&!Gw(e)}function jw(e,t,n,r=!0,s=""){if(null==t||0===t.length){if(null!=e){let t=!1;if(Gw(e)&&e.length>0)t=!0;else if(Hw(e)){for(const n in e)if(e.hasOwnProperty(n)){t=!0;break}}else t=!0;if(t)throw new py(`Error when checking model ${s} expected no data, but got ${e}`)}return[]}if(null==e)return t.map((e=>null));let a;if(Hw(e)){a=[];for(const n of t){if(null==e[n])throw new py(`No data provided for "${n}". Need data for each key in: ${t}`);a.push(e[n])}}else if(Gw(e)){if(e.length!==t.length)throw new py(`Error when checking model ${s}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): ${e}`);a=e}else{if(t.length>1)throw new py(`The model ${s} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${e.shape}`);a=[e]}if(a=Ww(a),null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const o=a[e];if(o.shape.length!==n[e].length)throw new py(`Error when checking ${s}: expected ${t[e]} to have ${n[e].length} dimension(s). but got array with shape ${o.shape}`);for(let t=0;t<n[e].length;++t){if(0===t&&!r)continue;const a=o.shape[t],i=n[e][t];if(null!=i&&i>=0&&a!==i)throw new py(`${s} expected a batch of elements where each example has shape [${n[e].slice(1,n[e].length)}] (i.e.,tensor shape [*,${n[e].slice(1,n[e].length)}]) but the ${s} received an input with ${o.shape[0]} examples, each with shape [${o.shape.slice(1,o.shape.length)}] (tensor shape [${o.shape}])`)}}return a}function Kw(e,t,n,r=!0,s=""){let a;if(Array.isArray(e)){if(e.length!==t.length)throw new py(`Error when checking model ${s}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${e.length} Tensors(s).`);a=e}else{if(t.length>1)throw new py(`The model expects ${t.length} ${s} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(e.shape)}.`);a=[e]}if(null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const o=a[e];if(o.shape.length!==n[e].length)throw new py(`Error when checking ${s}: expected ${t[e]} to have ${n[e].length} dimension(s), but got array with shape ${JSON.stringify(o.shape)}`);for(let a=0;a<n[e].length;++a){if(0===a&&!r)continue;const i=o.shape[a],l=n[e][a];if(null!=l&&l!==i)throw new py(`Error when checking ${s}: expected ${t[e]} to have shape ${JSON.stringify(n[e])} but got array with shape ${JSON.stringify(o.shape)}.`)}}}class qw extends _w{constructor(e){super(e),this.isTraining=!1}summary(e,t,n=console.log){if(!this.built)throw new py("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");!function(e,t,n,r=console.log){const s=function(e){let t=!0;const n=[],r=[];for(const t in e.nodesByDepth)n.push(e.nodesByDepth[t]);for(const e of n){if(e.length>1||1===e.length&&e[0].inboundLayers.length>1){t=!1;break}r.push(...e)}if(t)for(const n of e.layers){let e=!1;for(const s of n.inboundNodes)if(-1!==r.indexOf(s)){if(e){t=!1;break}e=!0}if(!t)break}return t}(e),a=["Layer (type)","Input Shape","Output shape","Param #"];let o;if(s?(t=t||90,n=n||[.32,.61,.89,1]):(t=t||115,n=n||[.24,.48,.7,.8,1]),n[n.length-1]<=1&&(n=n.map((e=>Math.floor(t*e)))),!s){a.push("Receives inputs"),o=[];for(const t in e.nodesByDepth)o.push(...e.nodesByDepth[t])}r("_".repeat(t)),Tw(a,n,r),r("=".repeat(t));const i=e.layers;for(let e=0;e<i.length;++e)s?Sw(i[e],n,r):Iw(i[e],n,o,r),r((e===i.length-1?"=":"_").repeat(t));e.checkTrainableWeightsConsistency();const l=function(e){let t;return t=null!=e.collectedTrainableWeights?Kb(e.collectedTrainableWeights):Kb(e.trainableWeights),t}(e),u=Kb(e.nonTrainableWeights);r(`Total params: ${l+u}`),r(`Trainable params: ${l}`),r(`Non-trainable params: ${u}`),r("_".repeat(t))}(this,e,t,n)}compile(e){if(null==e.loss&&(e.loss=[]),this.loss=e.loss,"string"==typeof e.optimizer)this.optimizer_=function(e){const t={Adagrad:()=>Bf.adagrad(.01),Adadelta:()=>Bf.adadelta(1,.95,sb()),Adam:()=>Bf.adam(.001,.9,.999,sb()),Adamax:()=>Bf.adamax(.002,.9,.999,sb(),0),RMSProp:()=>Bf.rmsprop(.001,.9,0,sb()),SGD:()=>Bf.sgd(.01)};if(t.adagrad=t.Adagrad,t.adadelta=t.Adadelta,t.adam=t.Adam,t.adamax=t.Adamax,t.rmsprop=t.RMSProp,t.sgd=t.SGD,e in t)return t[e]();throw new py(`Unknown Optimizer ${e}`)}(e.optimizer),this.isOptimizerOwned=!0;else{if(!(e.optimizer instanceof Ki))throw new py("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=e.optimizer,this.isOptimizerOwned=!1}let t=[];if(Array.isArray(e.loss)||"string"==typeof e.loss||"function"==typeof e.loss)if(Array.isArray(e.loss)){if(e.loss.length!==this.outputs.length)throw new py(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`);const n=e.loss;t=n.map((e=>cw(e)))}else{const n=cw(e.loss);this.outputs.forEach((e=>{t.push(n)}))}else{e.loss=e.loss;for(const t in e.loss)if(-1===this.outputNames.indexOf(t))throw new py(`Unknown entry in loss dictionary: "${t}". Only expected the following keys: ${this.outputNames}`);for(const n of this.outputNames)null==e.loss[n]&&console.warn(`Output "${n}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${n} during training`),t.push(cw(e.loss[n]))}this.lossFunctions=t,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let e=0;e<this.outputs.length;++e){const t=this.internalOutputShapes[e],n=this.outputNames[e];this.feedOutputNames.push(n),this.feedOutputShapes.push(t),this.feedLossFns.push(this.lossFunctions[e])}const n=[];this.metrics=e.metrics,this.metricsNames=["loss"],this.metricsTensors=[],qy("loss",(()=>{for(let e=0;e<this.outputs.length;++e){if(-1!==n.indexOf(e))continue;const t=this.lossFunctions[e];this.outputs.length>1&&(this.metricsTensors.push([t,e]),this.metricsNames.push(this.outputNames[e]+"_loss"))}}));const r=function(e,t){if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>[]));let n;if("string"==typeof e||"function"==typeof e)n=[e];else{if(!Array.isArray(e)&&"object"!=typeof e)throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${e}`);n=e}if(Array.isArray(n))return t.map((e=>n));{const e=[];for(const r of t){let t=n.hasOwnProperty(r)?n[r]:[];Array.isArray(t)||(t=[t]),e.push(t)}return e}}(e.metrics,this.outputNames),s=(e,t,n)=>{this.outputNames.length>1&&(t=this.outputNames[e]+"_"+t),this.metricsNames.push(t),this.metricsTensors.push([n,e])};qy("metric",(()=>{for(let e=0;e<this.outputs.length;++e)-1===n.indexOf(e)&&(t=>{let n,r,a;for(const o of t){if("string"==typeof o&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(o)){const t=this.internalOutputShapes[e];let s;1===t[t.length-1]||this.lossFunctions[e]===iw?-1!==["accuracy","acc"].indexOf(o)?r=pw:-1!==["crossentropy","ce"].indexOf(o)&&(r=mw):this.lossFunctions[e]===ow?-1!==["accuracy","acc"].indexOf(o)?r=gw:-1!==["crossentropy","ce"].indexOf(o)&&(r=bw):-1!==["accuracy","acc"].indexOf(o)?r=hw:-1!==["crossentropy","ce"].indexOf(o)&&(r=yw),-1!==["accuracy","acc"].indexOf(o)?s="acc":-1!==["crossentropy","ce"].indexOf(o)&&(s="ce"),a=r,n=""+s}else{const e=ww(o);a=e,n=""+vw(o)}let t;qy(n,(()=>{t=a})),s(e,n,t)}})(r[e])})),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(e,t,n={}){const r=null==n.batchSize?32:n.batchSize;zw(r);const s=this.standardizeUserDataXY(e,t,!0,r);try{const e=s[0].concat(s[1]);this.makeTestFunction();const t=this.testFunction;return by(this.testLoop(t,e,r,n.verbose,n.steps))}finally{Uw(s[0],e),Uw(s[1],t)}}async evaluateDataset(e,t){return this.makeTestFunction(),async function(e,t,n){const r=null!=(n=n||{}).batches,s=e.testFunction;let a=[];if(n.verbose>0)throw new hy("Verbose mode is not implemented yet.");oe(!r||n.batches>0&&Number.isInteger(n.batches),(()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(n.batches)}`));const o="function"==typeof t.next?t:await t.iterator();let i=0,l=0;for(;!r||l<n.batches;){const t=await o.next();if(a=lo((()=>{if(t.value){const{xs:n,ys:r}=Ow(e,t.value),o=n.concat(r),u=lo((()=>s(o)));if(uo(o),0===l)for(let e=0;e<u.length;++e)a.push(Bi(0));const c=o[0].shape[0];for(let e=0;e<u.length;++e){const t=u[e],n=a[e];a[e]=lo((()=>Ii(a[e],Ci(c,t)))),l>0&&uo(n)}uo(u),i+=c,++l}return a})),t.done){r&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${n.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let e=0;e<a.length;++e){const t=a[e];a[e]=$i(a[e],i),uo(t)}return by(a)}(this,e,t)}checkNumSamples(e,t,n,r="steps"){let s;if(null!=n){if(s=null,null!=t)throw new py(`If ${r} is set, batchSize must be null or undefined.Got batchSize = ${t}`)}else{if(null==e)throw new py(`Either the input data should have a defined shape, or ${r} shoud be specified.`);s=Array.isArray(e)?e[0].shape[0]:e.shape[0]}return s}execute(e,t){if(Array.isArray(t)&&0===t.length)throw new py("`outputs` is an empty Array, which is not allowed.");const n=Array.isArray(t),r=n?t:[t],s=this.retrieveSymbolicTensors(r),a=new ix;if(e instanceof da&&(e=[e]),Array.isArray(e)){if(e.length!==this.inputs.length)throw new py(`The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let t=0;t<this.inputs.length;++t)a.add(this.inputs[t],e[t])}else for(const t of this.inputs){const n=e[t.name];if(null==n)throw new py(`No value is provided for the model's input ${t.name}`);a.add(t,n)}const o=cx(s,a);return n?o:o[0]}retrieveSymbolicTensors(e){const t=my(null,e.length);let n=e.length;for(const r of this.layers){const s=Array.isArray(r.output)?r.output:[r.output],a=s.map((e=>e.name));for(let r=0;r<e.length;++r){const o=a.indexOf(e[r]);if(-1!==o&&(t[r]=s[o],n--),0===n)break}if(0===n)break}if(n>0){const n=[];throw t.forEach(((t,r)=>{null==t&&n.push(e[r])})),new py(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(n)}`)}return t}predictLoop(e,t=32,n=!1){return lo((()=>{const r=this.checkNumSamples(e);if(n)throw new hy("Verbose predictLoop() is not implemented yet.");const s=Vw(r,t),a=this.outputs.map((e=>[]));for(let t=0;t<s.length;++t)lo((()=>{const n=s[t][0],r=s[t][1],a=Pw(e,n,r),o=[];if(Array.isArray(a))for(let e=0;e<a.length;++e)o.push({key:this.inputs[e],value:a[e]});else o.push({key:this.inputs[0],value:a});const i=new ix(o);return cx(this.outputs,i)})).forEach(((e,t)=>a[t].push(e)));return by(a.map((e=>ic(e,0))))}))}predict(e,t={}){const n=Ww(e);Kw(n,this.inputNames,this.feedInputShapes,!1);try{const e=null==t.batchSize?32:t.batchSize;return zw(e),this.predictLoop(n,e)}finally{Uw(n,e)}}predictOnBatch(e){Kw(e,this.inputNames,this.feedInputShapes,!0);const t=(Array.isArray(e)?e[0]:e).shape[0];return this.predictLoop(e,t)}standardizeUserDataXY(e,t,n=!0,r){if(null==this.optimizer_)throw new cy("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const s=[];for(let e=0;e<this.feedOutputShapes.length;++e){const t=this.feedOutputShapes[e];this.feedLossFns[e]===ow?s.push(t.slice(0,t.length-1).concat([1])):s.push(t)}if(function(e,t){const n=Ey(e.map((e=>e.shape[0])));n.sort();const r=Ey(t.map((e=>e.shape[0])));if(r.sort(),n.length>1)throw new py(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(e.map((e=>e.shape)))}`);if(r.length>1)throw new py(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map((e=>e.shape)))}`);if(n.length>0&&r.length>0&&!he(n,r))throw new py(`Input Tensors should have the same number of samples as target Tensors. Found ${n[0]} input sample(s) and ${r[0]} target sample(s).`)}(e=jw(e,this.feedInputNames,this.feedInputShapes,!1,"input"),t=jw(t,this.feedOutputNames,s,!1,"target")),function(e,t,n){const r=[nw,iw,aw];for(let s=0;s<e.length;++s){const a=e[s],o=t[s],i=n[s];if(null!=o){if(o===aw&&1===a.shape[a.shape.length-1])throw new py(`You are passing a target array of shape ${a.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==r.indexOf(o)){const e=a.shape.slice(1),t=i.slice(1);for(let n=0;n<e.length;++n){const r=e[n],s=t[n];if(null!=s&&r!==s)throw new py(`A target Tensor with shape ${a.shape} was passed for an output of shape ${i}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(t,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=r&&r>0&&e[0].shape[0]%r!=0)throw new py(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${r}. Found: ${e[0].shape[0]} sample(s).`);return[e,t]}async standardizeUserData(e,t,n,r,s=!0,a){const[o,i]=this.standardizeUserDataXY(e,t,s,a);if(null!=n)throw new Error("sample weight is not supported yet.");let l=null;if(null!=r){const e=Rw(r,this.outputNames);l=[];for(let t=0;t<e.length;++t)l.push(await Dw(i[t],null,e[t]))}return[o,i,l]}testLoop(e,t,n,r=0,s){return lo((()=>{const a=this.checkNumSamples(t,n,s,"steps"),o=[];if(r>0)throw new hy("Verbose mode is not implemented yet.");if(null!=s)throw new hy("steps mode in testLoop() is not implemented yet");{const r=Vw(a,n),s=sd(nb(0,a));for(let n=0;n<r.length;++n){const a=r[n][0],i=r[n][1],l=ib(s,a,i-a),u=Bw(t,l),c=e(u);if(0===n)for(let e=0;e<c.length;++e)o.push(Bi(0));for(let e=0;e<c.length;++e){const t=c[e];o[e]=Ii(o[e],Ci(i-a,t))}}for(let e=0;e<o.length;++e)o[e]=$i(o[e],a)}return o}))}getDedupedMetricsNames(){const e=this.metricsNames,t=[];for(let n=0;n<e.length;++n){const r=e[n];let s=r;yy(e,r)>1&&(s+=`_${yy(e.slice(0,n),r)}`),t.push(s)}return t}makeTrainFunction(){return e=>{const t=[],n=e.slice(0,this.inputs.length),r=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),s=e.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),a=[],o=this.collectedTrainableWeights.map((e=>e.read()));return[this.optimizer_.minimize((()=>{const e=[];for(let t=0;t<this.inputs.length;++t)e.push({key:this.inputs[t],value:n[t]});const o=new ix(e),i=cx(this.outputs,o,{training:!0});let l;for(let e=0;e<this.lossFunctions.length;++e){let n=(0,this.lossFunctions[e])(r[e],i[e]);null!=s[e]&&(n=Fw(n,s[e]));const a=Gp(n);t.push(a),l=0===e?n:Ii(l,n)}for(let e=0;e<this.metricsTensors.length;++e){let n;if(this.outputs.length>1&&e<this.outputs.length)n=t[e];else{const t=this.metricsTensors[e][0],s=this.metricsTensors[e][1];n=Gp(t(r[s],i[s]))}co(n),a.push(n)}return l=Gp(l),this.calculateLosses().forEach((e=>{l=Ii(l,e)})),l}),!0,o)].concat(a)}}makeTestFunction(){this.testFunction=e=>lo((()=>{const t=[];let n;const r=e.slice(0,this.inputs.length),s=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),a=[];for(let e=0;e<this.inputs.length;++e)a.push({key:this.inputs[e],value:r[e]});const o=new ix(a),i=cx(this.outputs,o);for(let e=0;e<this.lossFunctions.length;++e){const r=this.lossFunctions[e],a=Gp(r(s[e],i[e]));n=0===e?a:Ii(n,a),t.push(n)}for(let e=0;e<this.metricsTensors.length;++e){const n=this.metricsTensors[e][0],r=this.metricsTensors[e][1],a=Gp(n(s[r],i[r]));t.push(a)}return t}))}async fit(e,t,n={}){if(this.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let r,s,a,o,i,l,u,c,p;this.isTraining=!0;try{const h=null==n.batchSize?32:n.batchSize;zw(h);const d=!1,f=await this.standardizeUserData(e,t,n.sampleWeight,n.classWeight,d,h);r=f[0],s=f[1],p=f[2];let m,g=!1;if(null!=n.validationData&&n.validationData.length>0){if(g=!0,2!==n.validationData.length)throw 3===n.validationData.length?new hy("validationData including sample weights is not supported yet."):new py(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${n.validationData} is invalid.`);i=n.validationData[0],l=n.validationData[1];const e=!0,t=await this.standardizeUserData(i,l,null,null,e,h);u=t[0],c=t[1],m=u.concat(c)}else if(null!=n.validationSplit&&n.validationSplit>0&&n.validationSplit<1){g=!0;const e=Math.floor(r[0].shape[0]*(1-n.validationSplit)),t=r[0].shape[0];u=Pw(r,e,t),a=r,r=Pw(r,0,e),c=Pw(s,e,t),o=s,s=Pw(s,0,e),m=u.concat(c)}else null!=n.validationSteps&&(g=!0);const y=r.concat(s).concat(p);this.checkTrainableWeightsConsistency();const b=this.makeTrainFunction(),x=this.getDedupedMetricsNames();let w,v;g?(this.makeTestFunction(),w=this.testFunction,v=x.slice().concat(x.map((e=>"val_"+e)))):(w=null,m=[],v=x.slice());const k=Zx(n.callbacks,n.yieldEvery);return await this.fitLoop(b,y,x,h,n.epochs,n.verbose,k,w,m,n.shuffle,v,n.initialEpoch,null,null)}finally{this.isTraining=!1,Uw(r,e),Uw(s,t),Uw(a,e),Uw(o,t),Uw(u,i),Uw(c,l),null!=p&&uo(p)}}async fitLoop(e,t,n,r,s,a,o,i,l,u,c,p,h,d){null==r&&(r=32),null==s&&(s=1),null==u&&(u=!0),null==p&&(p=0);let f=!1;if(null!=i&&null!=l&&(f=!0),null!=d&&(f=!0,null==h))throw new py("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");const m=this.checkNumSamples(t,r,h,"steps_per_epoch");let g;null!=m&&(g=nb(0,m)),null==a&&(a=1);const{callbackList:y,history:b}=Jx(o,a,s,p,m,h,r,f,c);y.setModel(this),this.history=b,await y.onTrainBegin(),this.stopTraining_=!1;for(let a=p;a<s;++a){await y.onEpochBegin(a);const s={};if(null!=h)throw new hy("stepsPerEpoch mode is not implemented yet.");{if("batch"===u)throw new hy("batch shuffling is not implemneted yet");u&&Q(g);const a=sd(g),o=Vw(m,r);for(let u=0;u<o.length;++u){const c={};if(await y.onBatchBegin(u,c),lo((()=>{const p=o[u][0],h=o[u][1],d=ib(a,p,h-p);c.batch=u,c.size=h-p;const m=Bw(t,d),g=e(m);for(let e=0;e<n.length;++e){const t=n[e],r=g[e];c[t]=r,co(r)}if(u===o.length-1&&f){const e=this.testLoop(i,l,r);for(let t=0;t<n.length;++t){const r=n[t],a=e[t];co(a),s["val_"+r]=a}}})),await y.onBatchEnd(u,c),Gx(c),this.stopTraining_)break}a.dispose()}if(await y.onEpochEnd(a,s),this.stopTraining_)break}return await y.onTrainEnd(),await this.history.syncData(),this.history}async fitDataset(e,t){return async function(e,t,n){const r=null!=n.batchesPerEpoch;if(oe(null!=e.optimizer,(()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig).")),oe(null!=n,(()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call.")),oe(null!=n.epochs&&n.epochs>0&&Number.isInteger(n.epochs),(()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${n.epochs}`)),oe(!r||n.batchesPerEpoch>0&&Number.isInteger(n.batchesPerEpoch),(()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${n.batchesPerEpoch}`)),oe(null==n.validationSplit,(()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead.")),e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");e.isTraining=!0;try{const s=null!=n.validationData;let a,o;if(s)if(Lw(n.validationData))oe(null==n.validationBatches||n.validationBatches>0&&Number.isInteger(n.validationBatches),(()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${n.validationBatches}`));else{const e=function(e){if(3===e.length)throw new hy("Validation with sample weights is not implemented yet.");return{xs:e[0],ys:e[1]}}(n.validationData);a=e.xs,o=e.ys}const i=e.makeTrainFunction(),l=e.getDedupedMetricsNames();let u;u=s?l.slice().concat(l.map((e=>"val_"+e))):l.slice();const c=Zx(n.callbacks,n.yieldEvery),p=null==n.verbose?1:n.verbose,{callbackList:h,history:d}=Jx(c,p,n.epochs,null,null,function(e,t){let n=null;return null!=t.batchesPerEpoch?n=t.batchesPerEpoch:Number.isFinite(e.size)&&(n=e.size),n}(t,n),null,s,u);h.setModel(e),e.history=d,await h.onTrainBegin(),e.stopTraining_=!1;let f=null==n.initialEpoch?0:n.initialEpoch,m=await t.iterator();for(;f<n.epochs;){const u={};await h.onEpochBegin(f);let c=0,p=0;for(r||(m=await t.iterator());!r||c<n.batchesPerEpoch;){const t=await m.next();if(r&&t.done){console.warn(`You provided \`batchesPerEpoch\` as ${n.batchesPerEpoch}, but your dataset iterator ran out of data after ${c} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, `+n.batchesPerEpoch*n.epochs+" batches). You may need to use the repeat() function when building your dataset.");break}if(null!=t.value){const{xs:r,ys:s}=Ow(e,t.value),a={};a.batch=p,a.size=r[0].shape[0],await h.onBatchBegin(p,a);const o=[];if(null!=n.classWeight){const t=Rw(n.classWeight,e.outputNames);for(let e=0;e<t.length;++e)o.push(await Dw(s[e],null,t[e]))}const u=r.concat(s).concat(o),d=i(u);uo(u);for(let e=0;e<l.length;++e){const t=l[e],n=d[e];a[t]=n,co(n)}await h.onBatchEnd(p,a),Gx(a),p++,c++}if(r?c>=n.batchesPerEpoch:t.done){if(s){let t;t=Lw(n.validationData)?xy(await e.evaluateDataset(n.validationData,{batches:n.validationBatches})):xy(e.evaluate(a,o,{batchSize:null==n.validationBatchSize?32:n.validationBatchSize,verbose:0}));for(let n=0;n<e.metricsNames.length;++n)u[`val_${e.metricsNames[n]}`]=t[n]}break}if(e.stopTraining_)break}if(await h.onEpochEnd(f,u),f++,e.stopTraining_)break}return await h.onTrainEnd(),await e.history.syncData(),e.history}finally{e.isTraining=!1}}(this,e,t)}async trainOnBatch(e,t){const n=await this.standardizeUserData(e,t),r=n[0],s=n[1],a=this.makeTrainFunction()(r.concat(s)),o=[];for(const e of a){const t=await e.data();o.push(t[0])}return uo(a),Uw(n[0],e),Uw(n[1],t),by(o)}getNamedWeights(e){const t=[],n=null!=e&&e.trainableOnly,r=n?this.trainableWeights:this.weights,s=this.getWeights(n);for(let e=0;e<r.length;++e)n&&!r[e].trainable||t.push({name:r[e].originalName,tensor:s[e]});return t}set stopTraining(e){this.stopTraining_=e}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(e){this.optimizer_!==e&&(this.optimizer_=e,this.isOptimizerOwned=!1)}dispose(){const e=super.dispose();if(0===e.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const t=oo().numTensors;this.optimizer_.dispose(),e.numDisposedVariables+=t-oo().numTensors}return e}getLossIdentifiers(){let e;if("string"==typeof this.loss)e=wy(this.loss);else if(Array.isArray(this.loss)){for(const e of this.loss)if("string"!=typeof e)throw new Error("Serialization of non-string loss is not supported.");e=this.loss.map((e=>wy(e)))}else{const t=Object.keys(this.loss);e={};const n=this.loss;for(const r of t){if("string"!=typeof n[r])throw new Error("Serialization of non-string loss is not supported.");e[r]=wy(n[r])}}return e}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[wy(vw(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map((e=>wy(vw(e))));{const e={};for(const t in this.metrics)e[t]=wy(vw(this.metrics[t]));return e}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(e){if(null!=e.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=e.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=e.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const t=ew($w(e.optimizer_config));let n,r;if("string"==typeof e.loss)n=vy(e.loss);else if(Array.isArray(e.loss))n=e.loss.map((e=>vy(e)));else if(null!=e.loss){n={};for(const t in e.loss)n[t]=vy(e.loss[t])}if(Array.isArray(e.metrics))r=e.metrics.map((e=>vy(e)));else if(null!=e.metrics){r={};for(const t in e.metrics)r[t]=vy(e.metrics[t])}this.compile({loss:n,metrics:r,optimizer:t})}async save(e,t){if("string"==typeof e){const t=Uo(e);if(0===t.length)throw new py(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new py(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new py("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const n=await No(this.getNamedWeights(t)),r={modelTopology:this.toJSON(null,!1),format:"layers-model",generatedBy:`TensorFlow.js tfjs-layers v${Aw}`,convertedBy:null};if(null!=t&&t.includeOptimizer&&null!=this.optimizer){r.trainingConfig=this.getTrainingConfig();const e="optimizer",{data:t,specs:s}=await No(await this.optimizer.getWeights(),e);n.specs.push(...s),n.data=Do([n.data,t])}if(null!=this.userDefinedMetadata){const e=!0;kw(this.userDefinedMetadata,this.name,e),r.userDefinedMetadata=this.userDefinedMetadata}return r.weightData=n.data,r.weightSpecs=n.specs,e.save(r)}setUserDefinedMetadata(e){kw(e,this.name),this.userDefinedMetadata=e}getUserDefinedMetadata(){return this.userDefinedMetadata}}qw.className="Model",Hi(qw);class Yw extends qw{}async function Xw(e,t){"modelTopology"in e||(e={modelTopology:e});let n=e.modelTopology;null!=n.model_config&&(n=n.model_config);const r=ew($w(n),t);if(null!=e.weightsManifest){const t=await gl(e.weightsManifest,e.pathPrefix,r.weights.map((e=>e.originalName))),n={};for(const e of r.weights)n[e.originalName]=t[e.originalName];r.loadWeights(n),uo(t)}return r}async function Zw(e,t){if(null==t&&(t={}),"string"==typeof e){const n=Go(e,t);if(0===n.length)n.push(kl(e,t));else if(n.length>1)throw new py(`Found more than one (${n.length}) load handlers for URL '${e}'`);e=n[0]}return async function(e,t,n){if(null==n&&(n={}),null==e.load)throw new py("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const r=await e.load();let s=r.modelTopology;null!=s.model_config&&(s=s.model_config);const a=null==n.strict||n.strict,o=null!=r.weightData&&null!=r.weightSpecs&&a,i=ew($w(s),void 0,o),l=r.trainingConfig;if(null!=l&&i.loadTrainingConfig(l),null!=r.userDefinedMetadata&&i.setUserDefinedMetadata(r.userDefinedMetadata),null!=r.weightData){if(null==r.weightSpecs)throw new py("LayersModel artifacts contains weight data, but not weight specs. Therefore loading of weights cannot proceed.");const{modelWeights:e,optimizerWeights:t}=function(e,t){const n=To(e,t),r={},s=[];return t.forEach((e=>{"optimizer"===e.group?s.push({name:e.name,tensor:n[e.name]}):r[e.name]=n[e.name]})),{modelWeights:r,optimizerWeights:s}}(r.weightData,r.weightSpecs);i.loadWeights(e,a),null!=i.optimizer&&t.length>0&&await i.optimizer.setWeights(t),uo(e),uo(t.map((e=>e.tensor)))}return i}(e,0,t)}Yw.className="Functional",Hi(Yw);class Qw extends qw{constructor(e){if(super({inputs:[],outputs:[]}),e=e||{},this.trainable=!0,this.built=!1,this.name=null!=e.name?e.name:Ly("sequential_"),null!=e.layers)for(const t of e.layers)this.add(t)}checkShape(e){if(e.inboundNodes[0].outputTensors[0].shape.some((e=>e<0)))throw new py(`Negative dimension size caused by adding layer ${e.name} with input shape [${e.inboundNodes[0].inputTensors[0].shape}]`)}add(e){const t=e instanceof Qw||e instanceof qw;let n;if(t){if(n=e,1!==n.outputs.length)throw new py("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==n.inputs.length)throw new py("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===e.inboundNodes.length){if(null==e.batchInputShape)throw new py("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const t=ox({batchShape:e.batchInputShape,dtype:e.dtype,name:e.name+"_input"});e.apply(t)}if(t)this.outputs=n.outputs,this.inputs=n.inputs;else{if(1!==e.inboundNodes.length)throw new py(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);if(1!==e.inboundNodes[0].outputTensors.length)throw new py("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[e.inboundNodes[0].outputTensors[0]],this.inputs=sx(this.outputs[0])}this.inboundNodes=[],new tx({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:my(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs[0].shape})}else{const t=e.apply(this.outputs[0]);if(Array.isArray(t))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[t],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(e),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const e=this.layers.length-1;this.layers[e].outboundNodes=[],this.outputs=[this.layers[e].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(e,t){return null==this.model&&this.build(),this.model.call(e,t)}build(e){if(jb(e),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new qw({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(e,t,n=console.log){this.built||this.build(),super.summary(e,t,n)}setWeights(e){null==this.model&&this.build(),this.model.setWeights(e)}evaluate(e,t,n={}){if(!this.built)throw new cy("The model needs to be compiled before being used.");return this.model.evaluate(e,t,n)}async evaluateDataset(e,t){if(!this.built)throw new cy("The model needs to be compiled before being used.");return this.model.evaluateDataset(e,t)}predict(e,t={}){return null==this.model&&this.build(),this.model.predict(e,t)}predictOnBatch(e){return null==this.model&&this.build(),this.model.predictOnBatch(e)}compile(e){this.build(),this.model.compile(e),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(e){this.model.optimizer=e}async fit(e,t,n={}){if(!this.built)throw new cy("The model needs to be compiled before being used.");return this.model.fit(e,t,n)}async fitDataset(e,t){if(!this.built)throw new cy("The model needs to be compiled before being used.");return this.model.fitDataset(e,t)}async trainOnBatch(e,t){return this.model.trainOnBatch(e,t)}static fromConfig(e,t,n={},r=!1){let s,a={};if(t instanceof Array){if(null==t[0].className||"Merge"===t[0].className)throw new py("Legacy serialization format not supported yet.");s=t}else oe(null!=t.layers,(()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field.")),s=t.layers,delete t.layers,a=t;const o=new e(a);if(!(o instanceof Qw))throw new hy(`Sequential.fromConfig called on non-Sequential input: ${o}`);for(const e of s){const t=ew(e,void 0,r);r&&t.setFastWeightInitDuringBuild(!0),o.add(t)}return o}set stopTraining(e){if(null==this.model)throw new py("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=e}get stopTraining(){if(null==this.model)throw new py("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const e=[];for(const t of this.layers){const n={};n.className=t.getClassName(),n.config=t.getConfig(),e.push(n)}return{name:this.name,layers:e}}}function Jw(e){return new qw(e)}function ev(e){return new Qw(e)}function tv(e){return ox(e)}function nv(e,t){Qx.registerCallbackConstructor(e,t)}Qw.className="Sequential",Hi(Qw);class rv extends Ui{getConfig(){return{}}}class sv extends rv{apply(e,t=1){return function(e,t=1){if(1!==t)throw new hy(`Support for alpha values other than 1 (${t}) is not implemented yet.`);return qc(e)}(e,t)}}sv.className="elu",Hi(sv);class av extends rv{apply(e){return Mh(e)}}av.className="selu",Hi(av);class ov extends rv{apply(e){return Eh(e)}}ov.className="relu",Hi(ov);class iv extends rv{apply(e){return lo((()=>qp(6,Eh(e))))}}iv.className="relu6",Hi(iv);class lv extends rv{apply(e){return e}}lv.className="linear",Hi(lv);class uv extends rv{apply(e){return lc(e)}}uv.className="sigmoid",Hi(uv);class cv extends rv{apply(e){return function(e){return lo((()=>{const t=Ii(.5,Ci(.2,e));return kc(t,0,1)}))}(e)}}cv.className="hardSigmoid",Hi(cv);class pv extends rv{apply(e){return Ap(e)}}pv.className="softplus",Hi(pv);class hv extends rv{apply(e){return function(e){return lo((()=>$i(e,Ii(el(e),1))))}(e)}}hv.className="softsign",Hi(hv);class dv extends rv{apply(e){return cc(e)}}dv.className="tanh",Hi(dv);class fv extends rv{apply(e,t=-1){return jh(e,t)}}fv.className="softmax",Hi(fv);class mv extends rv{apply(e,t=-1){return Rp(e,t)}}mv.className="logSoftmax",Hi(mv);class gv extends rv{apply(e){return lo((()=>lo((()=>{const t=Math.sqrt(2),n=Ci(.5,Ii(1,Xc($i(e,t))));return Ci(e,n)}))))}}gv.className="gelu",Hi(gv);class yv extends rv{apply(e){return lo((()=>Ci(.5,Ci(e,Ii(1,cc(Ci(Ai($i(2,Math.PI)),Ii(e,Ci(.044715,Zi(e,3))))))))))}}yv.className="gelu_new",Hi(yv);class bv extends rv{apply(e){return lo((()=>Ci(e,cc(Ap(e)))))}}bv.className="mish",Hi(bv);class xv extends rv{apply(e,t=1){return lo((()=>Ci(lc(Ci(e,t)),e)))}}function wv(e){return e.getClassName()}function vv(e,t={}){return Sy(e,Gi.getMap().classNameMap,t,"activation")}function kv(e){if(null==e){return vv({className:"linear",config:{}})}if("string"==typeof e){const t={};return t.className=e,t.config={},vv(t)}return e instanceof rv?e:vv(e)}function Nv(e){if(null!=e&&"object"!=typeof e)throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${e}`)}xv.className="swish",Hi(xv);class Tv extends Ui{}class Sv extends Tv{constructor(e){super(),Nv(e),this.l1=null==e||null==e.l1?.01:e.l1,this.l2=null==e||null==e.l2?.01:e.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(e){return lo((()=>{let t=Hp([1]);return this.hasL1&&(t=Ii(t,ip(Ci(this.l1,el(e))))),this.hasL2&&(t=Ii(t,ip(Ci(this.l2,gb(e))))),sc(t,[])}))}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(e,t){return new e({l1:t.l1,l2:t.l2})}}Sv.className="L1L2",Hi(Sv);const Iv={l1l2:"L1L2"};function Ev(e){return Ny(e)}function $v(e,t={}){return Sy(e,Gi.getMap().classNameMap,t,"regularizer")}function Cv(e){return null==e?null:"string"==typeof e?$v({className:e in Iv?Iv[e]:e,config:{}}):e instanceof Tv?e:$v(e)}class Av extends rx{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,null!=e&&(this.maxValue=e.maxValue)}call(e,t){e=Hb(e);let n=Eh(e);return null!=this.maxValue&&(n=kc(n,0,this.maxValue)),n}computeOutputShape(e){return e}getConfig(){const e={maxValue:this.maxValue},t=super.getConfig();return Object.assign(e,t),e}}Av.className="ReLU",Hi(Av);class _v extends rx{constructor(e){super(null==e?{}:e),this.DEFAULT_ALPHA=.3,null==e&&(e={}),this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=Hb(e);return Np(n,this.alpha)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}_v.className="LeakyReLU",Hi(_v);class Rv extends rx{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==e&&(e={}),this.supportsMasking=!0,this.alphaInitializer=Wb(e.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=Cv(e.alphaRegularizer),this.alphaConstraint=Nx(e.alphaConstraint),null==e.sharedAxes)this.sharedAxes=null;else if(Array.isArray(e.sharedAxes))this.sharedAxes=e.sharedAxes;else{if("number"!=typeof e.sharedAxes)throw new py(`Expected sharedAxes to be a number or an array of numbers, but got ${e.sharedAxes}`);this.sharedAxes=[e.sharedAxes]}}build(e){const t=(e=jb(e)).slice(1);if(null!=this.sharedAxes)for(const e of this.sharedAxes)t[e-1]=1;this.alpha=this.addWeight("alpha",t,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const n={};if(null!=this.sharedAxes)for(let t=1;t<e.length;++t)n[t]=e[t];this.inputSpec=[new Qb({ndim:e.length,axes:n})],this.built=!0}call(e,t){return e=Hb(e),ch(e,this.alpha.read())}getConfig(){const e={alphaInitializer:Vb(this.alphaInitializer),alphaRegularizer:Ev(this.alphaRegularizer),alphaConstraint:vx(this.alphaConstraint),sharedAxes:this.sharedAxes},t=super.getConfig();return Object.assign(e,t),e}}Rv.className="PReLU",Hi(Rv);class Dv extends rx{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA=1,null==e&&(e={}),null!=e.alpha&&e.alpha!==this.DEFAULT_ALPHA)throw new hy(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=Hb(e);return qc(n)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}Dv.className="ELU",Hi(Dv);class Fv extends rx{constructor(e){super(null==e?{}:e),this.DEFAULT_THETA=1,null==e&&(e={}),this.theta=null==e.theta?this.DEFAULT_THETA:e.theta}call(e,t){const n=Hb(e);return Ci(n,Ni(bp(n,this.theta),"float32"))}computeOutputShape(e){return e}getConfig(){const e={theta:this.theta},t=super.getConfig();return Object.assign(e,t),e}}Fv.className="ThresholdedReLU",Hi(Fv);class Ov extends rx{constructor(e){super(null==e?{}:e),this.DEFAULT_AXIS=1,null==e&&(e={}),this.softmax=(new fv).apply,this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis}call(e,t){return lo((()=>{let n=Hb(e);const r=t.mask;if(null!=r){const e=Ci(Qi(jp(n.shape),Ni(r,n.dtype)),Bi(-1e9));n=Ii(n,e)}return this.axis instanceof Array?this.axis.length>1?pp(Qi(n,Dp(n,this.axis,!0))):this.softmax(n,this.axis[0]):this.softmax(n,this.axis)}))}computeOutputShape(e){return e}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function Mv(e,t,n){if("number"==typeof e)return my(e,t);if(e.length!==t)throw new py(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${e.length} elements.`);for(let s=0;s<t;++s){const a=e[s];if((r=a)!==parseInt(r.toString(),10))throw new py(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(e)} including a non-integer number ${a}`)}return e;var r}function Lv(e,t,n,r,s=1){if(null==e)return e;let a;return a="same"===n?e:e-(t+(t-1)*(s-1))+1,Math.floor((a+r-1)/r)}function zv(e,t,n,r){if(null==e)return null;if("valid"===r)e=e*t+tb([n-t,0]);else{if("same"!==r)throw new py(`Unsupport padding mode: ${r}.`);e*=t}return e}function Pv(e,t){return lo((()=>(Gy(t),"channelsFirst"===t?Ol(e,[0,2,3,1]):e)))}function Bv(e,t){return lo((()=>(Gy(t),"channelsFirst"===t?Ol(e,[0,2,3,4,1]):e)))}function Vv(e,t,n,r=[1,1],s="valid",a,o,i=null){return lo((()=>{if(null==a&&(a="channelsLast"),Gy(a),3!==e.rank&&4!==e.rank)throw new py(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${e.rank}.`);if(3!==t.rank&&4!==t.rank)throw new py(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${e.rank}.`);let l=Pv(e,a);if("causal"===s)throw new hy("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return l=Dd({x:l,filter:t,strides:r,pad:"same"===s?"same":"valid",dilations:o,dataFormat:"NHWC",bias:n,activation:i}),"channelsFirst"===a&&(l=Ol(l,[0,3,1,2])),l}))}Ov.className="Softmax",Hi(Ov);class Wv extends rx{constructor(e,t){if(super(t),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",Wv.verifyArgs(t),this.rank=e,_y(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new hy(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=Mv(t.kernelSize,e,"kernelSize"),this.strides=Mv(null==t.strides?1:t.strides,e,"strides"),this.padding=null==t.padding?"valid":t.padding,Hy(this.padding),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,Gy(this.dataFormat),this.activation=kv(t.activation),this.useBias=null==t.useBias||t.useBias,this.biasInitializer=Wb(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=Nx(t.biasConstraint),this.biasRegularizer=Cv(t.biasRegularizer),this.activityRegularizer=Cv(t.activityRegularizer),this.dilationRate=Mv(null==t.dilationRate?1:t.dilationRate,e,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new py(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new py(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(3===this.rank)if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new py(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}static verifyArgs(e){if(gy("kernelSize"in e,"required key 'kernelSize' not in config"),"number"!=typeof e.kernelSize&&!Ay(e.kernelSize,"number",1,3))throw new py(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(e.kernelSize)}.`)}getConfig(){const e={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:wv(this.activation),useBias:this.useBias,biasInitializer:Vb(this.biasInitializer),biasRegularizer:Ev(this.biasRegularizer),activityRegularizer:Ev(this.activityRegularizer),biasConstraint:vx(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}class Uv extends Wv{constructor(e,t){super(e,t),this.kernel=null,Uv.verifyArgs(t),this.filters=t.filters,_y(this.filters,"filters"),this.kernelInitializer=Wb(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=Nx(t.kernelConstraint),this.kernelRegularizer=Cv(t.kernelRegularizer)}build(e){e=jb(e);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new py(`The channel dimension of the input should be defined. Found ${e[t]}`);const n=e[t],r=this.kernelSize.concat([n,this.filters]);this.kernel=this.addWeight("kernel",r,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[t]:n}}],this.built=!0}call(e,t){return lo((()=>{let t;e=Hb(e);const n=null==this.bias?null:this.bias.read(),r=Dy(this.activation.getClassName());if(null!=r&&2===this.rank)t=Vv(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate,r);else{if(1===this.rank)t=function(e,t,n,r=1,s="valid",a,o=1){return lo((()=>{if(null==a&&(a="channelsLast"),Gy(a),3!==e.shape.length)throw new py(`The input of a conv1dWithBias operation should be 3, but is ${e.shape.length} instead.`);if(3!==t.shape.length)throw new py(`The kernel for a conv1dWithBias operation should be 3, but is ${t.shape.length} instead`);if(null!=n&&1!==n.shape.length)throw new py(`The bias for a conv1dWithBias operation should be 1, but is ${n.shape.length} instead`);if("channelsFirst"===a&&(e=Ol(e,[0,2,1])),"causal"===s)throw new hy("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let i=$c(e,t,r,"same"===s?"same":"valid","NWC",o);return null!=n&&(i=bb(i,n)),i}))}(e,this.kernel.read(),n,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)t=Vv(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new hy("convolutions greater than 3D are not implemented yet.");t=function(e,t,n,r=[1,1,1],s="valid",a,o){return lo((()=>{if(null==a&&(a="channelsLast"),Gy(a),4!==e.rank&&5!==e.rank)throw new py(`conv3dWithBias expects input to be of rank 4 or 5, but received ${e.rank}.`);if(4!==t.rank&&5!==t.rank)throw new py(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${e.rank}.`);let i=Bv(e,a);if("causal"===s)throw new hy("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return i=_c(i,t,r,"same"===s?"same":"valid","NDHWC",o),null!=n&&(i=bb(i,n)),"channelsFirst"===a&&(i=Ol(i,[0,4,1,2,3])),i}))}(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(t=this.activation.apply(t))}return t}))}computeOutputShape(e){e=jb(e);const t=[],n="channelsLast"===this.dataFormat?e.slice(1,e.length-1):e.slice(2);for(let e=0;e<n.length;++e){const r=Lv(n[e],this.kernelSize[e],this.padding,this.strides[e],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[e]);t.push(r)}let r=[e[0]];return"channelsLast"===this.dataFormat?(r=r.concat(t),r.push(this.filters)):(r.push(this.filters),r=r.concat(t)),r}getConfig(){const e={filters:this.filters,kernelInitializer:Vb(this.kernelInitializer),kernelRegularizer:Ev(this.kernelRegularizer),kernelConstraint:vx(this.kernelConstraint)},t=super.getConfig();return Object.assign(e,t),e}static verifyArgs(e){if(!("filters"in e)||"number"!=typeof e.filters||e.filters<1)throw new py(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(e.filters)}`)}}class Gv extends Uv{constructor(e){super(2,e),Gv.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!Ay(e.kernelSize,"number",1,2))throw new py(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`)}}Gv.className="Conv2D",Hi(Gv);class Hv extends Uv{constructor(e){super(3,e),Hv.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&(!Array.isArray(e.kernelSize)||1!==e.kernelSize.length&&3!==e.kernelSize.length))throw new py(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`)}}Hv.className="Conv3D",Hi(Hv);class jv extends Gv{constructor(e){if(super(e),this.inputSpec=[new Qb({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new py(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(4!==(e=jb(e)).length)throw new py("Input should have rank 4; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new py("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],r=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",r,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new Qb({ndim:4,axes:{[t]:n}})],this.built=!0}call(e,t){return lo((()=>{let t=Hb(e);if(4!==t.shape.length)throw new py(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${t.shape.length}`);const n=t.shape,r=n[0];let s,a;"channelsFirst"===this.dataFormat?(s=2,a=3):(s=1,a=2);const o=n[s],i=n[a],l=this.kernelSize[0],u=this.kernelSize[1],c=this.strides[0],p=this.strides[1],h=[r,zv(o,c,l,this.padding),zv(i,p,u,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=Ol(t,[0,2,3,1]));let d=Ac(t,this.kernel.read(),h,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(d=Ol(d,[0,3,1,2])),null!=this.bias&&(d=bb(d,this.bias.read(),this.dataFormat)),null!=this.activation&&(d=this.activation.apply(d)),d}))}computeOutputShape(e){const t=(e=jb(e)).slice();let n,r,s;"channelsFirst"===this.dataFormat?(n=1,r=2,s=3):(n=3,r=1,s=2);const a=this.kernelSize[0],o=this.kernelSize[1],i=this.strides[0],l=this.strides[1];return t[n]=this.filters,t[r]=zv(t[r],i,a,this.padding),t[s]=zv(t[s],l,o,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}jv.className="Conv2DTranspose",Hi(jv);class Kv extends Hv{constructor(e){if(super(e),this.inputSpec=[new Qb({ndim:5})],"same"!==this.padding&&"valid"!==this.padding)throw new py(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(5!==(e=jb(e)).length)throw new py("Input should have rank 5; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new py("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],r=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",r,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new Qb({ndim:5,axes:{[t]:n}})],this.built=!0}call(e,t){return lo((()=>{let t=Hb(e);if(5!==t.shape.length)throw new py(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${t.shape.length}`);const n=t.shape,r=n[0];let s,a,o;"channelsFirst"===this.dataFormat?(o=2,s=3,a=4):(o=1,s=2,a=3);const i=n[o],l=n[s],u=n[a],c=this.kernelSize[0],p=this.kernelSize[1],h=this.kernelSize[2],d=this.strides[0],f=this.strides[1],m=this.strides[2],g=[r,zv(i,d,c,this.padding),zv(l,f,p,this.padding),zv(u,m,h,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=Ol(t,[0,2,3,4,1]));let y=Dc(t,this.kernel.read(),g,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(y=Ol(y,[0,4,1,2,3])),null!==this.bias&&(y=bb(y,this.bias.read(),this.dataFormat)),null!==this.activation&&(y=this.activation.apply(y)),y}))}computeOutputShape(e){const t=(e=jb(e)).slice();let n,r,s,a;"channelsFirst"===this.dataFormat?(n=1,r=2,s=3,a=4):(n=4,r=1,s=2,a=3);const o=this.kernelSize[0],i=this.kernelSize[1],l=this.kernelSize[2],u=this.strides[0],c=this.strides[1],p=this.strides[2];return t[n]=this.filters,t[r]=zv(t[r],u,o,this.padding),t[s]=zv(t[s],c,i,this.padding),t[a]=zv(t[a],p,l,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}Kv.className="Conv3DTranspose",Hi(Kv);class qv extends Uv{constructor(e,t){if(super(e,t),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==t.filters)throw new py("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=t.kernelInitializer||null!=t.kernelRegularizer||null!=t.kernelConstraint)throw new py("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=t.padding&&"same"!==t.padding&&"valid"!==t.padding)throw new py(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(t.padding)}`);this.depthMultiplier=null==t.depthMultiplier?1:t.depthMultiplier,this.depthwiseInitializer=Wb(t.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=Cv(t.depthwiseRegularizer),this.depthwiseConstraint=Nx(t.depthwiseConstraint),this.pointwiseInitializer=Wb(t.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=Cv(t.pointwiseRegularizer),this.pointwiseConstraint=Nx(t.pointwiseConstraint)}build(e){if((e=jb(e)).length<this.rank+2)throw new py(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(e)}`);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t]||e[t]<0)throw new py(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(e[t])}`);const n=e[t],r=this.kernelSize.concat([n,this.depthMultiplier]),s=[];for(let e=0;e<this.rank;++e)s.push(1);s.push(n*this.depthMultiplier,this.filters);const a=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",r,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,a,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",s,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,a,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,a,this.biasConstraint):this.bias=null,this.inputSpec=[new Qb({ndim:this.rank+2,axes:{[t]:n}})],this.built=!0}call(e,t){return lo((()=>{let t;if(e=Hb(e),1===this.rank)throw new hy("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(e=Ol(e,[0,2,3,1])),t=Lh(e,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(t=bb(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),"channelsFirst"===this.dataFormat&&(t=Ol(t,[0,3,1,2])),t}))}getConfig(){const e=super.getConfig();return delete e.rank,delete e.kernelInitializer,delete e.kernelRegularizer,delete e.kernelConstraint,e.depthwiseInitializer=Vb(this.depthwiseInitializer),e.pointwiseInitializer=Vb(this.pointwiseInitializer),e.depthwiseRegularizer=Ev(this.depthwiseRegularizer),e.pointwiseRegularizer=Ev(this.pointwiseRegularizer),e.depthwiseConstraint=vx(this.depthwiseConstraint),e.pointwiseConstraint=vx(this.pointwiseConstraint),e}}qv.className="SeparableConv";class Yv extends qv{constructor(e){super(2,e)}}Yv.className="SeparableConv2D",Hi(Yv);class Xv extends Uv{constructor(e){super(1,e),Xv.verifyArgs(e),this.inputSpec=[{ndim:3}]}getConfig(){const e=super.getConfig();return delete e.rank,delete e.dataFormat,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!Ay(e.kernelSize,"number",1,1))throw new py(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`)}}Xv.className="Conv1D",Hi(Xv);class Zv extends rx{constructor(e){super(e),"number"==typeof e.cropping?this.cropping=[[e.cropping,e.cropping],[e.cropping,e.cropping]]:"number"==typeof e.cropping[0]?this.cropping=[[e.cropping[0],e.cropping[0]],[e.cropping[1],e.cropping[1]]]:this.cropping=e.cropping,this.dataFormat=void 0===e.dataFormat?"channelsLast":e.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],e[2]-this.cropping[0][0]-this.cropping[0][1],e[3]-this.cropping[1][0]-this.cropping[1][1]]:[e[0],e[1]-this.cropping[0][0]-this.cropping[0][1],e[2]-this.cropping[1][0]-this.cropping[1][1],e[3]]}call(e,t){return lo((()=>{if(e=Hb(e),"channelsLast"===this.dataFormat){const t=ub(e,this.cropping[0][0],e.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return ub(t,this.cropping[1][0],e.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const t=ub(e,this.cropping[0][0],e.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return ub(t,this.cropping[1][0],e.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}}))}getConfig(){const e={cropping:this.cropping,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}Zv.className="Cropping2D",Hi(Zv);class Qv extends rx{constructor(e){var t;super(e),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==e.size?this.DEFAULT_SIZE:e.size,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Gy(this.dataFormat),this.interpolation=null==e.interpolation?"nearest":e.interpolation,t=this.interpolation,Cy(Py,"InterpolationFormat",t)}computeOutputShape(e){if("channelsFirst"===this.dataFormat){const t=null==e[2]?null:this.size[0]*e[2],n=null==e[3]?null:this.size[1]*e[3];return[e[0],e[1],t,n]}{const t=null==e[1]?null:this.size[0]*e[1],n=null==e[2]?null:this.size[1]*e[2];return[e[0],t,n,e[3]]}}call(e,t){return lo((()=>{let t=Hb(e);const n=t.shape;if("channelsFirst"===this.dataFormat){t=Ol(t,[0,2,3,1]);const e=this.size[0]*n[2],r=this.size[1]*n[3],s="nearest"===this.interpolation?Of.resizeNearestNeighbor(t,[e,r]):Of.resizeBilinear(t,[e,r]);return Ol(s,[0,3,1,2])}{const e=this.size[0]*n[1],r=this.size[1]*n[2];return"nearest"===this.interpolation?Of.resizeNearestNeighbor(t,[e,r]):Of.resizeBilinear(t,[e,r])}}))}getConfig(){const e={size:this.size,dataFormat:this.dataFormat,interpolation:this.interpolation},t=super.getConfig();return Object.assign(e,t),e}}Qv.className="UpSampling2D",Hi(Qv);class Jv extends Wv{constructor(e){super(2,e),this.depthwiseKernel=null,this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=Wb(e.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=Nx(e.depthwiseConstraint),this.depthwiseRegularizer=Cv(e.depthwiseRegularizer)}build(e){if((e=jb(e)).length<4)throw new py(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);const t="channelsFirst"===this.dataFormat?1:3;if(null==e[t]||e[t]<0)throw new py(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[t]}).`);const n=e[t],r=[this.kernelSize[0],this.kernelSize[1],n,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",r,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[n*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return lo((()=>{let t=function(e,t,n=[1,1],r="valid",s,a){return lo((()=>{null==s&&(s="channelsLast"),Gy(s);let o=Pv(e,s);if(4!==e.rank)throw new py(`Input for depthwiseConv2d is required to be 4-D, but is instead ${e.rank}-D`);if(4!==t.rank)throw new py(`depthwiseKernel is required to be 4-D, but is instead ${t.rank}-D`);return o=Bc(o,t,n,"same"===r?"same":"valid","NHWC",a),"channelsFirst"===s&&(o=Ol(o,[0,3,1,2])),o}))}(e=Hb(e),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(t=bb(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),t}))}computeOutputShape(e){e=jb(e);const t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],r="channelsFirst"===this.dataFormat?e[1]*this.depthMultiplier:e[3]*this.depthMultiplier,s=Lv(t,this.kernelSize[0],this.padding,this.strides[0]),a=Lv(n,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[e[0],r,s,a]:[e[0],s,a,r]}getConfig(){const e=super.getConfig();return e.depthMultiplier=this.depthMultiplier,e.depthwiseInitializer=Vb(this.depthwiseInitializer),e.depthwiseRegularizer=Ev(this.depthwiseRegularizer),e.depthwiseConstraint=vx(this.depthwiseRegularizer),e}}function ek(e,t,n,r){if(Array.isArray(e)){if(null!=t||null!=n)throw new py("When inputs is an array, neither initialState or constants should be provided");null!=r&&(n=e.slice(e.length-r,e.length),e=e.slice(0,e.length-r)),e.length>1&&(t=e.slice(1,e.length)),e=e[0]}function s(e){return null==e||Array.isArray(e)?e:[e]}return{inputs:e,initialState:t=s(t),constants:n=s(n)}}function tk(e,t,n,r=!1,s,a,o=!1,i=!1){return lo((()=>{const l=t.shape.length;if(l<3)throw new py(`Input should be at least 3D, but is ${l}D.`);const u=[1,0].concat(nb(2,l));if(t=Ol(t,u),null!=a)throw new hy("The rnn() functoin of the deeplearn.js backend does not support constants yet.");o&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=s&&((s=Ni(Ni(s,"bool"),"float32")).rank===l-1&&(s=hp(s,-1)),s=Ol(s,u)),r&&(t=Ch(t,0),null!=s&&(s=Ch(s,0)));const c=[];let p,h=n;const d=t.shape[0],f=fd(t);let m,g;null!=s&&(m=fd(s));for(let t=0;t<d;++t){const n=f[t],r=lo((()=>e(n,h)));if(null==s)p=r[0],h=r[1];else{const e=lo((()=>{const e=m[t],n=Qi(th(e),e);return{output:Ii(Ci(r[0],e),Ci(h[0],n)),newStates:h.map(((t,s)=>Ii(Ci(r[1][s],e),Ci(t,n))))}}));p=e.output,h=e.newStates}i&&c.push(p)}return i&&(g=ed(c,1)),[p,g,h]}))}Jv.className="DepthwiseConv2D",Hi(Jv);class nk extends rx{constructor(e){let t;if(super(e),null==e.cell)throw new py("cell property is missing for the constructor of RNN.");if(t=Array.isArray(e.cell)?new ck({cells:e.cell}):e.cell,null==t.stateSize)throw new py("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=t,this.returnSequences=null!=e.returnSequences&&e.returnSequences,this.returnState=null!=e.returnState&&e.returnState,this.goBackwards=null!=e.goBackwards&&e.goBackwards,this._stateful=null!=e.stateful&&e.stateful,this.unroll=null!=e.unroll&&e.unroll,this.supportsMasking=!0,this.inputSpec=[new Qb({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){return null==this.states_?nb(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map((e=>null)):this.states_}setStates(e){this.states_=e}computeOutputShape(e){Ub(e)&&(e=e[0]);let t=this.cell.stateSize;Array.isArray(t)||(t=[t]);const n=t[0];let r;if(r=this.returnSequences?[e[0],e[1],n]:[e[0],n],this.returnState){const n=[];for(const r of t)n.push([e[0],r]);return[r].concat(n)}return r}computeMask(e,t){return lo((()=>{Array.isArray(t)&&(t=t[0]);const e=this.returnSequences?t:null;if(this.returnState){const t=this.states.map((e=>null));return[e].concat(t)}return e}))}get states(){if(null==this.states_){const e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,t=[];for(let n=0;n<e;++n)t.push(null);return t}return this.states_}set states(e){this.states_=e}build(e){if(null!=this.numConstants)throw new hy("Constants support is not implemented in RNN yet.");Ub(e)&&(e=e[0]);const t=this.stateful?e[0]:null,n=e.slice(2);this.inputSpec[0]=new Qb({shape:[t,null,...n]});const r=[e[0]].concat(e.slice(2));let s;if(this.cell.build(r),s=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!he(this.stateSpec.map((e=>e.shape[e.shape.length-1])),s))throw new py(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=s.map((e=>new Qb({shape:[null,e]})));this.stateful&&this.resetStates()}resetStates(e,t=!1){lo((()=>{if(!this.stateful)throw new uy("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape[0];if(null==n)throw new py("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((e=>Hp([n,e]))):this.states_=[Hp([n,this.cell.stateSize])];else if(null==e)uo(this.states_),null!=this.keptStates&&(uo(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((e=>Hp([n,e]))):this.states_[0]=Hp([n,this.cell.stateSize]);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new py(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);!0===t?this.keptStates.push(this.states_.slice()):uo(this.states_);for(let t=0;t<this.states_.length;++t){const r=e[t],s=Array.isArray(this.cell.stateSize)?this.cell.stateSize[t]:this.cell.stateSize,a=[n,s];if(!he(r.shape,a))throw new py(`State ${t} is incompatible with layer ${this.name}: expected shape=${a}, received shape=${r.shape}`);this.states_[t]=r}}this.states_=this.states_.map((e=>co(e.clone())))}))}apply(e,t){let n=null==t?null:t.initialState,r=null==t?null:t.constants;null==t&&(t={});const s=ek(e,n,r,this.numConstants);e=s.inputs,n=s.initialState,r=s.constants;let a=[],o=[];if(null!=n){t.initialState=n,a=a.concat(n),this.stateSpec=[];for(const e of n)this.stateSpec.push(new Qb({shape:e.shape}));o=o.concat(this.stateSpec)}if(null!=r&&(t.constants=r,a=a.concat(r),this.numConstants=r.length),a[0]instanceof Jb){const n=[e].concat(a),r=this.inputSpec.concat(o),s=this.inputSpec;this.inputSpec=r;const i=super.apply(n,t);return this.inputSpec=s,i}return super.apply(e,t)}call(e,t){return lo((()=>{const n=null==t?null:t.mask,r=null==t?null:t.training;let s=null==t?null:t.initialState;e=Hb(e),null==s&&(s=this.stateful?this.states_:this.getInitialState(e));const a=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(s.length!==a)throw new py(`RNN Layer has ${a} state(s) but was passed ${s.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const o={training:r},i=tk(((e,t)=>{const n=this.cell.call([e].concat(t),o);return[n[0],n.slice(1)]}),e,s,this.goBackwards,n,null,this.unroll,this.returnSequences),l=i[0],u=i[1],c=i[2];this.stateful&&this.resetStates(c,r);const p=this.returnSequences?u:l;return this.returnState?[p].concat(c):p}))}getInitialState(e){return lo((()=>{let t=Hp(e.shape);return t=ip(t,[1,2]),t=ob(t),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map((e=>e>1?hb(t,[1,e]):t)):this.cell.stateSize>1?[hb(t,[1,this.cell.stateSize])]:[t]}))}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(e)}getConfig(){const e=super.getConfig(),t={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(t.numConstants=this.numConstants);const n=this.cell.getConfig();return this.getClassName()===nk.className&&(t.cell={className:this.cell.getClassName(),config:n}),Object.assign(Object.assign(Object.assign({},n),e),t)}static fromConfig(e,t,n={}){const r=ew(t.cell,n);return new e(Object.assign(t,{cell:r}))}}nk.className="RNN",Hi(nk);class rk extends rx{}class sk extends rk{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,_y(this.units,"units"),this.activation=kv(null==e.activation?this.DEFAULT_ACTIVATION:e.activation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=Wb(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Wb(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Wb(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=Cv(e.kernelRegularizer),this.recurrentRegularizer=Cv(e.recurrentRegularizer),this.biasRegularizer=Cv(e.biasRegularizer),this.kernelConstraint=Nx(e.kernelConstraint),this.recurrentConstraint=Nx(e.recurrentConstraint),this.biasConstraint=Nx(e.biasConstraint),this.dropout=eb([1,tb([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=eb([1,tb([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=jb(e),this.kernel=this.addWeight("kernel",[e[e.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return lo((()=>{if(2!==e.length)throw new py(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`);let n=e[1];e=e[0];const r=null!=t.training&&t.training;let s;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=pk({ones:()=>th(e),rate:this.dropout,training:r,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=pk({ones:()=>th(n),rate:this.recurrentDropout,training:r,dropoutFunc:this.dropoutFunc}));const a=this.dropoutMask,o=this.recurrentDropoutMask;s=fb(null!=a?Ci(e,a):e,this.kernel.read()),null!=this.bias&&(s=bb(s,this.bias.read())),null!=o&&(n=Ci(n,o));let i=Ii(s,fb(n,this.recurrentKernel.read()));return null!=this.activation&&(i=this.activation.apply(i)),[i,i]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:wv(this.activation),useBias:this.useBias,kernelInitializer:Vb(this.kernelInitializer),recurrentInitializer:Vb(this.recurrentInitializer),biasInitializer:Vb(this.biasInitializer),kernelRegularizer:Ev(this.kernelRegularizer),recurrentRegularizer:Ev(this.recurrentRegularizer),biasRegularizer:Ev(this.biasRegularizer),activityRegularizer:Ev(this.activityRegularizer),kernelConstraint:vx(this.kernelConstraint),recurrentConstraint:vx(this.recurrentConstraint),biasConstraint:vx(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign(Object.assign({},e),t)}}sk.className="SimpleRNNCell",Hi(sk);class ak extends nk{constructor(e){e.cell=new sk(e),super(e)}call(e,t){return lo((()=>{null!=this.cell.dropoutMask&&(uo(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(uo(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,r=null==t?null:t.training,s=null==t?null:t.initialState;return super.call(e,{mask:n,training:r,initialState:s})}))}static fromConfig(e,t){return new e(t)}}ak.className="SimpleRNN",Hi(ak);class ok extends rk{constructor(e){if(super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",e.resetAfter)throw new py("GRUCell does not support reset_after parameter set to true.");this.units=e.units,_y(this.units,"units"),this.activation=kv(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=kv(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=Wb(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Wb(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Wb(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=Cv(e.kernelRegularizer),this.recurrentRegularizer=Cv(e.recurrentRegularizer),this.biasRegularizer=Cv(e.biasRegularizer),this.kernelConstraint=Nx(e.kernelConstraint),this.recurrentConstraint=Nx(e.recurrentConstraint),this.biasConstraint=Nx(e.biasConstraint),this.dropout=eb([1,tb([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=eb([1,tb([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){const t=(e=jb(e))[e.length-1];this.kernel=this.addWeight("kernel",[t,3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return lo((()=>{if(2!==e.length)throw new py(`GRUCell expects 2 input Tensors (inputs, h, c), got ${e.length}.`);const n=null!=t.training&&t.training;let r=e[1];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=pk({ones:()=>th(e),rate:this.dropout,training:n,count:3,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=pk({ones:()=>th(r),rate:this.recurrentDropout,training:n,count:3,dropoutFunc:this.dropoutFunc}));const s=this.dropoutMask,a=this.recurrentDropoutMask;let o,i,l;0<this.dropout&&this.dropout<1&&(e=Ci(e,s[0]));let u=fb(e,this.kernel.read());this.useBias&&(u=bb(u,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(r=Ci(r,a[0]));const c=this.recurrentKernel.read(),[p,h]=Xh(c,[2*this.units,this.units],c.rank-1),d=fb(r,p),[f,m,g]=Xh(u,3,u.rank-1),[y,b]=Xh(d,2,d.rank-1);o=this.recurrentActivation.apply(Ii(f,y)),i=this.recurrentActivation.apply(Ii(m,b));const x=fb(Ci(i,r),h);l=this.activation.apply(Ii(g,x));const w=Ii(Ci(o,r),Ci(Ii(1,Dl(o)),l));return[w,w]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:wv(this.activation),recurrentActivation:wv(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Vb(this.kernelInitializer),recurrentInitializer:Vb(this.recurrentInitializer),biasInitializer:Vb(this.biasInitializer),kernelRegularizer:Ev(this.kernelRegularizer),recurrentRegularizer:Ev(this.recurrentRegularizer),biasRegularizer:Ev(this.biasRegularizer),activityRegularizer:Ev(this.activityRegularizer),kernelConstraint:vx(this.kernelConstraint),recurrentConstraint:vx(this.recurrentConstraint),biasConstraint:vx(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign(Object.assign({},e),t)}}ok.className="GRUCell",Hi(ok);class ik extends nk{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new ok(e),super(e)}call(e,t){return lo((()=>{null!=this.cell.dropoutMask&&(uo(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(uo(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,r=null==t?null:t.training,s=null==t?null:t.initialState;return super.call(e,{mask:n,training:r,initialState:s})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}ik.className="GRU",Hi(ik);class lk extends rk{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,_y(this.units,"units"),this.activation=kv(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=kv(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=Wb(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Wb(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Wb(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=e.unitForgetBias,this.kernelRegularizer=Cv(e.kernelRegularizer),this.recurrentRegularizer=Cv(e.recurrentRegularizer),this.biasRegularizer=Cv(e.biasRegularizer),this.kernelConstraint=Nx(e.kernelConstraint),this.recurrentConstraint=Nx(e.recurrentConstraint),this.biasConstraint=Nx(e.biasConstraint),this.dropout=eb([1,tb([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=eb([1,tb([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){var t;const n=(e=jb(e))[e.length-1];let r;if(this.kernel=this.addWeight("kernel",[n,4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const e=this.biasInitializer,n=this.units;r=new((t=class extends Nb{apply(t,r){const s=e.apply([n]),a=(new Sb).apply([n]),o=e.apply([2*n]);return pb(pb(s,a),o)}}).className="CustomInit",t)}else r=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,r,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(e,t){return lo((()=>{const n=null!=t.training&&t.training;if(3!==e.length)throw new py(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);let r=e[1];const s=e[2];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=pk({ones:()=>th(e),rate:this.dropout,training:n,count:4,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=pk({ones:()=>th(r),rate:this.recurrentDropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const a=this.dropoutMask,o=this.recurrentDropoutMask;let i,l,u,c;0<this.dropout&&this.dropout<1&&(e=Ci(e,a[0]));let p=fb(e,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(r=Ci(r,o[0])),p=Ii(p,fb(r,this.recurrentKernel.read())),this.useBias&&(p=bb(p,this.bias.read()));const[h,d,f,m]=Xh(p,4,p.rank-1);i=this.recurrentActivation.apply(h),l=this.recurrentActivation.apply(d),u=Ii(Ci(l,s),Ci(i,this.activation.apply(f))),c=this.recurrentActivation.apply(m);const g=Ci(c,this.activation.apply(u));return[g,g,u]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:wv(this.activation),recurrentActivation:wv(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Vb(this.kernelInitializer),recurrentInitializer:Vb(this.recurrentInitializer),biasInitializer:Vb(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:Ev(this.kernelRegularizer),recurrentRegularizer:Ev(this.recurrentRegularizer),biasRegularizer:Ev(this.biasRegularizer),activityRegularizer:Ev(this.activityRegularizer),kernelConstraint:vx(this.kernelConstraint),recurrentConstraint:vx(this.recurrentConstraint),biasConstraint:vx(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign(Object.assign({},e),t)}}lk.className="LSTMCell",Hi(lk);class uk extends nk{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new lk(e),super(e)}call(e,t){return lo((()=>{null!=this.cell.dropoutMask&&(uo(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(uo(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,r=null==t?null:t.training,s=null==t?null:t.initialState;return super.call(e,{mask:n,training:r,initialState:s})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}uk.className="LSTM",Hi(uk);class ck extends rk{constructor(e){super(e),this.cells=e.cells}get stateSize(){const e=[];for(const t of this.cells.slice().reverse())Array.isArray(t.stateSize)?e.push(...t.stateSize):e.push(t.stateSize);return e}call(e,t){return lo((()=>{let n=e.slice(1);const r=[];for(const e of this.cells.slice().reverse())Array.isArray(e.stateSize)?r.push(n.splice(0,e.stateSize.length)):r.push(n.splice(0,1));r.reverse();const s=[];let a;for(let o=0;o<this.cells.length;++o){const i=this.cells[o];n=r[o],a=0===o?[e[0]].concat(n):[a[0]].concat(n),a=i.call(a,t),s.push(a.slice(1))}n=[];for(const e of s.slice().reverse())n.push(...e);return[a[0]].concat(n)}))}build(e){let t;Ub(e)&&(e=e[0]),this.cells.forEach(((n,r)=>{qy(`RNNCell_${r}`,(()=>{n.build(e),t=Array.isArray(n.stateSize)?n.stateSize[0]:n.stateSize,e=[e[0],t]}))})),this.built=!0}getConfig(){const e=super.getConfig(),t={cells:this.cells.map((e=>({className:e.getClassName(),config:e.getConfig()})))};return Object.assign(Object.assign({},e),t)}static fromConfig(e,t,n={}){const r=[];for(const e of t.cells)r.push(ew(e,n));return new e({cells:r})}get trainableWeights(){if(!this.trainable)return[];const e=[];for(const t of this.cells)e.push(...t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.cells)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.cells)t.push(...e.trainableWeights);return t.concat(e)}return e}getWeights(){const e=[];for(const t of this.cells)e.push(...t.weights);return Xb(e)}setWeights(e){const t=[];for(const n of this.cells){const r=n.weights.length,s=e.splice(r);for(let e=0;e<n.weights.length;++e)t.push([n.weights[e],s[e]])}Zb(t)}}function pk(e){const{ones:t,rate:n,training:r=!1,count:s=1,dropoutFunc:a}=e,o=()=>null!=a?a(t(),n):xb(t(),n),i=()=>wb(o,t,r);return!s||s<=1?co(i().clone()):Array(s).fill(void 0).map(i).map((e=>co(e.clone())))}ck.className="StackedRNNCells",Hi(ck);class hk extends nk{constructor(e){if(e.unroll)throw new hy("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(e.cell))throw new hy("It is not possible at the moment to stack convolutional cells.");super(e),this.inputSpec=[new Qb({ndim:5})]}call(e,t){return lo((()=>{if(null!=this.cell.dropoutMask&&(uo(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(uo(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),t&&t.constants)throw new py("ConvRNN2D cell does not support constants");const n=null==t?null:t.mask,r=null==t?null:t.training,s=null==t?null:t.initialState;return super.call(e,{mask:n,training:r,initialState:s})}))}computeOutputShape(e){let t=this.computeSingleOutputShape(e);return this.returnSequences||(t=[t[0],...t.slice(2)]),this.returnState&&(t=[t,...Array(2).fill([e[0],...t.slice(-3)])]),t}getInitialState(e){return lo((()=>{const{stateSize:t}=this.cell,n=e.shape,r=this.computeSingleOutputShape(n),s=Hp([r[0],...r.slice(2)]);return Array.isArray(t)?Array(t.length).fill(s):[s]}))}resetStates(e,t=!1){lo((()=>{if(!this.stateful)throw new uy("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape,r=this.computeSingleOutputShape(n),s=[r[0],...r.slice(2)];if(null==n[0])throw new py("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>Hp(s))):this.states_=[Hp(s)];else if(null==e)uo(this.states_),null!=this.keptStates&&(uo(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>Hp(s))):this.states_[0]=Hp(s);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new py(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);t?this.keptStates.push(this.states_.slice()):uo(this.states_);for(let t=0;t<this.states_.length;++t){const n=e[t],r=s;if(!he(n.shape,r))throw new py(`State ${t} is incompatible with layer ${this.name}: expected shape=${r}, received shape=${n.shape}`);this.states_[t]=n}}this.states_=this.states_.map((e=>co(e.clone())))}))}computeSingleOutputShape(e){const{dataFormat:t,filters:n,kernelSize:r,padding:s,strides:a,dilationRate:o}=this.cell,i="channelsFirst"===t,l=e[i?3:2],u=e[i?4:3],c=Lv(l,r[0],s,a[0],o[0]),p=Lv(u,r[1],s,a[1],o[1]);return[...e.slice(0,2),...i?[n,c,p]:[c,p,n]]}}hk.className="ConvRNN2D";class dk extends lk{constructor(e){const{filters:t,kernelSize:n,strides:r,padding:s,dataFormat:a,dilationRate:o}=e;super(Object.assign(Object.assign({},e),{units:t})),this.filters=t,_y(this.filters,"filters"),this.kernelSize=Mv(n,2,"kernelSize"),this.kernelSize.forEach((e=>_y(e,"kernelSize"))),this.strides=Mv(r||1,2,"strides"),this.strides.forEach((e=>_y(e,"strides"))),this.padding=s||"valid",Hy(this.padding),this.dataFormat=a||"channelsLast",Gy(this.dataFormat),this.dilationRate=Mv(o||1,2,"dilationRate"),this.dilationRate.forEach((e=>_y(e,"dilationRate")))}build(e){var t;e=jb(e);const n="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[n])throw new py(`The channel dimension of the input should be defined. Found ${e[n]}`);const r=e[n],s=this.kernelSize.concat([r,4*this.filters]);this.kernel=this.addWeight("kernel",s,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const a=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",a,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let e;if(this.unitForgetBias){const n=this.biasInitializer,r=this.filters;e=new((t=class extends Nb{apply(e,t){return cb([n.apply([r]),jp([r]),n.apply([2*r])])}}).className="CustomInit",t)}else e=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,e,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(e,t){return lo((()=>{if(3!==e.length)throw new py(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);const n=t.training||!1,r=e[0],s=e[1],a=e[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=pk({ones:()=>th(r),rate:this.dropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const o=this.dropoutMask,i=(e,t,n)=>t&&t[n]?Ci(t[n],e):e;let l=i(r,o,0),u=i(r,o,1),c=i(r,o,2),p=i(r,o,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=pk({ones:()=>th(s),rate:this.recurrentDropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const h=this.recurrentDropoutMask;let d=i(s,h,0),f=i(s,h,1),m=i(s,h,2),g=i(s,h,3);const[y,b,x,w]=Xh(this.kernel.read(),4,3),[v,k,N,T]=this.useBias?Xh(this.bias.read(),4):[null,null,null,null];l=this.inputConv(l,y,v,this.padding),u=this.inputConv(u,b,k,this.padding),c=this.inputConv(c,x,N,this.padding),p=this.inputConv(p,w,T,this.padding);const[S,I,E,$]=Xh(this.recurrentKernel.read(),4,3);d=this.recurrentConv(d,S),f=this.recurrentConv(f,I),m=this.recurrentConv(m,E),g=this.recurrentConv(g,$);const C=this.recurrentActivation.apply(Ii(l,d)),A=this.recurrentActivation.apply(Ii(u,f)),_=Ii(Ci(A,a),Ci(C,this.activation.apply(Ii(c,m)))),R=Ci(this.recurrentActivation.apply(Ii(p,g)),this.activation.apply(_));return[R,R,_]}))}getConfig(){const e=super.getConfig(),{units:t}=e,n=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var s=0;for(r=Object.getOwnPropertySymbols(e);s<r.length;s++)t.indexOf(r[s])<0&&Object.prototype.propertyIsEnumerable.call(e,r[s])&&(n[r[s]]=e[r[s]])}return n}(e,["units"]),r={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign(Object.assign({},n),r)}inputConv(e,t,n,r){const s=Ec(e,t,this.strides,r||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return n?bb(s,n,this.dataFormat):s}recurrentConv(e,t){return Ec(e,t,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}dk.className="ConvLSTM2DCell",Hi(dk);class fk extends hk{constructor(e){const t=new dk(e);super(Object.assign(Object.assign({},e),{cell:t}))}static fromConfig(e,t){return new e(t)}}fk.className="ConvLSTM2D",Hi(fk);class mk extends rx{constructor(e){super(e),this.rate=Math.max(Math.min(e.rate,1),0),this.noiseShape=e.noiseShape,this.seed=e.seed,this.supportsMasking=!0}getNoiseShape(e){if(null==this.noiseShape)return this.noiseShape;const t=e.shape,n=[];for(let e=0;e<this.noiseShape.length;++e)n.push(null==this.noiseShape[e]?t[e]:this.noiseShape[e]);return n}call(e,t){return lo((()=>{this.invokeCallHook(e,t);const n=Hb(e);if(0<this.rate&&this.rate<1){const e=null!=t.training&&t.training,r=this.getNoiseShape(n);return wb((()=>xb(n,this.rate,r,this.seed)),(()=>n),e)}return e}))}getConfig(){const e={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},t=super.getConfig();return Object.assign(e,t),e}dispose(){return super.dispose()}}mk.className="Dropout",Hi(mk);class gk extends mk{constructor(e){super(e),this.inputSpec=[{ndim:3}]}getNoiseShape(e){const t=e.shape;return[t[0],1,t[2]]}}gk.className="SpatialDropout1D",Hi(gk);class yk extends rx{constructor(e){if(super(e),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==e.batchInputShape&&null==e.inputShape&&null!=e.inputDim){let t=null;null!=e.batchSize&&(t=e.batchSize),this.batchInputShape=[t,e.inputDim]}this.units=e.units,_y(this.units,"units"),this.activation=kv(e.activation),null!=e.useBias&&(this.useBias=e.useBias),this.kernelInitializer=Wb(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=Wb(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=Nx(e.kernelConstraint),this.biasConstraint=Nx(e.biasConstraint),this.kernelRegularizer=Cv(e.kernelRegularizer),this.biasRegularizer=Cv(e.biasRegularizer),this.activityRegularizer=Cv(e.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(e){const t=(e=jb(e))[e.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[t,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:t}}],this.built=!0}computeOutputShape(e){const t=(e=jb(e)).slice();return t[t.length-1]=this.units,t}call(e,t){return lo((()=>{this.invokeCallHook(e,t);const n=Hb(e),r=Dy(this.activation.getClassName());let s;return null!=r?s=fb(n,this.kernel.read(),r,this.bias?this.bias.read():null):(s=fb(n,this.kernel.read()),null!=this.bias&&(s=bb(s,this.bias.read())),null!=this.activation&&(s=this.activation.apply(s))),s}))}getConfig(){const e={units:this.units,activation:wv(this.activation),useBias:this.useBias,kernelInitializer:Vb(this.kernelInitializer),biasInitializer:Vb(this.biasInitializer),kernelRegularizer:Ev(this.kernelRegularizer),biasRegularizer:Ev(this.biasRegularizer),activityRegularizer:Ev(this.activityRegularizer),kernelConstraint:vx(this.kernelConstraint),biasConstraint:vx(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}yk.className="Dense",Hi(yk);class bk extends rx{constructor(e){super(e=e||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=e.dataFormat}computeOutputShape(e){e=jb(e);for(const t of e.slice(1))if(null==t)throw new py(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[e[0],Jy(e,1)]}call(e,t){return lo((()=>{this.invokeCallHook(e,t);let n=Hb(e);if("channelsFirst"===this.dataFormat&&n.rank>1){const e=[0];for(let t=2;t<n.rank;++t)e.push(t);e.push(1),n=Ol(n,e)}return function(e){if(e.rank<=1)throw new py(`batchFlatten requires a minimum rank of 2. Got rank: ${e.rank}.`);const t=[e.shape[0],Jy(e.shape,1)];return sc(e,t)}(n)}))}getConfig(){const e={};null!=this.dataFormat&&(e.dataFormat=this.dataFormat);const t=super.getConfig();return Object.assign(e,t),e}}bk.className="Flatten",Hi(bk);class xk extends rx{constructor(e){super(e),this.supportsMasking=!0,this.activation=kv(e.activation)}call(e,t){return lo((()=>{this.invokeCallHook(e,t);const n=Hb(e);return this.activation.apply(n)}))}getConfig(){const e={activation:wv(this.activation)},t=super.getConfig();return Object.assign(e,t),e}}xk.className="Activation",Hi(xk);class wk extends rx{constructor(e){super(e),this.n=e.n,this.inputSpec=[{ndim:2}]}computeOutputShape(e){return[e[0],this.n,e[1]]}call(e,t){return lo((()=>{return e=Hb(e),t=e,n=this.n,lo((()=>{if(2!==t.shape.length)throw new py(`repeat() expects a rank-2 tensor, but received a rank-${t.shape.length} tensor.`);return hb(ob(t,1),[1,n,1])}));var t,n}))}getConfig(){const e={n:this.n},t=super.getConfig();return Object.assign(e,t),e}}wk.className="RepeatVector",Hi(wk);class vk extends rx{constructor(e){super(e),this.targetShape=e.targetShape;for(let e=0;e<this.targetShape.length;++e)this.isUnknown(this.targetShape[e])&&(this.targetShape[e]=null)}isUnknown(e){return e<0||null==e}fixUnknownDimension(e,t){const n="Total size of new array must be unchanged.",r=t.slice();let s=1,a=null;for(let e=0;e<r.length;++e){const t=r[e];if(this.isUnknown(t)){if(null!==a)throw new py("Can only specifiy one unknown dimension.");a=e}else s*=t}const o=Jy(e);if(null!==a){if(0===s||o%s!=0)throw new py(n);r[a]=o/s}else if(o!==s)throw new py(n);return r}computeOutputShape(e){let t=!1;for(let n=0;n<e.length;++n)if(this.isUnknown(e[n])){t=!0;break}return t?e.slice(0,1).concat(this.targetShape):e.slice(0,1).concat(this.fixUnknownDimension(e.slice(1),this.targetShape))}call(e,t){return lo((()=>{this.invokeCallHook(e,t);const n=Hb(e),r=n.shape,s=r.slice(0,1).concat(this.fixUnknownDimension(r.slice(1),this.targetShape));return sc(n,s)}))}getConfig(){const e={targetShape:this.targetShape},t=super.getConfig();return Object.assign(e,t),e}}vk.className="Reshape",Hi(vk);class kk extends rx{constructor(e){if(super(e),null==e.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(e.dims))throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${e.dims} instead.`);const t=nb(1,e.dims.length+1);if(!he(e.dims.slice().sort(),t))throw new Error("Invalid permutation `dims`: "+JSON.stringify(e.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=e.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new Qb({ndim:this.dims.length+1})]}computeOutputShape(e){const t=(e=jb(e)).slice();return this.dims.forEach(((n,r)=>{t[r+1]=e[n]})),t}call(e,t){return Ol(Hb(e),this.dimsIncludingBatch)}getConfig(){const e={dims:this.dims},t=super.getConfig();return Object.assign(e,t),e}}kk.className="Permute",Hi(kk);class Nk extends rx{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,this.maskValue=null!=e?null==e.maskValue?0:e.maskValue:0}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={maskValue:this.maskValue};return Object.assign(t,e),t}computeMask(e,t){const n=Hb(e);return Ou(eh(n,this.maskValue),-1)}call(e,t){return lo((()=>{this.invokeCallHook(e,t);const n=Hb(e),r=Ou(eh(n,this.maskValue),-1,!0);return Ci(n,Ni(r,n.dtype))}))}}Nk.className="Masking",Hi(Nk);class Tk extends rx{constructor(e){if(super(e),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==e.batchInputShape&&null==e.inputShape){let t=null;null!=e.batchSize&&(t=e.batchSize),null==e.inputLength?this.batchInputShape=[t,null]:this.batchInputShape=[t].concat(xy(e.inputLength))}this.inputDim=e.inputDim,_y(this.inputDim,"inputDim"),this.outputDim=e.outputDim,_y(this.outputDim,"outputDim"),this.embeddingsInitializer=Wb(e.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=Cv(e.embeddingsRegularizer),this.activityRegularizer=Cv(e.activityRegularizer),this.embeddingsConstraint=Nx(e.embeddingsConstraint),this.maskZero=e.maskZero,this.supportsMasking=e.maskZero,this.inputLength=e.inputLength}build(e){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(e){}computeMask(e,t){return lo((()=>this.maskZero?(e=Hb(e),eh(e,Ri(e))):null))}computeOutputShape(e){if(e=jb(e),null==this.inputLength)return[...e,this.outputDim];const t=xy(this.inputLength);if(t.length!==e.length-1)throw new py(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);{let n=0;for(let r=0;r<t.length;++r){const s=t[r],a=e[r+1];if(null!=s&&null!=a&&s!==a)throw new py(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);null==s&&(t[n]=a),n++}}return[e[0],...t,this.outputDim]}call(e,t){return lo((()=>{this.invokeCallHook(e,t);let n=Hb(e);"int32"!==n.dtype&&(n=ab(n,"int32"));const r=mb(this.embeddings.read(),sc(n,[n.size]));return sc(r,jb(this.computeOutputShape(n.shape)))}))}getConfig(){const e={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:Vb(this.embeddingsInitializer),embeddingsRegularizer:Ev(this.embeddingsRegularizer),activityRegularizer:Ev(this.activityRegularizer),embeddingsConstraint:vx(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},t=super.getConfig();return Object.assign(e,t),e}}Tk.className="Embedding",Hi(Tk);class Sk extends rx{constructor(e){super(e||{}),this.supportsMasking=!0}mergeFunction(e){throw new hy}computeElementwiseOpOutputShape(e,t){if(null==e||null==t)return null;if(e.length<t.length)return this.computeElementwiseOpOutputShape(t,e);if(0===t.length)return e;const n=e.slice(0,e.length-t.length);for(let r=0;r<t.length;++r){const s=e[e.length-t.length+r],a=t[r];if(null==s||null==a||s<0||a<0)n.push(null);else if(1===s)n.push(a);else if(1===a)n.push(s);else{if(s!==a)throw new py("Operands could not be broadcast together with shapes "+JSON.stringify(e)+" "+JSON.stringify(t));n.push(s)}}return n}build(e){if(Array.isArray(e)&&!Array.isArray(e[0])&&(e=[jb(e)]),e.length<2)throw new py(`A merge layer should be called on an Array of at least 2 inputs. Got ${e.length} input(s).`);let t=[];for(const n of e)null!=n&&null!==n[0]&&t.push(n[0]);if(t=Ey(t),t.length>1)throw new py(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(e)}.`);let n=null==e[0]?null:e[0].slice(1);for(let t=1;t<e.length;++t){const r=null==e[t]?null:e[t].slice(1);n=this.computeElementwiseOpOutputShape(n,r)}const r=e.map((e=>e.length));-1===e.indexOf(null)&&1===Ey(r).length?this.reshapeRequired=!1:this.reshapeRequired=!0}call(e,t){return lo((()=>{if(this.reshapeRequired){const t=[],n=e.map((e=>e.rank));if(-1===n.indexOf(null)){const r=tb(n);for(let n of e){const e=n.rank;for(let t=0;t<r-e;++t)n=ob(n,1);t.push(n)}return this.mergeFunction(t)}{let n=!1;for(const r of e){const e=r.rank;if(null==e){const e=r.shape,s=e[0],a=e.slice(1).concat([s]);let o=sc(r,[s].concat(Jy(e.slice(1))));o=Ol(o,[1,0]),o=sc(o,a),t.push(o),n=!0}else if(e>1){const s=nb(1,e).concat([0]);t.push(Ol(r,s)),n=!0}else t.push(r)}let r=this.mergeFunction(t);const s=r.rank;if(n)if(null==s){const e=r.shape,t=e[e.length-1],n=[t].concat(e.slice(0,e.length-1));r=sc(Ol(sc(r,[-1,t]),[1,0]),n)}else if(s>1){const e=[s-1].concat(nb(0,s-1));r=Ol(r,e)}return r}}return this.mergeFunction(e)}))}computeOutputShape(e){let t;t=null==e[0]?null:e[0].slice(1);for(let n=1;n<e.length;++n){const r=null==e[n]?null:e[n].slice(1);t=this.computeElementwiseOpOutputShape(t,r)}let n=[];for(const t of e)null!=t&&null!==t[0]&&n.push(t[0]);return n=Ey(n),t=1===n.length?n.concat(t):[null].concat(t),t}computeMask(e,t){return lo((()=>{if(null==t)return null;if(!Array.isArray(t))throw new py("`mask` should be an Array");if(!Array.isArray(e))throw new py("`inputs` should be an Array");if(t.length!==e.length)throw new py(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${e.length} vs ${t.length})`);if(t.every((e=>null==e)))return null;let n=(t=t.map((e=>null==e?e:hp(e,0))))[0];for(let e=1;e<t.length-1;++e)n=Fp(n,t[e]);return n}))}}class Ik extends Sk{constructor(e){super(e)}mergeFunction(e){return lo((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=Ii(t,e[n]);return t}))}}Ik.className="Add",Hi(Ik);class Ek extends Sk{constructor(e){super(e)}mergeFunction(e){return lo((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=Ci(t,e[n]);return t}))}}Ek.className="Multiply",Hi(Ek);class $k extends Sk{constructor(e){super(e)}mergeFunction(e){return lo((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=Ii(t,e[n]);return Ci(1/e.length,t)}))}}$k.className="Average",Hi($k);class Ck extends Sk{constructor(e){super(e)}mergeFunction(e){return lo((()=>{let t=e[0];for(let n=1;n<e.length;++n)t=sl(t,e[n]);return t}))}}Ck.className="Maximum",Hi(Ck);class Ak extends Sk{constructor(e){super(e)}mergeFunction(e){return lo((()=>{let t=e[0];for(let n=1;n<e.length;++n)t=qp(t,e[n]);return t}))}}Ak.className="Minimum",Hi(Ak);class _k extends Sk{constructor(e){super(e),this.DEFAULT_AXIS=-1,null==e&&(e={}),this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){if(!Array.isArray(e)||!Array.isArray(e[0])||1===e.length)throw new py("A `Concatenate` layer should be called on a list of at least 2 inputs");let t=!0;for(const n of e)if(null!=n){t=!1;break}if(t)return;const n=[];for(let t=0;t<e.length;++t){const r=e[t].slice();r.splice(this.axis,1);let s=!1;for(const e of n)if(he(e,r)){s=!0;break}s||n.push(r)}if(n.length>1)throw new py("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(e))}mergeFunction(e){return lo((()=>cb(e,this.axis)))}computeOutputShape(e){if(!Array.isArray(e)||!Array.isArray(e[0]))throw new py("A `Concatenate` layer should be called on a list of inputs.");const t=e,n=t[0].slice(),r=this.axis<0?n.length+this.axis:this.axis;for(const e of t.slice(1)){if(null==n[r]||null==e[r]){n[r]=null;break}n[r]+=e[r]}return n}computeMask(e,t){if(null==t)return null;if(!Array.isArray(t))throw new py("`mask` should be an array for Concatenate");if(!Array.isArray(e))throw new py("`inputs` should be an array for Concatenate");if(t.length!==e.length)throw new py(`Mismatch in the length of mask (${t.length}) and the legnth of inputs (${e.length})`);return lo((()=>{let n=!0;if(t.forEach((e=>{null==e||(n=!1)})),n)return null;const r=[];for(let n=0;n<e.length;++n)null==t[n]?r.push(Ni(th(e[n]),"bool")):t[n].rank<e[n].rank?r.push(hp(t[n],-1)):r.push(t[n]);const s=ic(r,this.axis);return Fu(s,-1,!1)}))}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function Rk(e,t){for(;e<0;)e+=t;return e}_k.className="Concatenate",Hi(_k);class Dk extends Sk{constructor(e){super(e),this.axes=e.axes,this.normalize=null!=e.normalize&&e.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){oe(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const t=e[0],n=e[1];if(t.length>3||n.length>3)throw new hy("Dot layer does not support tensors of 4D or higher rank yet.");const r=this.interpretAxes(t,n);if(t[r[0]]!==n[r[1]])throw new py(`Dimension incompatibility: ${t[r[0]]} !== ${n[r[1]]}`)}mergeFunction(e){if(2!==e.length)throw new py(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`);let t,n=e[0],r=e[1];return t=Array.isArray(this.axes)?this.axes.map(((t,n)=>Rk(t,e[n].shape.length))):[Rk(this.axes,n.shape.length),Rk(this.axes,r.shape.length)],this.normalize&&(n=tw(n,t[0]),r=tw(r,t[1])),function(e,t,n){if(e.shape.length>3||t.shape.length>3)throw new hy("batchDot is not implemented for tensors of 4D or higher rank yet");if(oe(e.shape.length>=2,(()=>`batchDot requires the rank of x to be >= 2, but got ${e.shape.length}`)),oe(e.shape.length>=2,(()=>`batchDot requires the rank of y to be >= 2, but got ${t.shape.length}`)),"number"==typeof n&&(n=[n,n]),"complex64"===e.dtype||"complex64"===t.dtype)throw new hy("batchDot is not implemented for complex64-type Tensors yet.");const r=e.shape.length,s=t.shape.length;null==n&&(n=[r-1,s-2]);const a=n;return lo((()=>{let n,o;if(r>s){n=r-s;const e=[];for(let t=0;t<n;++t)e.push(1);t=sc(t,t.shape.concat(e))}else if(s>r){n=s-r;const t=[];for(let e=0;e<n;++e)t.push(1);e=sc(e,e.shape.concat(t))}else n=0;if(2===e.shape.length&&2===t.shape.length)o=a[0]===a[1]?ip(Ci(e,t),a[0]):ip(Ci(Ol(e,[1,0]),t),a[1]);else{const n=a[0]!==e.shape.length-1,r=a[1]===t.shape.length-1;o=Al(e,t,n,r)}if(n>0){let e;e=r>s?r+s-3:r-1;const t=[];for(let r=e;r<e+n;++r)t.push(r);o=Jh(o,t)}return 1===o.shape.length&&(o=hp(o,1)),o}))}(n,r,t)}interpretAxes(e,t){let n;return n=Array.isArray(this.axes)?this.axes:[Rk(this.axes,e.length),Rk(this.axes,t.length)],n}computeOutputShape(e){oe(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const t=e[0].slice(),n=e[1].slice();if(t.length>3||n.length>3)throw new hy("Dot layer does not support tensors of 4D or higher rank yet.");const r=this.interpretAxes(t,n);t.splice(r[0],1),n.splice(r[1],1),n.splice(0,1);const s=t.concat(n);return 1===s.length&&s.push(1),s}computeMask(e,t){return null}getConfig(){const e={axes:this.axes,normalize:this.normalize},t=super.getConfig();return Object.assign(e,t),e}}Dk.className="Dot",Hi(Dk);class Fk extends rx{constructor(e){super(e),this.supportsMasking=!0,this.stddev=e.stddev}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={stddev:this.stddev};return Object.assign(t,e),t}call(e,t){return lo((()=>{this.invokeCallHook(e,t);const n=Hb(e);return wb((()=>Ii(db(n.shape,0,this.stddev),n)),(()=>n),t.training||!1)}))}}Fk.className="GaussianNoise",Hi(Fk);class Ok extends rx{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return lo((()=>{this.invokeCallHook(e,t);const n=Hb(e);return this.rate>0&&this.rate<1?wb((()=>{const e=Math.sqrt(this.rate/(1-this.rate));return Ci(n,db(n.shape,1,e))}),(()=>n),t.training||!1):n}))}}Ok.className="GaussianDropout",Hi(Ok);class Mk extends rx{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate,this.noiseShape=e.noiseShape}_getNoiseShape(e){return this.noiseShape||Hb(e).shape}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return lo((()=>{if(this.rate<1&&this.rate>0){const n=this._getNoiseShape(e),r=()=>{const t=Hb(e),r=-1.7580993408473766;let s=xp(Nh(n),this.rate);s=ab(s,"float32");const a=((1-this.rate)*(1+this.rate*r**2))**-.5,o=-a*r*this.rate,i=Ii(Ci(t,s),Ci(Ii(s,-1),r));return Ii(Ci(i,a),o)};return wb(r,(()=>Hb(e)),t.training||!1)}return e}))}}function Lk(e,t,n,r,s,a=.001){let o;if(2===e.rank)o=fc(e,t,n,r,s,a);else if(3===e.rank)o=mc(e,t,n,r,s,a);else{if(4!==e.rank)throw new hy(`batchNormalization is not implemented for array of rank ${e.rank} yet`);o=gc(e,t,n,r,s,a)}return o}Mk.className="AlphaDropout",Hi(Mk);class zk extends rx{constructor(e){null==e&&(e={}),super(e),this.supportsMasking=!0,this.axis=null==e.axis?-1:e.axis,this.momentum=null==e.momentum?.99:e.momentum,this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=Wb(e.betaInitializer||"zeros"),this.gammaInitializer=Wb(e.gammaInitializer||"ones"),this.movingMeanInitializer=Wb(e.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=Wb(e.movingVarianceInitializer||"ones"),this.betaConstraint=Nx(e.betaConstraint),this.gammaConstraint=Nx(e.gammaConstraint),this.betaRegularizer=Cv(e.betaRegularizer),this.gammaRegularizer=Cv(e.gammaRegularizer)}build(e){e=jb(e);const t=this.axis>=0?this.axis:this.axis+e.length,n=e[t];if(null==n)throw new py(`Axis ${t} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e)}.`);this.inputSpec=[new Qb({ndim:e.length,axes:{[t]:n}})];const r=[n];this.scale&&(this.gamma=this.addWeight("gamma",r,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",r,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",r,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",r,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(e,t){return lo((()=>{const n=null!=t.training&&t.training,r=Hb(e),s=r.shape,a=s.length,o=nb(0,a),i=this.axis>=0?this.axis:this.axis+a;o.splice(i,1);const l=my(1,a);l[i]=s[i];const u=o.slice();u.sort();const c=!he(u,nb(0,a).slice(0,a-1));if(!n)return(()=>{if(c){const e=sc(this.movingMean.read(),l),t=sc(this.movingVariance.read(),l),n=this.center?sc(this.beta.read(),l):null,s=this.scale?sc(this.gamma.read(),l):null;return Lk(r,e,t,n,s,this.epsilon)}return Lk(r,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[p,h,d]=function(e,t,n,r,s=.001){return he(r.slice().sort(),nb(0,e.rank-1))?function(e,t,n,r,s=.001){return lo((()=>{const a=Zp(e,r),o=a.mean,i=a.variance;return[Lk(e,o,i,n,t,s),o,i]}))}(e,t,n,r,s):function(e,t,n,r,s=.001){return lo((()=>{const a=Zp(e,r),o=a.mean,i=a.variance,l=[];for(const t of nb(0,e.rank))-1!==r.indexOf(t)?l.push(1):l.push(e.shape[t]);const u=sc(o,l),c=sc(i,l),p=null==t?null:sc(t,l),h=null==n?null:sc(n,l);return[Lk(e,u,c,h,p,s),o,i]}))}(e,t,n,r,s)}(r,this.gamma.read(),this.beta.read(),o,this.epsilon),f=(e,t,n)=>{lo((()=>{const r=1-n,s=e.read(),a=Ci(Qi(s,t),r);e.write(Qi(s,a))}))};return(()=>{f(this.movingMean,h,this.momentum),f(this.movingVariance,d,this.momentum)})(),p}))}getConfig(){const e={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:Vb(this.betaInitializer),gammaInitializer:Vb(this.gammaInitializer),movingMeanInitializer:Vb(this.movingMeanInitializer),movingVarianceInitializer:Vb(this.movingVarianceInitializer),betaRegularizer:Ev(this.betaRegularizer),gammaRegularizer:Ev(this.gammaRegularizer),betaConstraint:vx(this.betaConstraint),gammaConstraint:vx(this.gammaConstraint)},t=super.getConfig();return Object.assign(e,t),e}}zk.className="BatchNormalization",Hi(zk);class Pk extends rx{constructor(e){if(null==e&&(e={}),super(e),this.axis=null==e.axis?-1:e.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error(`Expected axis to be an integer, but received ${this.axis}`)}else{if(!Array.isArray(this.axis))throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);for(const e of this.axis)if(!Number.isInteger(e))throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=Wb(e.betaInitializer||"zeros"),this.gammaInitializer=Wb(e.gammaInitializer||"ones"),this.betaRegularizer=Cv(e.betaRegularizer),this.gammaRegularizer=Cv(e.gammaRegularizer),this.supportsMasking=!0}build(e){const t=(e=jb(e)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let e=0;e<this.axis.length;++e)this.axis[e]<0&&(this.axis[e]+=t);for(const e of this.axis)if(e<0||e>=t)throw new Error(`Invalid axis: ${e}`);if(this.axis.length!==Ey(this.axis).length)throw new Error(`Found duplicate axes in: ${this.axis}`);const n=this.axis.map((t=>e[t])),r=!0;this.scale?this.gamma=this.addWeight("gamma",n,"float32",this.gammaInitializer,this.gammaRegularizer,r):this.gamma=null,this.center?this.beta=this.addWeight("beta",n,"float32",this.betaInitializer,this.betaRegularizer,r):this.beta=null,this.built=!0}call(e,t){const n=Hb(e),r=n.shape,s=r.length;return lo((()=>{let{mean:e,variance:t}=Zp(n,this.axis,!0);const a=my(1,s);for(const e of this.axis)a[e]=r[e];const o=e=>null!=e&&e.shape.length!==s?sc(e,a):e;let i=this.scale?o(this.gamma.read()):null,l=this.center?o(this.beta.read()):null;const u=[],c=[];for(let e=0;e<s;++e)-1!==this.axis.indexOf(e)?(u.push(r[e]),c.push(1)):(u.push(1),c.push(r[e]));return e=fp(e,u),t=fp(t,u),null!=i&&(i=fp(i,c)),null!=l&&(l=fp(l,c)),Lk(n,e,t,l,i,this.epsilon)}))}getConfig(){const e={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:Vb(this.betaInitializer),gammaInitializer:Vb(this.gammaInitializer),betaRegularizer:Ev(this.betaRegularizer),gammaRegularizer:Ev(this.gammaRegularizer)},t=super.getConfig();return Object.assign(e,t),e}}Pk.className="LayerNormalization",Hi(Pk);class Bk extends rx{constructor(e){if(null==e&&(e={}),super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,null==e.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof e.padding)this.padding=[[e.padding,e.padding],[e.padding,e.padding]];else{if(e.padding=e.padding,2!==e.padding.length)throw new py(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);let t,n;if("number"==typeof e.padding[0])t=[e.padding[0],e.padding[0]],n=[e.padding[1],e.padding[1]];else{if(e.padding=e.padding,2!==e.padding[0].length)throw new py(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);if(t=e.padding[0],2!==e.padding[1].length)throw new py(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);n=e.padding[1]}this.padding=[t,n]}this.inputSpec=[new Qb({ndim:4})]}computeOutputShape(e){let t,n;return e=jb(e),"channelsFirst"===this.dataFormat?(t=null!=e[2]&&e[2]>=0?e[2]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[3]&&e[3]>=0?e[3]+this.padding[1][0]+this.padding[1][1]:null,[e[0],e[1],t,n]):(t=null!=e[1]&&e[1]>=0?e[1]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[2]&&e[2]>=0?e[2]+this.padding[1][0]+this.padding[1][1]:null,[e[0],t,n,e[3]])}call(e,t){return lo((()=>{return t=Hb(e),n=this.padding,r=this.dataFormat,lo((()=>{if(4!==t.rank)throw new py(`temporalPadding expects input tensor to be 4-D, but received a ${t.rank}-D tensor.`);if(null==n&&(n=[[1,1],[1,1]]),2!==n.length||2!==n[0].length||2!==n[1].length)throw new py("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==r&&(r="channelsLast"),"channelsLast"!==r&&"channelsFirst"!==r)throw new py(`Unknown data format: ${r}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let e;return e="channelsFirst"===r?[[0,0],[0,0],n[0],n[1]]:[[0,0],n[0],n[1],[0,0]],rh(t,e)}));var t,n,r}))}getConfig(){const e={padding:this.padding,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}function Vk(e,t,n,r,s,a){return lo((()=>{let o;Gy(s),jy(a),Hy(r),null==n&&(n=[1,1]),null==r&&(r="valid"),null==s&&(s="channelsLast"),null==a&&(a="max"),e=Pv(e,s);const i="same"===r?"same":"valid";return o="max"===a?Vp(e,t,n,i):ac(e,t,n,i),"channelsFirst"===s&&(o=Ol(o,[0,3,1,2])),o}))}function Wk(e,t,n,r,s,a){return lo((()=>{let o;Gy(s),jy(a),Hy(r),null==n&&(n=[1,1,1]),null==r&&(r="valid"),null==s&&(s="channelsLast"),null==a&&(a="max"),e=Bv(e,s);const i="same"===r?"same":"valid";return o="max"===a?Wp(e,t,n,i):oc(e,t,n,i),"channelsFirst"===s&&(o=Ol(o,[0,4,1,2,3])),o}))}Bk.className="ZeroPadding2D",Hi(Bk);class Uk extends rx{constructor(e){if(null==e.poolSize&&(e.poolSize=2),super(e),"number"==typeof e.poolSize)this.poolSize=[e.poolSize];else{if(!Array.isArray(e.poolSize)||1!==e.poolSize.length||"number"!=typeof e.poolSize[0])throw new py(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.poolSize)}`);this.poolSize=e.poolSize}if(_y(this.poolSize,"poolSize"),null==e.strides)this.strides=this.poolSize;else if("number"==typeof e.strides)this.strides=[e.strides];else{if(!Array.isArray(e.strides)||1!==e.strides.length||"number"!=typeof e.strides[0])throw new py(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.strides)}`);this.strides=e.strides}_y(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,Hy(this.padding),this.inputSpec=[new Qb({ndim:3})]}computeOutputShape(e){const t=Lv((e=jb(e))[1],this.poolSize[0],this.padding,this.strides[0]);return[e[0],t,e[2]]}call(e,t){return lo((()=>{this.invokeCallHook(e,t),e=ob(Hb(e),2);const n=this.poolingFunction(Hb(e),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return Jh(n,[2])}))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides},t=super.getConfig();return Object.assign(e,t),e}}class Gk extends Uk{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return Gy(s),Hy(r),Vk(e,t,n,r,s,"max")}}Gk.className="MaxPooling1D",Hi(Gk);class Hk extends Uk{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return Gy(s),Hy(r),Vk(e,t,n,r,s,"avg")}}Hk.className="AveragePooling1D",Hi(Hk);class jk extends rx{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(2!==e.strides.length)throw new py(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides];_y(this.poolSize,"poolSize"),_y(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Gy(this.dataFormat),Hy(this.padding),this.inputSpec=[new Qb({ndim:4})]}computeOutputShape(e){e=jb(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2];return t=Lv(t,this.poolSize[0],this.padding,this.strides[0]),n=Lv(n,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n]:[e[0],t,n,e[3]]}call(e,t){return lo((()=>(this.invokeCallHook(e,t),this.poolingFunction(Hb(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class Kk extends jk{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return Gy(s),Hy(r),Vk(e,t,n,r,s,"max")}}Kk.className="MaxPooling2D",Hi(Kk);class qk extends jk{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return Gy(s),Hy(r),Vk(e,t,n,r,s,"avg")}}qk.className="AveragePooling2D",Hi(qk);class Yk extends rx{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(3!==e.strides.length)throw new py(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides,e.strides];_y(this.poolSize,"poolSize"),_y(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Gy(this.dataFormat),Hy(this.padding),this.inputSpec=[new Qb({ndim:5})]}computeOutputShape(e){e=jb(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],r="channelsFirst"===this.dataFormat?e[4]:e[3];return t=Lv(t,this.poolSize[0],this.padding,this.strides[0]),n=Lv(n,this.poolSize[1],this.padding,this.strides[1]),r=Lv(r,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n,r]:[e[0],t,n,r,e[4]]}call(e,t){return lo((()=>(this.invokeCallHook(e,t),this.poolingFunction(Hb(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class Xk extends Yk{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return Gy(s),Hy(r),Wk(e,t,n,r,s,"max")}}Xk.className="MaxPooling3D",Hi(Xk);class Zk extends Yk{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return Gy(s),Hy(r),Wk(e,t,n,r,s,"avg")}}Zk.className="AveragePooling3D",Hi(Zk);class Qk extends rx{constructor(e){super(e),this.inputSpec=[new Qb({ndim:3})]}computeOutputShape(e){return[e[0],e[2]]}call(e,t){throw new hy}}class Jk extends Qk{constructor(e){super(e||{})}call(e,t){return lo((()=>{const t=Hb(e);return Gp(t,1)}))}}Jk.className="GlobalAveragePooling1D",Hi(Jk);class eN extends Qk{constructor(e){super(e||{})}call(e,t){return lo((()=>{const t=Hb(e);return ap(t,1)}))}}eN.className="GlobalMaxPooling1D",Hi(eN);class tN extends rx{constructor(e){super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Gy(this.dataFormat),this.inputSpec=[new Qb({ndim:4})]}computeOutputShape(e){return"channelsLast"===this.dataFormat?[e[0],e[3]]:[e[0],e[1]]}call(e,t){throw new hy}getConfig(){const e={dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class nN extends tN{call(e,t){return lo((()=>{const t=Hb(e);return"channelsLast"===this.dataFormat?Gp(t,[1,2]):Gp(t,[2,3])}))}}nN.className="GlobalAveragePooling2D",Hi(nN);class rN extends tN{call(e,t){return lo((()=>{const t=Hb(e);return"channelsLast"===this.dataFormat?ap(t,[1,2]):ap(t,[2,3])}))}}rN.className="GlobalMaxPooling2D",Hi(rN);class sN extends rx{constructor(e){super(e),this.layer=e.layer}build(e){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(e){null!=this.layer&&(this.layer.trainable=e)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(e){this.layer.setWeights(e)}getConfig(){const e={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},t=super.getConfig();return Object.assign(e,t),e}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(e)}static fromConfig(e,t,n={}){const r=ew(t.layer,n);delete t.layer;const s={layer:r};return Object.assign(s,t),new e(s)}}class aN extends sN{constructor(e){super(e),this.supportsMasking=!0}build(e){if((e=jb(e)).length<3)throw new py(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e)}`);this.inputSpec=[{shape:e}];const t=[e[0]].concat(e.slice(2));this.layer.built||(this.layer.build(t),this.layer.built=!0),super.build(e)}computeOutputShape(e){const t=[(e=jb(e))[0]].concat(e.slice(2)),n=this.layer.computeOutputShape(t),r=e[1];return[n[0],r].concat(n.slice(1))}call(e,t){return lo((()=>tk(((e,n)=>[Hb(this.layer.call(e,t)),[]]),e=Hb(e),[],!1,null,null,!1,!0)[1]))}}aN.className="TimeDistributed",Hi(aN);class oN extends sN{constructor(e){super(e);const t=e.layer.getConfig(),n={};n.className=e.layer.getClassName(),n.config=t,this.forwardLayer=ew(n),t.goBackwards=!0!==t.goBackwards;const r={};var s;if(r.className=e.layer.getClassName(),r.config=t,this.backwardLayer=ew(r),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===e.mergeMode?"concat":e.mergeMode,s=this.mergeMode,Cy(Wy,"BidirectionalMergeMode",s),e.weights)throw new hy("weights support is not implemented for Bidirectional layer yet.");this._stateful=e.layer.stateful,this.returnSequences=e.layer.returnSequences,this.returnState=e.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=e.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(e){this._trainable=e,null!=this.forwardLayer&&(this.forwardLayer.trainable=e),null!=this.backwardLayer&&(this.backwardLayer.trainable=e)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(e){const t=e.length,n=Math.floor(t/2);this.forwardLayer.setWeights(e.slice(0,n)),this.backwardLayer.setWeights(e.slice(n))}computeOutputShape(e){let t,n,r,s=this.forwardLayer.computeOutputShape(e);return Array.isArray(s)&&Array.isArray(s[0])||(s=[s]),this.returnState?(r=s.slice(1),t=s[0]):t=s[0],"concat"===this.mergeMode?(t[t.length-1]*=2,n=[t]):n=null==this.mergeMode?[t,t.slice()]:[t],this.returnState?null==this.mergeMode?n.concat(r).concat(r.slice()):[t].concat(r).concat(r.slice()):by(n)}apply(e,t){let n=null==t?null:t.initialState,r=null==t?null:t.constants;null==t&&(t={});const s=ek(e,n,r,this.numConstants);if(e=s.inputs,n=s.initialState,r=s.constants,Array.isArray(e)&&(n=e.slice(1),e=e[0]),(null==n||0===n.length)&&null==r)return super.apply(e,t);const a=[],o=[];if(null!=n){const e=n.length;if(e%2>0)throw new py("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");t.initialState=n,a.push(...n);const r=n.map((e=>new Qb({shape:e.shape})));this.forwardLayer.stateSpec=r.slice(0,e/2),this.backwardLayer.stateSpec=r.slice(e/2),o.push(...r)}if(null!=r)throw new hy("Support for constants in Bidirectional layers is not implemented yet.");const i=a[0]instanceof Jb;for(const e of a)if(e instanceof Jb!==i)throw new py("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(i){const n=[e].concat(a),r=this.inputSpec.concat(o),s=this.inputSpec;this.inputSpec=r;const i=super.apply(n,t);return this.inputSpec=s,i}return super.apply(e,t)}call(e,t){return lo((()=>{const n=t.initialState;let r,s,a,o;if(null==n)r=this.forwardLayer.call(e,t),s=this.backwardLayer.call(e,t);else{const a=n.slice(0,n.length/2),o=n.slice(n.length/2);r=this.forwardLayer.call(e,Object.assign(t,{initialState:a})),s=this.backwardLayer.call(e,Object.assign(t,{initialState:o}))}return this.returnState&&(Array.isArray(r)&&(a=r.slice(1).concat(s.slice(1))),r=r[0],s=s[0]),this.returnSequences&&(s=Ch(s,1)),"concat"===this.mergeMode?o=cb([r,s]):"sum"===this.mergeMode?o=Ii(r,s):"ave"===this.mergeMode?o=Ci(.5,Ii(r,s)):"mul"===this.mergeMode?o=Ci(r,s):null==this.mergeMode&&(o=[r,s]),this.returnState?null==this.mergeMode?o.concat(a):[o].concat(a):o}))}resetStates(e){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(e){qy(this.forwardLayer.name,(()=>{this.forwardLayer.build(e)})),qy(this.backwardLayer.name,(()=>{this.backwardLayer.build(e)})),this.built=!0}computeMask(e,t){let n;if(Array.isArray(t)&&(t=t[0]),n=this.returnSequences?null==this.mergeMode?[t,t]:t:null==this.mergeMode?[null,null]:null,this.returnState){const e=this.forwardLayer.states.map((e=>null));return Array.isArray(n)?n.concat(e).concat(e):[n].concat(e).concat(e)}return n}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(e),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(e)}getConfig(){const e={mergeMode:this.mergeMode},t=super.getConfig();return Object.assign(e,t),e}static fromConfig(e,t){const n=ew(t.layer);if(delete t.layer,null!=t.numConstants)throw new hy("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const r=t;return r.layer=n,new e(r)}}oN.className="Bidirectional",Hi(oN);class iN extends rx{constructor(e){super(e),this.scale=e.scale,e.offset?this.offset=e.offset:this.offset=0}getConfig(){const e={scale:this.scale,offset:this.offset},t=super.getConfig();return Object.assign(e,t),e}call(e,t){return lo((()=>("float32"!==(e=Hb(e)).dtype&&(e=ab(e,"float32")),Ii(Ci(e,this.scale),this.offset))))}}iN.className="Rescaling",Hi(iN);const{resizeBilinear:lN,cropAndResize:uN}=Of;class cN extends rx{constructor(e){super(e),this.height=e.height,this.width=e.width}centerCrop(e,t,n,r,s,a,o,i){return lo((()=>{let l,u=!1;const c=[t/a,n/o,(r+t)/a,(s+n)/o],p=[];3===e.rank?(u=!0,l=ed([e])):l=e;for(let e=0;e<l.shape[0];e++)p.push(c);const h=Za(p,[p.length,4]),d=Sh(0,p.length,1,"int32"),f=uN(l,h,d,[r,s],"nearest");return ab(u?Hb(fd(f)):f,i)}))}upsize(e,t,n,r){return lo((()=>ab(lN(e,[t,n]),r)))}call(e,t){return lo((()=>{const t=Hb(e),n=t.dtype,r=t.shape,s=r[r.length-3],a=r[r.length-2];let o=0;s!==this.height&&(o=Math.floor((s-this.height)/2));let i=0;return a!==this.width&&(i=Math.floor((a-this.width)/2),0===i&&(i=1)),o>=0&&i>=0?this.centerCrop(t,o,i,this.height,this.width,s,a,n):this.upsize(e,this.height,this.width,n)}))}getConfig(){const e={height:this.height,width:this.width},t=super.getConfig();return Object.assign(e,t),e}computeOutputShape(e){const t=(e=jb(e)).length-3,n=e.length-2;return e[t]=this.height,e[n]=this.width,e}}cN.className="CenterCrop",Hi(cN);class pN extends rx{constructor(e){super(e),this.numTokens=e.numTokens,e.outputMode?this.outputMode=e.outputMode:this.outputMode="multiHot"}getConfig(){const e={numTokens:this.numTokens,outputMode:this.outputMode},t=super.getConfig();return Object.assign(e,t),e}computeOutputShape(e){return null==(e=jb(e))?[this.numTokens]:"oneHot"===this.outputMode&&1!==e[e.length-1]?(e.push(this.numTokens),e):(e[e.length-1]=this.numTokens,e)}call(e,t){return lo((()=>{let n;if("int32"!==(e=Hb(e)).dtype&&(e=ab(e,"int32")),void 0!==t.countWeights){if("count"!==this.outputMode)throw new py(`countWeights is not used when outputMode !== count.\n              Received countWeights=${t.countWeights}`);n=Hb(t.countWeights)}const r=ap(e),s=op(e),a=bp(this.numTokens,r).bufferSync().get(0),o=xp(s,0).bufferSync().get(0);if(!a||!o)throw new py(`Input values must be between 0 < values <= numTokens with numTokens=${this.numTokens}`);return function(e,t,n,r){let s=Hb(e);if("int32"!==s.dtype&&(s=ab(s,"int32")),"int"===t)return s;const a=s.shape;if(0===s.rank&&(s=hp(s,-1)),"oneHot"===t&&1!==s.shape[s.shape.length-1]&&(s=hp(s,-1)),s.rank>2)throw new py(`When outputMode is not int, maximum output rank is 2 Received outputMode ${t} and input shape ${a} which would result in output rank ${s.rank}.`);const o=["multiHot","oneHot"].includes(t);let i;if(i=zc(s,void 0!==r&&"count"===t?r:[],n,o),"tfIdf"!==t)return i;if(r)return Ci(i,r);throw new py("When outputMode is 'tfIdf', weights must be provided.")}(e,this.outputMode,this.numTokens,n)}))}}pN.className="CategoryEncoding",Hi(pN);const hN=new Set(["bilinear","nearest"]);class dN extends rx{constructor(e){if(super(e),this.height=e.height,this.width=e.width,e.interpolation){if(!hN.has(e.interpolation))throw new py(`Invalid interpolation parameter: ${e.interpolation} is not implemented`);this.interpolation=e.interpolation}else this.interpolation="bilinear";this.cropToAspectRatio=Boolean(e.cropToAspectRatio)}computeOutputShape(e){const t=(e=jb(e))[2];return[this.height,this.width,t]}getConfig(){const e={height:this.height,width:this.width,interpolation:this.interpolation,cropToAspectRatio:this.cropToAspectRatio},t=super.getConfig();return Object.assign(e,t),e}call(e,t){return lo((()=>{const t=[this.height,this.width];if("bilinear"===this.interpolation)return Of.resizeBilinear(e,t,!this.cropToAspectRatio);if("nearest"===this.interpolation)return Of.resizeNearestNeighbor(e,t,!this.cropToAspectRatio);throw new Error(`Interpolation is ${this.interpolation} but only ${[...hN]} are supported`)}))}}dN.className="Resizing",Hi(dN);class fN{constructor(e){this.seed=e}next(){if(void 0!==this.seed)return this.seed++}}fN.className="RandomSeed";class mN extends rx{constructor(e){super(e),this.randomGenerator=new fN(e.seed)}getConfig(){const e={seed:this.randomGenerator.seed},t=super.getConfig();return Object.assign(e,t),e}}mN.className="BaseRandomLayer";const gN=new Set(["bilinear","nearest"]);class yN extends mN{constructor(e){super(e);const{factor:t,interpolation:n="bilinear"}=e;if(this.factor=t,Array.isArray(this.factor)&&2===this.factor.length)this.widthLower=this.factor[0],this.widthUpper=this.factor[1];else{if(Array.isArray(this.factor)||!(this.factor>0))throw new py(`Invalid factor: ${this.factor}. Must be positive number or tuple of 2 numbers`);this.widthLower=-this.factor,this.widthUpper=this.factor}if(this.widthLower<-1||this.widthUpper<-1)throw new py(`factor must have values larger than -1. Got: ${this.factor}`);if(this.widthUpper<this.widthLower)throw new py(`factor cannot have upper bound less than lower bound.\n        Got upper bound: ${this.widthUpper}.\n        Got lower bound: ${this.widthLower}\n      `);if(n){if(!gN.has(n))throw new py(`Invalid interpolation parameter: ${n} is not implemented`);this.interpolation=n}}getConfig(){const e={factor:this.factor,interpolation:this.interpolation},t=super.getConfig();return Object.assign(e,t),e}computeOutputShape(e){const t=(e=jb(e))[2];return[this.imgHeight,-1,t]}call(e,t){return lo((()=>{const t=Hb(e);this.imgHeight=t.shape[t.shape.length-3];const n=t.shape[t.shape.length-2];this.widthFactor=Nh([1],1+this.widthLower,1+this.widthUpper,"float32",this.randomGenerator.next());let r=this.widthFactor.dataSync()[0]*n;r=Math.round(r);const s=[this.imgHeight,r];switch(this.interpolation){case"bilinear":return Of.resizeBilinear(e,s);case"nearest":return Of.resizeNearestNeighbor(e,s);default:throw new Error(`Interpolation is ${this.interpolation}\n          but only ${[...gN]} are supported`)}}))}}function bN(e){return new ax(e)}function xN(e){return new Dv(e)}function wN(e){return new Av(e)}function vN(e){return new _v(e)}function kN(e){return new Rv(e)}function NN(e){return new Ov(e)}function TN(e){return new Fv(e)}function SN(e){return new Xv(e)}function IN(e){return new Gv(e)}function EN(e){return new jv(e)}function $N(e){return new Hv(e)}function CN(e){return new Kv(e)}function AN(e){return new Yv(e)}function _N(e){return new Zv(e)}function RN(e){return new Qv(e)}function DN(e){return new Jv(e)}function FN(e){return new xk(e)}function ON(e){return new yk(e)}function MN(e){return new mk(e)}function LN(e){return new gk(e)}function zN(e){return new bk(e)}function PN(e){return new wk(e)}function BN(e){return new vk(e)}function VN(e){return new kk(e)}function WN(e){return new Tk(e)}function UN(e){return new Ik(e)}function GN(e){return new $k(e)}function HN(e){return new _k(e)}function jN(e){return new Ck(e)}function KN(e){return new Ak(e)}function qN(e){return new Ek(e)}function YN(e){return new Dk(e)}function XN(e){return new zk(e)}function ZN(e){return new Pk(e)}function QN(e){return new Bk(e)}function JN(e){return new Hk(e)}function eT(e){return JN(e)}function tT(e){return JN(e)}function nT(e){return new qk(e)}function rT(e){return nT(e)}function sT(e){return nT(e)}function aT(e){return new Zk(e)}function oT(e){return aT(e)}function iT(e){return aT(e)}function lT(e){return new Jk(e)}function uT(e){return new nN(e)}function cT(e){return new eN(e)}function pT(e){return new rN(e)}function hT(e){return new Gk(e)}function dT(e){return new Kk(e)}function fT(e){return new Xk(e)}function mT(e){return new ik(e)}function gT(e){return new ok(e)}function yT(e){return new uk(e)}function bT(e){return new lk(e)}function xT(e){return new ak(e)}function wT(e){return new sk(e)}function vT(e){return new fk(e)}function kT(e){return new dk(e)}function NT(e){return new nk(e)}function TT(e){return new ck(e)}function ST(e){return new oN(e)}function IT(e){return new aN(e)}yN.className="RandomWidth",Hi(yN);const ET=cT,$T=pT,CT=hT,AT=dT;function _T(e){return new Fk(e)}function RT(e){return new Ok(e)}function DT(e){return new Mk(e)}function FT(e){return new Nk(e)}function OT(e){return new iN(e)}function MT(e){return new cN(e)}function LT(e){return new dN(e)}function zT(e){return new pN(e)}function PT(e){return new yN(e)}function BT(e,t){return pw(e,t)}function VT(e,t){return mw(e,t)}function WT(e,t){return gw(e,t)}function UT(e,t){return hw(e,t)}function GT(e,t){return yw(e,t)}function HT(e,t){return fw(e,t)}function jT(e,t){return function(e,t){return lo((()=>{const n=dw(e,t),r=function(e,t){return lo((()=>Ni(ip(Fp(Uc(e,1),Uc(t,0))),"float32")))}(e,t),s=Ii(n,r);return Ni(Gc(bp(s,0),$i(n,s),0),"float32")}))}(e,t)}function KT(e,t){return lw(e,t)}function qT(e,t){return rw(e,t)}function YT(e,t){return sw(e,t)}function XT(e,t){return sw(e,t)}function ZT(e,t){return sw(e,t)}function QT(e,t){return nw(e,t)}function JT(e,t){return nw(e,t)}function eS(e,t){return nw(e,t)}function tS(e,t){return function(e,t){return lo((()=>{const n=e.sub(t).square().sum(),r=e.sub(e.mean()).square().sum();return Bi(1).sub(n.div(r))}))}(e,t)}function nS(e){return new Sv(e)}function rS(e){return Nv(t=e),new Sv({l1:null!=t?t.l1:null,l2:0});var t}function sS(e){return Nv(t=e),new Sv({l2:null!=t?t.l2:null,l1:0});var t}class aS extends jx{constructor(){super(...arguments),this.model=null}setModel(e){if(!(e instanceof qw))throw new Error("model must be a LayersModel, not some other Container");this.model=e}}function oS(e,t){return e<t}function iS(e,t){return e>t}class lS extends aS{constructor(e){if(super(),null==e&&(e={}),e.restoreBestWeights)throw new hy("restoreBestWeights = True is not implemented in EarlyStopping yet.");this.monitor=e.monitor||"val_loss",this.minDelta=Math.abs(e.minDelta||0),this.patience=e.patience||0,this.verbose=e.verbose||0,this.mode=e.mode||"auto",this.baseline=e.baseline,-1===["auto","min","max"].indexOf(this.mode)&&(console.warn(`EarlyStopping mode '${this.mode}' is invalid. Falling back to mode 'auto'.`),this.mode="auto"),"min"===this.mode?this.monitorFunc=oS:"max"===this.mode||-1!==this.monitor.indexOf("acc")?this.monitorFunc=iS:this.monitorFunc=oS,this.monitorFunc===oS&&(this.minDelta*=-1)}async onTrainBegin(e){this.wait=0,this.stoppedEpoch=0,null!=this.baseline?this.best=this.baseline:this.best=this.monitorFunc===oS?1/0:-1/0}async onEpochEnd(e,t){await Ux(t);const n=this.getMonitorValue(t);null!=n&&(this.monitorFunc(n-this.minDelta,this.best)?(this.best=n,this.wait=0):(this.wait++,this.wait>=this.patience&&(this.stoppedEpoch=e,this.model.stopTraining=!0)))}async onTrainEnd(e){this.stoppedEpoch>0&&this.verbose&&console.log(`Epoch ${this.stoppedEpoch}: early stopping.`)}getMonitorValue(e){null==e&&(e={});const t=e[this.monitor];return null==t&&console.warn(`Metric for EarlyStopping ${this.monitor} is not available. Available metrics are: ${Object.keys(e)}`),t}}const uS={earlyStopping:function(e){return new lS(e)}};var cS,pS;Ye().registerFlag("KEEP_INTERMEDIATE_TENSORS",(()=>!1),(e=>{e&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")})),function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_QINT16=15]="DT_QINT16",e[e.DT_QUINT16=16]="DT_QUINT16",e[e.DT_UINT16=17]="DT_UINT16",e[e.DT_COMPLEX128=18]="DT_COMPLEX128",e[e.DT_HALF=19]="DT_HALF",e[e.DT_RESOURCE=20]="DT_RESOURCE",e[e.DT_VARIANT=21]="DT_VARIANT",e[e.DT_UINT32=22]="DT_UINT32",e[e.DT_UINT64=23]="DT_UINT64",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",e[e.DT_QINT16_REF=115]="DT_QINT16_REF",e[e.DT_QUINT16_REF=116]="DT_QUINT16_REF",e[e.DT_UINT16_REF=117]="DT_UINT16_REF",e[e.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",e[e.DT_HALF_REF=119]="DT_HALF_REF",e[e.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",e[e.DT_VARIANT_REF=121]="DT_VARIANT_REF",e[e.DT_UINT32_REF=122]="DT_UINT32_REF",e[e.DT_UINT64_REF=123]="DT_UINT64_REF"}(cS||(cS={})),function(e){let t;!function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))}(pS||(pS={}));const hS={};function dS(e,t){const n={tfOpName:e,category:"custom",inputs:[],attrs:[],customExecutor:t};hS[e]=n}function fS(e){return hS[e]}function mS(e){delete hS[e]}function gS(e,t,n,r,s){const a=t.inputParams[e];if(a&&void 0!==a.inputIndexStart){const e=a.inputIndexStart,o=0===a.inputIndexEnd?void 0:void 0===a.inputIndexEnd?e+1:a.inputIndexEnd,i=e<0?t.inputNames.length+e:e;if("tensor"===a.type)return yS(t.inputNames[i],n,r,s);if("tensors"===a.type){const a=t.inputs.slice(e,o);return t.inputNames.slice(e,o).filter(((e,t)=>{var n;return"NoOp"!==(null===(n=a[t])||void 0===n?void 0:n.op)})).map((e=>yS(e,n,r,s)))}const l=yS(t.inputNames[i],n,r,s),u=l.dataSync();return"number"===a.type?u[0]:Le(l.shape,u)}const o=t.attrParams[e];return o&&o.value}function yS(e,t,n,r){const[s,a]=vS(e,n);if(null!=r){const e=r.getHashTableHandleByName(s);if(null!=e)return e}const o=n.currentContextIds.find((e=>!!t[wS(s,e)]));return void 0!==o?t[wS(s,o)][a]:void 0}function bS(e,t,n){return t[wS(e,n.currentContextId)]}function xS(e,t){const[n,r,s]=vS(e,t);return[wS(n,t&&t.currentContextId),r,s]}function wS(e,t){return t?`${e}-${t}`:e}function vS(e,t){if(""===e)return["",0,void 0];const n=null!=t&&null!=t.parseNodeNameCache;if(n){const n=t.parseNodeNameCache.get(e);if(null!=n)return n}const r=e.split(":");let s;if(1===r.length)s=[e,0,void 0];else{const e=r[0],t=3===r.length?r[1]:void 0;s=[e,Number(r[r.length-1]),t]}return n&&t.parseNodeNameCache.set(e,s),s}function kS(e,t,n){let r=gS("pad",e,t,n);if("explicit"===r){r=gS("explicitPaddings",e,t,n);const s=[[0,0],[0,0],[0,0],[0,0]];for(let e=0;e<4;e++)s[e][0]=r[2*e],s[e][1]=r[2*e+1];return s}return r}function NS(e){return e.kept?e:Ti(e)}const TS=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],SS=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsFinite",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsInf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],IS=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcatV2",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListLength",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}]},{tfOpName:"TensorListResize",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"size",type:"number"}]}],ES=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}],$S=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomStandardNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniformInt",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number"},{tfName:"maxval",name:"maxval",type:"number"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}],CS=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],AS=[{tfOpName:"LowerBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"UpperBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}],_S=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}],RS=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"InitializeTable",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}]},{tfOpName:"InitializeTableV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}]}],DS=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]},{tfOpName:"ImageProjectiveTransformV3",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"transforms",type:"tensor"},{start:2,name:"outputShape",type:"number[]"},{start:3,name:"fillValue",type:"number"}],attrs:[{tfName:"interpolation",name:"interpolation",type:"string"},{tfName:"fill_mode",name:"fillMode",type:"string"}]}],FS=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BitwiseAnd",category:"logical",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}]}],OS=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"MatrixBandPart",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"numLower",type:"tensor"},{start:1,name:"numUpper",type:"tensor"}]}],MS=[{tfOpName:"EuclideanNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",defaultValue:!1}]},{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]}],LS=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cumprod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}],zS=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]},{tfOpName:"TensorScatterUpdate",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"values",type:"tensor"}]}],PS=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}],BS=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}],VS=[{tfOpName:"StaticRegexReplace",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"pattern",name:"pattern",type:"string"},{tfName:"rewrite",name:"rewrite",type:"string"},{tfName:"replace_global",name:"replaceGlobal",type:"bool"}]},{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}],WS=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"EnsureShape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}];class US{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const e=[].concat(...[S,I,E,$,C,A,_,R,D,F,O,M,L,z,P,B,V,W,U].map((e=>e.json)));this.opMappers=e.reduce(((e,t)=>(e[t.tfOpName]=t,e)),{})}transformGraph(e,t={}){const n=e.node,r=[],s=[],a=[],o=n.reduce(((e,t)=>(e[t.name]=this.mapNode(t),t.op.startsWith("Placeholder")?r.push(e[t.name]):"Const"===t.op?s.push(e[t.name]):null!=t.input&&0!==t.input.length||a.push(e[t.name]),e)),{});let i=[];const l=[];let u={},c={};null!=t&&(u=this.mapSignatureEntries(t.inputs),c=this.mapSignatureEntries(t.outputs));const p=Object.keys(o);p.forEach((e=>{const t=o[e];t.inputNames.forEach(((e,n)=>{const[r,,s]=xS(e),a=o[r];if(null!=a.outputs){const e=a.outputs.indexOf(s);if(-1!==e){const s=`${r}:${e}`;t.inputNames[n]=s}}t.inputs.push(a),a.children.push(t)}))})),0===Object.keys(c).length?p.forEach((e=>{const t=o[e];0===t.children.length&&l.push(t)})):Object.keys(c).forEach((e=>{const[t]=xS(e),n=o[t];null!=n&&(n.signatureKey=c[e],l.push(n))})),Object.keys(u).length>0?Object.keys(u).forEach((e=>{const[t]=xS(e),n=o[t];n&&(n.signatureKey=u[e],i.push(n))})):i=r;let h={};null!=e.library&&null!=e.library.function&&(h=e.library.function.reduce(((e,t)=>(e[t.signature.name]=this.mapFunction(t),e)),{}));const d={nodes:o,inputs:i,outputs:l,weights:s,placeholders:r,signature:t,functions:h};return a.length>0&&(d.initNodes=a),d}mapSignatureEntries(e){return Object.keys(e||{}).reduce(((t,n)=>(t[e[n].name]=n,t)),{})}mapNode(e){const t=fS(e.op)||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});const n={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map((e=>e.startsWith("^")?e.slice(1):e)),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr,outputs:t.outputs};return null!=t.inputs&&(n.inputParams=t.inputs.reduce(((e,t)=>(e[t.name]={type:t.type,inputIndexStart:t.start,inputIndexEnd:t.end},e)),{})),null!=t.attrs&&(n.attrParams=t.attrs.reduce(((t,n)=>{const r=n.type;let s;switch(n.type){case"string":s=HS(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=HS(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":s=tI(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=tI(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":s=KS(e.attr,n.tfName,n.defaultValue||0),void 0===s&&n.tfDeprecatedName&&(s=KS(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":s=eI(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=eI(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":s=jS(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=jS(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":s=rI(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=rI(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":s=JS(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=JS(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":s=nI(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=nI(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":s=XS(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=XS(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":s=ZS(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=ZS(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":s=YS(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=YS(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${n.type} for op: ${e.op}`)}return t[n.name]={value:s,type:r},t}),{})),n}mapFunction(e){const t=e.nodeDef,n=[];let r={};null!=t&&(r=t.reduce(((e,t)=>(e[t.name]=this.mapNode(t),"Const"===t.op&&n.push(e[t.name]),e)),{}));const s=[],a=[];e.signature.inputArg.forEach((e=>{const[t]=xS(e.name),n={name:t,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:qS(e.type),type:"dtype"}},children:[]};n.signatureKey=e.name,s.push(n),r[t]=n})),Object.keys(r).forEach((e=>{const t=r[e];t.inputNames.forEach(((e,n)=>{const[s,,a]=xS(e),o=r[s];if(null!=o.outputs){const e=o.outputs.indexOf(a);if(-1!==e){const r=`${s}:${e}`;t.inputNames[n]=r}}t.inputs.push(o),o.children.push(t)}))}));const o=e.ret;e.signature.outputArg.forEach((e=>{const[t,n]=xS(o[e.name]),s=r[t];null!=s&&(s.defaultOutput=n,a.push(s))}));const i=this.mapArgsToSignature(e);return{nodes:r,inputs:s,outputs:a,weights:n,placeholders:[],signature:i}}mapArgsToSignature(e){return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce(((e,t)=>(e[t.name]=this.mapArgToTensorInfo(t),e)),{}),outputs:e.signature.outputArg.reduce(((t,n)=>(t[n.name]=this.mapArgToTensorInfo(n,e.ret),t)),{})}}mapArgToTensorInfo(e,t){let n=e.name;return null!=t&&(n=t[n]),{name:n,dtype:e.type}}}function GS(e,t){const n=Array.isArray(e)?String.fromCharCode.apply(null,e):function(e){const t=Ye().global;if(void 0!==t.atob)return t.atob(e);if("undefined"!=typeof Buffer)return new Buffer(e,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(e);return t?n:n.toLowerCase()}function HS(e,t,n,r=!1){const s=e[t];return null!=s?GS(s.s,r):n}function jS(e,t,n){const r=e[t];return r?r.b:n}function KS(e,t,n){const r=e[t]||{},s=null!=r.i?r.i:null!=r.f?r.f:n;return"number"==typeof s?s:parseInt(s,10)}function qS(e){switch("string"==typeof e&&(e=cS[e]),e){case cS.DT_FLOAT:case cS.DT_HALF:return"float32";case cS.DT_INT32:case cS.DT_INT64:case cS.DT_INT8:case cS.DT_UINT8:return"int32";case cS.DT_BOOL:return"bool";case cS.DT_DOUBLE:return"float32";case cS.DT_STRING:return"string";case cS.DT_COMPLEX64:case cS.DT_COMPLEX128:return"complex64";default:return null}}function YS(e,t,n){const r=e[t];return r&&r.func?r.func.name:n}function XS(e,t,n){const r=e[t];return r&&r.type?qS(r.type):n}function ZS(e,t,n){const r=e[t];return r&&r.list&&r.list.type?r.list.type.map((e=>qS(e))):n}function QS(e){if(!e.unknownRank)return null!=e.dim?e.dim.map((e=>"number"==typeof e.size?e.size:parseInt(e.size,10))):[]}function JS(e,t,n){const r=e[t];return r&&r.shape?QS(r.shape):n}function eI(e,t,n){const r=e[t];return r?((r.list.f&&r.list.f.length?r.list.f:r.list.i)||[]).map((e=>"number"==typeof e?e:parseInt(e,10))):n}function tI(e,t,n,r=!1){const s=e[t];return s&&s.list&&s.list.s?s.list.s.map((e=>GS(e,r))):n}function nI(e,t,n){const r=e[t];return r&&r.list&&r.list.shape?r.list.shape.map((e=>QS(e))):n}function rI(e,t,n){const r=e[t];return r&&r.list&&r.list.b?r.list.b:n}class sI{constructor(e,t,n){this.node=e,this.tensorMap=t,this.context=n,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map((e=>this.getInput(e))),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce(((e,t)=>(e[t]=this.getAttr(t),e)),{}))}getInput(e){return yS(e,this.tensorMap,this.context)}getAttr(e,t){const n=this.node.rawAttrs[e];if(null!=n.tensor)return yS(e,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return KS(this.node.rawAttrs,e,t);if(null!=n.s)return HS(this.node.rawAttrs,e,t);if(null!=n.b)return jS(this.node.rawAttrs,e,t);if(null!=n.shape)return JS(this.node.rawAttrs,e,t);if(null!=n.type)return XS(this.node.rawAttrs,e,t);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return eI(this.node.rawAttrs,e,t);if(null!=n.list.s)return tI(this.node.rawAttrs,e,t);if(null!=n.list.shape)return nI(this.node.rawAttrs,e,t);if(null!=n.list.b)return rI(this.node.rawAttrs,e,t);if(null!=n.list.type)return ZS(this.node.rawAttrs,e,t)}return t}}function aI(e,t,n=""){if("number"!=typeof e&&"number"!=typeof t){oe(e.length===t.length,(()=>n+` Shapes ${e} and ${t} must match`));for(let r=0;r<e.length;r++){const s=e[r],a=t[r];oe(s<0||a<0||s===a,(()=>n+` Shapes ${e} and ${t} must match`))}}}function oI(e){return"number"!=typeof e&&!e.some((e=>e<0))}function iI(e,t,n){let r=lI(e,n);const s=!oI(r);if(s&&0===t.length)throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${r}`);if(s&&t.forEach((e=>{r=lI(e.shape,r)})),!oI(r))throw new Error(`Non-fully-defined elementShape: ${r}`);return r}function lI(e,t){if("number"==typeof e)return t;if("number"==typeof t)return e;if(e.length!==t.length)throw new Error(`Incompatible ranks during merge: ${e} vs. ${t}`);const n=[];for(let r=0;r<e.length;++r){const s=e[r],a=t[r];if(s>=0&&a>=0&&s!==a)throw new Error(`Incompatible shape during merge: ${e} vs. ${t}`);n[r]=s>=0?s:a}return n}class uI{constructor(e,t,n,r,s,a,o){this.name=e,this.dtype=t,this.maxSize=n,this.elementShape=r,this.identicalElementShapes=s,this.dynamicSize=a,this.clearAfterRead=o,this.tensors=[],this.closed_=!1,this.idTensor=Bi(0),co(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.tensor.id)||t.tensor.dispose()})),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||e>=this.size())throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);const t=this.tensors[e];if(t.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor}readMany(e){return e.map((e=>this.read(e)))}write(e,t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[e]||{};if(t.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},\n          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=t.shape),aI(this.elementShape,t.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${e}.`),n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);if(n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);n.tensor=t,co(t),n.written=!0,this.tensors[e]=n}writeMany(e,t){if(e.length!==t.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);e.forEach(((e,n)=>this.write(e,t[n])))}gather(e,t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);if(e)e=e.slice(0,this.size());else{e=[];for(let t=0;t<this.size();t++)e.push(t)}if(0===e.length)return Za([],[0].concat(this.elementShape));const n=this.readMany(e);return aI(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),ed(n,0)}concat(e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);if(0===this.size())return Za([],[0].concat(this.elementShape));const t=[];for(let e=0;e<this.size();e++)t.push(e);const n=this.readMany(t);return aI(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),ic(n,0)}scatter(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const n=Math.max(...e);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(e,fd(t,0))}split(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);let n=0;const r=e.map((e=>(n+=e,n)));if(n!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${t.shape}`);if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);const s=0===n?0:t.size/n,a=[];lo((()=>{t=sc(t,[1,n,s]);for(let n=0;n<e.length;++n){const o=[0,0===n?0:r[n-1],0],i=[1,e[n],s];a[n]=sc(uc(t,o,i),this.elementShape)}return a}));const o=[];for(let t=0;t<e.length;t++)o[t]=t;this.writeMany(o,a)}}class cI{get id(){return this.idTensor.id}constructor(e,t,n,r=-1){this.tensors=e,this.elementShape=t,this.elementDtype=n,null!=e&&e.forEach((e=>{if(n!==e.dtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${e.dtype}`);aI(t,e.shape,"TensorList shape mismatch: "),co(e)})),this.idTensor=Bi(0),this.maxNumElements=r,co(this.idTensor)}copy(){return new cI([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.id)||t.dispose()})),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(e,t,n=-1){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);aI(e,this.elementShape,"TensorList shape mismatch: ");const r=iI(this.elementShape,this.tensors,e);return lo((()=>{const e=this.tensors.map((e=>sc(e,r)));return ed(e,0)}))}popBack(e,t){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const n=iI(this.elementShape,this.tensors,e),r=this.tensors.pop();return r.kept=!1,aI(r.shape,e,"TensorList shape mismatch: "),sc(r,n)}pushBack(e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(aI(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");co(e),this.tensors.push(e)}resize(e){if(e<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${e}`);if(-1!==this.maxNumElements&&e>this.maxNumElements)throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);const t=new cI([],this.elementShape,this.elementDtype,this.maxNumElements);t.tensors.length=e;for(let n=0;n<Math.min(this.tensors.length,e);++n)t.tensors[n]=this.tensors[n];return t}getItem(e,t,n){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(e<0||e>this.tensors.length)throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[e])throw new Error(`element at index ${e} is null.`);aI(this.tensors[e].shape,t,"TensorList shape mismatch: ");const r=iI(this.elementShape,this.tensors,t);return sc(this.tensors[e],r)}setItem(e,t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(e<0||-1!==this.maxNumElements&&e>=this.maxNumElements)throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);aI(this.elementShape,t.shape,"TensorList shape mismatch: "),co(t),null!=this.tensors[e]&&(this.tensors[e].kept=!1),this.tensors[e]=t}gather(e,t,n){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);aI(this.elementShape,n,"TensorList shape mismatch: "),e=e.slice(0,this.size());const r=iI(this.elementShape,this.tensors,n);return 0===e.length?Za([],[0].concat(r)):lo((()=>{const t=e.map((e=>sc(this.tensors[e],r)));return ed(t,0)}))}concat(e,t){if(e&&e!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);aI(this.elementShape,t,"TensorList shape mismatch: ");const n=iI(this.elementShape,this.tensors,t);return 0===this.size()?Za([],[0].concat(n)):lo((()=>{const e=this.tensors.map((e=>sc(e,n)));return ic(e,0)}))}}function pI(e,t,n){const[r,s]=gS("fusedOps",e,t,n),a="biasadd"===r,o=!a,i="prelu"===s,l="fusedbatchnorm"===r,u=gS("numArgs",e,t,n);if(a){if(i&&2!==u)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&a&&1!==u)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(l)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");const c=gS("strides",e,t,n),p=kS(e,t,n),h=gS("dataFormat",e,t,n).toUpperCase(),d=gS("dilations",e,t,n);let[f,m]=gS("args",e,t,n);return o&&(m=f,f=void 0),{stride:c,pad:p,dataFormat:h,dilations:d,biasArg:f,preluArg:m,activationFunc:s,leakyreluAlpha:gS("leakyreluAlpha",e,t,n)}}function hI(e,t,n){return{boxes:gS("boxes",e,t,n),scores:gS("scores",e,t,n),maxOutputSize:gS("maxOutputSize",e,t,n),iouThreshold:gS("iouThreshold",e,t,n),scoreThreshold:gS("scoreThreshold",e,t,n),softNmsSigma:gS("softNmsSigma",e,t,n)}}class dI{get id(){return this.handle.id}constructor(e,t){this.keyDType=e,this.valueDType=t,this.handle=Bi(0),this.tensorMap=new Map,co(this.handle)}clearAndClose(){this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return Bi(this.size(),"int32")}async import(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),lo((()=>{const e=fd(t),r=n.length,s=e.length;oe(r===s,(()=>`The number of elements doesn't match, keys has ${r} elements, the values has ${s} elements.`));for(let t=0;t<r;t++){const r=n[t],s=e[t];co(s),this.tensorMap.set(r,s)}return this.handle}))}async find(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return lo((()=>{const e=[];for(let r=0;r<n.length;r++){const s=n[r],a=this.findWithDefault(s,t);e.push(a)}return ed(e)}))}findWithDefault(e,t){const n=this.tensorMap.get(e);return null!=n?n:t}checkKeyAndValueTensor(e,t){if(e.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`);if(t.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${t.dtype}`)}}function fI(e,t,n,r,s=lo){const a=((e,t,n)=>{switch(e.category){case"arithmetic":return s((()=>((e,t,n,r=G)=>{switch(e.op){case"BiasAdd":case"AddV2":case"Add":return[r.add(gS("a",e,t,n),gS("b",e,t,n))];case"AddN":return[r.addN(gS("tensors",e,t,n))];case"FloorMod":case"Mod":return[r.mod(gS("a",e,t,n),gS("b",e,t,n))];case"Mul":return[r.mul(gS("a",e,t,n),gS("b",e,t,n))];case"RealDiv":case"Div":return[r.div(gS("a",e,t,n),gS("b",e,t,n))];case"DivNoNan":return[r.divNoNan(gS("a",e,t,n),gS("b",e,t,n))];case"FloorDiv":return[r.floorDiv(gS("a",e,t,n),gS("b",e,t,n))];case"Sub":return[r.sub(gS("a",e,t,n),gS("b",e,t,n))];case"Minimum":return[r.minimum(gS("a",e,t,n),gS("b",e,t,n))];case"Maximum":return[r.maximum(gS("a",e,t,n),gS("b",e,t,n))];case"Pow":return[r.pow(gS("a",e,t,n),gS("b",e,t,n))];case"SquaredDifference":return[r.squaredDifference(gS("a",e,t,n),gS("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"basic_math":return s((()=>((e,t,n,r=G)=>{switch(e.op){case"Abs":case"ComplexAbs":return[r.abs(gS("x",e,t,n))];case"Acos":return[r.acos(gS("x",e,t,n))];case"Acosh":return[r.acosh(gS("x",e,t,n))];case"Asin":return[r.asin(gS("x",e,t,n))];case"Asinh":return[r.asinh(gS("x",e,t,n))];case"Atan":return[r.atan(gS("x",e,t,n))];case"Atan2":return[r.atan2(gS("x",e,t,n),gS("y",e,t,n))];case"Atanh":return[r.atanh(gS("x",e,t,n))];case"Ceil":return[r.ceil(gS("x",e,t,n))];case"Complex":return[r.complex(gS("real",e,t,n),gS("imag",e,t,n))];case"Cos":return[r.cos(gS("x",e,t,n))];case"Cosh":return[r.cosh(gS("x",e,t,n))];case"Elu":return[r.elu(gS("x",e,t,n))];case"Erf":return[r.erf(gS("x",e,t,n))];case"Exp":return[r.exp(gS("x",e,t,n))];case"Expm1":return[r.expm1(gS("x",e,t,n))];case"Floor":return[r.floor(gS("x",e,t,n))];case"Log":return[r.log(gS("x",e,t,n))];case"Log1p":return[r.log1p(gS("x",e,t,n))];case"Imag":return[r.imag(gS("x",e,t,n))];case"Neg":return[r.neg(gS("x",e,t,n))];case"Reciprocal":return[r.reciprocal(gS("x",e,t,n))];case"Real":return[r.real(gS("x",e,t,n))];case"Relu":return[r.relu(gS("x",e,t,n))];case"Round":return[r.round(gS("x",e,t,n))];case"Selu":return[r.selu(gS("x",e,t,n))];case"Sigmoid":return[r.sigmoid(gS("x",e,t,n))];case"Sin":return[r.sin(gS("x",e,t,n))];case"Sign":return[r.sign(gS("x",e,t,n))];case"Sinh":return[r.sinh(gS("x",e,t,n))];case"Softplus":return[r.softplus(gS("x",e,t,n))];case"Sqrt":return[r.sqrt(gS("x",e,t,n))];case"Square":return[r.square(gS("x",e,t,n))];case"Tanh":return[r.tanh(gS("x",e,t,n))];case"Tan":return[r.tan(gS("x",e,t,n))];case"ClipByValue":return[r.clipByValue(gS("x",e,t,n),gS("clipValueMin",e,t,n),gS("clipValueMax",e,t,n))];case"Relu6":return[r.relu6(gS("x",e,t,n))];case"Rsqrt":return[r.rsqrt(yS(e.inputNames[0],t,n))];case"LeakyRelu":return[r.leakyRelu(gS("x",e,t,n),gS("alpha",e,t,n))];case"Prelu":return[r.prelu(gS("x",e,t,n),gS("alpha",e,t,n))];case"IsNan":return[r.isNaN(yS(e.inputNames[0],t,n))];case"IsInf":return[r.isInf(yS(e.inputNames[0],t,n))];case"IsFinite":return[r.isFinite(yS(e.inputNames[0],t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"control":return(async(e,t,n)=>{switch(e.op){case"If":case"StatelessIf":{const r=gS("thenBranch",e,t,n),s=gS("elseBranch",e,t,n),a=gS("cond",e,t,n),o=gS("args",e,t,n);return(await a.data())[0]?n.functionMap[r].executeFunctionAsync(o,n.tensorArrayMap,n.tensorListMap):n.functionMap[s].executeFunctionAsync(o,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{const r=gS("body",e,t,n),s=gS("cond",e,t,n),a=gS("args",e,t,n),o=await n.functionMap[s].executeFunctionAsync(a,n.tensorArrayMap,n.tensorListMap),i=a.map((e=>e.id));let l=await o[0].data();o.forEach((e=>{e.kept||-1!==i.indexOf(e.id)||e.dispose()}));let u=a;for(;l[0];){const e=u;u=await n.functionMap[r].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap);const t=u.map((e=>e.id));e.forEach((e=>{e.kept||-1!==i.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}));const a=await n.functionMap[s].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap);l=await a[0].data(),a.forEach((e=>{e.kept||-1!==i.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}))}return u}case"LoopCond":return[NS(gS("pred",e,t,n))];case"Switch":{const r=gS("pred",e,t,n);let s=gS("data",e,t,n);return s.kept||(s=NS(s)),(await r.data())[0]?[void 0,s]:[s,void 0]}case"Merge":{const r=e.inputNames.find((e=>void 0!==yS(e,t,n)));return r?[NS(yS(r,t,n))]:void 0}case"Enter":{const r=gS("frameName",e,t,n),s=gS("tensor",e,t,n);return n.enterFrame(r),[NS(s)]}case"Exit":{const r=gS("tensor",e,t,n);return n.exitFrame(),[NS(r)]}case"NextIteration":{const r=gS("tensor",e,t,n);return n.nextIteration(),[NS(r)]}case"TensorArrayV3":{const r=gS("size",e,t,n),s=gS("dtype",e,t,n),a=gS("elementShape",e,t,n),o=gS("dynamicSize",e,t,n),i=gS("clearAfterRead",e,t,n),l=gS("identicalElementShapes",e,t,n),u=gS("name",e,t,n),c=new uI(u,s,r,a,l,o,i);return n.addTensorArray(c),[c.idTensor,Bi(1)]}case"TensorArrayWriteV3":{const r=gS("tensorArrayId",e,t,n),s=gS("index",e,t,n),a=gS("tensor",e,t,n),o=n.getTensorArray(r.id);return o.write(s,a),[o.idTensor]}case"TensorArrayReadV3":{const r=gS("tensorArrayId",e,t,n),s=gS("index",e,t,n);return[n.getTensorArray(r.id).read(s)]}case"TensorArrayGatherV3":{const r=gS("tensorArrayId",e,t,n),s=gS("indices",e,t,n),a=gS("dtype",e,t,n);return[n.getTensorArray(r.id).gather(s,a)]}case"TensorArrayScatterV3":{const r=gS("tensorArrayId",e,t,n),s=gS("indices",e,t,n),a=gS("tensor",e,t,n),o=n.getTensorArray(r.id);return o.scatter(s,a),[o.idTensor]}case"TensorArrayConcatV3":{const r=gS("tensorArrayId",e,t,n),s=n.getTensorArray(r.id),a=gS("dtype",e,t,n);return[s.concat(a)]}case"TensorArraySplitV3":{const r=gS("tensorArrayId",e,t,n),s=gS("tensor",e,t,n),a=gS("lengths",e,t,n),o=n.getTensorArray(r.id);return o.split(a,s),[o.idTensor]}case"TensorArraySizeV3":{const r=gS("tensorArrayId",e,t,n);return[Bi(n.getTensorArray(r.id).size(),"int32")]}case"TensorArrayCloseV3":{const r=gS("tensorArrayId",e,t,n),s=n.getTensorArray(r.id);return s.clearAndClose(),[s.idTensor]}case"TensorListSetItem":{const r=gS("tensorListId",e,t,n),s=gS("index",e,t,n),a=gS("tensor",e,t,n),o=n.getTensorList(r.id);return o.setItem(s,a),[o.idTensor]}case"TensorListGetItem":{const r=gS("tensorListId",e,t,n),s=gS("index",e,t,n),a=gS("elementShape",e,t,n),o=gS("elementDType",e,t,n);return[n.getTensorList(r.id).getItem(s,a,o)]}case"TensorListScatterV2":case"TensorListScatter":{const r=gS("indices",e,t,n),s=function(e,t,n,r){if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const s=Math.max(...t);if(null!=r&&-1!==r&&s>=r)throw new Error(`Max index must be < array size (${s}  vs. ${r})`);const a=new cI([],n,e.dtype,r),o=fd(e,0);return t.forEach(((e,t)=>{a.setItem(e,o[t])})),a}(gS("tensor",e,t,n),r,gS("elementShape",e,t,n),gS("numElements",e,t,n));return n.addTensorList(s),[s.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const r=gS("elementShape",e,t,n),s=gS("elementDType",e,t,n);let a;a="TensorListReserve"===e.op?"numElements":"maxNumElements";const o=gS(a,e,t,n),i=function(e,t,n,r){return new cI([],e,t,r)}(r,s,0,"TensorListReserve"===e.op?-1:o);return n.addTensorList(i),[i.idTensor]}case"TensorListGather":{const r=gS("tensorListId",e,t,n),s=gS("indices",e,t,n),a=gS("elementShape",e,t,n),o=gS("elementDType",e,t,n);return[n.getTensorList(r.id).gather(s,o,a)]}case"TensorListStack":{const r=gS("tensorListId",e,t,n),s=gS("elementShape",e,t,n),a=gS("elementDType",e,t,n),o=gS("numElements",e,t,n);return[n.getTensorList(r.id).stack(s,a,o)]}case"TensorListFromTensor":{const r=function(e,t,n){const r=e.dtype;if(e.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${e.shape}`);if(e.dtype!==n)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${n}`);aI(e.shape.slice(1),t,"TensorList shape mismatch: ");const s=fd(e);return new cI(s,t,r)}(gS("tensor",e,t,n),gS("elementShape",e,t,n),gS("elementDType",e,t,n));return n.addTensorList(r),[r.idTensor]}case"TensorListConcat":case"TensorListConcatV2":{const r=gS("tensorListId",e,t,n),s=n.getTensorList(r.id),a=gS("dtype",e,t,n),o=gS("elementShape",e,t,n);return[s.concat(a,o)]}case"TensorListPushBack":{const r=gS("tensorListId",e,t,n),s=gS("tensor",e,t,n),a=n.getTensorList(r.id);return a.pushBack(s),[a.idTensor]}case"TensorListPopBack":{const r=gS("tensorListId",e,t,n),s=gS("elementShape",e,t,n),a=gS("elementDType",e,t,n);return[n.getTensorList(r.id).popBack(s,a)]}case"TensorListSplit":{const r=gS("tensor",e,t,n),s=gS("elementShape",e,t,n),a=function(e,t,n){let r=0;const s=t.map((e=>(r+=e,r)));if(r!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${r}, and tensor's shape is: ${e.shape}`);const a=lI(e.shape.slice(1),n),o=0===r?0:e.size/r,i=lo((()=>{const n=[];e=sc(e,[1,r,o]);for(let r=0;r<t.length;++r){const i=[0,0===r?0:s[r-1],0],l=[1,t[r],o];n[r]=sc(uc(e,i,l),a)}return e.dispose(),n})),l=new cI([],n,e.dtype,t.length);for(let e=0;e<i.length;e++)l.setItem(e,i[e]);return l}(r,gS("lengths",e,t,n),s);return n.addTensorList(a),[a.idTensor]}case"TensorListLength":{const r=gS("tensorListId",e,t,n);return[Bi(n.getTensorList(r.id).size(),"int32")]}case"TensorListResize":{const r=gS("tensorListId",e,t,n),s=gS("size",e,t,n),a=n.getTensorList(r.id).resize(s);return n.addTensorList(a),[a.idTensor]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n);case"convolution":return s((()=>((e,t,n,r=G)=>{switch(e.op){case"Conv1D":{const s=gS("stride",e,t,n),a=gS("pad",e,t,n),o=gS("dataFormat",e,t,n).toUpperCase(),i=gS("dilation",e,t,n);return[r.conv1d(gS("x",e,t,n),gS("filter",e,t,n),s,a,o,i)]}case"Conv2D":{const s=gS("strides",e,t,n),a=kS(e,t,n),o=gS("dataFormat",e,t,n).toUpperCase(),i=gS("dilations",e,t,n);return[r.conv2d(gS("x",e,t,n),gS("filter",e,t,n),[s[1],s[2]],a,o,[i[1],i[2]])]}case"_FusedConv2D":{const{stride:s,pad:a,dataFormat:o,dilations:i,biasArg:l,preluArg:u,activationFunc:c,leakyreluAlpha:p}=pI(e,t,n);return[r.fused.conv2d({x:gS("x",e,t,n),filter:gS("filter",e,t,n),strides:[s[1],s[2]],pad:a,dataFormat:o,dilations:[i[1],i[2]],bias:l,activation:c,preluActivationWeights:u,leakyreluAlpha:p})]}case"FusedDepthwiseConv2dNative":{const{stride:s,pad:a,dataFormat:o,dilations:i,biasArg:l,preluArg:u,activationFunc:c,leakyreluAlpha:p}=pI(e,t,n);return[r.fused.depthwiseConv2d({x:gS("x",e,t,n),filter:gS("filter",e,t,n),strides:[s[1],s[2]],pad:a,dataFormat:o,dilations:[i[1],i[2]],bias:l,activation:c,preluActivationWeights:u,leakyreluAlpha:p})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const s=gS("outputShape",e,t,n),a=gS("strides",e,t,n),o=kS(e,t,n);return[r.conv2dTranspose(gS("x",e,t,n),gS("filter",e,t,n),s,[a[1],a[2]],o)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const s=gS("strides",e,t,n),a=kS(e,t,n),o=gS("dilations",e,t,n),i=gS("dataFormat",e,t,n).toUpperCase();return[r.depthwiseConv2d(gS("input",e,t,n),gS("filter",e,t,n),[s[1],s[2]],a,i,[o[1],o[2]])]}case"Conv3D":{const s=gS("strides",e,t,n),a=gS("pad",e,t,n),o=gS("dataFormat",e,t,n).toUpperCase(),i=gS("dilations",e,t,n);return[r.conv3d(gS("x",e,t,n),gS("filter",e,t,n),[s[1],s[2],s[3]],a,o,[i[1],i[2],i[3]])]}case"AvgPool":{const s=gS("strides",e,t,n),a=gS("pad",e,t,n),o=gS("kernelSize",e,t,n);return[r.avgPool(gS("x",e,t,n),[o[1],o[2]],[s[1],s[2]],a)]}case"MaxPool":{const s=gS("strides",e,t,n),a=gS("pad",e,t,n),o=gS("kernelSize",e,t,n);return[r.maxPool(gS("x",e,t,n),[o[1],o[2]],[s[1],s[2]],a)]}case"MaxPoolWithArgmax":{const s=gS("strides",e,t,n),a=gS("pad",e,t,n),o=gS("kernelSize",e,t,n),i=gS("includeBatchInIndex",e,t,n),{result:l,indexes:u}=r.maxPoolWithArgmax(gS("x",e,t,n),[o[1],o[2]],[s[1],s[2]],a,i);return[l,u]}case"AvgPool3D":{const s=gS("strides",e,t,n),a=gS("pad",e,t,n),o=gS("kernelSize",e,t,n);return[r.avgPool3d(gS("x",e,t,n),[o[1],o[2],o[3]],[s[1],s[2],s[3]],a)]}case"MaxPool3D":{const s=gS("strides",e,t,n),a=gS("pad",e,t,n),o=gS("kernelSize",e,t,n);return[r.maxPool3d(gS("x",e,t,n),[o[1],o[2],o[3]],[s[1],s[2],s[3]],a)]}case"Dilation2D":{const s=gS("strides",e,t,n),a=gS("pad",e,t,n),o=gS("dilations",e,t,n),i=s[1],l=s[2],u=o[1],c=o[2];return[r.dilation2d(gS("x",e,t,n),gS("filter",e,t,n),[i,l],a,[u,c],"NHWC")]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"creation":return s((()=>((e,t,n,r=G)=>{switch(e.op){case"Fill":{const s=gS("shape",e,t,n),a=gS("dtype",e,t,n),o=gS("value",e,t,n);return[r.fill(s,o,a)]}case"LinSpace":{const s=gS("start",e,t,n),a=gS("stop",e,t,n),o=gS("num",e,t,n);return[r.linspace(s,a,o)]}case"Multinomial":{const s=gS("logits",e,t,n),a=gS("numSamples",e,t,n),o=gS("seed",e,t,n);return[r.multinomial(s,a,o)]}case"OneHot":{const s=gS("indices",e,t,n),a=gS("depth",e,t,n),o=gS("onValue",e,t,n),i=gS("offValue",e,t,n),l=gS("dtype",e,t,n);return[r.oneHot(s,a,o,i,l)]}case"Ones":return[r.ones(gS("shape",e,t,n),gS("dtype",e,t,n))];case"OnesLike":return[r.onesLike(gS("x",e,t,n))];case"RandomStandardNormal":return[r.randomStandardNormal(gS("shape",e,t,n),gS("dtype",e,t,n),gS("seed",e,t,n))];case"RandomUniform":return[r.randomUniform(gS("shape",e,t,n),gS("minval",e,t,n),gS("maxval",e,t,n),gS("dtype",e,t,n))];case"RandomUniformInt":return[r.randomUniformInt(gS("shape",e,t,n),gS("minval",e,t,n),gS("maxval",e,t,n),gS("seed",e,t,n))];case"Range":{const s=gS("start",e,t,n),a=gS("stop",e,t,n),o=gS("step",e,t,n);return[r.range(s,a,o,gS("dtype",e,t,n))]}case"TruncatedNormal":{const s=gS("shape",e,t,n),a=gS("mean",e,t,n),o=gS("stdDev",e,t,n),i=gS("seed",e,t,n);return[r.truncatedNormal(s,a,o,gS("dtype",e,t,n),i)]}case"Zeros":return[r.zeros(gS("shape",e,t,n),gS("dtype",e,t,n))];case"ZerosLike":return[r.zerosLike(gS("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"dynamic":return(async(e,t,n,r,s=G)=>{switch(e.op){case"NonMaxSuppressionV5":{const{boxes:r,scores:a,maxOutputSize:o,iouThreshold:i,scoreThreshold:l,softNmsSigma:u}=hI(e,t,n),c=await s.image.nonMaxSuppressionWithScoreAsync(r,a,o,i,l,u);return[c.selectedIndices,c.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:r,scores:a,maxOutputSize:o,iouThreshold:i,scoreThreshold:l}=hI(e,t,n),u=gS("padToMaxOutputSize",e,t,n),c=await s.image.nonMaxSuppressionPaddedAsync(r,a,o,i,l,u);return[c.selectedIndices,c.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:r,scores:a,maxOutputSize:o,iouThreshold:i,scoreThreshold:l}=hI(e,t,n);return[await s.image.nonMaxSuppressionAsync(r,a,o,i,l)]}case"Where":{const r=s.cast(gS("condition",e,t,n),"bool"),a=[await s.whereAsync(r)];return r.dispose(),a}case"ListDiff":return s.setdiff1dAsync(gS("x",e,t,n),gS("y",e,t,n));default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n);case"evaluation":return s((()=>((e,t,n,r=G)=>{switch(e.op){case"LowerBound":{const s=gS("sortedSequence",e,t,n),a=gS("values",e,t,n);return[r.lowerBound(s,a)]}case"TopKV2":{const s=gS("x",e,t,n),a=gS("k",e,t,n),o=gS("sorted",e,t,n),i=r.topk(s,a,o);return[i.values,i.indices]}case"UpperBound":{const s=gS("sortedSequence",e,t,n),a=gS("values",e,t,n);return[r.upperBound(s,a)]}case"Unique":{const s=gS("x",e,t,n),a=r.unique(s);return[a.values,a.indices]}case"UniqueV2":{const s=gS("x",e,t,n),a=gS("axis",e,t,n),o=r.unique(s,a);return[o.values,o.indices]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"image":return s((()=>((e,t,n,r=G)=>{switch(e.op){case"ResizeBilinear":{const s=gS("images",e,t,n),a=gS("size",e,t,n),o=gS("alignCorners",e,t,n),i=gS("halfPixelCenters",e,t,n);return[r.image.resizeBilinear(s,[a[0],a[1]],o,i)]}case"ResizeNearestNeighbor":{const s=gS("images",e,t,n),a=gS("size",e,t,n),o=gS("alignCorners",e,t,n),i=gS("halfPixelCenters",e,t,n);return[r.image.resizeNearestNeighbor(s,[a[0],a[1]],o,i)]}case"CropAndResize":{const s=gS("image",e,t,n),a=gS("boxes",e,t,n),o=gS("boxInd",e,t,n),i=gS("cropSize",e,t,n),l=gS("method",e,t,n),u=gS("extrapolationValue",e,t,n);return[r.image.cropAndResize(s,a,o,i,l,u)]}case"ImageProjectiveTransformV3":{const s=gS("images",e,t,n),a=gS("transforms",e,t,n),o=gS("outputShape",e,t,n),i=gS("fillValue",e,t,n),l=gS("interpolation",e,t,n),u=gS("fillMode",e,t,n);return[r.image.transform(s,a,l.toLowerCase(),u.toLowerCase(),i,o)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"graph":return s((()=>((e,t,n,r=G)=>{switch(e.op){case"Const":return t[e.name];case"PlaceholderWithDefault":const s=gS("default",e,t,n);return[yS(e.name,t,n)||s];case"Placeholder":return[yS(e.name,t,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":case"Snapshot":return[NS(gS("x",e,t,n))];case"IdentityN":return gS("x",e,t,n).map((e=>NS(e)));case"Shape":return[r.tensor1d(gS("x",e,t,n).shape,"int32")];case"ShapeN":return gS("x",e,t,n).map((e=>r.tensor1d(e.shape)));case"Size":return[r.scalar(gS("x",e,t,n).size,"int32")];case"Rank":return[r.scalar(gS("x",e,t,n).rank,"int32")];case"NoOp":return[r.scalar(1)];case"Print":const a=gS("x",e,t,n),o=gS("data",e,t,n),i=gS("message",e,t,n),l=gS("summarize",e,t,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(i);for(let e=0;e<o.length;e++)console.log(Array.prototype.slice.call(o[e].dataSync()).slice(0,l));return[a];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"logical":return s((()=>((e,t,n,r=G)=>{switch(e.op){case"Equal":return[r.equal(gS("a",e,t,n),gS("b",e,t,n))];case"NotEqual":return[r.notEqual(gS("a",e,t,n),gS("b",e,t,n))];case"Greater":return[r.greater(gS("a",e,t,n),gS("b",e,t,n))];case"GreaterEqual":return[r.greaterEqual(gS("a",e,t,n),gS("b",e,t,n))];case"Less":return[r.less(gS("a",e,t,n),gS("b",e,t,n))];case"LessEqual":return[r.lessEqual(gS("a",e,t,n),gS("b",e,t,n))];case"LogicalAnd":return[r.logicalAnd(gS("a",e,t,n),gS("b",e,t,n))];case"LogicalNot":return[r.logicalNot(gS("a",e,t,n))];case"LogicalOr":return[r.logicalOr(gS("a",e,t,n),gS("b",e,t,n))];case"Select":case"SelectV2":return[r.where(gS("condition",e,t,n),gS("a",e,t,n),gS("b",e,t,n))];case"BitwiseAnd":return[r.bitwiseAnd(gS("a",e,t,n),gS("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"matrices":return s((()=>((e,t,n,r=G)=>{switch(e.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[r.matMul(gS("a",e,t,n),gS("b",e,t,n),gS("transposeA",e,t,n),gS("transposeB",e,t,n))];case"Einsum":return[r.einsum(gS("equation",e,t,n),...gS("tensors",e,t,n))];case"Transpose":return[r.transpose(gS("x",e,t,n),gS("perm",e,t,n))];case"_FusedMatMul":const[s,a]=gS("fusedOps",e,t,n),o="biasadd"===s,i="prelu"===a,l=gS("numArgs",e,t,n),u=gS("leakyreluAlpha",e,t,n);if(o){if(i&&2!==l)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==l)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[c,p]=gS("args",e,t,n);return[r.fused.matMul({a:gS("a",e,t,n),b:gS("b",e,t,n),transposeA:gS("transposeA",e,t,n),transposeB:gS("transposeB",e,t,n),bias:c,activation:a,preluActivationWeights:p,leakyreluAlpha:u})];case"MatrixBandPart":return[r.linalg.bandPart(gS("a",e,t,n),gS("numLower",e,t,n),gS("numUpper",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"normalization":return s((()=>((e,t,n,r=G)=>{switch(e.op){case"EuclideanNorm":return[r.euclideanNorm(gS("x",e,t,n),gS("axis",e,t,n),gS("keepDims",e,t,n))];case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[r.batchNorm(gS("x",e,t,n),gS("mean",e,t,n),gS("variance",e,t,n),gS("offset",e,t,n),gS("scale",e,t,n),gS("epsilon",e,t,n))];case"LRN":return[r.localResponseNormalization(gS("x",e,t,n),gS("radius",e,t,n),gS("bias",e,t,n),gS("alpha",e,t,n),gS("beta",e,t,n))];case"Softmax":return[r.softmax(gS("x",e,t,n))];case"LogSoftmax":return[r.logSoftmax(gS("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"ragged":return s((()=>((e,t,n,r=G)=>{switch(e.op){case"RaggedGather":{const{outputNestedSplits:s,outputDenseValues:a}=r.raggedGather(gS("paramsNestedSplits",e,t,n),gS("paramsDenseValues",e,t,n),gS("indices",e,t,n),gS("outputRaggedRank",e,t,n));return s.concat(a)}case"RaggedRange":{const{rtNestedSplits:s,rtDenseValues:a}=r.raggedRange(gS("starts",e,t,n),gS("limits",e,t,n),gS("splits",e,t,n));return[s,a]}case"RaggedTensorToTensor":return[r.raggedTensorToTensor(gS("shape",e,t,n),gS("values",e,t,n),gS("defaultValue",e,t,n),gS("rowPartitionTensors",e,t,n),gS("rowPartitionTypes",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"reduction":return s((()=>((e,t,n,r=G)=>{switch(e.op){case"Max":{const s=gS("axis",e,t,n),a=gS("keepDims",e,t,n);return[r.max(gS("x",e,t,n),s,a)]}case"Mean":{const s=gS("axis",e,t,n),a=gS("keepDims",e,t,n);return[r.mean(gS("x",e,t,n),s,a)]}case"Min":{const s=gS("axis",e,t,n),a=gS("keepDims",e,t,n);return[r.min(gS("x",e,t,n),s,a)]}case"Sum":{const s=gS("axis",e,t,n),a=gS("keepDims",e,t,n);return[r.sum(gS("x",e,t,n),s,a)]}case"All":{const s=gS("axis",e,t,n),a=gS("keepDims",e,t,n);return[r.all(gS("x",e,t,n),s,a)]}case"Any":{const s=gS("axis",e,t,n),a=gS("keepDims",e,t,n);return[r.any(gS("x",e,t,n),s,a)]}case"ArgMax":{const s=gS("axis",e,t,n);return[r.argMax(gS("x",e,t,n),s)]}case"ArgMin":{const s=gS("axis",e,t,n);return[r.argMin(gS("x",e,t,n),s)]}case"Prod":{const s=gS("axis",e,t,n),a=gS("keepDims",e,t,n);return[r.prod(gS("x",e,t,n),s,a)]}case"Cumprod":{const s=gS("axis",e,t,n),a=gS("exclusive",e,t,n),o=gS("reverse",e,t,n);return[r.cumprod(gS("x",e,t,n),s,a,o)]}case"Cumsum":{const s=gS("axis",e,t,n),a=gS("exclusive",e,t,n),o=gS("reverse",e,t,n);return[r.cumsum(gS("x",e,t,n),s,a,o)]}case"Bincount":const s=gS("x",e,t,n),a=gS("weights",e,t,n),o=gS("size",e,t,n);return[r.bincount(s,a,o)];case"DenseBincount":{const s=gS("x",e,t,n),a=gS("weights",e,t,n),o=gS("size",e,t,n),i=gS("binaryOutput",e,t,n);return[r.denseBincount(s,a,o,i)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"slice_join":return s((()=>((e,t,n,r=G)=>{switch(e.op){case"ConcatV2":case"Concat":{const s=gS("n",e,t,n),a=gS("axis",e,t,n);let o=gS("tensors",e,t,n);return o=o.slice(0,s),[r.concat(o,a)]}case"Gather":{const s=gS("x",e,t,n),a=gS("indices",e,t,n);return[r.gather(s,r.cast(a,"int32"),0)]}case"GatherV2":{const s=gS("axis",e,t,n),a=gS("batchDims",e,t,n),o=gS("x",e,t,n),i=gS("indices",e,t,n);return[r.gather(o,r.cast(i,"int32"),s,a)]}case"Reverse":{const s=gS("dims",e,t,n),a=[];for(let e=0;e<s.length;e++)s[e]&&a.push(e);const o=gS("x",e,t,n);return[r.reverse(o,a)]}case"ReverseV2":{const s=gS("axis",e,t,n),a=gS("x",e,t,n);return[r.reverse(a,s)]}case"Slice":{const s=gS("begin",e,t,n),a=gS("size",e,t,n);return[r.slice(gS("x",e,t,n),s,a)]}case"StridedSlice":{const s=gS("begin",e,t,n),a=gS("end",e,t,n),o=gS("strides",e,t,n),i=gS("beginMask",e,t,n),l=gS("endMask",e,t,n),u=gS("ellipsisMask",e,t,n),c=gS("newAxisMask",e,t,n),p=gS("shrinkAxisMask",e,t,n),h=gS("x",e,t,n);return[r.stridedSlice(h,s,a,o,i,l,u,c,p)]}case"Pack":return lo((()=>{const s=gS("axis",e,t,n),a=gS("tensors",e,t,n),o=a[0].shape,i=r.squeeze(a[0]).shape,l=a.map((e=>{const t=he(e.shape,o);if(!t&&!he(r.squeeze(e).shape,i))throw new Error("the input tensors shape does not match");return t?e:r.reshape(e,o)}));return[r.stack(l,s)]}));case"Unpack":{const s=gS("axis",e,t,n),a=gS("tensor",e,t,n);return r.unstack(a,s)}case"Tile":{const s=gS("reps",e,t,n);return[r.tile(gS("x",e,t,n),s)]}case"Split":case"SplitV":{const s=gS("axis",e,t,n),a=gS("numOrSizeSplits",e,t,n),o=gS("x",e,t,n);return r.split(o,a,s)}case"ScatterNd":{const s=gS("indices",e,t,n),a=gS("values",e,t,n),o=gS("shape",e,t,n);return[r.scatterND(s,a,o)]}case"GatherNd":{const s=gS("x",e,t,n),a=gS("indices",e,t,n);return[r.gatherND(s,a)]}case"SparseToDense":{const s=gS("sparseIndices",e,t,n),a=gS("outputShape",e,t,n),o=gS("sparseValues",e,t,n),i=gS("defaultValue",e,t,n);return[r.sparseToDense(s,o,a,o.dtype===i.dtype?i:r.cast(i,o.dtype))]}case"TensorScatterUpdate":{const s=gS("indices",e,t,n),a=gS("values",e,t,n),o=gS("tensor",e,t,n);return[r.tensorScatterUpdate(o,s,a)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"sparse":return s((()=>((e,t,n,r=G)=>{switch(e.op){case"SparseFillEmptyRows":{const{outputIndices:s,outputValues:a,emptyRowIndicator:o,reverseIndexMap:i}=r.sparse.sparseFillEmptyRows(gS("indices",e,t,n),gS("values",e,t,n),gS("denseShape",e,t,n),gS("defaultValue",e,t,n));return[s,a,o,i]}case"SparseReshape":{const{outputIndices:s,outputShape:a}=r.sparse.sparseReshape(gS("inputIndices",e,t,n),gS("inputShape",e,t,n),gS("newShape",e,t,n));return[s,a]}case"SparseSegmentMean":return[r.sparse.sparseSegmentMean(gS("data",e,t,n),gS("indices",e,t,n),gS("segmentIds",e,t,n))];case"SparseSegmentSum":return[r.sparse.sparseSegmentSum(gS("data",e,t,n),gS("indices",e,t,n),gS("segmentIds",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"spectral":return s((()=>((e,t,n,r=G)=>{switch(e.op){case"FFT":return[r.fft(gS("x",e,t,n))];case"IFFT":return[r.ifft(gS("x",e,t,n))];case"RFFT":return[r.rfft(gS("x",e,t,n))];case"IRFFT":return[r.irfft(gS("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"string":return s((()=>((e,t,n,r=G)=>{switch(e.op){case"StaticRegexReplace":return[r.string.staticRegexReplace(gS("input",e,t,n),gS("pattern",e,t,n),gS("rewrite",e,t,n),gS("replaceGlobal",e,t,n))];case"StringNGrams":{const{nGrams:s,nGramsSplits:a}=r.string.stringNGrams(gS("data",e,t,n),gS("dataSplits",e,t,n),gS("separator",e,t,n),gS("nGramWidths",e,t,n),gS("leftPad",e,t,n),gS("rightPad",e,t,n),gS("padWidth",e,t,n),gS("preserveShortSequences",e,t,n));return[s,a]}case"StringSplit":{const{indices:s,values:a,shape:o}=r.string.stringSplit(gS("input",e,t,n),gS("delimiter",e,t,n),gS("skipEmpty",e,t,n));return[s,a,o]}case"StringToHashBucketFast":return[r.string.stringToHashBucketFast(gS("input",e,t,n),gS("numBuckets",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"transformation":return s((()=>((e,t,n,r=G)=>{switch(e.op){case"Cast":return[r.cast(gS("x",e,t,n),gS("dtype",e,t,n))];case"ExpandDims":{const s=gS("axis",e,t,n);return[r.expandDims(gS("x",e,t,n),s)]}case"Squeeze":{const s=gS("axis",e,t,n);return[r.squeeze(gS("x",e,t,n),s)]}case"Reshape":return[r.reshape(gS("x",e,t,n),gS("shape",e,t,n))];case"EnsureShape":return[r.ensureShape(gS("x",e,t,n),gS("shape",e,t,n))];case"MirrorPad":return[r.mirrorPad(gS("x",e,t,n),gS("padding",e,t,n),gS("mode",e,t,n))];case"PadV2":case"Pad":return[r.pad(gS("x",e,t,n),gS("padding",e,t,n),gS("constantValue",e,t,n))];case"SpaceToBatchND":{const s=gS("blockShape",e,t,n),a=gS("paddings",e,t,n);return[r.spaceToBatchND(gS("x",e,t,n),s,a)]}case"BatchToSpaceND":{const s=gS("blockShape",e,t,n),a=gS("crops",e,t,n);return[r.batchToSpaceND(gS("x",e,t,n),s,a)]}case"DepthToSpace":{const s=gS("blockSize",e,t,n),a=gS("dataFormat",e,t,n).toUpperCase();return[r.depthToSpace(gS("x",e,t,n),s,a)]}case"BroadcastTo":return[r.broadcastTo(gS("x",e,t,n),gS("shape",e,t,n))];case"BroadcastArgs":return[r.broadcastArgs(gS("s0",e,t,n),gS("s1",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"hash_table":return(async(e,t,n,r)=>{switch(e.op){case"HashTable":case"HashTableV2":{const s=r.getHashTableHandleByName(e.name);if(null!=s)return[s];{const s=gS("keyDType",e,t,n),a=gS("valueDType",e,t,n),o=new dI(s,a);return r.addHashTable(e.name,o),[o.handle]}}case"InitializeTable":case"InitializeTableV2":case"LookupTableImport":case"LookupTableImportV2":{const s=gS("tableHandle",e,t,n,r),a=gS("keys",e,t,n),o=gS("values",e,t,n),i=r.getHashTableById(s.id);return[await i.import(a,o)]}case"LookupTableFind":case"LookupTableFindV2":{const s=gS("tableHandle",e,t,n,r),a=gS("keys",e,t,n),o=gS("defaultValue",e,t,n),i=r.getHashTableById(s.id);return[await i.find(a,o)]}case"LookupTableSize":case"LookupTableSizeV2":{const s=gS("tableHandle",e,t,n,r);return[r.getHashTableById(s.id).tensorSize()]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n,r);case"custom":const a=fS(e.op);if(a&&a.customExecutor)return a.customExecutor(new sI(e,t,n));throw TypeError(`Custom op ${e.op} is not registered.`);default:throw TypeError(`Unknown op '${e.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(e,t,n);return He(a)?a.then((e=>[].concat(e))):[].concat(a)}class mI{constructor(e={},t={},n={},r={},s){this.weightMap=e,this.tensorArrayMap=t,this.tensorListMap=n,this.functionMap=r,this.parseNodeNameCache=s,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(e,t){return{id:e,frameName:t,iterationId:0}}set currentContext(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const e=[];for(let t=0;t<this.contexts.length-1;t++){const n=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(n))}e.push(""),this._currentContextIds=e}contextIdforContexts(e){return e?e.map((e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`)).join("/"):""}enterFrame(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(e){return this.weightMap[e]}addTensorArray(e){this.tensorArrayMap[e.id]=e}getTensorArray(e){return this.tensorArrayMap[e]}addTensorList(e){this.tensorListMap[e.id]=e}getTensorList(e){return this.tensorListMap[e]}dispose(e){for(const t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose(e);for(const t in this.tensorListMap)this.tensorListMap[t].clearAndClose(e)}}function gI(e,t,n,r){const s=new Set,a=[];let o=null,i=null;const l=new Set,u=new Set(Object.keys(e).map((e=>vS(e)[0])));r=r||[];const c=new Set(r.map((e=>vS(e.name)[0]))),p=[...t];for(;p.length>0;){const e=p.pop();(vI(e)||kI(e)||NI(e))&&null==o&&(o=e,i=o.children.map((e=>e.name)).filter((e=>s.has(e)))),s.add(e.name),null==n[e.name]&&(u.has(e.name)||c.has(e.name)||(0!==e.inputs.length?e.inputs.forEach((e=>{l.has(e.name)||(l.add(e.name),p.push(e))})):a.push(e.name)))}return{inputs:e,outputs:t,usedNodes:s,missingInputs:a,dynamicNode:o,syncInputs:i}}class yI extends Error{constructor(e){super(`NodesExecutionOrderError: ${e}`)}}const bI=new Set(["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"]),xI=new Set(["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"]),wI=new Set(["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"]);function vI(e){return bI.has(e.op)}function kI(e){return xI.has(e.op)}function NI(e){return wI.has(e.op)}class TI{get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(e){const t=Object.keys(e).map((t=>e[t].map((e=>e.id))));this._weightIds=[].concat(...t),this._weightMap=e}set resourceManager(e){this._resourceManager=e}get inputs(){return this._inputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get outputs(){return this._outputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get inputNodes(){return this._inputs.map((e=>e.signatureKey||e.name))}get outputNodes(){return this._outputs.map((e=>{const t=e.signatureKey||e.name;return e.defaultOutput?`${t}:${e.defaultOutput}`:t}))}get functions(){return Object.keys(this._functions).reduce(((e,t)=>(e[t]=this._functions[t].signature,e)),{})}constructor(e,t){this.graph=e,this.parent=t,this.compiledMap=new Map,this.parseNodeNameCache=new Map,this._weightMap={},this.SEPARATOR=",",this._functions={},this._functionExecutorMap={},this.keepIntermediateTensors=!1,this._outputs=e.outputs,this._inputs=e.inputs,this._initNodes=e.initNodes,this._signature=e.signature,this._functions=e.functions,null!=e.functions&&Object.keys(e.functions).forEach((t=>{this._functionExecutorMap[t]=new TI(e.functions[t],this)}))}getCompilationKey(e,t){const n=e.map((e=>e.name)).sort(),r=t.map((e=>e.name)).sort();return n.join(this.SEPARATOR)+"--"+r.join(this.SEPARATOR)}compile(e,t){const n=gI(e,t,this.weightMap,this._initNodes),{missingInputs:r,dynamicNode:s,syncInputs:a}=n;if(null!=s)throw new Error(`This execution contains the node '${s.name}', which has the dynamic op '${s.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${a}]`);if(r.length>0){const n=t.map((e=>e.name)),s=Object.keys(e);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${s}]. Missing the following inputs: [${r}]`)}const o=function(e,t){const{usedNodes:n,inputs:r}=t,s=Object.keys(r).map((e=>vS(e)[0])).map((t=>e.nodes[t])),a=e.initNodes||[],o=e=>n.has("string"==typeof e?e:e.name);function i(e){return[...new Map(e.map((e=>[e.name,e]))).values()]}const l=i([...s,...e.weights,...a]).filter(o),u=i([...l,...Object.values(e.nodes)]).filter(o),c=new Map(u.map((e=>[e.name,e]))),p={};for(const e of u){p[e.name]=p[e.name]||0;for(const t of e.children)o(t)||(p[t.name]=Number.POSITIVE_INFINITY),p[t.name]=(p[t.name]||0)+1}const h=Object.entries(p).filter((([,e])=>0===e)).map((([e])=>e)),d=[...h];for(;h.length>0;){const e=h.pop(),t=c.get(e);for(const e of t.children.filter(o))0==--p[e.name]&&(d.push(e.name),h.push(e.name))}const f=function(e,t){const n=new Map(e.map((e=>[e.name,e]))),r=t.map((e=>e.name)),s=new Set(r);for(;r.length>0;){const e=r.pop(),t=n.get(e);for(const e of t.children)n.has(e.name)&&!s.has(e.name)&&(s.add(e.name),r.push(e.name))}return e.filter((e=>s.has(e.name)))}(d.map((e=>c.get(e))),l);return function(e,t){const n=new Map(e.map(((e,t)=>[e.name,t]))),r=new Set(t.map((e=>e.name))),s=e=>r.has("string"==typeof e?e:e.name),a=new Set(e.map((e=>e.name))),o=e=>a.has("string"==typeof e?e:e.name);for(const t of e){for(const e of t.children.filter(o)){if(!n.has(e.name))throw new yI(`Child ${e.name} of node ${t.name} is unreachable.`);if(n.get(t.name)>n.get(e.name))throw new yI(`Node ${t.name} is scheduled to run after its child ${e.name}.`)}if(!s(t))for(const e of t.inputs){if(!n.has(e.name))throw new yI(`Input ${e.name} of node ${t.name} is unreachable.`);if(n.get(e.name)>n.get(t.name))throw new yI(`Node ${t.name} is scheduled to run before its input ${e.name}.`)}}}(f,l),f}(this.graph,n),i=function(e){const t=new Map(e.map(((e,t)=>[e.name,t]))),n=Number.MAX_SAFE_INTEGER,r=e.map(((e,t)=>vI(e)?n:t)),s=e=>{const n=r[t.get(e.name)];return null==n?-1:n},a=e.map(((e,t)=>e.children.map(s).reduce(((e,t)=>Math.max(e,t)),r[t]))),o=new Map;for(let t=0;t<e.length;++t){const r=a[t];if(r===n)continue;const s=e[t],i=e[r];o.has(i.name)||o.set(i.name,[]),o.get(i.name).push(s)}return o}(o);return{orderedNodes:o,nodeLiveUntilMap:i}}cloneAndKeepTensor(e){if(null==e)return null;const t=e.clone();return co(t),t}cloneTensorList(e){if(!e)return null;const t=e.map((e=>this.cloneAndKeepTensor(e)));return t}cloneTensorMap(e){return Object.fromEntries(Object.entries(e).map((([e,t])=>[e,this.cloneTensorList(t)])))}execute(e,t){this.disposeIntermediateTensors(),e=this.mapInputs(e);const n=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);const r=n.map((e=>this.graph.nodes[vS(e)[0]])),s=t.map((e=>vS(e)[0])),a=new Set(s);let o=s.map((e=>this.graph.nodes[e]));0===o.length&&(o=this._outputs);const i=this.getCompilationKey(r,o);let l=this.compiledMap.get(i);null==l&&(l=this.compile(e,o),this.compiledMap.set(i,l));try{this.keepIntermediateTensors=Ye().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(e){this.keepIntermediateTensors=!1,console.warn(e.message)}const u={},c={};return lo((()=>{const n=new mI(this.weightMap,u,c,this.functionExecutorMap,this.parseNodeNameCache),r=Object.assign({},this.weightMap);this.keepIntermediateTensors&&(this.clonedTensorsMap=this.cloneTensorMap(this.weightMap)),Object.keys(e).forEach((t=>{const[s,a]=vS(t,n),o=[];o[a]=e[t],r[s]=o,this.keepIntermediateTensors&&(this.clonedTensorsMap[s]=this.cloneTensorList(o))}));const s=this.getFrozenTensorIds(r),{orderedNodes:o,nodeLiveUntilMap:i}=l;for(const e of o){if(r[e.name])continue;const t=fI(e,r,n,this._resourceManager);if(He(t))throw new Error(`The execution of the op '${e.op}' returned a promise. Please use model.executeAsync() instead.`);r[e.name]=t,this.keepIntermediateTensors&&(this.clonedTensorsMap[e.name]=this.cloneTensorList(t)),this.checkTensorForDisposalWithNodeLiveUntilInfo(e,r,n,s,a,i.get(e.name))}return null==this.parent&&n.dispose(s),t.map((e=>yS(e,r,n)))}))}getFrozenTensorIds(e){const t=[].concat.apply([],Object.keys(e).map((t=>e[t])).map((e=>e.map((e=>e.id)))));return new Set(t)}checkTensorForDisposal(e,t,n,r,s,a,o){if(!vI(t)&&!a.has(e)){for(const r of n[e])null!=r&&(o[r.id]=(o[r.id]||0)+t.children.length);for(const e of t.inputs){if(vI(e))continue;const t=bS(e.name,n,r);if(null!=t)for(const e of t){if(!e||e.kept||s.has(e.id))continue;const t=o[e.id];1===t?(e.dispose(),delete o[e.id]):null!=t&&o[e.id]--}}}}checkTensorForDisposalWithNodeLiveUntilInfo(e,t,n,r,s,a){function o(e){return vI(e)||s.has(e.name)}if(!vI(e)&&null!=a)for(const e of a){if(o(e))continue;const s=bS(e.name,t,n);for(const e of s)!e||e.kept||r.has(e.id)||e.dispose()}}async executeAsync(e,t){return this._executeAsync(e,t)}disposeIntermediateTensors(){this.clonedTensorsMap&&(Object.values(this.clonedTensorsMap).forEach((e=>{for(const t of e)t&&!t.isDisposed&&t.dispose()})),this.clonedTensorsMap=null)}getIntermediateTensors(){return this.clonedTensorsMap}async _executeAsync(e,t,n=!1,r={},s={}){this.disposeIntermediateTensors(),n||(e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t));try{this.keepIntermediateTensors=Ye().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(e){this.keepIntermediateTensors=!1,console.warn(e.message)}const a=new mI(this.weightMap,r,s,this.functionExecutorMap,this.parseNodeNameCache);this.keepIntermediateTensors&&(this.clonedTensorsMap=this.cloneTensorMap(this.weightMap));const o=await this.executeWithControlFlow(e,a,t,n),i=t.map((e=>yS(e,o,a))),l=i.map((e=>e.id)),u=Object.keys(e).map((t=>e[t].id)),c=new Set([...l,...u,...this.weightIds]);return Object.values(o).forEach((e=>{e.forEach((e=>{!e||e.isDisposed||c.has(e.id)||e.dispose()}))})),null==this.parent&&a.dispose(c),i}async executeFunctionAsync(e,t,n){const r=e.reduce(((e,t,n)=>(e[this.inputs[n].name]=t,e)),{});return this._executeAsync(r,this.outputNodes,!0,t,n)}async executeWithControlFlow(e,t,n,r){const s=Object.keys(e),a=s.map((e=>this.graph.nodes[vS(e)[0]])),o=n.map((e=>vS(e)[0])),i=new Set(o);let l=o.map((e=>this.graph.nodes[e]));0===l.length&&(l=this._outputs);const{usedNodes:u,missingInputs:c,dynamicNode:p,syncInputs:h}=gI(e,l,this.weightMap,this._initNodes),d=[...a,...this.graph.weights,...this._initNodes||[]].map((e=>({node:e,contexts:t.currentContext}))),f=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,r]=vS(t),s=[];s[r]=e[t],f[n]=s}));const m={},g=this.getFrozenTensorIds(f),y={};for(;d.length>0;){const e=this.processStack(a,d,t,f,y,g,i,m,u);await Promise.all(e)}null!=p||r||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const b=l.filter((e=>!vI(e)&&!yS(e.name,f,t))).map((e=>e.name));if(b.length>0){let e="";throw null!=p&&(e=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${h}]`),new Error(`Cannot compute the outputs [${b}] from the provided inputs [${s}]. Consider providing the following inputs: [${c}]. ${e}`)}return f}processStack(e,t,n,r,s,a,o,i,l){const u=[];for(;t.length>0;){const e=t.pop();n.currentContext=e.contexts;let c="";if("Enter"===e.node.op&&gS("isConstant",e.node,r,n)&&([c]=xS(e.node.name,n)),null==r[e.node.name]){const p=fI(e.node,r,n,this._resourceManager);c||([c]=xS(e.node.name,n));const h=n.currentContext;He(p)?u.push(p.then((u=>(r[c]=u,this.keepIntermediateTensors&&(this.clonedTensorsMap[c]=this.cloneTensorList(u)),n.currentContext=h,this.checkTensorForDisposal(c,e.node,r,n,a,o,i),this.processChildNodes(e.node,t,n,r,s,l),u)))):(r[c]=p,this.keepIntermediateTensors&&(this.clonedTensorsMap[c]=this.cloneTensorList(p)),this.checkTensorForDisposal(c,e.node,r,n,a,o,i),this.processChildNodes(e.node,t,n,r,s,l))}else this.processChildNodes(e.node,t,n,r,s,l)}return u}processChildNodes(e,t,n,r,s,a){e.children.forEach((e=>{const[o]=xS(e.name,n);!s[o]&&a.has(e.name)&&("Merge"===e.op?e.inputNames.some((e=>!!yS(e,r,n)))&&(s[o]=!0,t.push({contexts:n.currentContext,node:e})):e.inputNames.every((e=>!!yS(e,r,n)))&&(s[o]=!0,t.push({contexts:n.currentContext,node:e})))}))}dispose(){Object.keys(this.weightMap).forEach((e=>this.weightMap[e].forEach((e=>e.dispose()))))}checkInputShapeAndType(e){Object.keys(e).forEach((t=>{const n=e[t],[r]=vS(t),s=this.graph.nodes[r];if(s.attrParams.shape&&s.attrParams.shape.value){const e=s.attrParams.shape.value;oe(e.length===n.shape.length&&n.shape.every(((t,n)=>-1===e[n]||e[n]===t)),(()=>`The shape of dict['${s.name}'] provided in model.execute(dict) must be [${e}], but was [${n.shape}]`))}s.attrParams.dtype&&s.attrParams.dtype.value&&oe(n.dtype===s.attrParams.dtype.value,(()=>`The dtype of dict['${s.name}'] provided in model.execute(dict) must be ${s.attrParams.dtype.value}, but was ${n.dtype}`))}))}mapInputs(e){var t,n;const r={};for(const s in e){const a=null===(n=null===(t=this._signature)||void 0===t?void 0:t.inputs)||void 0===n?void 0:n[s];null!=a?r[a.name]=e[s]:r[s]=e[s]}return r}checkInputs(e){const t=Object.keys(e).filter((e=>{const[t]=vS(e);return null==this.graph.nodes[t]}));if(t.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`)}mapOutputs(e){return e.map((e=>{var t,n;const r=null===(n=null===(t=this._signature)||void 0===t?void 0:t.outputs)||void 0===n?void 0:n[e];return null!=r?r.name:e}),{})}checkOutputs(e){e.forEach((e=>{const[t]=vS(e);if(!this.graph.nodes[t])throw new Error(`The output '${e}' is not found in the graph`)}))}}class SI{constructor(e={},t={}){this.hashTableNameToHandle=e,this.hashTableMap=t}addHashTable(e,t){this.hashTableNameToHandle[e]=t.handle,this.hashTableMap[t.id]=t}getHashTableHandleByName(e){return this.hashTableNameToHandle[e]}getHashTableById(e){return this.hashTableMap[e]}dispose(){for(const e in this.hashTableMap)this.hashTableMap[e].clearAndClose(),delete this.hashTableMap[e];for(const e in this.hashTableNameToHandle)this.hashTableNameToHandle[e].dispose(),delete this.hashTableNameToHandle[e]}}const II="?tfjs-format=file",EI="model.json";class $I{get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}get modelStructuredOutputKeys(){return this.structuredOutputKeys}constructor(e,t={},n=l){this.modelUrl=e,this.loadOptions=t,this.version="n/a",this.io=n,null==t&&(this.loadOptions={}),this.resourceManager=new SI}findIOHandler(){const e=this.modelUrl;if(null!=e.load)this.handler=e;else if(null!=this.loadOptions.requestInit)this.handler=this.io.browserHTTPRequest(e,this.loadOptions);else{const t=this.io.getLoadHandlers(e,this.loadOptions);if(0===t.length)t.push(this.io.browserHTTPRequest(e,this.loadOptions));else if(t.length>1)throw new Error(`Found more than one (${t.length}) load handlers for URL '${[e]}'`);this.handler=t[0]}}load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const e=this.handler.load();return He(e)?e.then((e=>null==e.getWeightStream?this.loadSync(e):this.loadStreaming(e))):this.loadSync(e)}loadSync(e){const t=this.io.decodeWeights(e.weightData,e.weightSpecs);return this.loadWithWeightMap(e,t)}async loadStreaming(e){if(null==e.getWeightStream)throw new Error("Model artifacts missing streamWeights function");const t=await Co(e.getWeightStream(),e.weightSpecs);return this.loadWithWeightMap(e,t)}loadWithWeightMap(e,t){this.artifacts=e;const n=this.artifacts.modelTopology;let r=this.artifacts.signature;if(null!=this.artifacts.userDefinedMetadata){const e=this.artifacts.userDefinedMetadata;null!=e.signature&&(r=e.signature),null!=e.structuredOutputKeys&&(this.structuredOutputKeys=e.structuredOutputKeys)}if(this.signature=r,this.version=`${n.versions.producer}.${n.versions.minConsumer}`,this.executor=new TI(US.Instance.transformGraph(n,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(t),this.executor.resourceManager=this.resourceManager,null!=e.modelInitializer&&null!=e.modelInitializer.node){const t=US.Instance.transformGraph(e.modelInitializer);this.initializer=new TI(t),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializerSignature=e.initializerSignature}return!0}async save(e,t){if("string"==typeof e){const t=this.io.getSaveHandlers(e);if(0===t.length)throw new Error(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Error(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return e.save(this.artifacts)}addStructuredOutputNames(e){if(this.structuredOutputKeys){const t={};return(e instanceof da?[e]:e).forEach(((e,n)=>t[this.structuredOutputKeys[n]]=e)),t}return e}predict(e,t){const n=this.execute(e,this.outputNodes);return this.addStructuredOutputNames(n)}async predictAsync(e,t){const n=await this.executeAsync(e,this.outputNodes);return this.addStructuredOutputNames(n)}normalizeInputs(e){var t;if(!(e instanceof da||Array.isArray(e))){const n=null===(t=this.signature)||void 0===t?void 0:t.inputs;if(null!=n)for(const t in n){const r=n[t];null!=r.resourceId&&(e[t]=this.resourceIdToCapturedInput[r.resourceId])}return e}e=Array.isArray(e)?e:[e];const n=Object.keys(this.resourceIdToCapturedInput).length;if(e.length+n!==this.inputNodes.length)throw new Error(`Input tensor count mismatch, the graph model has ${this.inputNodes.length-n} non-resource placeholders, while there are ${e.length} input tensors provided.`);let r=0;return this.inputNodes.reduce(((t,n)=>{var s,a,o;const i=null===(o=null===(a=null===(s=this.signature)||void 0===s?void 0:s.inputs)||void 0===a?void 0:a[n])||void 0===o?void 0:o.resourceId;return t[n]=null!=i?this.resourceIdToCapturedInput[i]:e[r++],t}),{})}normalizeOutputs(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]}executeInitializerGraph(){return null==this.initializer?[]:null==this.initializerSignature?this.initializer.execute({},[]):this.initializer.execute({},Object.keys(this.initializerSignature.outputs))}async executeInitializerGraphAsync(){return null==this.initializer?[]:null==this.initializerSignature?this.initializer.executeAsync({},[]):this.initializer.executeAsync({},Object.keys(this.initializerSignature.outputs))}setResourceIdToCapturedInput(e){if(this.resourceIdToCapturedInput={},this.initializerSignature){const t=this.initializerSignature.outputs,n=Object.keys(t);for(let r=0;r<n.length;r++){const s=t[n[r]];this.resourceIdToCapturedInput[s.resourceId]=e[r]}}}execute(e,t){null==this.resourceIdToCapturedInput&&this.setResourceIdToCapturedInput(this.executeInitializerGraph()),e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=this.executor.execute(e,t);return n.length>1?n:n[0]}async executeAsync(e,t){null==this.resourceIdToCapturedInput&&this.setResourceIdToCapturedInput(await this.executeInitializerGraphAsync()),e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=await this.executor.executeAsync(e,t);return n.length>1?n:n[0]}getIntermediateTensors(){return this.executor.getIntermediateTensors()}disposeIntermediateTensors(){this.executor.disposeIntermediateTensors()}convertTensorMapToTensorsMap(e){return Object.keys(e).reduce(((t,n)=>(t[n]=[e[n]],t)),{})}dispose(){this.executor.dispose(),this.initializer&&(this.initializer.dispose(),this.resourceIdToCapturedInput&&uo(this.resourceIdToCapturedInput)),this.resourceManager.dispose()}}async function CI(e,t={},n=l){if(null==e)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==t&&(t={}),t.fromTFHub&&"string"==typeof e&&(e=function(e){return e.endsWith("/")||(e+="/"),`${e}${EI}${II}`}(e));const r=new $I(e,t,n);return await r.load(),r}function AI(e){if(null==e)throw new Error("modelUrl in loadGraphModelSync() cannot be null. Please provide model artifacts or an IOHandler that loads the model");let t;if(e instanceof Array){const[n,r]=e;if(!n)throw new Error("modelJSON must be the first element of the array");if(!(r&&r instanceof ArrayBuffer))throw new Error("An ArrayBuffer of weights must be the second element of the array");if(!("modelTopology"in n))throw new Error("Model JSON is missing 'modelTopology'");if(!("weightsManifest"in n))throw new Error("Model JSON is missing 'weightsManifest'");t=El(Mo(n,Po(n.weightsManifest),r))}else if("load"in e)t=e;else{if(!("modelTopology"in e&&"weightSpecs"in e&&"weightData"in e))throw new Error("Unknown model format");t=El(e)}const n=new $I(t);return n.load(),n}const _I="4.22.0";function RI(e,t,n=new Map,r=new Set){if(null==e)return null;if("function"==typeof Blob&&e instanceof Blob)return e.slice();if(r.has(e))throw new Error("Circular references are not supported.");if(n.has(e))return n.get(e);const s=t(e);if(s.recurse&&null!==s.value)throw new Error("A deep map function may not return both a value and recurse=true.");if(s.recurse){if(LI(e)){const s=Array.isArray(e)?[]:{};r.add(e);for(const a in e){const o=RI(e[a],t,n,r);s[a]=o}return r.delete(e),e.__proto__&&(s.__proto__=e.__proto__),s}throw new Error(`Can't recurse into non-iterable type: ${e}`)}return n.set(e,s.value),s.value}function DI(e,t=OI){return FI(e,t)}function FI(e,t,n=new Set){const r=e[0];if(n.has(r))throw new Error("Circular references are not supported.");const s=t(e);if(s.recurse&&null!==s.value)throw new Error("A deep zip function may not return both a value and recurse=true.");if(s.recurse){if(LI(r)){const s=Array.isArray(r)?[]:{};n.add(r);for(const a in r){const r=FI(e.map((e=>e[a])),t,n);s[a]=r}return n.delete(r),s}throw new Error(`Can't recurse into non-iterable type: ${r}`)}return s.value}function OI(e){return null===e?null:LI(e[0])?{value:null,recurse:!0}:{value:e,recurse:!1}}async function MI(e,t){const n=new Map;RI(e,t,n);for(const e of Array.from(n.keys())){const t=n.get(e);if(He(t)){const r=await t;n.set(e,r)}}return RI(e,t,n)}function LI(e){let t=!1;if(Ye().get("IS_BROWSER"))t=e instanceof TextDecoder;else{const{StringDecoder:r}=n(4222);t=e instanceof r}return null!=e&&!ArrayBuffer.isView(e)&&(Array.isArray(e)||"object"==typeof e&&!(e instanceof da)&&!(e instanceof Promise)&&!t)}function zI(e){return e instanceof da?{value:e.clone(),recurse:!1}:LI(e)?{value:null,recurse:!0}:{value:e,recurse:!1}}class PI{constructor(e){if(this.capacity=e,this.begin=0,this.end=0,null==e)throw new RangeError("Can't create a ring buffer of unknown capacity.");if(e<1)throw new RangeError("Can't create ring buffer of capacity < 1.");this.data=new Array(e),this.doubledCapacity=2*e}wrap(e){for(;e<0;)e+=this.doubledCapacity;return e%this.doubledCapacity}get(e){if(e<0)throw new RangeError("Can't get item at a negative index.");return this.data[e%this.capacity]}set(e,t){if(e<0)throw new RangeError("Can't set item at a negative index.");this.data[e%this.capacity]=t}length(){let e=this.end-this.begin;return e<0&&(e=this.doubledCapacity+e),e}isFull(){return this.length()===this.capacity}isEmpty(){return 0===this.length()}push(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.set(this.end,e),this.end=this.wrap(this.end+1)}pushAll(e){for(const t of e)this.push(t)}pop(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);const e=this.get(this.end);return this.set(this.end,void 0),e}unshift(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,e)}shift(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const e=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),e}shuffleExcise(e){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const t=this.wrap(this.begin+e),n=this.get(t);return this.set(t,this.pop()),n}}class BI extends PI{constructor(){super(BI.INITIAL_CAPACITY)}isFull(){return!1}push(e){super.isFull()&&this.expand(),super.push(e)}unshift(e){super.isFull()&&this.expand(),super.unshift(e)}expand(){const e=2*this.capacity,t=new Array(e),n=this.length();for(let e=0;e<n;e++)t[e]=this.get(this.wrap(this.begin+e));this.data=t,this.capacity=e,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=n}}function VI(e){return new GI(e)}function WI(e){return new HI(e)}BI.INITIAL_CAPACITY=32;class UI{async toArray(){const e=[];let t=await this.next();for(;!t.done;)e.push(t.value),t=await this.next();return e}async toArrayForTest(){const e=this.prefetch(100),t=[];let n=await e.next();for(;!n.done;)t.push(n.value),n=await e.next();return t}async resolveFully(){let e=await this.next();for(;!e.done;)e=await this.next()}async resolveWhile(e){let t=await this.next(),n=e(t.value);for(;!t.done&&n;)t=await this.next(),n=e(t.value)}handleErrors(e){return new QI(this,e)}filter(e){return new XI(this,e)}map(e){return new ZI(this,e)}mapAsync(e){return new JI(this,e)}serialMapAsync(e){return new JI(this,e).serial()}flatmap(e){return new tE(this,e)}async forEachAsync(e){return this.map(e).resolveFully()}async serialForEach(e){return this.serialMapAsync(e).resolveWhile((e=>!0===e))}rowMajorBatch(e,t=!0){return new YI(this,e,t)}columnMajorBatch(e,t=!0,n=OI){return this.rowMajorBatch(e,t).map((e=>DI(e,n)))}concatenate(e,t){return new nE(VI([this,e]),t)}take(e){return e<0||null==e?this:new qI(this,e)}skip(e){return e<0||null==e?this:new KI(this,e)}prefetch(e){return new aE(this,e)}shuffle(e,t){return new oE(this,e,t)}serial(){return new jI(this)}}class GI extends UI{constructor(e){super(),this.items=e,this.trav=0}summary(){return`Array of ${this.items.length} items`}async next(){if(this.trav>=this.items.length)return{value:null,done:!0};const e=this.items[this.trav];return this.trav++,{value:(t=e,function(e,t){return RI(e,t)}(t,zI)),done:!1};var t}}class HI extends UI{constructor(e){super(),this.nextFn=e}summary(){return"Function call"}async next(){try{return this.nextFn()}catch(e){throw e.message=`Error thrown while iterating through a dataset: ${e.message}`,e}}}class jI extends UI{constructor(e){super(),this.upstream=e,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Serial`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){return this.upstream.next()}}class KI extends UI{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Skip`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;this.count++<this.maxCount;){const e=await this.upstream.next();if(e.done)return e;uo(e.value)}return this.upstream.next()}}class qI extends UI{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0}summary(){return`${this.upstream.summary()} -> Take`}async next(){return this.count++>=this.maxCount?{value:null,done:!0}:this.upstream.next()}}class YI extends UI{constructor(e,t,n=!0){super(),this.upstream=e,this.batchSize=t,this.enableSmallLastBatch=n,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> RowMajorBatch`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){const e=[];for(;e.length<this.batchSize;){const t=await this.upstream.next();if(t.done)return this.enableSmallLastBatch&&e.length>0?{value:e,done:!1}:{value:null,done:!0};e.push(t.value)}return{value:e,done:!1}}}class XI extends UI{constructor(e,t){super(),this.upstream=e,this.predicate=t,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Filter`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;){const e=await this.upstream.next();if(e.done||this.predicate(e.value))return e;uo(e.value)}}}class ZI extends UI{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Map`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=Ca(e.value),n=this.transform(e.value),r=Ca(n);for(const e of t)$a(e,r)||e.dispose();return{value:n,done:!1}}}class QI extends UI{constructor(e,t){super(),this.upstream=e,this.handler=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> handleErrors`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;)try{return await this.upstream.next()}catch(e){if(!this.handler(e))return{value:null,done:!0}}}}class JI extends UI{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> AsyncMap`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=Ca(e.value),n=await this.transform(e.value),r=Ca(n);for(const e of t)$a(e,r)||e.dispose();return{value:n,done:!1}}}class eE extends UI{constructor(){super(),this.outputQueue=new BI,this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;0===this.outputQueue.length();)if(!await this.pump())return{value:null,done:!0};return{value:this.outputQueue.shift(),done:!1}}}class tE extends eE{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Flatmap`}async pump(){const e=await this.upstream.next();if(e.done)return!1;const t=Ca(e.value),n=this.transform(e.value),r=Ca(n);this.outputQueue.pushAll(n);for(const e of t)$a(e,r)||e.dispose();return!0}}class nE extends UI{constructor(e,t){super(),this.baseErrorHandler=t,this.lastRead=null,this.iterator=null,this.moreIterators=e}summary(){return"TODO: fill in upstream of chained summaries -> Chained"}async next(){return this.lastRead=this.readFromChain(this.lastRead),this.lastRead}async readFromChain(e){if(await e,null==this.iterator){const e=await this.moreIterators.next();if(e.done)return{value:null,done:!0};this.iterator=e.value,null!=this.baseErrorHandler&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler))}const t=await this.iterator.next();return t.done?(this.iterator=null,this.readFromChain(e)):t}}var rE;!function(e){e[e.FAIL=0]="FAIL",e[e.SHORTEST=1]="SHORTEST",e[e.LONGEST=2]="LONGEST"}(rE||(rE={}));class sE extends UI{constructor(e,t=rE.FAIL){super(),this.iterators=e,this.mismatchMode=t,this.count=0,this.currentPromise=null}summary(){return"{TODO: fill in upstream of zip summaries} -> Zip"}async nextState(e){await e;let t=0,n=0;const r=await MI(this.iterators,(function(e){return e instanceof UI?{value:e.next().then((e=>(t++,e.done&&n++,e.value))),recurse:!1}:{value:null,recurse:!0}}));if(t===n)return{value:null,done:!0};if(n>0)switch(this.mismatchMode){case rE.FAIL:throw new Error(`Zipped streams should have the same length. Mismatched at element ${this.count}.`);case rE.SHORTEST:return{value:null,done:!0};case rE.LONGEST:}return this.count++,{value:r,done:!1}}async next(){return this.currentPromise=this.nextState(this.currentPromise),this.currentPromise}}class aE extends UI{constructor(e,t){super(),this.upstream=e,this.bufferSize=t,this.buffer=new PI(t)}summary(){return`${this.upstream.summary()} -> Prefetch`}refill(){for(;!this.buffer.isFull();){const e=this.upstream.next();this.buffer.push(e)}}next(){return this.refill(),this.buffer.shift()}}class oE extends aE{constructor(e,t,n){super(e,t),this.upstream=e,this.windowSize=t,this.upstreamExhausted=!1,this.random=gh.alea(n||Ys().toString()),this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}randomInt(e){return Math.floor(this.random()*e)}chooseIndex(){return this.randomInt(this.buffer.length())}async serialNext(){for(this.upstreamExhausted||this.refill();!this.buffer.isEmpty();){const e=this.chooseIndex(),t=await this.buffer.shuffleExcise(e);if(!t.done)return this.refill(),t;this.upstreamExhausted=!0}return{value:null,done:!0}}}class iE{constructor(){this.size=null}batch(e,t=!0){const n=this;let r;return oe(e>0,(()=>`batchSize needs to be positive, but it is\n      ${e}`)),r=this.size===1/0||null==this.size?this.size:t?Math.ceil(this.size/e):Math.floor(this.size/e),lE((async()=>(await n.iterator()).columnMajorBatch(e,t,pE)),r)}concatenate(e){const t=this;let n;return n=this.size===1/0||e.size===1/0?1/0:null!=this.size&&null!=e.size?this.size+e.size:null,lE((async()=>(await t.iterator()).concatenate(await e.iterator())),n)}filter(e){const t=this;let n;return n=this.size===1/0?1/0:null,lE((async()=>(await t.iterator()).filter((t=>lo((()=>e(t)))))),n)}async forEachAsync(e){return(await this.iterator()).forEachAsync(e)}map(e){const t=this;return lE((async()=>(await t.iterator()).map((t=>lo((()=>e(t)))))),this.size)}mapAsync(e){const t=this;return lE((async()=>(await t.iterator()).mapAsync(e)),this.size)}prefetch(e){if(null==e)throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");const t=this;return lE((async()=>(await t.iterator()).prefetch(e)),this.size)}repeat(e){const t=this;let n;return n=null!=this.size&&e>0?this.size*e:0===e?0:null!=this.size&&(void 0===e||e<0)?1/0:null,lE((async()=>{return n=WI((async()=>({value:await t.iterator(),done:!1}))).take(e),new nE(n,r);var n,r}),n)}skip(e){const t=this;let n;return n=null!=this.size&&e>=0&&this.size>=e?this.size-e:null!=this.size&&(this.size<e||void 0===e||e<0)?0:null,lE((async()=>(await t.iterator()).skip(e)),n)}shuffle(e,t,n=!0){if(null==e||e<0)throw null==this.size?new RangeError("`Dataset.shuffle()` requires bufferSize to be specified."):new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);const r=this,s=gh.alea(t||Ys().toString());return lE((async()=>{let t=s.int32();return n&&(t+=s.int32()),(await r.iterator()).shuffle(e,t.toString())}),this.size)}take(e){const t=this;let n;return n=null!=this.size&&this.size>e?e:null!=this.size&&this.size<=e?this.size:null,lE((async()=>(await t.iterator()).take(e)),n)}async toArray(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArray()}async toArrayForTest(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArrayForTest()}}function lE(e,t=null){return new class extends iE{constructor(){super(...arguments),this.size=t}async iterator(){return e()}}}function uE(e){return lE((async()=>VI(e)),e.length)}function cE(e){if(!LI(e))throw new Error("The argument to zip() must be an object or array.");let t;if(Array.isArray(e))for(let n=0;n<e.length;n++)t=null==t?e[n].size:Math.min(t,e[n].size);else if(e instanceof Object)for(const n in e)t=null==t?e[n].size:Math.min(t,e[n].size);return lE((async()=>function(e,t=rE.FAIL){return new sE(e,t)}(await MI(e,(e=>{if(e instanceof iE)return{value:e.iterator(),recurse:!1};if(LI(e))return{value:null,recurse:!0};throw new Error("Leaves of the structure passed to zip() must be Datasets, not primitives.")})),rE.SHORTEST)),t)}function pE(e){if(null===e)return null;return null==(t=e[0])||null===(n=t)||"object"!=typeof n&&"function"!=typeof n||Array.isArray(t)||"object"==typeof t&&t instanceof da||Js(t)?{value:function(e){if(0===e.length)throw new Error("Can't make a batch of zero elements.");return e[0]instanceof da?ed(e):Za(e)}(e),recurse:!1}:{value:null,recurse:!0};var t,n}iE.MAX_BUFFER_SIZE=1e4;class hE extends iE{constructor(e){super(),this.input=e}async iterator(){return(await this.input.iterator()).decodeUTF8().split("\n").map((e=>(e.endsWith("\r")&&(e=e.slice(0,-1)),e)))}}const dE='"',fE=Symbol("out"),mE=Symbol("field"),gE=Symbol("quote"),yE=Symbol("quoteafterquote"),bE=Symbol("quoteinquote");class xE extends iE{async columnNames(){return this.columnNamesValidated||await this.setColumnNames(),this.configuredColumnsOnly?Object.keys(this.columnConfigs):this.fullColumnNames}async setColumnNames(){const e=await this.maybeReadHeaderLine();if(!this.fullColumnNames&&!e)throw new Error("Column names must be provided if there is no header line.");this.fullColumnNames&&e&&oe(e.length===this.fullColumnNames.length,(()=>"The length of provided columnNames ("+this.fullColumnNames.length.toString()+") does not match the length of the header line read from file ("+e.length.toString()+").")),this.fullColumnNames||(this.fullColumnNames=e);const t=this.fullColumnNames.reduce(((e,t)=>(e[t]=e[t]+1||1,e)),{}),n=Object.keys(t).filter((e=>t[e]>1));if(oe(0===n.length,(()=>"Duplicate column names found: "+n.toString())),this.columnConfigs)for(const e of Object.keys(this.columnConfigs))if(-1===this.fullColumnNames.indexOf(e))throw new Error('The key "'+e+'" provided in columnConfigs does not match any of the column names ('+this.fullColumnNames.toString()+").");this.columnNamesValidated=!0}async maybeReadHeaderLine(){if(this.hasHeader){const e=await this.base.iterator(),t=await e.next();if(t.done)throw new Error("No data was found for CSV parsing.");const n=t.value;return this.parseRow(n,!1)}return null}constructor(e,t){super(),this.input=e,this.hasHeader=!0,this.fullColumnNames=null,this.columnNamesValidated=!1,this.columnConfigs=null,this.configuredColumnsOnly=!1,this.delimiter=",",this.delimWhitespace=!1,this.base=new hE(e),t||(t={}),this.hasHeader=!1!==t.hasHeader,this.fullColumnNames=t.columnNames,this.columnConfigs=t.columnConfigs,this.configuredColumnsOnly=t.configuredColumnsOnly,t.delimWhitespace?(oe(null==t.delimiter,(()=>"Delimiter should not be provided when delimWhitespace is true.")),this.delimWhitespace=!0,this.delimiter=" "):this.delimiter=t.delimiter?t.delimiter:","}async iterator(){this.columnNamesValidated||await this.setColumnNames();let e=await this.base.iterator();return this.hasHeader&&(e=e.skip(1)),e.map((e=>this.makeDataElement(e)))}makeDataElement(e){const t=this.parseRow(e),n={},r={};for(let s=0;s<this.fullColumnNames.length;s++){const a=this.fullColumnNames[s],o=this.columnConfigs?this.columnConfigs[a]:null;if(!this.configuredColumnsOnly||o){const i=t[s];let l=null;if(""===i)if(o&&void 0!==o.default)l=o.default;else{if(o&&(o.required||o.isLabel))throw new Error(`Required column ${a} is empty in this line: ${e}`);l=void 0}else{const e=Number(i);if(isNaN(e))l=o&&"bool"===o.dtype?this.getBoolean(i):i;else if(o&&o.dtype)switch(o.dtype){case"float32":default:l=e;break;case"int32":l=Math.floor(e);break;case"bool":l=this.getBoolean(i)}else l=e}o&&o.isLabel?r[a]=l:n[a]=l}}return 0===Object.keys(r).length?n:{xs:n,ys:r}}getBoolean(e){return"1"===e||"true"===e.toLowerCase()?1:0}parseRow(e,t=!0){const n=[];let r=0;const s=e.length;let a=fE;for(let t=0;t<s;t++)switch(a){case fE:switch(e.charAt(t)){case dE:r=t+1,a=gE;break;case this.delimiter:if(r=t+1," "===this.delimiter&&this.delimWhitespace)break;n.push(""),a=fE;break;default:a=mE,r=t}break;case mE:e.charAt(t)===this.delimiter&&(n.push(e.substring(r,t)),a=fE,r=t+1);break;case gE:e.charAt(t)===dE&&(a=yE);break;case yE:switch(e.charAt(t)){case this.delimiter:n.push(e.substring(r,t-1)),a=fE,r=t+1;break;case dE:a=gE;break;default:a=bE}break;case bE:e.charAt(t)===dE&&(a=gE)}if(a===yE?n.push(e.substring(r,s-1)):n.push(e.substring(r)),t&&n.length!==this.fullColumnNames.length)throw new Error(`Invalid row in csv file. Should have ${this.fullColumnNames.length} elements in a row, but got ${n}`);return n}}class wE extends UI{constructor(e){super(),this.microphoneConfig=e,this.isClosed=!1,this.fftSize=e.fftSize||1024;const t=Math.log2(this.fftSize);if(this.fftSize<0||t<4||t>14||!Number.isInteger(t))throw new Error(`Invalid fftSize: it must be a power of 2 between 2 to 4 and 2 to 14, but got ${this.fftSize}`);if(this.numFrames=e.numFramesPerSpectrogram||43,this.sampleRateHz=e.sampleRateHz,this.columnTruncateLength=e.columnTruncateLength||this.fftSize,this.audioTrackConstraints=e.audioTrackConstraints,this.smoothingTimeConstant=e.smoothingTimeConstant||0,this.includeSpectrogram=!1!==e.includeSpectrogram,this.includeWaveform=!0===e.includeWaveform,!this.includeSpectrogram&&!this.includeWaveform)throw new Error("Both includeSpectrogram and includeWaveform are false. At least one type of data should be returned.")}summary(){return"microphone"}static async create(e={}){if(!Ye().get("IS_BROWSER"))throw new Error("microphone API is only supported in browser environment.");const t=new wE(e);return await t.start(),t}async start(){try{this.stream=await navigator.mediaDevices.getUserMedia({audio:null==this.audioTrackConstraints||this.audioTrackConstraints,video:!1})}catch(e){throw new Error(`Error thrown while initializing video stream: ${e.message}`)}if(!this.stream)throw new Error("Could not obtain audio from microphone.");const e=window.AudioContext||window.webkitAudioContext;if(this.audioContext=new e,this.sampleRateHz){if(this.audioContext.sampleRate!==this.sampleRateHz)throw new Error(`Mismatch in sampling rate: Expected: ${this.sampleRateHz}; Actual: ${this.audioContext.sampleRate}`)}else this.sampleRateHz=this.audioContext.sampleRate;const t=this.audioContext.createMediaStreamSource(this.stream);this.analyser=this.audioContext.createAnalyser(),this.analyser.fftSize=2*this.fftSize,this.analyser.smoothingTimeConstant=this.smoothingTimeConstant,t.connect(this.analyser),this.freqData=new Float32Array(this.fftSize),this.timeData=new Float32Array(this.fftSize)}async next(){if(this.isClosed)return{value:null,done:!0};let e,t;const n=await this.getAudioData();if(this.includeSpectrogram){const t=this.flattenQueue(n.freqDataQueue);e=this.getTensorFromAudioDataArray(t,[this.numFrames,this.columnTruncateLength,1])}if(this.includeWaveform){const e=this.flattenQueue(n.timeDataQueue);t=this.getTensorFromAudioDataArray(e,[this.numFrames*this.fftSize,1])}return{value:{spectrogram:e,waveform:t},done:!1}}async capture(){return(await this.next()).value}async getAudioData(){const e=[],t=[];let n=0;return new Promise((r=>{const s=setInterval((()=>{this.includeSpectrogram&&(this.analyser.getFloatFrequencyData(this.freqData),this.freqData[0]===-1/0&&r({freqDataQueue:e,timeDataQueue:t}),e.push(this.freqData.slice(0,this.columnTruncateLength))),this.includeWaveform&&(this.analyser.getFloatTimeDomainData(this.timeData),t.push(this.timeData.slice())),++n===this.numFrames&&(clearInterval(s),r({freqDataQueue:e,timeDataQueue:t}))}),this.fftSize/this.sampleRateHz*1e3)}))}stop(){this.isClosed||(this.isClosed=!0,this.analyser.disconnect(),this.audioContext.close(),null!=this.stream&&this.stream.getTracks().length>0&&this.stream.getTracks()[0].stop())}toArray(){throw new Error("Can not convert infinite audio stream to array.")}getSampleRate(){return this.sampleRateHz}flattenQueue(e){const t=e[0].length,n=new Float32Array(e.length*t);return e.forEach(((e,r)=>n.set(e,r*t))),n}getTensorFromAudioDataArray(e,t){const n=new Float32Array(ue(t));return n.set(e,n.length-e.length),Za(n,t)}}class vE extends UI{constructor(e,t){if(super(),this.webcamVideoElement=e,this.webcamConfig=t,this.isClosed=!0,this.resize=!1,this.needToResize())if(this.resize=!0,this.cropSize=[this.webcamConfig.resizeHeight,this.webcamConfig.resizeWidth],this.cropBoxInd=sd([0],"int32"),this.webcamConfig.centerCrop){const e=1*this.webcamConfig.resizeWidth/this.webcamVideoElement.width,t=1*this.webcamConfig.resizeHeight/this.webcamVideoElement.height,n=(1-e)/2,r=(1-t)/2,s=n+e,a=t+r;this.cropBox=ad([r,n,a,s],[1,4])}else this.cropBox=ad([0,0,1,1],[1,4])}summary(){return"webcam"}static async create(e,t={}){if(!Ye().get("IS_BROWSER"))throw new Error("tf.data.webcam is only supported in browser environment.");if(!e){if(e=document.createElement("video"),!t.resizeWidth||!t.resizeHeight)throw new Error("Please provide webcam video element, or resizeWidth and resizeHeight to create a hidden video element.");e.width=t.resizeWidth,e.height=t.resizeHeight}const n=new vE(e,t);return await n.start(),n}async start(){this.webcamConfig.facingMode&&oe("user"===this.webcamConfig.facingMode||"environment"===this.webcamConfig.facingMode,(()=>`Invalid webcam facing mode: ${this.webcamConfig.facingMode}. Please provide 'user' or 'environment'`));try{this.stream=await navigator.mediaDevices.getUserMedia({video:{deviceId:this.webcamConfig.deviceId,facingMode:this.webcamConfig.facingMode?this.webcamConfig.facingMode:"user",width:this.webcamVideoElement.width,height:this.webcamVideoElement.height}})}catch(e){throw e.message=`Error thrown while initializing video stream: ${e.message}`,e}if(!this.stream)throw new Error("Could not obtain video from webcam.");try{this.webcamVideoElement.srcObject=this.stream}catch(e){console.log(e),this.webcamVideoElement.src=window.URL.createObjectURL(this.stream)}return this.webcamVideoElement.play(),this.isClosed=!1,new Promise((e=>{this.webcamVideoElement.onloadedmetadata=()=>{e()}}))}async next(){if(this.isClosed)return{value:null,done:!0};let e;try{e=Hl(this.webcamVideoElement)}catch(e){throw new Error(`Error thrown converting video to pixels: ${JSON.stringify(e)}`)}if(!this.resize)return{value:e,done:!1};try{return{value:this.cropAndResizeFrame(e),done:!1}}catch(e){throw new Error(`Error thrown cropping the video: ${e.message}`)}finally{e.dispose()}}needToResize(){return!(!this.webcamConfig.resizeWidth||!this.webcamConfig.resizeHeight||this.webcamVideoElement.width===this.webcamConfig.resizeWidth&&this.webcamVideoElement.height===this.webcamConfig.resizeHeight)}cropAndResizeFrame(e){return lo((()=>{const t=hp(Ni(e,"float32"),0);let n;n=Of.cropAndResize(t,this.cropBox,this.cropBoxInd,this.cropSize,"bilinear");const r=n.shape;return sc(n,r.slice(1))}))}async capture(){return(await this.next()).value}stop(){this.stream.getTracks().forEach((e=>e.stop()));try{this.webcamVideoElement.srcObject=null}catch(e){console.log(e),this.webcamVideoElement.src=null}this.isClosed=!0}toArray(){throw new Error("Can not convert infinite video stream to array.")}}class kE{}class NE extends UI{split(e){return new TE(this,e)}}class TE extends NE{constructor(e,t){super(),this.upstream=e,this.impl=new SE(e,t)}summary(){return this.impl.summary()}async next(){return this.impl.next()}}class SE extends eE{constructor(e,t){super(),this.upstream=e,this.separator=t,this.carryover=""}summary(){return`${this.upstream.summary()} -> Split('${this.separator}')`}async pump(){const e=await this.upstream.next();if(e.done)return""!==this.carryover&&(this.outputQueue.push(this.carryover),this.carryover="",!0);const t=e.value.split(this.separator);t[0]=this.carryover+t[0];for(const e of t.slice(0,-1))this.outputQueue.push(e);return this.carryover=t[t.length-1],!0}}class IE extends UI{decodeUTF8(){return new EE(this)}}class EE extends NE{constructor(e){super(),this.upstream=e,this.impl=new $E(e)}summary(){return this.impl.summary()}async next(){return this.impl.next()}}class $E extends eE{constructor(e){if(super(),this.upstream=e,Ye().get("IS_BROWSER"))this.decoder=new TextDecoder("utf-8");else{const{StringDecoder:e}=n(4637);this.decoder=new e("utf8")}}summary(){return`${this.upstream.summary()} -> Utf8`}async pump(){const e=await this.upstream.next();let t,n;return!e.done&&(t=e.value,n=Ye().get("IS_BROWSER")?this.decoder.decode(t,{stream:!0}):this.decoder.write(Buffer.from(t.buffer)),this.outputQueue.push(n),!0)}}class CE extends IE{constructor(e,t={}){super(),this.file=e,this.options=t,oe(e instanceof Uint8Array||!!Ye().get("IS_BROWSER")&&(e instanceof File||e instanceof Blob),(()=>"FileChunkIterator only supports File, Blob and Uint8Array right now.")),this.offset=t.offset||0,this.chunkSize=t.chunkSize||1048576}summary(){return`FileChunks ${this.file}`}async next(){if(this.offset>=(this.file instanceof Uint8Array?this.file.byteLength:this.file.size))return{value:null,done:!0};const e=new Promise(((e,t)=>{const n=this.offset+this.chunkSize;if(this.file instanceof Uint8Array)e(new Uint8Array(this.file.slice(this.offset,n)));else{const r=new FileReader;r.onload=n=>{let s=r.result;if(s instanceof ArrayBuffer&&(s=new Uint8Array(s)),!(s instanceof Uint8Array))return t(new TypeError("FileReader returned unknown type."));e(s)},r.onabort=e=>t(new Error("Aborted")),r.onerror=e=>t(new Error(e.type));const s=this.file.slice(this.offset,n);r.readAsArrayBuffer(s)}this.offset=n}));return{value:await e,done:!1}}}function AE(e){return"string"==typeof e&&"file://"===e.slice(0,7)}class _E extends kE{constructor(e,t={}){super(),this.input=e,this.options=t}async iterator(){if(AE(this.input)&&Ye().get("IS_NODE")){const e=n(279);this.input=e.readFileSync(this.input.slice(7))}return new CE(this.input,this.options)}}class RE extends kE{constructor(e,t={}){super(),this.url=e,this.fileOptions=t}async iterator(){return AE(this.url)?new _E(this.url,this.fileOptions).iterator():async function(e,t={},n){let r,s;var a;"string"==typeof e?r=e:(r=e.url,s={method:(a=e).method,headers:a.headers,body:a.body,mode:a.mode,credentials:a.credentials,cache:a.cache,redirect:a.redirect,referrer:a.referrer,integrity:a.integrity});const o=await(n||Xs)(r,s);if(o.ok){const e=new Uint8Array(await o.arrayBuffer());return new CE(e,t)}throw new Error(o.statusText)}(this.url,this.fileOptions)}}function DE(e,t={}){return new xE(new RE(e),t)}function FE(e){const t=WI(e);return lE((async()=>t))}function OE(e){return lE((async()=>{const t=await e();return WI((()=>t.next()))}))}async function ME(e,t){return vE.create(e,t)}async function LE(e){return wE.create(e)}const zE="4.22.0";function PE(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&oe("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the CPU backend.`))}))}const BE=yd;class VE extends X{nextDataId(){return VE.nextDataId++}constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new Y(this,ao())}write(e,t,n){this.firstUse&&(this.firstUse=!1,Ye().get("IS_NODE")&&xs("\n============================\nHi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. \n============================"));const r={id:this.nextDataId()};return this.data.set(r,{values:e,dtype:n,refCount:1}),r}makeTensorInfo(e,t,n){let r;if("string"===t&&null!=n&&n.length>0&&Ce(n[0])){const s=n.map((e=>Zs(e)));r=this.write(s,e,t)}else r=this.write(n,e,t);return{dataId:r,shape:e,dtype:t}}refCount(e){return this.data.has(e)?this.data.get(e).refCount:0}incRef(e){this.data.get(e).refCount++}decRef(e){this.data.has(e)&&this.data.get(e).refCount--}move(e,t,n,r,s){this.data.set(e,{values:t,dtype:r,refCount:s})}numDataIds(){return this.data.numDataIds()}async read(e){return this.readSync(e)}readSync(e){const{dtype:t,complexTensorInfos:n}=this.data.get(e);return"complex64"===t?hm(this.readSync(n.real.dataId),this.readSync(n.imag.dataId)):ze(this.data.get(e).values,t)}bufferSync(e){const t=this.readSync(e.dataId);if("string"===e.dtype)try{const n=t.map((e=>Qs(e)));return ki(e.shape,e.dtype,n)}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return ki(e.shape,e.dtype,t)}makeOutput(e,t,n){return ao().makeTensorFromTensorInfo(this.makeTensorInfo(t,n,e),this)}disposeData(e,t=!1){if(this.data.has(e)){if(this.data.get(e).refCount--,!t&&this.data.get(e).refCount>0)return!1;const{complexTensorInfos:n}=this.data.get(e);null!=n&&(this.disposeData(n.real.dataId,!0),this.disposeData(n.imag.dataId,!0)),this.data.delete(e)}return!0}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}async time(e){const t=Ys();return e(),{kernelMs:Ys()-t}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){PE([e],"where");const t=this.readSync(e.dataId);return BE(e.shape,t)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}function WE(e){const t=new Float32Array(e.length);for(let n=0;n<e.length;++n)t[n]=Math.abs(e[n]);return t}VE.nextDataId=0;const UE={kernelName:et,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend;PE(t,"abs");let r=new Float32Array(ue(t.shape));return r=WE(n.data.get(t.dataId).values),n.makeOutput(r,t.shape,t.dtype)}};function GE(e){return(t,n,r,s,a)=>{const o=rl(t,n),i=o.length,l=Oe(o),u=ke(a,ue(o)),c=t.length,p=n.length,h=Oe(t),d=Oe(n),f=tl(t,o),m=tl(n,o);if(f.length+m.length===0)for(let t=0;t<u.length;++t)u[t]=e(r[t%r.length],s[t%s.length]);else for(let t=0;t<u.length;++t){const n=Ge(t,i,l),a=n.slice(-c);f.forEach((e=>a[e]=0));const o=Ue(a,c,h),g=n.slice(-p);m.forEach((e=>g[e]=0));const y=Ue(g,p,d);u[t]=e(r[o],s[y])}return[u,o]}}function HE(e){const{inputs:t,backend:n}=e,{real:r,imag:s}=t,a=n.data.get(r.dataId).values,o=n.data.get(s.dataId).values,i=n.makeTensorInfo(r.shape,"complex64");return n.data.get(i.dataId).complexTensorInfos={real:n.makeTensorInfo(r.shape,"float32",a),imag:n.makeTensorInfo(s.shape,"float32",o)},i}const jE={kernelName:Et,backendName:"cpu",kernelFunc:HE};function KE(e,t,n="float32"){if("complex64"===n)return HE({inputs:{real:KE(e,t,"float32"),imag:KE(e,t,"float32")},backend:e});const r=Be(ue(t),n);return e.makeTensorInfo(t,n,r)}function qE(e){const{inputs:t,backend:n}=e,{x:r}=t;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}const YE={kernelName:yn,backendName:"cpu",kernelFunc:qE};function XE(e){const{inputs:t,backend:n}=e,{input:r}=t,s=n.data.get(r.dataId).complexTensorInfos.real,a=n.data.get(s.dataId).values;return n.makeTensorInfo(s.shape,s.dtype,a)}const ZE={kernelName:mr,backendName:"cpu",kernelFunc:XE};function QE(e,t,n,r){if("int32"===r)return[t,"int32",Int32Array.from(e)];if("bool"===r){const r=qs([0],n),[s,a]=GE(((e,t)=>e!==t?1:0))(t,[],e,r,"bool");return[a,"bool",s]}throw new Error(`Error in Cast: failed to cast ${n} to ${r}`)}function JE(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{dtype:a}=r;if("complex64"===a){if("complex64"===s.dtype)return qE({inputs:{x:s},backend:n});const e=KE(n,s.shape,s.dtype),t=JE({inputs:{x:s},backend:n,attrs:{dtype:"float32"}}),r=HE({inputs:{real:t,imag:e},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),r}if("complex64"===s.dtype){const e=XE({inputs:{input:s},backend:n}),t=JE({inputs:{x:e},backend:n,attrs:{dtype:a}});return n.disposeIntermediateTensorInfo(e),t}if(!Ie(s.dtype,a)){const e=qE({inputs:{x:s},backend:n});return{dataId:e.dataId,shape:e.shape,dtype:a}}const o=n.data.get(s.dataId).values,[i,l,u]=QE(o,s.shape,s.dtype,a);return n.makeTensorInfo(i,l,u)}const e$={kernelName:Tt,backendName:"cpu",kernelFunc:JE};function t$(e,t,n,r){return null==n?({inputs:n,backend:s})=>{const{a,b:o}=n,i=s;PE([a,o],e);const l=i.data.get(a.dataId).values,u=i.data.get(o.dataId).values,c="string"===a.dtype?jm(l):l,p="string"===a.dtype?jm(u):u,h=r||a.dtype,[d,f]=t(a.shape,o.shape,c,p,h);return i.makeTensorInfo(f,h,d)}:({inputs:e,backend:s})=>{const{a,b:o}=e,i=s;if("complex64"===a.dtype||"complex64"===o.dtype){const e=JE({inputs:{x:a},backend:i,attrs:{dtype:"complex64"}}),t=i.data.get(e.dataId),r=t.complexTensorInfos.real,s=t.complexTensorInfos.imag,l=i.data.get(r.dataId).values,u=i.data.get(s.dataId).values,c=JE({inputs:{x:o},backend:i,attrs:{dtype:"complex64"}}),p=i.data.get(c.dataId),h=p.complexTensorInfos.real,d=p.complexTensorInfos.imag,f=i.data.get(h.dataId).values,m=i.data.get(d.dataId).values,[g,y,b]=n(a.shape,o.shape,l,u,f,m),x=i.makeTensorInfo(b,"float32",g),w=i.makeTensorInfo(b,"float32",y),v=HE({inputs:{real:x,imag:w},backend:i});return i.disposeIntermediateTensorInfo(e),i.disposeIntermediateTensorInfo(c),i.disposeIntermediateTensorInfo(x),i.disposeIntermediateTensorInfo(w),v}{const e=i.data.get(a.dataId).values,n=i.data.get(o.dataId).values,s=r||a.dtype,[l,u]=t(a.shape,o.shape,e,n,s);return i.makeTensorInfo(u,s,l)}}}function n$(e){return(t,n,r,s,a,o)=>{const i=rl(t,n),l=ue(i),u=i.length,c=Oe(i),p=ke("float32",l),h=ke("float32",l),d=tl(t,i),f=tl(n,i),m=hm(r,s),g=hm(a,o),y=t.length,b=Oe(t),x=n.length,w=Oe(n);if(d.length+f.length===0)for(let t=0;t<p.length;t++){const n=t%m.length,r=t%g.length,s=e(m[2*n],m[2*n+1],g[2*r],g[2*r+1]);p[t]=s.real,h[t]=s.imag}else for(let t=0;t<p.length;t++){const n=Ge(t,u,c),r=n.slice(-y);d.forEach((e=>r[e]=0));const s=Ue(r,y,b),a=n.slice(-x);f.forEach((e=>a[e]=0));const o=Ue(a,x,w),i=e(m[2*s],m[2*s+1],g[2*o],g[2*o+1]);p[t]=i.real,h[t]=i.imag}return[p,h,i]}}const r$=GE(((e,t)=>e+t)),s$=n$(((e,t,n,r)=>({real:e+n,imag:t+r}))),a$=t$(rt,r$,s$),o$={kernelName:rt,backendName:"cpu",kernelFunc:a$};function i$(e,t,n,r,s){const a=ue(r),o=Be(s,n);for(let n=0;n<e.length;n++){const r=e[n];if(r<0)throw new Error("Input x must be non-negative!");r>=s||(o[r]+=a>0?t[n]:1)}return o}function l$(e,t,n,r=!1){const s=e.shape[0],a=e.shape[1],o=ki([s,n],t.dtype);for(let i=0;i<s;i++)for(let s=0;s<a;s++){const a=e.get(i,s);if(a<0)throw new Error("Input x must be non-negative!");a>=n||(r?o.set(1,i,a):t.size>0?o.set(o.get(i,a)+t.get(i,s),i,a):o.set(o.get(i,a)+1,i,a))}return o}const u$=GE(((e,t)=>e&t)),c$=t$(vt,u$),p$={kernelName:vt,backendName:"cpu",kernelFunc:c$};function h$(e){return(t,n,r)=>{const s=Ne(n,t.length);for(let n=0;n<t.length;++n)s[n]=e(t[n],r);return s}}function d$(e,t,n){return f$(e,h$(t),n)}function f$(e,t,n){return({inputs:r,attrs:s,backend:a})=>{const{x:o}=r;PE(o,e);const i=a,l=i.data.get(o.dataId).values;let u;if("string"===o.dtype){if(!Array.isArray(l))throw new Error("String tensor's value was not an instance of Array");u=jm(l)}else u=l;const c=n||o.dtype,p=t(u,c,s);return i.makeTensorInfo(o.shape,c,p)}}const m$=h$((e=>Math.ceil(e))),g$=f$(St,m$),y$={kernelName:St,backendName:"cpu",kernelFunc:g$};function b$(e,t,n,r){const s=Ne(n,ue(t));if(r&&"string"!==n){let t=0;e.forEach((e=>{const n=ue(e.shape);s.set(e.vals,t),t+=n}))}else{let r=0;e.forEach((e=>{const a="string"===n?jm(e.vals):e.vals;let o=0;for(let n=0;n<e.shape[0];++n){const i=n*t[1]+r;for(let t=0;t<e.shape[1];++t)s[i+t]=a[o++]}r+=e.shape[1]}))}return s}const x$=GE(((e,t)=>e===t?1:0)),w$=t$(nn,x$,null,"bool"),v$={kernelName:nn,backendName:"cpu",kernelFunc:w$},k$=h$((e=>Math.exp(e))),N$=f$(rn,k$,"float32"),T$={kernelName:rn,backendName:"cpu",kernelFunc:N$},S$=h$((e=>Math.expm1(e))),I$=f$(an,S$),E$={kernelName:an,backendName:"cpu",kernelFunc:I$},$$=h$((e=>Math.floor(e))),C$=f$(cn,$$),A$={kernelName:cn,backendName:"cpu",kernelFunc:C$},_$=GE(((e,t)=>Math.floor(e/t))),R$=t$(pn,_$,null,"int32"),D$={kernelName:pn,backendName:"cpu",kernelFunc:R$};function F$(e,t,n,r,s,a,o,i,l){const u=ki([r,a],n);for(let n=0;n<r;n++){const r=[];let c=0;for(let t=0;t<s;t++){const a=e[n*s+t];c+=a*o[t],r.push(a)}if(c<0||c>=l/a)throw new Error(`Invalid indices: ${r} does not index into ${i}`);for(let e=0;e<a;e++)u.values[n*a+e]=t.get(...t.indexToLoc(c*a+e))}return u}function O$(e,t,n){const r=ki(n,e.dtype);for(let n=0;n<r.size;++n){const s=r.indexToLoc(n).slice(),a=s[0],o=s[2],i=t.locToIndex([a,o]);s[2]=t.values[i];const l=e.locToIndex(s);0<=l&&l<e.values.length&&(r.values[n]=e.values[l])}return r}const M$=GE(((e,t)=>e>t?1:0)),L$=t$(mn,M$,null,"bool"),z$={kernelName:mn,backendName:"cpu",kernelFunc:L$},P$=GE(((e,t)=>e>=t?1:0)),B$=t$(gn,P$,null,"bool"),V$={kernelName:gn,backendName:"cpu",kernelFunc:B$},W$=GE(((e,t)=>e<t?1:0)),U$=t$(Tn,W$,null,"bool"),G$={kernelName:Tn,backendName:"cpu",kernelFunc:U$},H$=GE(((e,t)=>e<=t?1:0)),j$=t$(Sn,H$,null,"bool"),K$={kernelName:Sn,backendName:"cpu",kernelFunc:j$};function q$(e,t,n){const r=(t-e)/(n-1),s=Be(n,"float32");s[0]=e;for(let e=1;e<s.length;e++)s[e]=s[e-1]+r;return s}const Y$=h$((e=>Math.log(e))),X$=f$(En,Y$),Z$={kernelName:En,backendName:"cpu",kernelFunc:X$};function Q$(e,t,n,r){const s=ke(r,ue(n));for(let n=0;n<s.length;++n){const r=n*t;let a=e[r];for(let n=0;n<t;++n){const t=e[r+n];(Number.isNaN(t)||t>a)&&(a=t)}s[n]=a}return s}const J$=GE(((e,t)=>Math.max(e,t))),eC=t$(Pn,J$),tC={kernelName:Pn,backendName:"cpu",kernelFunc:eC},nC=GE(((e,t)=>Math.min(e,t))),rC=t$(Kn,nC),sC={kernelName:Kn,backendName:"cpu",kernelFunc:rC},aC=GE(((e,t)=>e*t)),oC=n$(((e,t,n,r)=>({real:e*n-t*r,imag:e*r+t*n}))),iC=t$(Zn,aC,oC),lC={kernelName:Zn,backendName:"cpu",kernelFunc:iC};function uC(e,t,n){const r=Ks(-1,n);return aC([],t,r,e,n)}const cC={kernelName:Qn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t;PE(r,"neg");const s=n.data.get(r.dataId).values,[a,o]=uC(s,r.shape,r.dtype);return n.makeTensorInfo(o,r.dtype,a)}},pC=GE(((e,t)=>e!==t?1:0)),hC=t$(Jn,pC,null,"bool"),dC={kernelName:Jn,backendName:"cpu",kernelFunc:hC};function fC(e,t,n,r,s){const a=t.length,o=ue(t),i=Oe(t),l=Oe(s),u=ke(n,ue(s));for(let t=0;t<o;++t){const n=Ge(t,a,i),s=new Array(n.length);for(let e=0;e<s.length;e++)s[e]=n[r[e]];u[Ue(s,a,l)]=e[t]}return u}function mC(e){const{inputs:t,attrs:n,backend:r}=e,{x:s}=t,{perm:a}=n;PE(s,"transpose");const o=s.shape.length,i=new Array(o);for(let e=0;e<i.length;e++)i[e]=s.shape[a[e]];const l=fC(r.data.get(s.dataId).values,s.shape,s.dtype,a,i);return{dataId:r.write(l,i,s.dtype),shape:i,dtype:s.dtype}}const gC={kernelName:is,backendName:"cpu",kernelFunc:mC};function yC(e,t,n,r){const[s,a]=Jc(e,r),o=ka(t,"int32"),i=Be(ue(s),o),l=ue(a);for(let e=0;e<i.length;++e){const t=e*l;let r=1;for(let e=0;e<l;++e)r*=n[t+e];i[e]=r}return{outVals:i,outShape:s,outDtype:o}}const bC={kernelName:cr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r;PE(s,"prod");const i=s.shape.length,l=we(a,s.shape),u=np(l,i);let c=l,p=s;const h=[];null!=u&&(p=mC({inputs:{x:s},backend:n,attrs:{perm:u}}),h.push(p),c=sp(c.length,i));const d=n.data.get(p.dataId).values,{outVals:f,outShape:m,outDtype:g}=yC(p.shape,p.dtype,d,c);let y=m;return o&&(y=ep(m,l)),h.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(y,g,f)}};function xC(e,t){const n=e.slice(0,t);for(;n.length<t;)n.push(1);for(let r=t;r<e.length;r++)n[t-1]*=e[r];return n}function wC(e,t,n,r,s,a,o,i){if(0===e.length)throw new Error("paramsNestedSplits must be non empty");if(0===t[0].length)throw new Error("Split tensors must not be scalars");if(function(e,t,n){e.forEach(((e,r)=>{if(e<0||e>=n){const s=Ge(r,t.length,Oe(t)).join(",");throw new Error(`indices[${s}] = ${e} is not in [0, ${n})`)}}))}(a,o,t[0][0]-1),0===r.length)throw new Error("params.rank must be nonzero");const l=r[0],{outSplits:u,valueSlices:c,numValues:p}=function(e,t,n,r){const s=[];let a=0;const o=t.length-1+n.length,i=new Array(o).fill(null).map((()=>[0]));!function(e,t){for(let n=0;n<e.length;++n){const r=e[n],s=n===e.length-1?t:e[n+1].length;if(0===r.length)throw new Error("Ragged splits may not be empty");if(r[0]<0)throw new Error("Ragged splits must be non-negative");if(r[r.length-1]>s)throw new Error("Ragged splits must not point past values");for(let e=1;e<r.length;++e)if(r[e-1]>r[e])throw new Error("Ragged splits must be sorted in ascending order")}}(n,r);let l=1;for(let e=0;e<t.length-1;++e){l*=t[e];const n=t[e+1];for(let t=1;t<l+1;++t)i[e].push(t*n)}for(let r=0;r<e.length;++r){let o=e[r],l=e[r]+1;for(let e=0;e<n.length;++e){const r=n[e],s=e+t.length-1;if(s>=0){const e=i[s],t=e[e.length-1]-r[o];for(let e=o;e<l;++e)i[s].push(r[e+1]+t)}o=r[o],l=r[l]}l!==o&&(s.push([o,l]),a+=l-o)}return{outSplits:i,valueSlices:s,numValues:a}}(a,o,e,l),h=function(e){const t=[];for(let n=0;n<e.length;++n){const r=Ne("int32",e[n].length);t.push(r),e[n].forEach(((e,t)=>r[t]=e))}return t}(u),d=function(e,t,n,r,s){const a=t.slice();a[0]=s;const o=Ne(n,ue(a)),i=e.length;return function(e,t,n,r,s,a){const o=xC(t,2)[1],i=xC(a,2)[1];let l=0;for(const t of n)for(let n=t[0];n<t[1];++n){for(let t=0;t<r;++t)s[l*i+t]=e[n*o+t];++l}}(e,t,r,0===i?0:i/t[0],o,a),[o,a]}(n,r,s,c,p);return[h,d[0],d[1]]}const vC=2147483647;function kC(e,t,n,r,s,a,o){if(t.length>1)throw new Error("starts must be a scalar or vector");if(s.length>1)throw new Error("limits must be a scalar or vector");if(o.length>1)throw new Error("deltas must be a scalar or vector");const i=0===t.length,l=0===s.length,u=0===o.length,c=[];i||c.push(t[0]),l||c.push(s[0]),u||c.push(o[0]);for(let e=1;e<c.length;++e)if(c[e]!==c[e-1])throw new Error("starts, limits, and deltas must have the same shape");const p=0===c.length?1:c[0],h=Ne("int32",p+1);h[0]=0;for(let t=0;t<p;++t){const n=i?e[0]:e[t],s=l?r[0]:r[t],o=u?a[0]:a[t];if(0===o)throw new Error("Requires delta != 0");let c;if(o>0&&s<n||o<0&&s>n)c=0;else if(c=Math.ceil(Math.abs((s-n)/o)),c>vC)throw new Error(`Requires ((limit - start) / delta) <= ${vC}`);h[t+1]=h[t]+c}const d=Ne(n,h[p]);let f=0;for(let t=0;t<p;++t){const n=h[t+1]-h[t];let r=i?e[0]:e[t];const s=u?a[0]:a[t];for(let e=0;e<n;++e)d[f++]=r,r+=s}return[h,d]}var NC=Hf;class TC{constructor(e,t,n,r,s,a,o,i,l,u){this.shape=e,this.shapeShape=t,this.values=n,this.valuesShape=r,this.valuesDType=s,this.defaultValue=a,this.defaultValueShape=o,this.rowPartitionValues=i,this.rowPartitionValuesShapes=l,this.rowPartitionTypes=Kf(u),this.raggedRank=qf(this.rowPartitionTypes)}getRowPartitionTypeByDimension(e){return this.rowPartitionTypes[0]===NC.FIRST_DIM_SIZE?this.rowPartitionTypes[e+1]:this.rowPartitionTypes[e]}getRowPartitionTensor(e){return this.rowPartitionTypes[0]===NC.FIRST_DIM_SIZE?this.rowPartitionValues[e+1]:this.rowPartitionValues[e]}getMaxWidth(e){const t=this.getRowPartitionTensor(e-1);switch(this.getRowPartitionTypeByDimension(e-1)){case NC.VALUE_ROWIDS:return TC.getMaxWidthValueRowID(t);case NC.ROW_SPLITS:return TC.getMaxWidthRowSplit(t);default:throw new Error(`Cannot handle partition type ${NC[this.getRowPartitionTypeByDimension(e-1)]}`)}}static getMaxWidthRowSplit(e){const t=e.length;if(0===t||1===t)return 0;let n=0;for(let r=0;r<t-1;++r){const t=e[r+1]-e[r];t>n&&(n=t)}return n}static getMaxWidthValueRowID(e){const t=e.length;if(0===t)return 0;let n=0,r=e[0],s=0;for(let a=1;a<t;++a){const t=e[a];t!==r&&(r=t,s=Math.max(a-n,s),n=a)}return Math.max(t-n,s)}tensorShapeFromTensor(e,t,n=!0){if(0===t.length){if(-1===e[0])return[];throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.")}return IC(e,n)}calculateOutputSize(e){const t=this.valuesShape;Yf(this.defaultValueShape,t);const n=this.tensorShapeFromTensor(this.shape,this.shapeShape),r=jf(this.raggedRank,n,t);r[0]<0&&(r[0]=e);for(let e=1;e<=this.raggedRank;++e)r[e]<0&&(r[e]=this.getMaxWidth(e));return r}calculateFirstParentOutputIndex(e,t,n){const r=Math.min(e,n),s=[];let a=0;for(let e=0;e<r;++e,a+=t)s.push(a);for(let t=r;t<e;++t)s.push(-1);return oe(s.length===e,(()=>"Final length of result must be equal to firstDimension.")),s}calculateOutputIndexRowSplit(e,t,n,r){const s=e.length,a=[];for(let o=0;o<s-1;++o){const s=e[o+1]-e[o];let i=Math.min(r,s),l=t[o];-1===l&&(i=0);for(let e=0;e<i;++e)a.push(l),l+=n;for(let e=0;e<s-i;++e)a.push(-1)}if(s>0&&a.length!==e[s-1])throw new Error("Invalid row split size.");return a}calculateOutputIndexValueRowID(e,t,n,r){const s=e.length,a=[];if(0===s)return[];let o=0,i=e[0];if(i>=t.length)throw new Error(`Got currentValueRowId=${i}, which is not less than ${t.length}`);let l=t[i];a.push(l);for(let u=1;u<s;++u){const s=e[u];if(s===i)l>=0&&(++o,o<r?l+=n:l=-1);else{if(o=0,i=s,s>=t.length)throw new Error(`Got nextValueRowId=${s} which is not less than ${t.length}`);l=t[s]}a.push(l)}if(a.length!==e.length)throw new Error("Invalid row ids.");return a}calculateOutputIndex(e,t,n,r){const s=this.getRowPartitionTensor(e),a=this.getRowPartitionTypeByDimension(e);switch(a){case NC.VALUE_ROWIDS:return this.calculateOutputIndexValueRowID(s,t,n,r);case NC.ROW_SPLITS:if(s.length-1>t.length)throw new Error(`Row partition size is greater than output size: ${s.length-1} > ${t.length}`);return this.calculateOutputIndexRowSplit(s,t,n,r);default:throw new Error(`Unsupported partition type: ${NC[a]}`)}}getFirstDimensionSize(){const e=this.rowPartitionValues[0];if(0===this.rowPartitionTypes.length)throw new Error("No row_partition_types given.");const t=this.rowPartitionTypes[0];switch(t){case NC.FIRST_DIM_SIZE:return e[0];case NC.VALUE_ROWIDS:throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");case NC.ROW_SPLITS:return this.rowPartitionValuesShapes[0][0]-1;default:throw new Error(`Cannot handle type ${NC[t]}`)}}compute(){if(this.rowPartitionValues[0].length<=0)throw new Error("Invalid first partition input. Tensor requires at least one element.");const e=this.getFirstDimensionSize(),t=this.calculateOutputSize(e),n=new Array(this.raggedRank+1);n[n.length-1]=1;for(let e=n.length-2;e>=0;--e)n[e]=n[e+1]*t[e+1];const r=IC(t,!1),s=Ne(this.valuesDType,ue(r));if(n[0]*t[0]>0){let a=this.calculateFirstParentOutputIndex(e,n[0],t[0]);for(let e=1;e<=this.raggedRank;++e)a=this.calculateOutputIndex(e-1,a,n[e],t[e]);this.setOutput(this.raggedRank,a,s,r)}return[r,s]}setOutput(e,t,n,r){if(0===n.length)return;const s=this.values,a=n;let o=r.slice();o=o.slice(e+1);const i=ue(o),l=t.length;let u=this.defaultValue;if(u.length!==i&&1!==u.length){const e=this.defaultValueShape;lo((()=>{const t=sc(u,e),n=wc(t,o);u=n.dataSync()}))}let c=0,p=0,h=0;for(let e=0;e<=l;++e){let r=e<l?t[e]:-1;if(r!==h){if(p<h){const e=s.subarray(c*i);SC(a.subarray(p*i),e,(h-p)*i)}if(e>=l){const e=n.length;r=Math.floor(e/i)}if(r>h)if(1===this.defaultValue.length)a.subarray(h*i,r*i).fill(this.defaultValue[0]),h=r;else for(;r>h;)SC(a.slice(h*i),u,i),++h;r<0?(c=e+1,p=h):(c=e,p=h,h=p+1)}else++h}}}function SC(e,t,n){for(let r=0;r<n;r++)e[r]=t[r]}function IC(e,t){const n=[];for(let r of e){if(r<0){if(!t)throw new Error(`Dimension ${r} must be >= 0`);if(r<-1)throw new Error(`Dimension ${r} must be >= -1`);r=-1}n.push(r)}return n}function EC(e,t,n,r,s,a,o,i,l,u){return new TC(e,t,n,r,s,a,o,i,l,u).compute()}function $C(e,t,n,r){if(e===t||e<t&&n<0||t<e&&n>1)return Be(0,r);const s=Be(Math.abs(Math.ceil((t-e)/n)),r);t<e&&1===n&&(n=-1),s[0]=e;for(let e=1;e<s.length;e++)s[e]=s[e-1]+n;return s}const CC=h$((e=>1/Math.sqrt(e))),AC=f$(Ir,CC),_C={kernelName:Ir,backendName:"cpu",kernelFunc:AC};function RC(e,t,n,r,s,a,o,i,l,u){const c=[r/s,s],p=e.values,h=t.values;if(0===r)return ki(n,t.dtype);const d=l instanceof ua?l:ki(c,t.dtype);"string"==typeof l||"number"==typeof l?d.values.fill(l):"boolean"==typeof l&&d.values.fill(+l);for(let e=0;e<a;e++){const a=[];let l=0;for(let t=0;t<o;t++){const n=p[e*o+t];a.push(n),l+=n*i[t]}if(l<0||l>=r/s)throw new Error(`Invalid indices: ${a} does not index into ${n}`);for(let n=0;n<s;n++)u?d.values[l*s+n]+=h[e*s+n]:d.values[l*s+n]=0===t.rank?h[0]:h[e*s+n]}return d}const DC=h$((e=>1/(1+Math.exp(-e)))),FC=d$(Mr,(e=>1/(1+Math.exp(-e)))),OC={kernelName:Mr,backendName:"cpu",kernelFunc:FC};function MC(e,t,n,r,s){const a=cu(r,t,n),o=ue(n),i=Oe(r);if(a){const n=pu(t,i);return"string"===s?e.slice(n,n+o):e.subarray(n,n+o)}const l=ki(r,s,"string"===s?jm(e):e),u=ki(n,s);for(let e=0;e<u.size;++e){const n=u.indexToLoc(e),r=n.map(((e,n)=>e+t[n]));u.set(l.get(...r),...n)}return"string"===s?Km(u.values):u.values}function LC(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{begin:a,size:o}=r;PE(s,"slice");const[i,l]=hu(s,a,o);Ql(s,i,l);const u=MC(n.data.get(s.dataId).values,i,l,s.shape,s.dtype);return n.makeTensorInfo(l,s.dtype,u)}const zC={kernelName:Rr,backendName:"cpu",kernelFunc:LC};function PC(e,t,n,r,s,a,o){const i=t[0],l=a[0],u=new Array(l),c=new Array(i),p=t[1];if(0===l){if(0!==i)throw new Error(_m(i));return[Ne(n,0),[0,p],Ne(s,0),u,c]}let h=!0,d=0;const f=new Array(l).fill(0);for(let t=0;t<i;++t){const n=e[t*p];if(n<0)throw new Error(Rm(t,n));if(n>=l)throw new Error(Dm(t,n,l));++f[n],h=h&&n>=d,d=n}let m=!0;for(let e=0;e<l;++e){const t=0===f[e];u[e]=t,m=m&&!t,f[e]=Math.max(f[e],1),e>0&&(f[e]+=f[e-1])}if(m&&h){const t=e,n=r;for(let e=0;e<i;++e)c[e]=e;return[t,[i,p],n,u,c]}{const t=f[l-1],a=Ne(n,t*p),h=Ne(s,t),d=new Array(l).fill(0);for(let t=0;t<i;++t){const n=e[t*p],s=d[n],o=(0===n?0:f[n-1])+s;d[n]++;for(let n=0;n<p;++n)a[o*p+n]=e[t*p+n];h[o]=r[t],c[t]=o}for(let e=0;e<l;++e)if(0===d[e]){const t=0===e?0:f[e-1];a[t*p+0]=e;for(let e=1;e<p;++e)a[t*p+e]=0;h[t]=o}return[a,[t,p],h,u,c]}}function BC(e,t,n,r,s){const a=ue(r),o=t[0],i=s.length,l=[];let u=1,c=-1;for(let e=0;e<i;++e){const t=s[e];if(-1===t){if(-1!==c)throw new Error(Fm(c,e));c=e,l.push(1)}else{if(t<0)throw new Error(Om(e,t));u*=t,l.push(t)}}if(-1!==c){if(u<=0)throw new Error("reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero");const e=Math.trunc(a/u);if(u*e!==a)throw new Error(Lm(r,l));l[c]=e}if(ue(l)!==a)throw new Error(zm(r,l));const p=r.length,h=[];if(p>0){h[p-1]=1;for(let e=p-2;e>=0;--e)h[e]=h[e+1]*r[e+1]}const d=[];if(i>0){d[i-1]=1;for(let e=i-2;e>=0;--e)d[e]=d[e+1]*l[e+1]}const f=Ne(n,o*i);for(let t=0;t<o;++t){let n=0;for(let r=0;r<p;++r)n+=e[t*p+r]*h[r];for(let e=0;e<i;++e)f[t*i+e]=Math.trunc(n/d[e]),n%=d[e]}return[f,[o,i],l]}function VC(e,t,n,r,s,a=!1,o=0){const i=r.length,l=[t[0],e.length/t[0]],u=l[1],c=i>0?s[i-1]+1:0;if(c<0)throw new Error("segment ids must be >= 0");const p=t.slice();p[0]=c;const h=Ne(n,p.reduce(((e,t)=>e*t),1));if(0===i)return c>0&&h.fill(o),[h,p];if(c<=0)throw new Error("segment ids must be >= 0");let d=0,f=1,m=0,g=s[d];for(;;){let t=0;if(f<i){if(t=s[f],g===t){++f;continue}if(g>=t)throw new Error("segment ids are not increasing")}if(g<0||g>=c)throw new Error(Vm(g,c));g>m&&h.fill(o,m*u,g*u);for(let t=d;t<f;++t){const n=r[t];if(n<0||n>=l[0])throw new Error(Wm(t,r[t],l[0]));for(let t=0;t<u;t++)h[g*u+t]+=e[n*u+t]}if(a)for(let e=0;e<u;e++)h[g*u+e]/=f-d;if(d=f,++f,m=g+1,g=t,f>i)break}return m<c&&h.fill(o,m*u,c*u),[h,p]}const WC=h$((e=>Math.sqrt(e))),UC=d$(zr,(e=>Math.sqrt(e))),GC={kernelName:zr,backendName:"cpu",kernelFunc:UC},HC=GE(((e,t)=>{const n=e-t;return n*n})),jC=t$(qr,HC),KC={kernelName:qr,backendName:"cpu",kernelFunc:jC},qC=h$(((e,t)=>{const{pattern:n,replaceGlobal:r,rewrite:s}=t;return e.replace(new RegExp(n,r?"g":""),s)})),YC=f$(Xr,qC),XC={kernelName:Xr,backendName:"cpu",kernelFunc:YC};function ZC(e,t,n,r){const s=ki(e,t.dtype);for(let e=0;e<s.size;e++){const a=s.indexToLoc(e),o=new Array(a.length);for(let e=0;e<o.length;e++)o[e]=a[e]*n[e]+r[e];s.set(t.get(...o),...a)}return s}class QC{constructor(e,t,n,r,s,a){this.separator=Zs(e),this.nGramWidths=t,this.leftPad=Zs(n),this.rightPad=Zs(r),this.padWidth=s,this.preserveShort=a}getPadWidth(e){return Math.min(this.padWidth<0?e-1:this.padWidth,e-1)}getNumNGrams(e,t){const n=this.getPadWidth(t);return Math.max(0,e+2*n-t+1)}createNGrams(e,t,n,r,s,a){for(let o=0;o<s;++o){const i=this.getPadWidth(a),l=Math.max(0,i-o),u=Math.max(0,i-(s-(o+1))),c=a-(l+u),p=t+(l>0?0:o-i);let h=0;h+=l*this.leftPad.length;for(let t=0;t<c;++t)h+=e[p+t].length;h+=u*this.rightPad.length,h+=(l+u+c-1)*this.separator.length,n[r+o]=new Uint8Array(h);const d=n[r+o];let f=0;const m=e=>e.forEach((e=>d[f++]=e));for(let e=0;e<l;++e)m(this.leftPad),m(this.separator);for(let t=0;t<c-1;++t)m(e[p+t]),m(this.separator);if(c>0){m(e[p+c-1]);for(let e=0;e<u;++e)m(this.separator),m(this.rightPad)}else{for(let e=0;e<u-1;++e)m(this.rightPad),m(this.separator);m(this.rightPad)}}}compute(e,t){const n=e.length,r=t.length;if(r>0){let e=t[0];if(0!==e)throw new Error(`First split value must be 0, got ${e}`);for(let s=1;s<r;++s){let r=t[s]>=e;if(r=r&&t[s]<=n,!r)throw new Error(`Invalid split value ${t[s]}, must be in [${e}, ${n}]`);e=t[s]}if(e!==n)throw new Error(`Last split value must be data size. Expected ${n}, got ${e}`)}const s=r-1,a=Ne("int32",r);if(0===n||0===r){const e=new Array(n);for(let e=0;e<=s;++e)a[e]=0;return[e,a]}a[0]=0;for(let e=1;e<=s;++e){const n=t[e]-t[e-1];let r=0;this.nGramWidths.forEach((e=>{r+=this.getNumNGrams(n,e)})),this.preserveShort&&n>0&&0===r&&(r=1),a[e]=a[e-1]+r}const o=new Array(a[s]);for(let n=0;n<s;++n){const r=t[n];let s=a[n];if(this.nGramWidths.forEach((a=>{const i=t[n+1]-t[n],l=this.getNumNGrams(i,a);this.createNGrams(e,r,o,s,l,a),s+=l})),this.preserveShort&&s===a[n]){const a=t[n+1]-t[n];if(0===a)continue;const i=a+2*this.padWidth,l=1;this.createNGrams(e,r,o,s,l,i)}}return[o,a]}}function JC(e,t,n,r,s,a,o,i){return new QC(n,r,s,a,o,i).compute(e,t)}function eA(e,t,n,r){if(!e.length)return;if(0===t.length){for(let t=0;t<e.length;++t)r.push(e.subarray(t,t+1));return}if(1===t.length){const s=t[0];let a=e.indexOf(s);for(;-1!==a;){const t=e.subarray(0,a);n&&0===t.length||r.push(t),a=(e=e.subarray(a+1)).indexOf(s)}return void(n&&0===e.length||r.push(e))}let s=0;for(let a=0;a<e.length+1;a++)if(a===e.length||-1!==t.indexOf(e[a])){const t=e.subarray(s,a);n&&0===t.length||r.push(t),s=a+1}}function tA(e,t,n){const r=e.length,s=[];let a=0,o=0;const i=new Array(r);for(let l=0;l<r;++l){const r=s.length;eA(e[l],t,n,s);const u=s.length-r;i[l]=u,a+=u,o=Math.max(o,u)}const l=Ne("int32",2*a),u=new Array(a),c=[r,o];let p=0;for(let e=0;e<r;++e)for(let t=0;t<i[e];++t)l[2*p]=e,l[2*p+1]=t,u[p]=s[p],++p;return[l,u,c]}function nA(e,t){const n=Ne("int32",e.length);for(let r=0;r<e.length;++r)n[r]=js(e[r]).modulo(t).getLowBitsUnsigned();return n}const rA=GE(((e,t)=>e-t)),sA=n$(((e,t,n,r)=>({real:e-n,imag:t-r}))),aA=t$(ts,rA,sA),oA={kernelName:ts,backendName:"cpu",kernelFunc:aA};function iA(e,t){const n=new Array(e.rank);for(let r=0;r<n.length;r++)n[r]=e.shape[r]*t[r];const r=ki(n,e.dtype);for(let t=0;t<r.values.length;++t){const n=r.indexToLoc(t),s=new Array(e.rank);for(let t=0;t<s.length;t++)s[t]=n[t]%e.shape[t];const a=e.locToIndex(s);r.values[t]=e.values[a]}return r}const lA=(e,t)=>{const n=t.value-e.value;return 0===n?e.index-t.index:n};function uA(e,t,n=0,r=e.length-1){for(;r>n;){if(r-n>600){const s=r-n+1,a=t-n+1,o=Math.log(s),i=.5*Math.exp(2*o/3),l=.5*Math.sqrt(o*i*(s-i)/s)*Math.sign(a-s/2);uA(e,t,Math.max(n,Math.floor(t-a*i/s+l)),Math.min(r,Math.floor(t+(s-a)*i/s+l)))}const s=e[t];let a=n,o=r;for(ne(e,n,t),lA(e[r],s)>0&&ne(e,n,r);a<o;){for(ne(e,a,o),a++,o--;lA(e[a],s)<0;)a+=1;for(;lA(e[o],s)>0;)o-=1}0===lA(e[n],s)?ne(e,n,o):(o+=1,ne(e,o,r)),o<=t&&(n=o+1),t<=o&&(r=o-1)}}function cA(e,t,n,r,s){const a=t[t.length-1],[o,i]=[e.length/a,a],l=ke(n,o*r),u=ke("int32",o*r);for(let t=0;t<o;t++){const n=t*i,a=e.subarray(n,n+i);let o=new Array(a.length);a.forEach(((e,t)=>o[t]={value:e,index:t})),r<o.length&&(uA(o,r),o=o.slice(0,r)),s&&o.sort(lA);const c=t*r,p=l.subarray(c,c+r),h=u.subarray(c,c+r);for(let e=0;e<r;e++)p[e]=o[e].value,h[e]=o[e].index}const c=t.slice();return c[c.length-1]=r,[ki(c,n,l),ki(c,"int32",u)]}function pA(e,t,n,r){const s=we(t,n)[0],a=[1,n[0],1];for(let e=0;e<s;e++)a[0]*=n[e];a[1]=n[s];for(let e=s+1;e<n.length;e++)a[2]*=n[e];const o=new Map,i=new Int32Array(n[s]),l=new ua(a,r,e),u=[],c=1===a[0]&&1===a[2];for(let t=0;t<n[s];t++){let n;if(c)n=e[t].toString();else{const e=[];for(let n=0;n<a[0];n++)for(let r=0;r<a[2];r++)e.push(l.get(n,t,r));n=e.join(",")}const r=o.get(n);if(null!=r)i[t]=r;else{const e=o.size;o.set(n,e),i[t]=e,u.push(t)}}const p=a.slice();p[1]=o.size;const h=new ua(p,r);u.forEach(((e,t)=>{for(let n=0;n<a[0];n++)for(let r=0;r<a[2];r++)h.set(l.get(n,e,r),n,t,r)}));const d=n.slice();return d[s]=p[1],{outputValues:h.values,outputShape:d,indices:i}}const hA="4.22.0";xo("cpu",(()=>new VE),1);const dA=d$(Jt,(e=>e>=0?e:Math.exp(e)-1)),fA={kernelName:Jt,backendName:"cpu",kernelFunc:dA};function mA(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{alpha:a}=r;PE([s],"leakyRelu");const o=ue(s.shape),i=n.data.get(s.dataId).values,l=ke("float32",o);for(let e=0;e<i.length;e++)l[e]=i[e]<0?a*i[e]:i[e];return n.makeTensorInfo(s.shape,"float32",l)}const gA={kernelName:Nn,backendName:"cpu",kernelFunc:mA},yA=GE(((e,t)=>e<0?t*e:e));function bA(e){const{inputs:t,backend:n}=e,{x:r,alpha:s}=t;PE([r,s],"prelu");const a=n.data.get(r.dataId).values,o=n.data.get(s.dataId).values,[i,l]=yA(r.shape,s.shape,a,o,"float32");return n.makeTensorInfo(l,"float32",i)}const xA={kernelName:ur,backendName:"cpu",kernelFunc:bA},wA=d$(yr,(e=>Math.max(0,e))),vA={kernelName:yr,backendName:"cpu",kernelFunc:wA},kA=d$(Nr,(e=>Math.min(Math.max(0,e),6))),NA={kernelName:Nr,backendName:"cpu",kernelFunc:kA};function TA(e,t,n,r,s){if("linear"===n)return qE({inputs:{x:t},backend:e});if("relu"===n)return wA({inputs:{x:t},backend:e});if("elu"===n)return dA({inputs:{x:t},backend:e});if("relu6"===n)return kA({inputs:{x:t},backend:e});if("prelu"===n)return bA({inputs:{x:t,alpha:r},backend:e});if("leakyrelu"===n)return mA({inputs:{x:t},backend:e,attrs:{alpha:s}});if("sigmoid"===n)return FC({inputs:{x:t},backend:e});throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}function SA(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{shape:a}=r,o=ue(s.shape),i=xe(a,o),l=ue(i);oe(o===l,(()=>`The new shape (${i}) has ${l} elements and the old shape (${s.shape}) has ${o} elements. The new shape and old shape must have the same number of elements.`)),n.incRef(s.dataId);const u=n.data.get(s.dataId);if(null!=u.complexTensorInfos){const e=u.complexTensorInfos.real,t=u.complexTensorInfos.imag;e.shape=i,t.shape=i}return{dataId:s.dataId,shape:i,dtype:s.dtype}}const IA={kernelName:br,backendName:"cpu",kernelFunc:SA};function EA(e){const{inputs:t,backend:n,attrs:r}=e,{a:s,b:a}=t,{transposeA:o,transposeB:i}=r;PE([s,a],"matMul");const l=s.shape.length,u=a.shape.length,c=o?s.shape[l-2]:s.shape[l-1],p=i?a.shape[u-1]:a.shape[u-2],h=o?s.shape[l-1]:s.shape[l-2],d=i?a.shape[u-2]:a.shape[u-1],f=s.shape.slice(0,-2),m=a.shape.slice(0,-2),g=ue(f),y=ue(m),b=rl(s.shape.slice(0,-2),a.shape.slice(0,-2)).concat([h,d]);oe(c===p,(()=>`Error in matMul: inner shapes (${c}) and (${p}) of Tensors with shapes ${s.shape} and ${a.shape} and transposeA=${o} and transposeB=${i} must match.`));const x=i?[y,d,p]:[y,p,d],w=SA({inputs:{x:s},backend:n,attrs:{shape:o?[g,c,h]:[g,h,c]}}),v=SA({inputs:{x:a},backend:n,attrs:{shape:x}}),k=o?w.shape[1]:w.shape[2],N=o?w.shape[2]:w.shape[1],T=i?v.shape[1]:v.shape[2],S=Math.max(g,y),I=n.data.get(w.dataId).values,E=n.data.get(v.dataId).values,$=Oe(w.shape),C=Oe(v.shape),[A,_,R]=o?[$[0],1,$[1]]:[$[0],$[1],1],[D,F,O]=i?[1,C[1],C[0]]:[C[1],1,C[0]],M=N*T,L=ki([S,N,T],w.dtype),z=L.values,P=n.blockSize;for(let e=0;e<S;e++){const t=e%g,n=e%y;for(let r=0;r<N;r+=P){const s=Math.min(r+P,N);for(let a=0;a<T;a+=P){const o=Math.min(a+P,T);for(let i=0;i<k;i+=P){const l=Math.min(i+P,k);for(let u=r;u<s;u++)for(let r=a;r<o;r++){let s=0;for(let e=i;e<l;e++)s+=I[t*A+u*_+e*R]*E[e*D+r*F+n*O];z[e*M+(u*T+r)]+=s}}}}}return n.disposeIntermediateTensorInfo(w),n.disposeIntermediateTensorInfo(v),n.makeTensorInfo(b,L.dtype,L.values)}const $A={kernelName:bt,backendName:"cpu",kernelFunc:EA},CA={kernelName:gs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{a:s,b:a,bias:o,preluActivationWeights:i}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:p}=r;let h,d,f;const m=[];h=EA({inputs:{a:s,b:a},attrs:{transposeA:l,transposeB:u},backend:n}),o&&(d=a$({inputs:{a:h,b:o},backend:n}),m.push(h),h=d),c&&(f=TA(n,h,c,i,p),m.push(h),h=f);for(const e of m)n.disposeIntermediateTensorInfo(e);return h}},AA=d$(tt,(e=>Math.acos(e))),_A={kernelName:tt,backendName:"cpu",kernelFunc:AA},RA=d$(nt,(e=>Math.acosh(e))),DA={kernelName:nt,backendName:"cpu",kernelFunc:RA},FA={kernelName:st,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,r=t;PE(t,"addN");const s=r.map((e=>n.data.get(e.dataId).values)),a=ki(r[0].shape,r[0].dtype),o=a.values;for(let e=0;e<r.length;e++){const t=s[e];for(let e=0;e<o.length;e++)o[e]+=t[e]}return n.makeTensorInfo(a.shape,a.dtype,a.values)}},OA={kernelName:at,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r;PE(s,"all");const i=we(a,s.shape);let l=i;const u=np(l,s.shape.length);let c=s;null!=u&&(c=mC({inputs:{x:s},backend:n,attrs:{perm:u}}),l=sp(l.length,s.shape.length)),tp("all",l,c.shape.length);const[p,h]=Jc(c.shape,l),d=ue(h),f=Be(ue(p),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*d;let n=m[t];for(let e=0;e<d;++e){const r=m[t+e];n=n&&r}f[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(p,c.dtype,f);if(o){const e=SA({inputs:{x:g},backend:n,attrs:{shape:ep(p,i)}});return n.disposeIntermediateTensorInfo(g),e}return g}},MA={kernelName:ot,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r;PE(s,"any");const i=we(a,s.shape);let l=i;const u=np(l,s.shape.length);let c=s;null!=u&&(c=mC({inputs:{x:s},backend:n,attrs:{perm:u}}),l=sp(l.length,s.shape.length)),tp("any",l,c.shape.length);const[p,h]=Jc(c.shape,l),d=ue(h),f=Be(ue(p),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*d;let n=m[t];for(let e=0;e<d;++e){const r=m[t+e];n=n||r}f[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(p,c.dtype,f);if(o){const e=SA({inputs:{x:g},backend:n,attrs:{shape:ep(p,i)}});return n.disposeIntermediateTensorInfo(g),e}return g}},LA={kernelName:it,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a}=r;PE(s,"argMax");let o=we(a,s.shape);const i=np(o,s.shape.length);let l=s;const u=[];null!=i&&(l=mC({inputs:{x:s},backend:n,attrs:{perm:i}}),u.push(l),o=sp(o.length,l.shape.length)),o=[o[0]],tp("argMax",o,l.shape.length);const[c,p]=Jc(l.shape,o),h=Be(ue(c),"int32"),d=ue(p),f=n.data.get(l.dataId).values;for(let e=0;e<h.length;++e){const t=e*d;let n=f[t],r=0;for(let e=0;e<d;++e){const s=f[t+e];s>n&&(n=s,r=e)}h[e]=r}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c,"int32",h)}},zA={kernelName:lt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a}=r;PE(s,"argMin");let o=we(a,s.shape);const i=np(o,s.shape.length);let l=s;const u=[];null!=i&&(l=mC({inputs:{x:s},backend:n,attrs:{perm:i}}),u.push(l),o=sp(o.length,l.shape.length)),o=[o[0]],tp("argMin",o,l.shape.length);const[c,p]=Jc(l.shape,o),h=Be(ue(c),"int32"),d=ue(p),f=n.data.get(l.dataId).values;for(let e=0;e<h.length;++e){const t=e*d;let n=f[t],r=0;for(let e=0;e<d;++e){const s=f[t+e];s<n&&(n=s,r=e)}h[e]=r}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c,"int32",h)}},PA=d$(ut,(e=>Math.asin(e))),BA={kernelName:ut,backendName:"cpu",kernelFunc:PA},VA=d$(ct,(e=>Math.asinh(e))),WA={kernelName:ct,backendName:"cpu",kernelFunc:VA},UA=d$(pt,(e=>Math.atan(e))),GA={kernelName:pt,backendName:"cpu",kernelFunc:UA},HA=GE(((e,t)=>Math.atan2(e,t))),jA=t$(dt,HA),KA={kernelName:dt,backendName:"cpu",kernelFunc:jA},qA=d$(ht,(e=>Math.atanh(e))),YA={kernelName:ht,backendName:"cpu",kernelFunc:qA};function XA(e,t,n,r,s,a){const o=s.strideHeight,i=s.strideWidth,l=s.dilationHeight,u=s.dilationWidth,c=s.effectiveFilterHeight,p=s.effectiveFilterWidth,h=s.padInfo.top,d=s.padInfo.left,f="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,m=ki(s.outShape,n),g=m.values,y=s.outShape[1]*s.outShape[2]*s.outShape[3],b=s.outShape[2]*s.outShape[3],x=s.outShape[3];for(let t=0;t<s.batchSize;++t){const n=t*y,m=t*r[0];for(let t=0;t<s.inChannels;++t)for(let y=0;y<s.outHeight;++y){const w=y*o-h,v=Math.max(0,w),k=Math.min(s.inHeight,c+w),N=n+y*b;for(let n=0;n<s.outWidth;++n){const o=n*i-d,c=Math.max(0,o),h=Math.min(s.inWidth,p+o);let y=f,b=0,w=0;for(let n=v;n<k;n+=l){const s=m+n*r[1];for(let n=c;n<h;n+=u){const o=e[s+n*r[2]+t];"max"===a&&o>y?y=o:"avg"===a&&(b+=o,w++)}if(isNaN(y))break}g[N+n*x+t]="avg"===a?b/w:y}}}return m}function ZA(e,t,n,r,s=!1,a=!1){const o=ki(r.outShape,"int32"),i=r.strideHeight,l=r.strideWidth,u=r.dilationHeight,c=r.dilationWidth,p=r.effectiveFilterHeight,h=r.effectiveFilterWidth,d=r.padInfo.top,f=r.padInfo.left,m=ki(t,n,e);for(let e=0;e<r.batchSize;++e)for(let t=0;t<r.inChannels;++t)for(let n=0;n<r.outHeight;++n){const g=n*i-d;let y=g;for(;y<0;)y+=u;const b=Math.min(r.inHeight,p+g);for(let i=0;i<r.outWidth;++i){const p=i*l-f;let d=p;for(;d<0;)d+=c;const x=Math.min(r.inWidth,h+p);let w=Number.NEGATIVE_INFINITY,v=-1;for(let n=y;n<b;n+=u){const o=n-g;for(let i=d;i<x;i+=c){const l=i-p,u=m.get(e,n,i,t);u>w&&(w=u,v=s?a?((e*r.inHeight+n)*r.inWidth+i)*r.inChannels+t:(n*r.inWidth+i)*r.inChannels+t:o*h+l)}}o.set(v,e,n,i,t)}}return o}function QA(e,t,n,r,s,a){const o=s.strideDepth,i=s.strideHeight,l=s.strideWidth,u=s.dilationDepth,c=s.dilationHeight,p=s.dilationWidth,h=s.effectiveFilterDepth,d=s.effectiveFilterHeight,f=s.effectiveFilterWidth,m=s.padInfo.front,g=s.padInfo.top,y=s.padInfo.left,b="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,x=ki(s.outShape,n),w=x.values,v=s.outShape[1]*s.outShape[2]*s.outShape[3]*s.outShape[4],k=s.outShape[2]*s.outShape[3]*s.outShape[4],N=s.outShape[3]*s.outShape[4],T=s.outShape[4];for(let t=0;t<s.batchSize;++t){const n=t*v,x=t*r[0];for(let t=0;t<s.inChannels;++t)for(let v=0;v<s.outDepth;++v){const S=v*o-m;let I=S;for(;I<0;)I+=u;const E=Math.min(s.inDepth,h+S),$=n+v*k;for(let n=0;n<s.outHeight;++n){const o=n*i-g;let h=o;for(;h<0;)h+=c;const m=Math.min(s.inHeight,d+o),v=$+n*N;for(let n=0;n<s.outWidth;++n){const o=n*l-y;let i=o;for(;i<0;)i+=p;const d=Math.min(s.inWidth,f+o),g=v+n*T;let k=b,N=0,S=0;for(let n=I;n<E;n+=u){const s=x+n*r[1];for(let n=h;n<m;n+=c){const o=s+n*r[2];for(let n=i;n<d;n+=p){const s=e[o+n*r[3]+t];if("max"===a&&s>k?k=s:"avg"===a&&(N+=s,S++),isNaN(k))break}if(isNaN(k))break}if(isNaN(k))break}w[g+t]="avg"===a?N/Math.max(S,1):k}}}}return x}const JA={kernelName:ft,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t;PE(s,"avgPool");const{filterSize:a,strides:o,pad:i,dimRoundingMode:l}=r;oe(ec(o,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const u=Gu(s.shape,a,o,1,i,l);let c;if(1===u.filterWidth&&1===u.filterHeight&&he(u.inShape,u.outShape))c=qE({inputs:{x:s},backend:n});else{const e=n.data.get(s.dataId).values,t=Oe(s.shape),r=XA(e,s.shape,s.dtype,t,u,"avg");c=n.makeTensorInfo(u.outShape,s.dtype,r.values)}return c}},e_={kernelName:gt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{filterSize:a,strides:o,pad:i,dimRoundingMode:l,dataFormat:u}=r;PE(s,"avgPool3d");const c=Hu(s.shape,a,o,1,i,l,u),p=QA(n.data.get(s.dataId).values,s.shape,s.dtype,Oe(s.shape),c,"avg");return n.makeTensorInfo(p.shape,"float32",p.values)}},t_={kernelName:yt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,{filterSize:o,strides:i,pad:l,dimRoundingMode:u}=r;PE([s,a],"avgPool3DGrad");const c=Hu(a.shape,o,i,1,l,u),p=c.strideDepth,h=c.strideHeight,d=c.strideWidth,f=c.filterDepth,m=c.filterHeight,g=c.filterWidth,y=c.dilationDepth,b=c.dilationHeight,x=c.dilationWidth,w=c.effectiveFilterDepth,v=c.effectiveFilterHeight,k=c.effectiveFilterWidth,N=w-1-c.padInfo.front,T=k-1-c.padInfo.left,S=v-1-c.padInfo.top,I=ki(a.shape,"float32"),E=1/(f*m*g),$=n.bufferSync(s);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inDepth;++n)for(let r=0;r<c.inHeight;++r)for(let s=0;s<c.inWidth;++s){const a=n-N,o=r-S,i=s-T;let l=0;for(let n=0;n<w;n+=y){const r=(a+n)/p;if(!(r<0||r>=c.outDepth||Math.floor(r)!==r))for(let n=0;n<v;n+=b){const s=(o+n)/h;if(!(s<0||s>=c.outHeight||Math.floor(s)!==s))for(let n=0;n<k;n+=x){const a=(i+n)/d;a<0||a>=c.outWidth||Math.floor(a)!==a||(l+=$.get(e,r,s,a,t))}}}I.set(l*E,e,n,r,s,t)}return n.makeTensorInfo(I.shape,I.dtype,I.values)}},n_={kernelName:mt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,o=a;PE([s,a],"avgPoolGrad");const{filterSize:i,strides:l,pad:u}=r,c=Gu(o.shape,i,l,1,u),p=c.strideHeight,h=c.strideWidth,d=c.filterHeight,f=c.filterWidth,m=c.dilationHeight,g=c.dilationWidth,y=c.effectiveFilterHeight,b=c.effectiveFilterWidth,x=b-1-c.padInfo.left,w=y-1-c.padInfo.top,v=ki(o.shape,"float32"),k=1/(d*f),N=n.data.get(s.dataId).values,T=ki(s.shape,"float32",N);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inHeight;++n)for(let r=0;r<c.inWidth;++r){const s=n-w,a=r-x;let o=0;for(let n=0;n<y;n+=m){const r=(s+n)/p;if(!(r<0||r>=c.outHeight||Math.floor(r)!==r))for(let n=0;n<b;n+=g){const s=(a+n)/h;s<0||s>=c.outWidth||Math.floor(s)!==s||(o+=T.get(e,r,s,t))}}v.set(o*k,e,n,r,t)}return n.makeTensorInfo(v.shape,v.dtype,v.values)}},r_={kernelName:hn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,scale:a,offset:o,mean:i,variance:l}=t;oe(i.shape.length===l.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),oe(null==o||i.shape.length===o.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),oe(null==a||i.shape.length===a.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks.")),PE([s,i,l,a,o],"batchNorm");let{varianceEpsilon:u}=r;null==u&&(u=.001);const c=n.data.get(s.dataId).values,p=n.data.get(i.dataId).values,h=n.data.get(l.dataId).values,d=a?n.data.get(a.dataId).values:new Float32Array([1]),f=o?n.data.get(o.dataId).values:new Float32Array([0]),m=new Float32Array(c.length),g=f.length,y=d.length,b=h.length,x=p.length;let w=0,v=0,k=0,N=0;for(let e=0;e<c.length;++e)m[e]=f[w++]+(c[e]-p[v++])*d[k++]/Math.sqrt(h[N++]+u),w>=g&&(w=0),v>=x&&(v=0),k>=y&&(k=0),N>=b&&(N=0);return n.makeTensorInfo(s.shape,s.dtype,m)}},s_={kernelName:xt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockShape:a,crops:o}=r;PE([s],"batchToSpaceND");const i=a.reduce(((e,t)=>e*t)),l=Jf(s.shape,a,i),u=em(l.length,a.length),c=tm(s.shape,a,i),p=nm(o,a.length),h=rm(c,o,a.length),d=SA({inputs:{x:s},backend:n,attrs:{shape:l}}),f=mC({inputs:{x:d},backend:n,attrs:{perm:u}}),m=SA({inputs:{x:f},backend:n,attrs:{shape:c}}),g=LC({inputs:{x:m},backend:n,attrs:{begin:p,size:h}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}},a_={kernelName:wt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,weights:a}=t,{size:o}=r,i=i$(n.data.get(s.dataId).values,n.data.get(a.dataId).values,a.dtype,a.shape,o);return n.makeTensorInfo([o],a.dtype,i)}},o_={kernelName:Nt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{s0:r,s1:s}=t,a=n.data.get(r.dataId).values,o=n.data.get(s.dataId).values,i=rl(Array.from(a),Array.from(o));return n.makeTensorInfo([i.length],"int32",Int32Array.from(i))}},i_=d$(It,((e,t)=>{const n=t;return e>n.clipValueMax?n.clipValueMax:e<n.clipValueMin?n.clipValueMin:e})),l_={kernelName:It,backendName:"cpu",kernelFunc:i_},u_={kernelName:$t,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend,r=new Float32Array(ue(t.shape)),s=n.data.get(t.dataId),a=s.complexTensorInfos.real,o=s.complexTensorInfos.imag,i=n.data.get(a.dataId).values,l=n.data.get(o.dataId).values;for(let e=0;e<i.length;e++){const t=i[e],n=l[e];r[e]=Math.hypot(t,n)}return n.makeOutput(r,t.shape,"float32")}};function c_(e){const{inputs:t,backend:n}=e,{input:r}=t,s=n.data.get(r.dataId).complexTensorInfos.imag,a=n.data.get(s.dataId).values;return n.makeTensorInfo(s.shape,s.dtype,a)}const p_={kernelName:xn,backendName:"cpu",kernelFunc:c_};function h_(e){const{inputs:t,backend:n,attrs:r}=e,{axis:s}=r,a=we(s,t[0].shape)[0];Uf(t.map((e=>e.shape)),a);let o=Gf(t.map((e=>e.shape)),a);if(0===ue(o))return n.makeTensorInfo(o,t[0].dtype,[]);const i=t.filter((e=>ue(e.shape)>0));if(1===i.length)return qE({inputs:{x:i[0]},backend:n});if("complex64"===i[0].dtype){const e=i.map((e=>XE({inputs:{input:e},backend:n}))),t=i.map((e=>c_({inputs:{input:e},backend:n}))),r=h_({inputs:e,backend:n,attrs:{axis:a}}),s=h_({inputs:t,backend:n,attrs:{axis:a}}),o=HE({inputs:{real:r,imag:s},backend:n});return e.forEach((e=>n.disposeIntermediateTensorInfo(e))),t.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(s),o}const l=i.map((e=>{const t=ue(e.shape.slice(a));return SA({inputs:{x:e},backend:n,attrs:{shape:[-1,t]}})})),u=l.map((e=>({vals:n.data.get(e.dataId).values,shape:e.shape})));o=Gf(l.map((e=>e.shape)),1);const c=1===l[0].shape[0],p=b$(u,o,t[0].dtype,c),h=Gf(i.map((e=>e.shape)),a),d=n.makeTensorInfo(h,t[0].dtype,p);return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),d}const d_={kernelName:Ct,backendName:"cpu",kernelFunc:h_};function f_(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:o,pad:i,dataFormat:l,dilations:u,dimRoundingMode:c}=r;PE([s,a],"conv2d");const p=nc(l),h=ju(s.shape,a.shape,o,u,i,c,!1,p),d=h.filterHeight,f=h.filterWidth,m=h.dilationHeight,g=h.dilationWidth,y=h.padInfo.left,b=h.padInfo.top,x="channelsLast"===h.dataFormat,w=new ua(h.outShape,s.dtype),v=Oe(s.shape),k=Oe(a.shape),N=v[0],T=x?v[1]:v[2],S=x?v[2]:1,I=x?1:v[1],E=w.strides[0],$=x?w.strides[1]:w.strides[2],C=x?w.strides[2]:1,A=x?1:w.strides[1],_=n.data.get(s.dataId).values,R=n.data.get(a.dataId).values,D=w.values;for(let e=0;e<h.batchSize;++e){const t=e*N,n=e*E;for(let e=0;e<h.outHeight;++e){const r=n+e*$,s=e*h.strideHeight-b;for(let e=0;e<d;++e){const n=s+e*m;if(n<0||n>=h.inHeight)continue;const a=e*k[0],o=t+n*T;for(let e=0;e<h.outWidth;++e){const t=r+e*C,n=e*h.strideWidth-y;for(let e=0;e<f;++e){const r=n+e*g;if(r<0||r>=h.inWidth)continue;const s=o+r*S;let i=a+e*k[1];for(let e=0;e<h.inChannels;++e){const n=_[s+e*I];for(let e=0;e<h.outChannels;++e)D[t+e*A]+=n*R[i+e];i+=h.outChannels}}}}}}return n.makeTensorInfo(w.shape,w.dtype,D)}const m_={kernelName:At,backendName:"cpu",kernelFunc:f_},g_={kernelName:_t,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:o,pad:i,dataFormat:l,dimRoundingMode:u,filterShape:c}=r;PE([s,a],"conv2dBackpropFilter");const p=nc(l),h=ju(s.shape,c,o,1,i,u,!1,p),{strideHeight:d,strideWidth:f,filterHeight:m,filterWidth:g}=h,y="channelsLast"===h.dataFormat,b=new ua(h.filterShape,"float32"),x=h.padInfo.left,w=h.padInfo.top,v=n.data.get(s.dataId).values,k=n.data.get(a.dataId).values,N=new ua(s.shape,s.dtype,v),T=new ua(a.shape,a.dtype,k);for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((w-e)/d)),n=Math.min(h.outHeight,(h.inHeight+w-e)/d);for(let r=0;r<g;++r){const s=Math.max(0,Math.ceil((x-r)/f)),a=Math.min(h.outWidth,(h.inWidth+x-r)/f);for(let o=0;o<h.inChannels;++o)for(let i=0;i<h.outChannels;++i){let l=0;for(let u=0;u<h.batchSize;++u)for(let c=t;c<n;++c){const t=e+c*d-w;for(let e=s;e<a;++e){const n=r+e*f-x;l+=y?N.get(u,t,n,o)*T.get(u,c,e,i):N.get(u,o,t,n)*T.get(u,i,c,e)}}b.set(l,e,r,o,i)}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}},y_={kernelName:Rt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{inputShape:o,strides:i,pad:l,dataFormat:u,dimRoundingMode:c}=r;PE([s,a],"conv2dBackpropInput");const p=Oe(a.shape),h=Oe(s.shape);let d=nc(u);const f=ju(o,a.shape,i,1,l,c,!1,d),m=new ua(f.inShape,"float32"),g=m.values,y=n.data.get(s.dataId).values,b=n.data.get(a.dataId).values,[x,w,v]=p,{batchSize:k,filterHeight:N,filterWidth:T,inChannels:S,inHeight:I,inWidth:E,outChannels:$,outHeight:C,outWidth:A,strideHeight:_,strideWidth:R}=f;d=f.dataFormat;const D=N-1-f.padInfo.top,F=T-1-f.padInfo.left,O="channelsLast"===d,M=m.strides[0],L=O?m.strides[1]:m.strides[2],z=O?m.strides[2]:1,P=O?1:m.strides[1],B=h[0],V=O?h[1]:h[2],W=O?h[2]:1,U=O?1:h[1];for(let e=0;e<k;++e)for(let t=0;t<S;++t)for(let n=0;n<I;++n){const r=n-D,s=Math.max(0,Math.ceil(r/_)),a=Math.min(C,(N+r)/_);for(let o=0;o<E;++o){const i=o-F,l=Math.max(0,Math.ceil(i/R)),u=Math.min(A,(T+i)/R);let c=0;for(let n=s;n<a;++n){const s=n*_-r;for(let r=l;r<u;++r){const a=B*e+V*n+W*r,o=x*(N-1-s)+w*(T-1-(r*R-i))+v*t;for(let e=0;e<$;++e)c+=y[a+U*e]*b[o+e]}}g[M*e+L*n+z*o+P*t]=c}}return n.makeTensorInfo(m.shape,m.dtype,m.values)}},b_={kernelName:Dt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:o,pad:i,dilations:l}=r;PE([s,a],"conv3d");const u=Ku(s.shape,a.shape,o,l,i),{filterDepth:c,filterHeight:p,filterWidth:h,dilationDepth:d,dilationHeight:f,dilationWidth:m,padInfo:g}=u,y=g.front,b=g.left,x=g.top,w=new ua(u.outShape,s.dtype),v=n.data.get(s.dataId).values,k=n.data.get(a.dataId).values,N=w.values,T=Oe(s.shape),S=Oe(a.shape);for(let e=0;e<u.batchSize;++e){const t=e*T[0],n=e*w.strides[0];for(let e=0;e<u.outDepth;++e){const r=n+e*w.strides[1],s=e*u.strideDepth-y;for(let e=0;e<c;++e){const n=s+e*d;if(n<0||n>=u.inDepth)continue;const a=e*S[0],o=t+n*T[1];for(let e=0;e<u.outHeight;++e){const t=r+e*w.strides[2],n=e*u.strideHeight-x;for(let e=0;e<p;++e){const r=n+e*f;if(r<0||r>=u.inHeight)continue;const s=a+e*S[1],i=o+r*T[2];for(let e=0;e<u.outWidth;++e){const n=t+e*u.outChannels,r=e*u.strideWidth-b;for(let e=0;e<h;++e){const t=r+e*m;if(t<0||t>=u.inWidth)continue;const a=s+e*S[2],o=i+t*u.inChannels;let l=a;for(let e=0;e<u.inChannels;++e){const t=v[o+e];for(let e=0;e<u.outChannels;++e)N[n+e]+=t*k[l+e];l+=u.outChannels}}}}}}}}return n.makeTensorInfo(w.shape,w.dtype,w.values)}},x_={kernelName:Ft,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:o,pad:i,filterShape:l}=r;PE([s,a],"conv3dBackpropFilterV2");const u=Oe(s.shape),c=Oe(a.shape),p=Ku(s.shape,l,o,1,i),h=p.strideDepth,d=p.strideHeight,f=p.strideWidth,m=p.filterDepth,g=p.filterHeight,y=p.filterWidth,b=new ua(p.filterShape,"float32"),x=b.values,[w,v,k,N]=b.strides,T=n.data.get(a.dataId).values,[S,I,E,$]=c,C=n.data.get(s.dataId).values,[A,_,R,D]=u,F=p.padInfo.front,O=p.padInfo.left,M=p.padInfo.top;for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((F-e)/h)),n=Math.min(p.outDepth,(p.inDepth+F-e)/h),r=e*w;for(let s=0;s<g;++s){const a=Math.max(0,Math.ceil((M-s)/d)),o=Math.min(p.outHeight,(p.inHeight+M-s)/d),i=s*v+r;for(let r=0;r<y;++r){const l=Math.max(0,Math.ceil((O-r)/f)),u=Math.min(p.outWidth,(p.inWidth+O-r)/f),c=r*k+i;for(let i=0;i<p.inChannels;++i){const m=i*N+c;for(let c=0;c<p.outChannels;++c){let g=0;for(let m=0;m<p.batchSize;++m){const p=m*A,y=m*S;for(let m=t;m<n;++m){const t=(e+m*h-F)*_+p,n=m*I+y;for(let e=a;e<o;++e){const a=(s+e*d-M)*R+t,o=e*E+n;for(let e=l;e<u;++e){const t=e*$+o;g+=C[(r+e*f-O)*D+a+i]*T[t+c]}}}}x[m+c]=g}}}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}},w_={kernelName:Ot,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{pad:o,strides:i,inputShape:l}=r;PE([s],"conv3dBackpropInputV2");const u=Oe(s.shape),c=Oe(a.shape),p=Ku(l,a.shape,i,1,o),h=new ua(p.inShape,"float32"),d=h.values,[f,m,g,y]=h.strides,b=n.data.get(s.dataId).values,[x,w,v,k]=u,N=n.data.get(a.dataId).values,[T,S,I,E]=c,{batchSize:$,filterDepth:C,filterHeight:A,filterWidth:_,inChannels:R,inDepth:D,inHeight:F,inWidth:O,outChannels:M,outDepth:L,outHeight:z,outWidth:P,strideDepth:B,strideHeight:V,strideWidth:W}=p,U=C-1-p.padInfo.front,G=A-1-p.padInfo.top,H=_-1-p.padInfo.left;for(let e=0;e<$;++e)for(let t=0;t<R;++t)for(let n=0;n<D;++n){const r=n-U,s=Math.max(0,Math.ceil(r/B)),a=Math.min(L,(C+r)/B);for(let o=0;o<F;++o){const i=o-G,l=Math.max(0,Math.ceil(i/V)),u=Math.min(z,(A+i)/V);for(let c=0;c<O;++c){const p=c-H,h=Math.max(0,Math.ceil(p/W)),$=Math.min(P,(_+p)/W);let R=0;for(let n=s;n<a;++n){const s=n*B-r;for(let r=l;r<u;++r){const a=r*V-i;for(let o=h;o<$;++o){const i=x*e+w*n+v*r+k*o,l=T*(C-1-s)+S*(A-1-a)+I*(_-1-(o*W-p))+E*t;for(let e=0;e<M;++e)R+=b[i+e]*N[l+e]}}}d[f*e+m*n+g*o+y*c+t]=R}}}return n.makeTensorInfo(h.shape,h.dtype,h.values)}},v_=d$(Mt,(e=>Math.cos(e))),k_={kernelName:Mt,backendName:"cpu",kernelFunc:v_},N_=d$(Lt,(e=>Math.cosh(e))),T_={kernelName:Lt,backendName:"cpu",kernelFunc:N_},S_={kernelName:Bt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{image:s,boxes:a,boxInd:o}=t,{cropSize:i,method:l,extrapolationValue:u}=r,[c,p,h,d]=s.shape,f=a.shape[0],[m,g]=i,y=ki([f,m,g,d],"float32"),b=n.data.get(a.dataId).values,x=n.data.get(o.dataId).values,w=n.data.get(s.dataId).values,v=Oe(s.shape),k=Oe(y.shape);for(let e=0;e<f;e++){const t=4*e,n=b[t],r=b[t+1],s=b[t+2],a=b[t+3],o=x[e];if(o>=c)continue;const i=m>1?(s-n)*(p-1)/(m-1):0,f=g>1?(a-r)*(h-1)/(g-1):0;for(let t=0;t<m;t++){const c=m>1?n*(p-1)+t*i:.5*(n+s)*(p-1);if(c<0||c>p-1)for(let n=0;n<g;n++)for(let r=0;r<d;r++){const s=r+n*k[2]+t*k[1]+e*k[0];y.values[s]=u}else if("bilinear"===l){const n=Math.floor(c),s=Math.ceil(c),i=c-n;for(let l=0;l<g;l++){const c=g>1?r*(h-1)+l*f:.5*(r+a)*(h-1);if(c<0||c>h-1){for(let n=0;n<d;n++){const r=n+l*k[2]+t*k[1]+e*k[0];y.values[r]=u}continue}const p=Math.floor(c),m=Math.ceil(c),b=c-p;for(let r=0;r<d;r++){let a=r+p*v[2]+n*v[1]+o*v[0];const u=w[a];a=r+m*v[2]+n*v[1]+o*v[0];const c=w[a];a=r+p*v[2]+s*v[1]+o*v[0];const h=w[a];a=r+m*v[2]+s*v[1]+o*v[0];const d=u+(c-u)*b,f=h+(w[a]-h)*b;a=r+l*k[2]+t*k[1]+e*k[0],y.values[a]=d+(f-d)*i}}}else for(let n=0;n<g;++n){const s=g>1?r*(h-1)+n*f:.5*(r+a)*(h-1);if(s<0||s>h-1){for(let r=0;r<d;r++){const s=r+n*k[2]+t*k[1]+e*k[0];y.values[s]=u}continue}const i=Math.round(s),l=Math.round(c);for(let r=0;r<d;r++){const s=r+i*v[2]+l*v[1]+o*v[0],a=r+n*k[2]+t*k[1]+e*k[0];y.values[a]=w[s]}}}}return n.makeTensorInfo(y.shape,y.dtype,y.values)}},I_={kernelName:zt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,exclusive:o,reverse:i}=r;PE(s,"cumprod");const l=np([a],s.shape.length);let u=s;null!=l&&(u=mC({inputs:{x:s},backend:n,attrs:{perm:l}}));const c=sp(1,s.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumprod in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);const p=ka(u.dtype,"int32"),h=Pe(ue(u.shape),p),d=n.data.get(u.dataId).values,f=u.shape[u.shape.length-1],m=i?(e,t)=>e+f-t-1:(e,t)=>e+t;for(let e=0;e<d.length;e+=f)for(let t=0;t<f;t++){const n=m(e,t);if(0===t)h[n]=o?1:d[n];else{const r=m(e,t-1);h[n]=o?d[r]*h[r]:d[n]*h[r]}}const g=n.makeTensorInfo(u.shape,p,h);if(null!=l){const e=mC({inputs:{x:g},backend:n,attrs:{perm:rp(l)}});return n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(u),e}return g}},E_={kernelName:Pt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,exclusive:o,reverse:i}=r;PE(s,"cumsum");const l=np([a],s.shape.length);let u=s;null!=l&&(u=mC({inputs:{x:s},backend:n,attrs:{perm:l}}));const c=sp(1,s.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);const p=ka(u.dtype,"int32"),h=Be(ue(u.shape),p),d=n.data.get(u.dataId).values,f=u.shape[u.shape.length-1],m=i?(e,t)=>e+f-t-1:(e,t)=>e+t;for(let e=0;e<d.length;e+=f)for(let t=0;t<f;t++){const n=m(e,t);if(0===t)h[n]=o?0:d[n];else{const r=m(e,t-1);h[n]=o?d[r]+h[r]:d[n]+h[r]}}const g=n.makeTensorInfo(u.shape,p,h);if(null!=l){const e=mC({inputs:{x:g},backend:n,attrs:{perm:rp(l)}});return n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(u),e}return g}},$_={kernelName:Vt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,weights:a}=t,{size:o,binaryOutput:i}=r;if(1===s.shape.length){const e=i$(n.data.get(s.dataId).values,n.data.get(a.dataId).values,a.dtype,a.shape,o);return n.makeTensorInfo([o],a.dtype,e)}if(2===s.shape.length){const e=l$(n.bufferSync(s),n.bufferSync(a),o,i);return n.makeTensorInfo(e.shape,a.dtype,e.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${s.shape.length}.`)}},C_={kernelName:Wt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockSize:a,dataFormat:o}=r;oe("NHWC"===o,(()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${o}`));const i=s.shape[0],l=s.shape[1],u=s.shape[2],c=s.shape[3],p=l*a,h=u*a,d=c/(a*a),f=n.data.get(s.dataId).values,m=new Float32Array(i*p*h*d);let g=0;for(let e=0;e<i;++e)for(let t=0;t<p;++t){const n=Math.floor(t/a),r=t%a;for(let t=0;t<h;++t){const s=Math.floor(t/a),o=(r*a+t%a)*d;for(let t=0;t<d;++t){const r=t+o+c*(s+u*(n+l*e));m[g++]=f[r]}}}return n.makeTensorInfo([i,p,h,d],s.dtype,m)}};function A_(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:o,pad:i,dilations:l,dimRoundingMode:u}=r;PE([s,a],"depthwiseConv2DNative");const c=Oe(s.shape),p=Oe(a.shape);let h=l;null==h&&(h=[1,1]),oe(ec(o,h),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${o} and dilations '${h}'`));const d=ju(s.shape,a.shape,o,h,i,u,!0),{filterHeight:f,filterWidth:m,dilationHeight:g,dilationWidth:y,padInfo:b}=d,x=b.left,w=b.top,v=d.outChannels/d.inChannels,k=new ua(d.outShape,s.dtype),N=n.data.get(s.dataId).values,T=n.data.get(a.dataId).values,S=k.values;for(let e=0;e<d.batchSize;++e){const t=e*c[0],n=e*k.strides[0];for(let e=0;e<d.outHeight;++e){const r=n+e*k.strides[1],s=e*d.strideHeight-w;for(let e=0;e<f;++e){const n=s+e*g;if(n<0||n>=d.inHeight)continue;const a=e*p[0],o=t+n*c[1];for(let e=0;e<d.outWidth;++e){const t=r+e*k.strides[2],n=e*d.strideWidth-x;for(let e=0;e<m;++e){const r=n+e*y;if(r<0||r>=d.inWidth)continue;const s=a+e*p[1],i=o+r*d.inChannels;let l=t,u=s;for(let e=0;e<d.inChannels;++e){const t=N[i+e];for(let e=0;e<v;++e)S[l+e]+=t*T[u+e];l+=v,u+=v}}}}}}return n.makeTensorInfo(k.shape,k.dtype,k.values)}const __={kernelName:Ut,backendName:"cpu",kernelFunc:A_},R_={kernelName:Gt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:o,dilations:i,pad:l,dimRoundingMode:u,filterShape:c}=r;PE([s,a],"depthwiseConv2dNativeBackpropFilter");const p=ju(s.shape,c,o,i,l,u,!0),{strideHeight:h,strideWidth:d,filterHeight:f,filterWidth:m}=p,g=new ua(p.filterShape,"float32"),y=p.padInfo.left,b=p.padInfo.top,x=p.outChannels/p.inChannels,w=n.data.get(s.dataId).values,v=new ua(s.shape,s.dtype,w),k=n.data.get(a.dataId).values,N=new ua(a.shape,a.dtype,k);for(let e=0;e<f;++e){const t=Math.max(0,Math.ceil((b-e)/h)),n=Math.min(p.outHeight,(p.inHeight+b-e)/h);for(let r=0;r<m;++r){const s=Math.max(0,Math.ceil((y-r)/d)),a=Math.min(p.outWidth,(p.inWidth+y-r)/d);for(let o=0;o<p.outChannels;++o){const i=Math.trunc(o/x),l=o%x;let u=0;for(let l=0;l<p.batchSize;++l)for(let c=t;c<n;++c){const t=e+c*h-b;for(let e=s;e<a;++e){const n=r+e*d-y;u+=v.get(l,t,n,i)*N.get(l,c,e,o)}}g.set(u,e,r,i,l)}}}return n.makeTensorInfo(g.shape,g.dtype,g.values)}},D_={kernelName:Ht,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{strides:o,dilations:i,pad:l,dimRoundingMode:u,inputShape:c}=r;PE([s,a],"depthwiseConv2DNativeBackpropInput");const p=Oe(s.shape),h=Oe(a.shape),d=ju(c,a.shape,o,i,l,u,!0),f=new ua(d.inShape,"float32"),m=f.values,[g,y,b]=f.strides,x=n.data.get(s.dataId).values,[w,v,k]=p,N=n.data.get(a.dataId).values,[T,S,I]=h,{batchSize:E,filterHeight:$,filterWidth:C,inChannels:A,inHeight:_,inWidth:R,outChannels:D,outHeight:F,outWidth:O,strideHeight:M,strideWidth:L}=d,z=$-1-d.padInfo.top,P=C-1-d.padInfo.left,B=D/A;for(let e=0;e<E;++e)for(let t=0;t<A;++t)for(let n=0;n<_;++n){const r=n-z,s=Math.max(0,Math.ceil(r/M)),a=Math.min(F,($+r)/M);for(let o=0;o<R;++o){const i=o-P,l=Math.max(0,Math.ceil(i/L)),u=Math.min(O,(C+i)/L);let c=0;for(let n=s;n<a;++n){const s=n*M-r;for(let r=l;r<u;++r){const a=w*e+v*n+k*r,o=T*($-1-s)+S*(C-1-(r*L-i))+I*t;for(let e=0;e<B;++e)c+=x[a+(t*B+e)]*N[o+e]}}m[g*e+y*n+b*o+t]=c}}return n.makeTensorInfo(f.shape,f.dtype,f.values)}},F_={kernelName:jt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t,s=ue(r.shape),a=n.data.get(r.dataId).values,o=ki([s,s],r.dtype),i=o.values;for(let e=0;e<a.length;e++)i[e*s+e]=a[e];const l=[...r.shape,...r.shape];return n.makeTensorInfo(l,o.dtype,o.values)}},O_={kernelName:Kt,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r,filter:s}=e,{strides:a,pad:o,dilations:i}=n,l=t,u=l.data.get(r.dataId).values,c=r.shape.length,p=l.data.get(s.dataId).values,h=s.shape.length,{batchSize:d,inHeight:f,inWidth:m,inChannels:g,outHeight:y,outWidth:b,padInfo:x,strideHeight:w,strideWidth:v,filterHeight:k,filterWidth:N,dilationHeight:T,dilationWidth:S,outShape:I}=Uu(r.shape,s.shape,a,o,"NHWC",i),E=ue(I),$=I.length,C=Ne(r.dtype,E);for(let e=0;e<d;++e)for(let t=0;t<y;++t){const n=t*w-x.top;for(let a=0;a<b;++a){const o=a*v-x.left;for(let i=0;i<g;++i){let l=Number.MIN_SAFE_INTEGER;for(let t=0;t<k;++t){const a=n+t*T;if(a>=0&&a<f)for(let n=0;n<N;++n){const d=o+n*S;if(d>=0&&d<m){const o=Ue([e,a,d,i],c,Oe(r.shape)),f=Ue([t,n,i],h,Oe(s.shape)),m=u[o]+p[f];m>l&&(l=m)}}}C[Ue([e,t,a,i],$,Oe(I))]=l}}}return{dataId:l.write(qs(C,r.dtype),I,r.dtype),shape:I,dtype:r.dtype}}},M_={kernelName:Yt,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r,filter:s,dy:a}=e,{strides:o,pad:i,dilations:l}=n,u=t,c=Le(r.shape,u.data.get(r.dataId).values),p=Le(s.shape,u.data.get(s.dataId).values),{batchSize:h,inHeight:d,inWidth:f,inChannels:m,outHeight:g,outWidth:y,padInfo:b,strideHeight:x,strideWidth:w,filterHeight:v,filterWidth:k,dilationHeight:N,dilationWidth:T,outShape:S}=Uu(r.shape,s.shape,o,i,"NHWC",l);oe(a.rank===S.length,(()=>`Error in ${Yt}, dy must have the same rank as output ${S.length}, but got ${a.rank}`));const I=Le(S,u.data.get(a.dataId).values),E=Ve(s.shape,s.dtype);for(let e=0;e<h;++e)for(let t=0;t<g;++t){const n=t*x-b.top;for(let r=0;r<y;++r){const s=r*w-b.left;for(let a=0;a<m;++a){let o=Number.MIN_SAFE_INTEGER,i=0,l=0;for(let t=0;t<v;++t){const r=n+t*N;if(r>=0&&r<d)for(let n=0;n<k;++n){const u=s+n*T;if(u>=0&&u<f){const s=c[e][r][u][a]+p[t][n][a];s>o&&(o=s,i=t,l=n)}}}E[i][l][a]+=I[e][t][r][a]}}}return{dataId:u.write(qs(E,r.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},L_={kernelName:qt,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r,filter:s,dy:a}=e,{strides:o,pad:i,dilations:l}=n,u=t,c=Le(r.shape,u.data.get(r.dataId).values),p=Le(s.shape,u.data.get(s.dataId).values),{batchSize:h,inHeight:d,inWidth:f,inChannels:m,outHeight:g,outWidth:y,padInfo:b,strideHeight:x,strideWidth:w,filterHeight:v,filterWidth:k,dilationHeight:N,dilationWidth:T,outShape:S}=Uu(r.shape,s.shape,o,i,"NHWC",l);oe(a.rank===S.length,(()=>`Error in ${qt}, dy must have the same rank as output ${S.length}, but got ${a.rank}`));const I=Le(S,u.data.get(a.dataId).values),E=Ve(r.shape,r.dtype);for(let e=0;e<h;++e)for(let t=0;t<g;++t){const n=t*x-b.top;for(let r=0;r<y;++r){const s=r*w-b.left;for(let a=0;a<m;++a){let o=Number.MIN_SAFE_INTEGER,i=n<0?0:n,l=s<0?0:s;for(let t=0;t<v;++t){const r=n+t*N;if(r>=0&&r<d)for(let n=0;n<k;++n){const u=s+n*T;if(u>=0&&u<f){const s=c[e][r][u][a]+p[t][n][a];s>o&&(o=s,i=r,l=u)}}}E[e][i][l][a]+=I[e][t][r][a]}}}return{dataId:u.write(qs(E,r.dtype),r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},z_={kernelName:Xt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{image:s}=t,{canvas:a,options:o}=r,{contextOptions:i,imageOptions:l}=o||{},u=(null==l?void 0:l.alpha)||1,c=(null==i?void 0:i.contextType)||"2d";if("2d"!==c)throw new Error(`Context type ${i.contextType} is not supported by the CPU backend.`);const p=a.getContext(c,(null==i?void 0:i.contextAttributes)||{});if(null==p)throw new Error(`Could not get the context with ${c} type.`);const[h,d]=s.shape.slice(0,2),f=2===s.shape.length?1:s.shape[2],m=n.data.get(s.dataId).values,g="float32"===s.dtype?255:1,y=new Uint8ClampedArray(d*h*4);for(let e=0;e<h*d;++e){const t=[0,0,0,255*u];for(let n=0;n<f;n++){const r=m[e*f+n];if("float32"===s.dtype){if(r<0||r>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${r}.`)}else if("int32"===s.dtype&&(r<0||r>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${r}.`);1===f?(t[0]=r*g,t[1]=r*g,t[2]=r*g):t[n]=r*g}const n=4*e;y[n+0]=Math.round(t[0]),y[n+1]=Math.round(t[1]),y[n+2]=Math.round(t[2]),y[n+3]=Math.round(t[3])}a.width=d,a.height=h;const b=new ImageData(y,d,h);return p.putImageData(b,0,0),s}};function P_(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r;let i;PE(s,"sum"),i="bool"===s.dtype?JE({inputs:{x:s},backend:n,attrs:{dtype:"int32"}}):qE({inputs:{x:s},backend:n});const l=i.shape.length,u=we(a,i.shape),c=np(u,l);let p=u,h=i;null!=c&&(h=mC({inputs:{x:i},backend:n,attrs:{perm:c}}),p=sp(p.length,l)),tp("sum",p,h.shape.length);const[d,f]=Jc(h.shape,p);let m=KE(n,d,ka(h.dtype,"int32"));const g=ue(f),y=n.data.get(m.dataId).values,b=n.data.get(h.dataId).values;for(let e=0;e<y.length;++e){const t=e*g;let n=0;for(let e=0;e<g;++e)n+=b[t+e];y[e]=n}if(o){const e=m;m=SA({inputs:{x:m},backend:n,attrs:{shape:ep(m.shape,u)}}),n.disposeIntermediateTensorInfo(e)}return n.disposeIntermediateTensorInfo(i),null!=c&&n.disposeIntermediateTensorInfo(h),m}const B_={kernelName:Pr,backendName:"cpu",kernelFunc:P_},V_={kernelName:Qt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{equation:s}=r,a=t,{allDims:o,summedDims:i,idDims:l}=Tm(s,a.length);Im(o.length,l,a);const{path:u,steps:c}=Em(i,l),p=c.length;let h=null,d=o.length;const f=[];for(let e=0;e<p;++e){for(const t of c[e]){const{permutationIndices:e,expandDims:r}=Sm(d,l[t]);let s;$m(e)?s=a[t]:(s=mC({inputs:{x:a[t]},backend:n,attrs:{perm:e}}),f.push(s));const o=s.shape.slice();for(let e=0;e<r.length;++e)o.splice(r[e],0,1);he(s.shape,o)||(s=SA({inputs:{x:s},backend:n,attrs:{shape:o}}),f.push(s)),null===h?h=s:(h=iC({inputs:{a:s,b:h},backend:n}),f.push(h))}e<p-1&&(u[e]>=0&&(h=P_({inputs:{x:h},backend:n,attrs:{axis:u[e]-(o.length-d),keepDims:!1}}),f.push(h)),d--)}for(const e of f)e!==h&&n.disposeIntermediateTensorInfo(e);return h}},W_={kernelName:en,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{dy:r,y:s}=t;PE([r,s],"eluGrad");const a=new Float32Array(ue(s.shape)),o=n.data.get(s.dataId).values,i=n.data.get(r.dataId).values;for(let e=0;e<o.length;++e){const t=o[e];a[e]=t>=0?i[e]:i[e]*(t+1)}return n.makeTensorInfo(s.shape,"float32",a)}},U_=om,G_=im,H_=lm,j_=um,K_=cm,q_=pm,Y_=d$(tn,(e=>{const t=Math.sign(e),n=Math.abs(e),r=1/(1+U_*n);return t*(1-((((q_*r+K_)*r+j_)*r+H_)*r+G_)*r*Math.exp(-n*n))})),X_={kernelName:tn,backendName:"cpu",kernelFunc:Y_};function Z_(e){const{inputs:t,backend:n,attrs:r}=e,{input:s}=t,{dim:a}=r,o=s.shape.length,i=s.shape.slice();let l=a;return a<0&&(oe(-(o+1)<=a,(()=>`Axis must be in the interval [${-(o+1)}, ${o}]`)),l=o+a+1),i.splice(l,0,1),SA({inputs:{x:s},backend:n,attrs:{shape:i}})}const Q_={kernelName:sn,backendName:"cpu",kernelFunc:Z_},J_=GE(((e,t)=>e/t)),eR=t$(Zt,J_),tR={kernelName:Zt,backendName:"cpu",kernelFunc:eR};function nR(e,t,n){const r=e.shape,s=r[0],a=r[1],o=n.data.get(e.dataId),i=o.complexTensorInfos.real,l=o.complexTensorInfos.imag,u=[s,a],c=ue(u),p=ke("float32",c),h=ke("float32",c);for(let e=0;e<s;e++){const r=LC({inputs:{x:i},backend:n,attrs:{begin:[e,0],size:[1,a]}}),s=LC({inputs:{x:l},backend:n,attrs:{begin:[e,0],size:[1,a]}}),o=HE({inputs:{real:r,imag:s},backend:n}),{real:u,imag:c}=rR(o,t,n),d=hm(u,c);for(let t=0;t<a;t++){const n=gm(d,t);p[e*a+t]=n.real,h[e*a+t]=n.imag}n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(o)}const d=n.makeTensorInfo(u,"float32",p),f=n.makeTensorInfo(u,"float32",h),m=HE({inputs:{real:d,imag:f},backend:n});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),m}function rR(e,t,n){const r=ue(e.shape),s=n.data.get(e.dataId),a=n.data.get(s.complexTensorInfos.real.dataId).values,o=n.data.get(s.complexTensorInfos.imag.dataId).values;if((i=r)&i-1){const e=function(e,t,n){const r=new Float32Array(2*t);for(let s=0;s<t;s++){let a=0,o=0;for(let r=0;r<t;r++){const i=xm(s*r,t,n),l=gm(e,r);a+=l.real*i.real-l.imag*i.imag,o+=l.real*i.imag+l.imag*i.real}n&&(a/=t,o/=t),ym(r,a,o,s)}return r}(hm(a,o),r,t);return dm(e)}{const s=sR(a,o,r,t,n),i=[e.shape[0],e.shape[1]];if(t){const e=n.makeTensorInfo(i,"float32",s.real),t=n.makeTensorInfo(i,"float32",s.imag),a=n.makeTensorInfo([],"float32",Ks(r,"float32")),o=qE({inputs:{x:a},backend:n}),l=tR.kernelFunc({inputs:{a:e,b:a},backend:n}),u=tR.kernelFunc({inputs:{a:t,b:o},backend:n}),c=n.data.get(l.dataId).values,p=n.data.get(u.dataId).values;return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),{real:c,imag:p}}return s}var i}function sR(e,t,n,r,s){if(1===n)return{real:e,imag:t};const a=hm(e,t),o=n/2,i=fm(a),l=i.real,u=i.imag,c=[l.length],p=s.makeTensorInfo(c,"float32",l),h=s.makeTensorInfo(c,"float32",u),d=HE({inputs:{real:p,imag:h},backend:s}),f=mm(a),m=f.real,g=f.imag,y=[m.length],b=s.makeTensorInfo(y,"float32",m),x=s.makeTensorInfo(y,"float32",g),w=HE({inputs:{real:b,imag:x},backend:s}),v=sR(l,u,o,r,s),k=v.real,N=v.imag,T=[k.length],S=s.makeTensorInfo(T,"float32",k),I=s.makeTensorInfo(T,"float32",N),E=HE({inputs:{real:S,imag:I},backend:s}),$=sR(m,g,o,r,s),C=$.real,A=$.imag,_=[C.length],R=s.makeTensorInfo(_,"float32",C),D=s.makeTensorInfo(_,"float32",A),F=HE({inputs:{real:R,imag:D},backend:s}),O=bm(n,r),M=[O.real.length],L=s.makeTensorInfo(M,"float32",O.real),z=s.makeTensorInfo(M,"float32",O.imag),P=HE({inputs:{real:L,imag:z},backend:s}),B=iC({inputs:{a:P,b:F},backend:s}),V=a$({inputs:{a:E,b:B},backend:s}),W=aA({inputs:{a:E,b:B},backend:s}),U=XE({inputs:{input:V},backend:s}),G=XE({inputs:{input:W},backend:s}),H=c_({inputs:{input:V},backend:s}),j=c_({inputs:{input:W},backend:s}),K=h_({inputs:[U,G],backend:s,attrs:{axis:0}}),q=h_({inputs:[H,j],backend:s,attrs:{axis:0}}),Y=s.data.get(K.dataId).values,X=s.data.get(q.dataId).values;return s.disposeIntermediateTensorInfo(p),s.disposeIntermediateTensorInfo(h),s.disposeIntermediateTensorInfo(d),s.disposeIntermediateTensorInfo(b),s.disposeIntermediateTensorInfo(x),s.disposeIntermediateTensorInfo(w),s.disposeIntermediateTensorInfo(S),s.disposeIntermediateTensorInfo(I),s.disposeIntermediateTensorInfo(E),s.disposeIntermediateTensorInfo(R),s.disposeIntermediateTensorInfo(D),s.disposeIntermediateTensorInfo(F),s.disposeIntermediateTensorInfo(L),s.disposeIntermediateTensorInfo(z),s.disposeIntermediateTensorInfo(P),s.disposeIntermediateTensorInfo(B),s.disposeIntermediateTensorInfo(V),s.disposeIntermediateTensorInfo(W),s.disposeIntermediateTensorInfo(U),s.disposeIntermediateTensorInfo(H),s.disposeIntermediateTensorInfo(G),s.disposeIntermediateTensorInfo(j),s.disposeIntermediateTensorInfo(K),s.disposeIntermediateTensorInfo(q),{real:Y,imag:X}}const aR={kernelName:on,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t,s=ue(r.shape),a=r.shape[r.shape.length-1],o=SA({inputs:{x:r},backend:n,attrs:{shape:[s/a,a]}}),i=nR(o,!1,n),l=SA({inputs:{x:i},backend:n,attrs:{shape:r.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(i),l}};function oR(e){const{backend:t,attrs:n}=e,{shape:r,value:s,dtype:a}=n,o=a||Re(s),i=Ne(o,ue(r));return function(e,t){e.fill(t)}(i,s),t.makeTensorInfo(r,o,i)}const iR={kernelName:ln,backendName:"cpu",kernelFunc:oR},lR={kernelName:un,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:r}=e,s=n,a=ke(r.dtype,ue(r.shape)),[o,i,l,u]=r.shape,c=s.data.get(r.dataId).values;for(let e=0;e<o;e++){const t=e*l*i*u;for(let e=0;e<i;e++){const n=e*(l*u);for(let e=0;e<l;e++){const r=e*u;for(let s=0;s<u;s++){const o=Math.round(l-e-1),i=t+n+r+s;let p=c[i];o>=0&&o<l&&(p=c[t+n+o*u+s]),a[i]=p}}}}return{dataId:s.write(a,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},uR={kernelName:ys,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a,bias:o,preluActivationWeights:i}=t,{strides:l,pad:u,dataFormat:c,dilations:p,dimRoundingMode:h,activation:d,leakyreluAlpha:f}=r;let m=f_({inputs:{x:s,filter:a},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:p,dimRoundingMode:h}});if(o){const e=m;if("NCHW"===c&&1===o.shape.length&&1!==o.shape[0]){const e=SA({inputs:{x:o},backend:n,attrs:{shape:[o.shape[0],1,1]}});m=a$({inputs:{a:m,b:e},backend:n}),n.disposeIntermediateTensorInfo(e)}else m=a$({inputs:{a:m,b:o},backend:n});n.disposeIntermediateTensorInfo(e)}if(d){const e=m;if("NCHW"===c&&"prelu"===d&&1===i.shape.length&&1!==i.shape[0]){const e=SA({inputs:{x:i},backend:n,attrs:{shape:[i.shape[0],1,1]}});m=TA(n,m,d,e,f),n.disposeIntermediateTensorInfo(e)}else m=TA(n,m,d,i,f);n.disposeIntermediateTensorInfo(e)}return m}},cR={kernelName:bs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a,bias:o,preluActivationWeights:i}=t,{strides:l,pad:u,dataFormat:c,dilations:p,dimRoundingMode:h,activation:d,leakyreluAlpha:f}=r;let m=A_({inputs:{x:s,filter:a},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:p,dimRoundingMode:h}});if(o){const e=m;m=a$({inputs:{a:m,b:o},backend:n}),n.disposeIntermediateTensorInfo(e)}if(d){const e=m;m=TA(n,m,d,i,f),n.disposeIntermediateTensorInfo(e)}return m}},pR={kernelName:fn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:r,indices:s}=t,a=ue(r.shape),o=s.shape,i=o[o.length-1],[l,u,c,p]=jl(r,s);if(0===u)return n.makeTensorInfo(l,r.dtype,[]);const h=F$(n.data.get(s.dataId).values,n.bufferSync(r),r.dtype,u,i,c,p,r.shape,a);return n.makeTensorInfo(l,r.dtype,h.values)}},hR={kernelName:dn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,indices:a}=t,{axis:o,batchDims:i}=r;PE([s,a],"gatherV2");const l=we(o,s.shape)[0],u=n.data.get(a.dataId).values,c=s.shape[l];for(let e=0;e<u.length;++e){const t=u[e];oe(t<=c-1&&t>=0,(()=>`GatherV2: the index value ${t} is not in [0, ${c-1}]`))}let p=i;null==i&&(p=0);const h=ue(a.shape),d=Hm(s,a,l,p),f=SA({inputs:{x:s},backend:n,attrs:{shape:[d.batchSize,d.outerSize,d.dimSize,d.sliceSize]}}),m=SA({inputs:{x:a},backend:n,attrs:{shape:[d.batchSize,h/d.batchSize]}}),g=[d.batchSize,d.outerSize,h/d.batchSize,d.sliceSize],y=n.bufferSync(m),b=O$(n.bufferSync(f),y,g);return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.makeTensorInfo(d.outputShape,b.dtype,b.values)}},dR={kernelName:bn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t,s=ue(r.shape),a=r.shape[r.shape.length-1],o=SA({inputs:{x:r},backend:n,attrs:{shape:[s/a,a]}}),i=nR(o,!0,n),l=SA({inputs:{x:i},backend:n,attrs:{shape:r.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(i),l}},fR=d$(wn,(e=>Number.isFinite(e)?1:0),"bool"),mR={kernelName:wn,backendName:"cpu",kernelFunc:fR},gR=d$(vn,(e=>Math.abs(e)===1/0?1:0),"bool"),yR={kernelName:vn,backendName:"cpu",kernelFunc:gR},bR=d$(kn,(e=>Number.isNaN(e)?1:0),"bool"),xR={kernelName:kn,backendName:"cpu",kernelFunc:bR},wR={kernelName:In,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:r,stop:s,num:a}=n,o=q$(r,s,a);return t.makeTensorInfo([o.length],"float32",o)}},vR=d$($n,(e=>Math.log1p(e))),kR={kernelName:$n,backendName:"cpu",kernelFunc:vR},NR=GE(((e,t)=>e&&t)),TR=t$(Cn,NR,null,"bool"),SR={kernelName:Cn,backendName:"cpu",kernelFunc:TR},IR=d$(An,(e=>e?0:1),"bool"),ER={kernelName:An,backendName:"cpu",kernelFunc:IR},$R=GE(((e,t)=>e||t)),CR=t$(_n,$R,null,"bool"),AR={kernelName:_n,backendName:"cpu",kernelFunc:CR},_R={kernelName:On,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{depthRadius:a,bias:o,alpha:i,beta:l}=r;PE(s,"LRN");const u=s.shape[3],c=u-1,p=n.data.get(s.dataId).values,h=ue(s.shape),d=new Float32Array(h);function f(e){const t=e%u;let n=e-t+Math.max(0,t-a);const r=e-t+Math.min(t+a,c);let s=0;for(;n<=r;n++){const e=p[n];s+=e*e}return s}for(let e=0;e<h;e++){const t=f(e),n=p[e]*Math.pow(o+i*t,-l);d[e]=n}return n.makeTensorInfo(s.shape,s.dtype,d)}},RR={kernelName:Mn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,y:a,dy:o}=t,{depthRadius:i,bias:l,alpha:u,beta:c}=r;PE(o,"LRNGrad");const p=ue(o.shape),h=o.shape[3],d=n.data.get(o.dataId).values,f=n.data.get(s.dataId).values,m=n.data.get(a.dataId).values,g=new Float32Array(p),y=p;for(let e=0;e<y;e++){const t=e%h,n=e-t+Math.max(0,t-i),r=e-t+Math.min(h,t+i+1);let s=0;for(let e=n;e<r;e++)s+=Math.pow(f[e],2);s=u*s+l;for(let t=n;t<r;t++){let n=-2*u*c*f[t]*m[e]/s;e===t&&(n+=Math.pow(s,-c)),n*=d[e],g[t]+=n}}return n.makeTensorInfo(o.shape,s.dtype,g)}};function DR(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{reductionIndices:a,keepDims:o}=r,i=n;let l=s.shape;const u=l.length,c=we(a,l);let p=c;const h=np(p,u);let d=i.data.get(s.dataId).values;if(null!=h){const e=new Array(u);for(let t=0;t<e.length;t++)e[t]=l[h[t]];d=fC(d,l,s.dtype,h,e),p=sp(p.length,u),l=e}PE(s,"max"),tp("max",p,u);const[f,m]=Jc(l,p),g=Q$(d,ue(m),f,s.dtype),y=i.write(g,f,s.dtype);let b=f;return o&&(b=ep(f,c)),{dataId:y,shape:b,dtype:s.dtype}}const FR={kernelName:zn,backendName:"cpu",kernelFunc:DR},OR={kernelName:Bn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t;PE(s,"maxPool");const{filterSize:a,strides:o,pad:i,dimRoundingMode:l}=r;oe(ec(o,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const u=Gu(s.shape,a,o,1,i,l);let c;if(1===u.filterWidth&&1===u.filterHeight&&he(u.inShape,u.outShape))c=qE({inputs:{x:s},backend:n});else{const e=n.data.get(s.dataId).values,t=Oe(s.shape),r=XA(e,s.shape,s.dtype,t,u,"max");c=n.makeTensorInfo(u.outShape,s.dtype,r.values)}return c}},MR={kernelName:Wn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{filterSize:a,strides:o,pad:i,dimRoundingMode:l,dataFormat:u}=r;PE(s,"maxPool3d");const c=Hu(s.shape,a,o,1,i,l,u),p=QA(n.data.get(s.dataId).values,s.shape,s.dtype,Oe(s.shape),c,"max");return n.makeTensorInfo(p.shape,"float32",p.values)}},LR={kernelName:Un,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,{filterSize:o,strides:i,pad:l,dimRoundingMode:u}=r;PE([s,a],"maxPool3DGrad");const c=Hu(a.shape,o,i,1,l,u),p=function(e,t){const n=ki(t.outShape,"int32"),r=t.strideDepth,s=t.strideHeight,a=t.strideWidth,o=t.dilationDepth,i=t.dilationHeight,l=t.dilationWidth,u=t.effectiveFilterDepth,c=t.effectiveFilterHeight,p=t.effectiveFilterWidth,h=t.padInfo.front,d=t.padInfo.top,f=t.padInfo.left;for(let m=0;m<t.batchSize;++m)for(let g=0;g<t.inChannels;++g)for(let y=0;y<t.outDepth;++y){const b=y*r-h;let x=b;for(;x<0;)x+=o;const w=Math.min(t.inDepth,u+b);for(let r=0;r<t.outHeight;++r){const u=r*s-d;let h=u;for(;h<0;)h+=i;const v=Math.min(t.inHeight,c+u);for(let s=0;s<t.outWidth;++s){const d=s*a-f;let k=d;for(;k<0;)k+=l;const N=Math.min(t.inWidth,p+d);let T=Number.NEGATIVE_INFINITY,S=-1;for(let t=x;t<w;t+=o){const n=t-b;for(let r=h;r<v;r+=i){const s=r-u;for(let a=k;a<N;a+=l){const o=a-d,i=e.get(m,t,r,a,g);i>=T&&(T=i,S=n*c*p+s*c+o)}}}n.set(S,m,y,r,s,g)}}}return n}(n.bufferSync(a),c),h=c.strideDepth,d=c.strideHeight,f=c.strideWidth,m=c.dilationDepth,g=c.dilationHeight,y=c.dilationWidth,b=c.effectiveFilterDepth,x=c.effectiveFilterHeight,w=c.effectiveFilterWidth,v=b-1-c.padInfo.front,k=w-1-c.padInfo.left,N=x-1-c.padInfo.top,T=ki(a.shape,"float32"),S=n.bufferSync(s);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inDepth;++n)for(let r=0;r<c.inHeight;++r)for(let s=0;s<c.inWidth;++s){const a=n-v,o=r-N,i=s-k;let l=0;for(let n=0;n<b;n+=m){const r=(a+n)/h;if(!(r<0||r>=c.outDepth||Math.floor(r)!==r))for(let s=0;s<x;s+=g){const a=(o+s)/d;if(!(a<0||a>=c.outHeight||Math.floor(a)!==a))for(let o=0;o<w;o+=y){const u=(i+o)/f;if(u<0||u>=c.outWidth||Math.floor(u)!==u)continue;const h=b*x*w-1-p.get(e,r,a,u,t)===n*x*w+s*w+o?1:0;0!==h&&(l+=S.get(e,r,a,u,t)*h)}}}T.set(l,e,n,r,s,t)}return n.makeTensorInfo(T.shape,T.dtype,T.values)}},zR={kernelName:Vn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a,output:o}=t,i=a;PE([a,o],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:p}=r,h=Gu(i.shape,l,u,1,c,p),d=n.data.get(i.dataId).values,f=ki(h.outShape,i.dtype,ZA(d,i.shape,i.dtype,h).values),m=h.strideHeight,g=h.strideWidth,y=h.dilationHeight,b=h.dilationWidth,x=h.effectiveFilterHeight,w=h.effectiveFilterWidth,v=w-1-h.padInfo.left,k=x-1-h.padInfo.top,N=ki(i.shape,"float32"),T=n.data.get(s.dataId).values,S=ki(s.shape,"float32",T);for(let e=0;e<h.batchSize;++e)for(let t=0;t<h.inChannels;++t)for(let n=0;n<h.inHeight;++n)for(let r=0;r<h.inWidth;++r){const s=n-k,a=r-v;let o=0;for(let n=0;n<x;n+=y){const r=(s+n)/m;if(!(r<0||r>=h.outHeight||Math.floor(r)!==r))for(let s=0;s<w;s+=b){const i=(a+s)/g;if(i<0||i>=h.outWidth||Math.floor(i)!==i)continue;const l=x*w-1-f.get(e,r,i,t)===n*w+s?1:0;0!==l&&(o+=S.get(e,r,i,t)*l)}}N.set(o,e,n,r,t)}return n.makeTensorInfo(N.shape,N.dtype,N.values)}},PR={kernelName:Gn,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:r}=e,{filterSize:s,strides:a,pad:o,includeBatchInIndex:i}=t,l=n;PE(r,"MaxPoolWithArgmax");const u=l.data.get(r.dataId).values,c=Gu(r.shape,s,a,[1,1],o),[p,h]=function(e,t,n,r,s){const a=XA(e,0,n,Oe(t),s,"max"),o=ZA(e,t,n,s,!0,r);return[a.values,o.values]}(u,r.shape,r.dtype,i,c),d=l.write(p,c.outShape,r.dtype),f=l.write(h,c.outShape,r.dtype);return[{dataId:d,shape:c.outShape,dtype:r.dtype},{dataId:f,shape:c.outShape,dtype:"int32"}]}},BR={kernelName:Hn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r,i=we(a,s.shape),l=ue(Jc(s.shape,i)[1]),u=[],c=n.makeTensorInfo([],"float32",new Float32Array([l]));u.push(c);const p=JE({inputs:{x:s},backend:n,attrs:{dtype:"float32"}});u.push(p);const h=eR({inputs:{a:p,b:c},backend:n});u.push(h);const d=P_({inputs:{x:h},backend:n,attrs:{axis:a,keepDims:o}});return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),d}},VR={kernelName:jn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r;PE(s,"min");const i=we(a,s.shape);let l=i;const u=np(l,s.shape.length);let c=s;null!=u&&(c=mC({inputs:{x:s},backend:n,attrs:{perm:u}}),l=sp(l.length,s.shape.length)),tp("min",l,c.shape.length);const[p,h]=Jc(c.shape,l),d=ue(h),f=Be(ue(p),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*d;let n=m[t];for(let e=0;e<d;++e){const r=m[t+e];(Number.isNaN(r)||r<n)&&(n=r)}f[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(p,c.dtype,f);if(o){const e=SA({inputs:{x:g},backend:n,attrs:{shape:ep(p,i)}});return n.disposeIntermediateTensorInfo(g),e}return g}},WR={kernelName:qn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{paddings:a,mode:o}=r;PE(s,"mirrorPad");const i=a.map(((e,t)=>e[0]+s.shape[t]+e[1])),l=a.map((e=>e[0])),u=a.map(((e,t)=>e[0]+s.shape[t])),c="reflect"===o?0:1,p=n.data.get(s.dataId).values,h=s.shape.length,d=Oe(s.shape),f=ue(i),m=i.length,g=Oe(i),y=ke(s.dtype,f);for(let e=0;e<f;e++){let t=Ge(e,m,g);for(let e=0;e<m;e++)t[e]<l[e]?t[e]=2*l[e]-t[e]-c:t[e]>=u[e]&&(t[e]=2*(u[e]-1)-t[e]+c);t=t.map(((e,t)=>e-l[t]));const n=Ue(t,h,d);y[e]=p[n]}return{dataId:n.write(y,i,s.dtype),shape:i,dtype:s.dtype}}},UR=GE(((e,t)=>{const n=e%t;return e<0&&t<0||e>=0&&t>=0?n:(n+t)%t})),GR=t$(Yn,UR),HR={kernelName:Yn,backendName:"cpu",kernelFunc:GR};function jR(e){const{inputs:t,backend:n,attrs:r}=e,{logits:s}=t,{dim:a}=r,o=s.shape.length;let i=a;if(-1===i&&(i=o-1),i!==o-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${o} and dim was ${i}`);const l=we([i],s.shape),u=DR({inputs:{x:s},backend:n,attrs:{reductionIndices:l,keepDims:!1}}),c=ep(u.shape,l),p=SA({inputs:{x:u},backend:n,attrs:{shape:c}}),h=aA({inputs:{a:s,b:p},backend:n}),d=N$({inputs:{x:h},backend:n}),f=P_({inputs:{x:d},backend:n,attrs:{axis:l,keepDims:!1}}),m=SA({inputs:{x:f},backend:n,attrs:{shape:c}}),g=eR({inputs:{a:d,b:m},backend:n});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}const KR={kernelName:Wr,backendName:"cpu",kernelFunc:jR},qR={kernelName:Xn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{logits:s}=t,{numSamples:a,seed:o,normalized:i}=r;PE(s,"multinomial");const l=i?s:jR({inputs:{logits:s},backend:n,attrs:{dim:-1}}),u=l.shape[0],c=l.shape[1],p=n.data.get(l.dataId).values,h=[u,a],d=Be(ue(h),"int32");for(let e=0;e<u;++e){const t=e*c,n=new Float32Array(c-1);n[0]=p[t];for(let e=1;e<n.length;++e)n[e]=n[e-1]+p[t+e];const r=gh.alea(o.toString()),s=e*a;for(let e=0;e<a;++e){const t=r();d[s+e]=n.length;for(let r=0;r<n.length;r++)if(t<n[r]){d[s+e]=r;break}}}return i||n.disposeIntermediateTensorInfo(l),n.makeTensorInfo(h,"int32",d)}},YR=Zd,XR={kernelName:er,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:l}=r;PE(s,"NonMaxSuppression");const u=n.data.get(s.dataId).values,c=n.data.get(a.dataId).values,{selectedIndices:p}=YR(u,c,o,i,l);return n.makeTensorInfo([p.length],"int32",new Int32Array(p))}},ZR=Qd,QR={kernelName:tr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:l,padToMaxOutputSize:u}=r;PE(s,"NonMaxSuppressionPadded");const c=n.data.get(s.dataId).values,p=n.data.get(a.dataId).values,{selectedIndices:h,validOutputs:d}=ZR(c,p,o,i,l,u);return[n.makeTensorInfo([h.length],"int32",new Int32Array(h)),n.makeTensorInfo([],"int32",new Int32Array([d]))]}},JR=Jd,eD={kernelName:nr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:l,softNmsSigma:u}=r;PE(s,"NonMaxSuppressionWithScore");const c=n.data.get(s.dataId).values,p=n.data.get(a.dataId).values,h=o,d=i,f=l,m=u,{selectedIndices:g,selectedScores:y}=JR(c,p,h,d,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}},tD={kernelName:sr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{indices:s}=t,{dtype:a,depth:o,onValue:i,offValue:l}=r;PE(s,"oneHot");const u=ue(s.shape),c=new Float32Array(u*o);c.fill(l);const p=n.data.get(s.dataId).values;for(let e=0;e<u;++e)p[e]>=0&&p[e]<o&&(c[e*o+p[e]]=i);return n.makeTensorInfo([...s.shape,o],a,c)}};function nD(e){const{inputs:t,backend:n}=e,{x:r}=t;if("string"===r.dtype)throw new Error("zerosLike is not supported for string tensors");if("complex64"===r.dtype){const e=XE({inputs:{input:r},backend:n}),t=nD({inputs:{x:e},backend:n}),s=c_({inputs:{input:r},backend:n}),a=nD({inputs:{x:s},backend:n}),o=HE({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(a),o}return oR({backend:n,attrs:{shape:r.shape,value:0,dtype:r.dtype}})}const rD={kernelName:hs,backendName:"cpu",kernelFunc:nD},sD={kernelName:rr,backendName:"cpu",kernelFunc:function e(t){const{inputs:n,backend:r}=t,{x:s}=n;if("string"===s.dtype)throw new Error("onesLike is not supported for string tensors");if("complex64"===s.dtype){const t=XE({inputs:{input:s},backend:r}),n=e({inputs:{x:t},backend:r}),a=c_({inputs:{input:s},backend:r}),o=nD({inputs:{x:a},backend:r}),i=HE({inputs:{real:n,imag:o},backend:r});return r.disposeIntermediateTensorInfo(t),r.disposeIntermediateTensorInfo(n),r.disposeIntermediateTensorInfo(a),r.disposeIntermediateTensorInfo(o),i}return oR({backend:r,attrs:{shape:s.shape,value:1,dtype:s.dtype}})}};function aD(e){const{inputs:t,backend:n,attrs:r}=e,{axis:s}=r;if(1===t.length)return Z_({inputs:{input:t[0]},backend:n,attrs:{dim:s}});const a=t[0].shape,o=t[0].dtype;t.forEach((e=>{ie(a,e.shape,"All tensors passed to stack must have matching shapes"),oe(o===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const i=[],l=h_({inputs:t.map((e=>{const t=Z_({inputs:{input:e},backend:n,attrs:{dim:s}});return i.push(t),t})),backend:n,attrs:{axis:s}});return i.forEach((e=>n.disposeIntermediateTensorInfo(e))),l}const oD={kernelName:ar,backendName:"cpu",kernelFunc:aD},iD={kernelName:or,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{paddings:a,constantValue:o}=r;PE(s,"pad");const i=a.map(((e,t)=>e[0]+s.shape[t]+e[1])),l=a.map((e=>e[0])),u=n.data.get(s.dataId).values,c=ue(s.shape),p=s.shape.length,h=Oe(s.shape),d=ue(i),f=i.length,m=Oe(i),g=ke(s.dtype,d);0!==o&&g.fill(o);for(let e=0;e<c;e++)g[Ue(Ge(e,p,h).map(((e,t)=>e+l[t])),f,m)]=u[e];return{dataId:n.write(g,i,s.dtype),shape:i,dtype:s.dtype}}},lD=GE(((e,t)=>Math.pow(e,t))),uD=t$(lr,lD),cD={kernelName:lr,backendName:"cpu",kernelFunc:uD},pD={kernelName:pr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{paramsNestedSplits:s,paramsDenseValues:a,indices:o}=t,{outputRaggedRank:i}=r,l=s.map((e=>n.data.get(e.dataId).values)),u=s.map((e=>e.shape)),c=n.data.get(a.dataId).values,p=n.data.get(o.dataId).values,[h,d,f]=wC(l,u,c,a.shape,a.dtype,p,o.shape),m=h.map((e=>n.makeTensorInfo([e.length],"int32",e))),g=n.makeTensorInfo(f,a.dtype,d);return m.concat([g])}},hD={kernelName:hr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{starts:r,limits:s,deltas:a}=t,o=n.data.get(r.dataId).values,i=n.data.get(s.dataId).values,l=n.data.get(a.dataId).values,[u,c]=kC(o,r.shape,r.dtype,i,s.shape,l,a.shape);return[n.makeTensorInfo([u.length],"int32",u),n.makeTensorInfo([c.length],r.dtype,c)]}},dD={kernelName:dr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{shape:s,values:a,defaultValue:o,rowPartitionTensors:i}=t,{rowPartitionTypes:l}=r,u=n.data.get(s.dataId).values,c=n.data.get(a.dataId).values,p=n.data.get(o.dataId).values,h=i.map((e=>n.data.get(e.dataId).values)),d=i.map((e=>e.shape)),[f,m]=EC(u,s.shape,c,a.shape,a.dtype,p,o.shape,h,d,l);return n.makeTensorInfo(f,a.dtype,m)}},fD={kernelName:fr,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:r,stop:s,dtype:a,step:o}=n,i=$C(r,s,o,a);return t.makeTensorInfo([i.length],a,i)}},mD=d$(gr,(e=>1/e)),gD={kernelName:gr,backendName:"cpu",kernelFunc:mD},yD={kernelName:vr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s}=t,{alignCorners:a,halfPixelCenters:o,size:i}=r;PE(s,"resizeBilinear");const l=Oe(s.shape),[u,c]=i,[p,h,d,f]=s.shape,m=n.data.get(s.dataId).values,g=new Float32Array(ue([p,u,c,f])),y=[a&&u>1?h-1:h,a&&c>1?d-1:d],b=[a&&u>1?u-1:u,a&&c>1?c-1:c];let x=0;const w=y[0]/b[0],v=y[1]/b[1];for(let e=0;e<p;e++)for(let t=0;t<u;t++){let n;n=o?w*(t+.5)-.5:w*t;const r=Math.max(0,Math.floor(n)),s=n-r,a=Math.min(h-1,Math.ceil(n)),i=e*l[0]+r*l[1],u=e*l[0]+a*l[1];for(let e=0;e<c;e++){let t;t=o?v*(e+.5)-.5:v*e;const n=Math.max(0,Math.floor(t)),r=t-n,a=Math.min(d-1,Math.ceil(t)),c=i+n*l[2],p=u+n*l[2],h=i+a*l[2],y=u+a*l[2];for(let e=0;e<f;e++){const t=m[c+e],n=m[p+e],a=t+(m[h+e]-t)*r,o=a+(n+(m[y+e]-n)*r-a)*s;g[x++]=o}}}return n.makeTensorInfo([p,u,c,f],"float32",g)}},bD={kernelName:kr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s,dy:a}=t,{alignCorners:o}=r;PE([a,s],"resizeBilinearGrad");const i=Oe(s.shape),[l,u,c,p]=s.shape,[,h,d]=a.shape,f=new Float32Array(l*u*c*p),m=[o&&h>1?u-1:u,o&&d>1?c-1:c],g=[o&&h>1?h-1:h,o&&d>1?d-1:d],y=m[0]/g[0],b=m[1]/g[1],x=n.data.get(a.dataId).values;let w=0;for(let e=0;e<l;e++){const t=e*i[0];for(let e=0;e<h;e++){const n=e*y,r=Math.floor(n),s=Math.min(Math.ceil(n),u-1),a=t+r*i[1],o=t+s*i[1],l=n-r,h=1-l;for(let e=0;e<d;e++){const t=e*b,n=Math.floor(t),r=Math.min(Math.ceil(t),c-1),s=t-n,u=1-s,d=a+n*i[2],m=a+r*i[2],g=o+n*i[2],y=o+r*i[2],v=h*u,k=h*s,N=l*u,T=l*s;for(let e=0;e<p;e++){const t=x[w++];f[d+e]+=t*v,f[m+e]+=t*k,f[g+e]+=t*N,f[y+e]+=t*T}}}}return n.makeTensorInfo([l,c,u,p],"float32",f)}},xD={kernelName:xr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s}=t,{alignCorners:a,halfPixelCenters:o,size:i}=r;PE(s,"resizeNearestNeighbor");const l=Oe(s.shape),[u,c]=i,[p,h,d,f]=s.shape,m=n.data.get(s.dataId).values,g=new Float32Array(p*u*c*f),y=[a&&u>1?h-1:h,a&&c>1?d-1:d],b=[a&&u>1?u-1:u,a&&c>1?c-1:c],x=y[0]/b[0],w=y[1]/b[1];let v=0;for(let e=0;e<p;e++){const t=e*l[0];for(let e=0;e<u;e++){const n=o?x*(e+.5):x*e;let r=Math.min(h-1,a?Math.round(n):Math.floor(n));o&&(r=Math.max(0,r));const s=t+r*l[1];for(let e=0;e<c;e++){const t=o?w*(e+.5):w*e;let n=Math.min(d-1,a?Math.round(t):Math.floor(t));o&&(n=Math.max(0,n));const r=s+n*l[2];for(let e=0;e<f;e++){const t=m[r+e];g[v++]=t}}}}return n.makeTensorInfo([p,u,c,f],s.dtype,g)}},wD={kernelName:wr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s,dy:a}=t,{alignCorners:o}=r;PE([a,s],"resizeNearestNeighborGrad");const i=Oe(s.shape),l=Oe(a.shape),[u,c,p,h]=s.shape,[,d,f]=a.shape,m=new Float32Array(u*c*p*h),g=n.data.get(a.dataId).values,y=[o&&d>1?c-1:c,o&&f>1?p-1:p],b=[o&&d>1?d-1:d,o&&f>1?f-1:f],x=y[0]/b[0],w=y[1]/b[1],v=1/x,k=1/w,N=2*Math.ceil(v)+2,T=2*Math.ceil(k)+2;for(let e=0;e<u;e++){const t=e*i[0];for(let e=0;e<c;e++){const n=t+e*i[1],r=Math.floor(e*v),s=Math.floor(r-N/2);for(let r=0;r<p;r++){const a=n+r*i[2],u=Math.floor(r*k),y=Math.floor(u-T/2);for(let n=0;n<h;n++){let i=0;for(let a=0;a<N;a++){const u=a+s;if(u<0||u>=d)continue;const h=t+u*l[1],m=u*x;if(e===Math.min(c-1,o?Math.round(m):Math.floor(m)))for(let e=0;e<T;e++){const t=e+y;if(t<0||t>=f)continue;const s=h+t*l[2],a=t*w;r===Math.min(p-1,o?Math.round(a):Math.floor(a))&&(i+=g[s+n])}}m[a+n]=i}}}}return n.makeTensorInfo(s.shape,s.dtype,m)}},vD={kernelName:Tr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{dims:a}=r;PE(s,"reverse");const o=s.shape.length,i=we(a,s.shape);if(0===o)return qE({inputs:{x:s},backend:n});const l=new ua(s.shape,s.dtype),u=n.bufferSync(s);for(let e=0;e<l.size;e++){const t=l.indexToLoc(e),n=t.slice();i.forEach((e=>n[e]=s.shape[e]-1-n[e])),l.set(u.get(...n),...t)}return n.makeTensorInfo(l.shape,l.dtype,l.values)}},kD={kernelName:ms,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:r}=e,{radians:s,fillValue:a,center:o}=t,i=n,l=ke(r.dtype,ue(r.shape)),[u,c,p,h]=r.shape,[d,f]=Qf(o,c,p),m=Math.sin(s),g=Math.cos(s),y=i.data.get(r.dataId).values;for(let e=0;e<u;e++){const t=e*p*c*h;for(let e=0;e<c;e++){const n=e*(p*h);for(let r=0;r<p;r++){const s=r*h;for(let o=0;o<h;o++){const i=[u,e,r,o],b=i[2],x=i[1];let w=(b-d)*g-(x-f)*m,v=(b-d)*m+(x-f)*g;w=Math.round(w+d),v=Math.round(v+f);let k=a;"number"!=typeof a&&(k=3===o?255:a[o]),w>=0&&w<p&&v>=0&&v<c&&(k=y[t+v*(p*h)+w*h+o]),l[t+n+s+o]=k}}}}return{dataId:i.write(l,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},ND=d$(Sr,(e=>{const t=Math.floor(e);return e-t<.5?Math.floor(e):e-t>.5?Math.ceil(e):t%2==0?t:t+1})),TD={kernelName:Sr,backendName:"cpu",kernelFunc:ND},SD={kernelName:Er,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{indices:s,updates:a}=t,{shape:o}=r,{sliceRank:i,numUpdates:l,sliceSize:u,strides:c,outputSize:p}=Yl(0,s,o),h=RC(n.bufferSync(s),n.bufferSync(a),o,p,u,l,i,c,0,!0);return n.makeTensorInfo(o,h.dtype,h.values)}};function ID(e,t){let n=0,r=e.length,s=0;for(;n<r;)s=Math.floor((n+r)/2),e[s]<t?n=s+1:r=s;return r}function ED(e,t){let n=0,r=e.length,s=0;for(;n<r;)s=Math.floor((n+r)/2),e[s]<=t?n=s+1:r=s;return r}const $D={kernelName:Cr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{sortedSequence:s,values:a}=t,{side:o}=r,i=function(e,t,n,r,s,a){const o=Ne("int32",n*s);for(let i=0;i<n;++i){const n=e.slice(i*r,(i+1)*r),l=i*s;for(let e=0;e<s;++e)o[l+e]="left"===a?ID(n,t[e+l]):ED(n,t[e+l])}return o}(n.data.get(s.dataId).values,n.data.get(a.dataId).values,s.shape[0],s.shape[1],a.shape[1],o);return n.makeTensorInfo(a.shape,"int32",i)}},CD={kernelName:Ar,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:r,t:s,e:a}=t;PE([r,s,a],"select");const o=r.shape.length,i=n.data.get(r.dataId).values,l=n.data.get(s.dataId).values,u=n.data.get(a.dataId).values,c=ka(s.dtype,a.dtype),p=Be(ue(s.shape),c);let h=0;const d=0===o||o>1||1===s.shape.length?1:ue(s.shape.slice(1));for(let e=0;e<i.length;e++)for(let t=0;t<d;t++)1===i[e]?p[h++]=l[e]:p[h++]=u[e];return n.makeTensorInfo(s.shape,c,p)}},AD=sm,_D=am,RD=d$(_r,(e=>e>=0?_D*e:AD*(Math.exp(e)-1))),DD={kernelName:_r,backendName:"cpu",kernelFunc:RD},FD=d$(Or,(e=>e<0?-1:e>0?1:0)),OD={kernelName:Or,backendName:"cpu",kernelFunc:FD},MD=d$(Dr,(e=>Math.sin(e))),LD={kernelName:Dr,backendName:"cpu",kernelFunc:MD},zD=d$(Fr,(e=>Math.sinh(e))),PD={kernelName:Fr,backendName:"cpu",kernelFunc:zD},BD=Math.log(1.1920928955078125e-7)+2,VD=d$(Lr,(e=>{const t=e>-BD,n=e<BD,r=Math.exp(e);let s;return s=n?r:t?e:Math.log(1+r),s})),WD={kernelName:Lr,backendName:"cpu",kernelFunc:VD},UD={kernelName:Br,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockShape:a,paddings:o}=r;PE([s],"spaceToBatchND");const i=ue(a),l=[[0,0]];l.push(...o);for(let e=1+a.length;e<s.shape.length;++e)l.push([0,0]);const u=iD.kernelFunc({inputs:{x:s},backend:n,attrs:{paddings:l,constantValue:0}}),c=Jf(u.shape,a,i,!1),p=em(c.length,a.length,!1),h=tm(u.shape,a,i,!1),d=SA({inputs:{x:u},backend:n,attrs:{shape:c}}),f=mC({inputs:{x:d},backend:n,attrs:{perm:p}}),m=SA({inputs:{x:f},backend:n,attrs:{shape:h}});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),m}},GD={kernelName:Ur,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:r,values:s,denseShape:a,defaultValue:o}=t;if(1!==a.shape.length)throw new Error(`Dense shape must be a vector, saw:\n        ${a.shape}`);if(2!==r.shape.length)throw new Error(`Indices must be a matrix, saw:\n        ${r.shape}`);if(1!==s.shape.length)throw new Error(`Values must be a vector, saw:\n        ${s.shape}`);if(0!==o.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${o.shape}`);const i=n.data.get(r.dataId).values,l=n.data.get(s.dataId).values,u=n.data.get(a.dataId).values,c=n.data.get(o.dataId).values[0],[p,h,d,f,m]=PC(i,r.shape,r.dtype,l,s.dtype,u,c);return[n.makeTensorInfo(h,r.dtype,p),n.makeTensorInfo([h[0]],s.dtype,d),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map((e=>Number(e))))),n.makeTensorInfo([m.length],r.dtype,new Int32Array(m))]}},HD={kernelName:Gr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:r,inputShape:s,newShape:a}=t;if(2!==r.shape.length)throw new Error(`Input indices should be a matrix but received shape\n        ${r.shape}`);if(1!==s.shape.length)throw new Error(`Input shape should be a vector but received shape\n        ${s.shape}`);if(1!==a.shape.length)throw new Error(`Target shape should be a vector but received shape ${a.shape}`);const o=Array.from(n.data.get(s.dataId).values),i=n.data.get(r.dataId).values,l=Array.from(n.data.get(a.dataId).values),[u,c,p]=BC(i,r.shape,r.dtype,o,l);return[n.makeTensorInfo(c,r.dtype,u),n.makeTensorInfo([p.length],a.dtype,new Int32Array(p))]}},jD={kernelName:Hr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:r,indices:s,segmentIds:a}=t;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.shape.length)throw new Error(`Indices should be a vector but received shape\n          ${s.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n          ${a.shape}`);if(s.shape[0]!==a.shape[0])throw new Error("segmentIds and indices should have same size.");const o=n.data.get(r.dataId).values,i=n.data.get(s.dataId).values,l=n.data.get(a.dataId).values,[u,c]=VC(o,r.shape,r.dtype,i,l,!0);return n.makeTensorInfo(c,r.dtype,u)}},KD={kernelName:jr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:r,indices:s,segmentIds:a}=t;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.shape.length)throw new Error(`Indices should be a vector but received shape\n         ${s.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n         ${a.shape}`);if(s.shape[0]!==a.shape[0])throw new Error("segmentIds and indices should have same size.");const o=n.data.get(r.dataId).values,i=n.data.get(s.dataId).values,l=n.data.get(a.dataId).values,[u,c]=VC(o,r.shape,r.dtype,i,l);return n.makeTensorInfo(c,r.dtype,u)}},qD={kernelName:Kr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{sparseIndices:s,sparseValues:a,defaultValue:o}=t,{outputShape:i}=r,{sliceRank:l,numUpdates:u,sliceSize:c,strides:p,outputSize:h}=Yl(0,s,i),d=!1,f=n.bufferSync(s);let m;switch(a.dtype){case"bool":m=RC(f,n.bufferSync(a),i,h,c,u,l,p,Boolean(n.data.get(o.dataId).values[0]),d);break;case"float32":case"int32":m=RC(f,n.bufferSync(a),i,h,c,u,l,p,n.data.get(o.dataId).values[0],d);break;case"string":m=RC(f,n.bufferSync(a),i,h,c,u,l,p,Qs(n.data.get(o.dataId).values[0]),d);break;default:throw new Error(`Unsupported type ${a.dtype}`)}return n.makeTensorInfo(i,m.dtype,m.values)}},YD={kernelName:Vr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{numOrSizeSplits:a,axis:o}=r,i=we(o,s.shape)[0],l=Am(s,a,i),u=new Array(s.shape.length).fill(0),c=s.shape.slice();return l.map((e=>{const t=[...c];t[i]=e;const r=LC({inputs:{x:s},backend:n,attrs:{begin:u,size:t}});return u[i]+=e,r}))}},XD={kernelName:Yr,backendName:"cpu",kernelFunc:({inputs:e,backend:t})=>{const{x:n}=e,r=t;PE(n,"square");const s=r.data.get(n.dataId).values,a=new Float32Array(s.length);for(let e=0;e<s.length;++e){const t=s[e];a[e]=t*t}return{dataId:r.write(a,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},ZD=d$(ds,((e,t)=>{const n=t;return isNaN(e)?NaN:e>0?1:n.alpha})),QD={kernelName:ds,backendName:"cpu",kernelFunc:ZD},JD={kernelName:Zr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{begin:a,end:o,strides:i,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:p,shrinkAxisMask:h}=r;PE(s,"stridedSlice");const{finalShapeSparse:d,finalShape:f,isIdentity:m,sliceDim0:g,isSimpleSlice:y,begin:b,end:x,strides:w}=du(s.shape,a,o,i,l,u,c,p,h);let v;if(m)v=SA({inputs:{x:s},backend:n,attrs:{shape:f}});else if(g||y){oe(s.shape.length>=1,(()=>`Input must have rank at least 1, got: ${s.shape.length}`));const e=eu(b,x,w),t=LC({inputs:{x:s},backend:n,attrs:{begin:b,size:e}});v=SA({inputs:{x:t},backend:n,attrs:{shape:f}}),n.disposeIntermediateTensorInfo(t)}else{const e=ZC(d,n.bufferSync(s),w,b);v=n.makeTensorInfo(f,e.dtype,e.values)}return v}},eF={kernelName:Qr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{separator:s,nGramWidths:a,leftPad:o,rightPad:i,padWidth:l,preserveShortSequences:u}=r,{data:c,dataSplits:p}=t,h=n.data.get(c.dataId).values,d=n.data.get(p.dataId).values,[f,m]=JC(h,d,s,a,o,i,l,u);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(p.shape,"int32",m)]}},tF={kernelName:Jr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{skipEmpty:s}=r,{input:a,delimiter:o}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(1!==a.shape.length)throw new Error(`Input must be a vector, got shape: ${a.shape}`);if(0!==o.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${o.shape}`);const i=n.data.get(a.dataId).values,l=n.data.get(o.dataId).values[0],[u,c,p]=tA(i,l,s),h=c.length;return[n.makeTensorInfo([h,2],"int32",u),n.makeTensorInfo([h],"string",c),n.makeTensorInfo([2],"int32",new Int32Array(p))]}},nF={kernelName:es,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{numBuckets:s}=r,{input:a}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(s<=0)throw new Error("Number of buckets must be at least 1");const o=nA(n.data.get(a.dataId).values,s);return n.makeTensorInfo(a.shape,"int32",o)}},rF=d$(ns,(e=>Math.tan(e))),sF={kernelName:ns,backendName:"cpu",kernelFunc:rF},aF=d$(rs,(e=>Math.tanh(e))),oF={kernelName:$r,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{tensor:r,indices:s,updates:a}=t,{sliceRank:o,numUpdates:i,sliceSize:l,strides:u,outputSize:c}=Yl(0,s,r.shape),p=n.bufferSync(s),h=n.bufferSync(a),d=n.bufferSync(r),f=RC(p,h,r.shape,c,l,i,o,u,d,!1);return n.makeTensorInfo(r.shape,f.dtype,f.values)}},iF={kernelName:ss,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{reps:a}=r;PE(s,"tile");const o=iA(n.bufferSync(s),a);return n.makeTensorInfo(o.shape,o.dtype,o.values)}},lF={kernelName:as,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{k:a,sorted:o}=r;PE(s,"topk");const i=n.data.get(s.dataId).values,[l,u]=cA(i,s.shape,s.dtype,a,o);return[n.makeTensorInfo(l.shape,l.dtype,l.values),n.makeTensorInfo(u.shape,u.dtype,u.values)]}},uF={kernelName:os,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:r}=e,{image:s,transforms:a}=t,{interpolation:o,fillMode:i,fillValue:l,outputShape:u}=n,[c,p,h,d]=s.shape,[f,m]=null!=u?u:[p,h],g=[c,f,m,d],y=Oe(s.shape),b=y[0],x=y[1],w=y[2],v=Oe(g),k=v[0],N=v[1],T=v[2],S=ke(s.dtype,ue(g));S.fill(l);const I=r.data.get(s.dataId).values,E=r.data.get(a.dataId).values;for(let e=0;e<c;++e){const t=1===a.shape[0]?E:E.subarray(8*e,8*e+8);for(let n=0;n<f;++n)for(let r=0;r<m;++r)for(let s=0;s<d;++s){let a;const u=t[6]*r+t[7]*n+1;if(0===u)continue;const c=(t[0]*r+t[1]*n+t[2])/u,d=(t[3]*r+t[4]*n+t[5])/u,f=cF(c,h,i),m=cF(d,p,i);switch(o){case"nearest":a=hF(I,p,h,b,x,w,e,m,f,s,l);break;case"bilinear":a=dF(I,p,h,b,x,w,e,m,f,s,l);break;default:throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${o}`)}S[e*k+n*N+r*T+s]=a}return r.makeTensorInfo(g,s.dtype,S)}return{dataId:r.write(S,g,s.dtype),shape:s.shape,dtype:s.dtype}}};function cF(e,t,n){switch(n){case"reflect":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=2*t;n<e&&(n=e*Math.trunc(-n/e)+n),n=n<-t?n+e:-n-1}else if(n>t-1)if(t<=1)n=0;else{const e=2*t;n-=e*Math.trunc(n/e),n>=t&&(n=e-n-1)}return ee(0,n,t-1)}(e,t);case"wrap":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=t-1;n+=t*(Math.trunc(-n/e)+1)}else if(n>t-1)if(t<=1)n=0;else{const e=t-1;n-=t*Math.trunc(n/e)}return ee(0,n,t-1)}(e,t);case"nearest":return function(e,t){return ee(0,e,t-1)}(e,t);default:return e}}function pF(e,t,n,r,s,a,o,i,l,u,c){return 0<=i&&i<t&&0<=l&&l<n?e[o*r+i*s+l*a+u]:c}function hF(e,t,n,r,s,a,o,i,l,u,c){return pF(e,t,n,r,s,a,o,Math.round(i),Math.round(l),u,c)}function dF(e,t,n,r,s,a,o,i,l,u,c){const p=Math.floor(i),h=Math.floor(l),d=p+1,f=h+1;return(d-i)*((f-l)*pF(e,t,n,r,s,a,o,p,h,u,c)+(l-h)*pF(e,t,n,r,s,a,o,p,f,u,c))+(i-p)*((f-l)*pF(e,t,n,r,s,a,o,d,h,u,c)+(l-h)*pF(e,t,n,r,s,a,o,d,f,u,c))}const fF={kernelName:ls,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:r}=e,{axis:s}=n,{x:a}=t;PE(a,"unique");const o=r.data.get(a.dataId).values,{outputValues:i,outputShape:l,indices:u}=pA(o,s,a.shape,a.dtype);return[r.makeTensorInfo(l,a.dtype,i),r.makeTensorInfo([u.length],"int32",u)]}},mF={kernelName:us,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{value:s}=t;let{axis:a}=r;a<0&&(a+=s.shape.length);const o=s.shape.length,i=s.shape[a],l=new Array(o-1);let u=0;for(let e=0;e<o;e++)e!==a&&(l[u++]=s.shape[e]);const c=new Array(o).fill(0),p=s.shape.slice();p[a]=1;const h=new Array(i);for(let e=0;e<h.length;e++){c[a]=e;const t=LC({inputs:{x:s},backend:n,attrs:{begin:c,size:p}});h[e]=SA({inputs:{x:t},backend:n,attrs:{shape:l}}),n.disposeIntermediateTensorInfo(t)}return h}},gF={kernelName:cs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,segmentIds:a}=t,{numSegments:o}=r;PE(s,"unsortedSegmentSum");const i=[],l=[],u=s.shape.length-a.shape.length;let c=a;for(let e=0;e<u;++e){const t=Z_({inputs:{input:c},backend:n,attrs:{dim:e+1}});c=t,l.push(t)}for(let e=0;e<o;++e){const t=Ks(e,"int32"),r=n.makeTensorInfo([],"int32",t),a=w$({inputs:{a:r,b:c},backend:n}),o=JE({inputs:{x:a},backend:n,attrs:{dtype:"float32"}}),u=iC({inputs:{a:o,b:s},backend:n}),p=P_({inputs:{x:u},backend:n,attrs:{axis:0,keepDims:!1}});i.push(p),l.push(r),l.push(a),l.push(o),l.push(u),l.push(p)}const p=aD({inputs:i,backend:n,attrs:{axis:0}});return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),p}},yF=[CA,UE,_A,DA,o$,FA,OA,MA,LA,zA,BA,WA,GA,KA,YA,JA,e_,t_,n_,$A,r_,s_,a_,p$,o_,e$,y$,l_,jE,u_,d_,m_,g_,y_,b_,x_,w_,k_,T_,S_,I_,E_,$_,C_,__,R_,D_,F_,O_,M_,L_,z_,V_,fA,W_,v$,X_,T$,Q_,E$,aR,iR,lR,A$,D$,uR,cR,pR,hR,z$,V$,YE,dR,p_,mR,yR,xR,gA,G$,K$,wR,Z$,kR,SR,ER,AR,_R,RR,FR,tC,OR,MR,LR,zR,PR,BR,VR,sC,WR,HR,qR,lC,cC,XR,QR,eD,dC,tD,sD,oD,iD,cD,xA,bC,pD,hD,dD,fD,ZE,tR,gD,vA,NA,IA,yD,bD,xD,wD,vD,kD,TD,_C,SD,$D,CD,DD,OC,OD,LD,PD,zC,KR,WD,UD,GD,HD,jD,KD,qD,YD,GC,XD,KC,XC,QD,JD,eF,tF,nF,oA,B_,sF,{kernelName:rs,backendName:"cpu",kernelFunc:aF},oF,iF,lF,uF,gC,fF,mF,gF,rD];for(const e of yF)Is(e);const bF={},xF={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function wF(e,t){bF[e]=t}function vF(e,t){if(!(e in bF)||null!=t){const n=function(e,t){if(1!==e&&2!==e)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const n=null==t?function(e){if(Ye().getBool("IS_SAFARI")||"undefined"==typeof OffscreenCanvas||2!==e){if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}return new OffscreenCanvas(300,150)}(e):t;return n.addEventListener("webglcontextlost",(t=>{t.preventDefault(),delete bF[e]}),!1),Ye().getBool("SOFTWARE_WEBGL_ENABLED")&&(xF.failIfMajorPerformanceCaveat=!1),1===e?n.getContext("webgl",xF)||n.getContext("experimental-webgl",xF):n.getContext("webgl2",xF)}(e,t);if(null===n)return console.log("Could not get context for WebGL version",e),null;bF[e]=n}const n=bF[e];return null==n||n.isContextLost()?(delete bF[e],vF(e)):(n.disable(n.DEPTH_TEST),n.disable(n.STENCIL_TEST),n.disable(n.BLEND),n.disable(n.DITHER),n.disable(n.POLYGON_OFFSET_FILL),n.disable(n.SAMPLE_COVERAGE),n.enable(n.SCISSOR_TEST),n.enable(n.CULL_FACE),n.cullFace(n.BACK),bF[e])}var kF,NF,TF;function SF(e,t){return[t,e]}function IF(e){const t=ue(e);return me(Math.ceil(t/4))}function EF(e,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(e/2))]}function $F(e,t){const n=e;let r,s,a,o,i,l,u,c,p,h;return 2===Ye().getNumber("WEBGL_VERSION")?(r=n.R32F,s=n.R16F,a=n.RGBA16F,o=n.RGBA32F,i=n.RED,u=4,c=1,p=n.HALF_FLOAT,h=n.FLOAT,l=n.RGBA8):(r=e.RGBA,s=e.RGBA,a=e.RGBA,o=n.RGBA,i=e.RGBA,u=4,c=4,p=null!=t?t.HALF_FLOAT_OES:null,h=e.FLOAT,l=e.RGBA),{internalFormatFloat:r,internalFormatHalfFloat:s,internalFormatPackedHalfFloat:a,internalFormatPackedFloat:o,textureFormatFloat:i,downloadTextureFormat:l,downloadUnpackNumChannels:u,defaultNumChannels:c,textureTypeHalfFloat:p,textureTypeFloat:h}}function CF(e,t){const n=t();return Ye().getBool("DEBUG")&&function(e){const t=e.getError();if(t!==e.NO_ERROR)throw new Error("WebGL Error: "+DF(e,t))}(e),n}!function(e){e[e.DENSE=0]="DENSE",e[e.SHARED_BATCH=1]="SHARED_BATCH"}(kF||(kF={})),function(e){e[e.RENDER=0]="RENDER",e[e.UPLOAD=1]="UPLOAD",e[e.PIXELS=2]="PIXELS",e[e.DOWNLOAD=3]="DOWNLOAD"}(NF||(NF={})),function(e){e[e.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",e[e.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",e[e.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",e[e.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",e[e.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(TF||(TF={}));const AF=5.96e-8,_F=65504;function RF(e){return!!(Ye().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===e||AF<Math.abs(e)&&Math.abs(e)<_F)}function DF(e,t){switch(t){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}function FF(e,t){return aO(e,(()=>e.getExtension(t)),'Extension "'+t+'" not supported on this browser.')}function OF(e,t){const n=aO(e,(()=>e.createShader(e.VERTEX_SHADER)),"Unable to create vertex WebGLShader.");if(CF(e,(()=>e.shaderSource(n,t))),CF(e,(()=>e.compileShader(n))),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}function MF(e,t){const n=aO(e,(()=>e.createShader(e.FRAGMENT_SHADER)),"Unable to create fragment WebGLShader.");if(CF(e,(()=>e.shaderSource(n,t))),CF(e,(()=>e.compileShader(n))),Ye().get("ENGINE_COMPILE_ONLY"))return n;if(!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw zF(t,e.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}const LF=/ERROR: [0-9]+:([0-9]+):/g;function zF(e,t){const n=LF.exec(t);if(null==n)return console.log(`Couldn't parse line number in error: ${t}`),void console.log(e);const r=+n[1],s=e.split("\n"),a=s.length.toString().length+2,o=s.map(((e,t)=>ye((t+1).toString(),a)+e));let i=0;for(let e=0;e<o.length;e++)i=Math.max(o[e].length,i);const l=o.slice(0,r-1),u=o.slice(r-1,r),c=o.slice(r);console.log(l.join("\n")),console.log(t.split("\n")[0]),console.log(`%c ${ye(u[0],i)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join("\n"))}function PF(e){return aO(e,(()=>e.createProgram()),"Unable to create WebGLProgram.")}function BF(e,t){if(CF(e,(()=>e.linkProgram(t))),!Ye().get("ENGINE_COMPILE_ONLY")&&!1===e.getProgramParameter(t,e.LINK_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}function VF(e,t){if(CF(e,(()=>e.validateProgram(t))),!1===e.getProgramParameter(t,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function WF(e,t){const n=aO(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return CF(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),CF(e,(()=>e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW))),n}function UF(e,t){const n=aO(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return CF(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n))),CF(e,(()=>e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW))),n}function GF(){return 2===Ye().getNumber("WEBGL_VERSION")?1:4}function HF(e){return aO(e,(()=>e.createTexture()),"Unable to create WebGLTexture.")}function jF(e,t){const n=Ye().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e<=0||t<=0)throw new Error(`Requested texture size [${e}x${t}] is invalid.`);if(e>n||t>n)throw new Error(`Requested texture size [${e}x${t}] greater than WebGL maximum on this browser / GPU [${n}x${n}].`)}function KF(e){return aO(e,(()=>e.createFramebuffer()),"Unable to create WebGLFramebuffer.")}function qF(e,t,n,r,s,a,o){const i=e.getAttribLocation(t,n);return-1!==i&&(CF(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,r))),CF(e,(()=>e.vertexAttribPointer(i,s,e.FLOAT,!1,a,o))),CF(e,(()=>e.enableVertexAttribArray(i))),!0)}function YF(e,t,n){oO(e,n),CF(e,(()=>e.activeTexture(e.TEXTURE0+n))),CF(e,(()=>e.bindTexture(e.TEXTURE_2D,t)))}function XF(e,t){oO(e,t),CF(e,(()=>e.activeTexture(e.TEXTURE0+t))),CF(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}function ZF(e,t,n){return aO(e,(()=>e.getUniformLocation(t,n)),'uniform "'+n+'" not present in program.')}function QF(e,t,n){return e.getUniformLocation(t,n)}function JF(e,t,n,r){CF(e,(()=>YF(e,t,r))),CF(e,(()=>e.uniform1i(n,r)))}function eO(e){CF(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,null))),CF(e,(()=>e.viewport(0,0,e.canvas.width,e.canvas.height))),CF(e,(()=>e.scissor(0,0,e.canvas.width,e.canvas.height)))}function tO(e,t,n){CF(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,n))),CF(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0)))}function nO(e,t){CF(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,t))),CF(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0)))}function rO(e){const t=e.checkFramebufferStatus(e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+sO(e,t))}function sO(e,t){switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}function aO(e,t,n){const r=CF(e,(()=>t()));if(null==r)throw new Error(n);return r}function oO(e,t){const n=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,r=t+e.TEXTURE0;if(r<e.TEXTURE0||r>n)throw new Error(`textureUnit must be in [gl.TEXTURE0, gl.TEXTURE${n}].`)}function iO(e,t=2){return ue(e.slice(0,e.length-t))}function lO(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function uO(e){let t=[1,1,1];return 0===e.length||1===e.length&&1===e[0]||(t=[iO(e),...lO(e)]),t}function cO(e,t=!1){let n=Ye().getNumber("WEBGL_MAX_TEXTURE_SIZE"),r=Ye().getNumber("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE");if(r===1/0&&Ye().getBool("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE")&&(r=n/2),t&&(n*=2,r*=2,1===(e=e.map(((t,n)=>n>=e.length-2?te(e[n]):e[n]))).length&&(e=[2,e[0]])),2!==e.length){const t=ve(e);e=t.newShape}let s=ue(e),a=null;e.length<=1&&s<=n?a=[1,s]:2===e.length&&e[0]<=n&&e[1]<=n?a=e:3===e.length&&e[0]*e[1]<=n&&e[2]<=n?a=[e[0]*e[1],e[2]]:3===e.length&&e[0]<=n&&e[1]*e[2]<=n?a=[e[0],e[1]*e[2]]:4===e.length&&e[0]*e[1]*e[2]<=n&&e[3]<=n?a=[e[0]*e[1]*e[2],e[3]]:4===e.length&&e[0]<=n&&e[1]*e[2]*e[3]<=n&&(a=[e[0],e[1]*e[2]*e[3]]);const o=null!=a&&Math.max(...a)>r&&Math.min(...a)<=(t?2:1)&&Math.min(...a)>0;if(null==a||o)if(t){const t=iO(e);let n=2,r=2;e.length&&([n,r]=lO(e)),s=t*(n/2)*(r/2),a=me(s).map((e=>2*e))}else a=me(s);return a}function pO(e){return e%2==0}function hO(e,t){if(he(e=e.slice(-2),t=t.slice(-2)))return!0;if(!e.length||!t.length)return!0;if(0===e[0]||0===e[1]||0===t[0]||0===t[1])return!0;if(e.length!==t.length){const n=e[e.length-1],r=t[t.length-1];if(n===r)return!0;if(pO(n)&&pO(r)&&(1===e[0]||1===t[0]))return!0}return e[1]===t[1]&&pO(e[0])&&pO(t[0])}let dO,fO;function mO(e){if(null==dO){const t=vF(e);dO=t.getParameter(t.MAX_TEXTURE_SIZE)}return dO}function gO(){dO=null}function yO(){fO=null}function bO(e){if(null==fO){const t=vF(e);fO=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,fO)}function xO(e){if(0===e)return 0;let t;const n=vF(e);return t=wO(n,"EXT_disjoint_timer_query_webgl2")&&2===e?2:wO(n,"EXT_disjoint_timer_query")?1:0,t}function wO(e,t){return null!=e.getExtension(t)}function vO(e){try{if(null!=vF(e))return!0}catch(e){return console.log("Error when getting WebGL context: ",e),!1}return!1}function kO(e){if(0===e)return!1;const t=vF(e);if(1===e){if(!wO(t,"OES_texture_float"))return!1}else if(!wO(t,"EXT_color_buffer_float"))return!1;return TO(t)}function NO(e){if(0===e)return!1;const t=vF(e);if(1!==e){if(wO(t,"EXT_color_buffer_float"))return TO(t);const e="EXT_color_buffer_half_float";if(wO(t,e)){const n=t.getExtension(e);return function(e,t){const n=$F(e,t),r=e.createTexture();e.bindTexture(e.TEXTURE_2D,r);e.texImage2D(e.TEXTURE_2D,0,n.internalFormatHalfFloat,1,1,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const s=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,s),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,r,0);const a=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(r),e.deleteFramebuffer(s),a}(t,n)}return!1}return!!wO(t,"OES_texture_float")&&(!!wO(t,"WEBGL_color_buffer_float")&&TO(t))}function TO(e){const t=$F(e),n=e.createTexture();e.bindTexture(e.TEXTURE_2D,n),e.texImage2D(e.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const r=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,r),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0);const s=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(n),e.deleteFramebuffer(r),s}function SO(e){return 2===e&&null!=vF(e).fenceSync}function IO(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&oe("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the WebGL backend.`))}))}const EO=Ye();function $O(){let e,t,n,r,s,a,o,i,l,u;return 2===Ye().getNumber("WEBGL_VERSION")?(e="#version 300 es",t="in",n="out",r="in",s="texture",a="outputColor",o="out vec4 outputColor;",i=Ye().getBool("WEBGL2_ISNAN_CUSTOM")?"\n      bool isnan_custom(float val) {\n        uint floatToUint = floatBitsToUint(val);\n        return (floatToUint & 0x7fffffffu) > 0x7f800000u;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ":"",l="",u="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(e="",t="attribute",n="varying",r="varying",s="texture2D",a="gl_FragColor",o="",i="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",l="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",u="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:e,attribute:t,varyingVs:n,varyingFs:r,texture2D:s,output:a,defineOutput:o,defineSpecialNaN:i,defineSpecialInf:l,defineRound:u}}function CO(e,t,n="index"){const r=Oe(t);return r.map(((t,s)=>`int ${e[s]} = ${n} / ${t}; ${s===r.length-1?`int ${e[s+1]} = ${n} - ${e[s]} * ${t}`:`index -= ${e[s]} * ${t}`};`)).join("")}function AO(e,t,n="index"){const r=Oe(t);return r.map(((t,s)=>`int ${e[s]} = ${n} / outShapeStrides[${s}]; ${s===r.length-1?`int ${e[s+1]} = ${n} - ${e[s]} * outShapeStrides[${s}]`:`index -= ${e[s]} * outShapeStrides[${s}]`};`)).join("")}function _O(e){const t=Oe(e).map((e=>e.toString()));return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}EO.registerFlag("HAS_WEBGL",(()=>EO.getNumber("WEBGL_VERSION")>0)),EO.registerFlag("WEBGL_VERSION",(()=>vO(2)?2:vO(1)?1:0)),EO.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",(()=>!1)),EO.registerFlag("WEBGL_BUFFER_SUPPORTED",(()=>2===EO.get("WEBGL_VERSION"))),EO.registerFlag("WEBGL_CPU_FORWARD",(()=>!0)),EO.registerFlag("WEBGL_FORCE_F16_TEXTURES",(()=>!1)),EO.registerFlag("WEBGL_PACK",(()=>EO.getBool("HAS_WEBGL"))),EO.registerFlag("WEBGL_PACK_NORMALIZATION",(()=>EO.getBool("WEBGL_PACK"))),EO.registerFlag("WEBGL_PACK_CLIP",(()=>EO.getBool("WEBGL_PACK"))),EO.registerFlag("WEBGL_PACK_DEPTHWISECONV",(()=>EO.getBool("WEBGL_PACK"))),EO.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",(()=>EO.getBool("WEBGL_PACK"))),EO.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",(()=>EO.getBool("WEBGL_PACK"))),EO.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",(()=>EO.getBool("WEBGL_PACK"))),EO.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",(()=>EO.getBool("WEBGL_PACK"))),EO.registerFlag("WEBGL_PACK_REDUCE",(()=>EO.getBool("WEBGL_PACK"))),EO.registerFlag("WEBGL_LAZILY_UNPACK",(()=>EO.getBool("WEBGL_PACK"))),EO.registerFlag("WEBGL_CONV_IM2COL",(()=>EO.getBool("WEBGL_PACK"))),EO.registerFlag("WEBGL_PACK_CONV2DTRANSPOSE",(()=>EO.getBool("WEBGL_PACK"))),EO.registerFlag("WEBGL_MAX_TEXTURE_SIZE",(()=>mO(EO.getNumber("WEBGL_VERSION")))),EO.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",(()=>bO(EO.getNumber("WEBGL_VERSION")))),EO.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",(()=>{const e=EO.getNumber("WEBGL_VERSION");return 0===e?0:xO(e)})),EO.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",(()=>EO.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!Pa())),EO.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",(()=>kO(EO.getNumber("WEBGL_VERSION")))),EO.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",(()=>!EO.getBool("WEBGL_FORCE_F16_TEXTURES")&&EO.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))),EO.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",(()=>NO(EO.getNumber("WEBGL_VERSION")))),EO.registerFlag("WEBGL_FENCE_API_ENABLED",(()=>SO(EO.getNumber("WEBGL_VERSION")))),EO.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",(()=>EO.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0)),EO.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",(()=>-1),(e=>{if("number"!=typeof e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be a number but got ${e}.`);if(e<0&&-1!==e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`)})),EO.registerFlag("WEBGL_FLUSH_THRESHOLD",(()=>Pa()?1:-1),(e=>{if("number"!=typeof e)throw new Error(`WEBGL_FLUSH_THRESHOLD must be a number but got ${e}.`);if(e<0&&-1!==e)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${e}.`)})),EO.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",(()=>128)),EO.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",(()=>!1)),EO.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",(()=>1e5)),EO.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",(()=>128)),EO.registerFlag("WEBGL_EXP_CONV",(()=>!1)),EO.registerFlag("SOFTWARE_WEBGL_ENABLED",(()=>EO.getBool("IS_TEST"))),EO.registerFlag("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE",(()=>1/0)),EO.registerFlag("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE",(()=>!1)),EO.registerFlag("WEBGL2_ISNAN_CUSTOM",(()=>!1)),EO.registerFlag("ENGINE_COMPILE_ONLY",(()=>!1));const RO="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",{getBroadcastDims:DO}=y;function FO(e,t,n){const r=[];if(e.forEach((e=>{const t=ue(e.shapeInfo.logicalShape);if(e.shapeInfo.isUniform?r.push(`uniform float ${e.name}${t>1?`[${t}]`:""};`):(r.push(`uniform sampler2D ${e.name};`),r.push(`uniform int offset${e.name};`)),n.enableShapeUniforms){const{uniformShape:t}=GO(n.packedInputs,e.shapeInfo.logicalShape,e.shapeInfo.texShape);switch(t.length){case 1:r.push(`uniform int ${e.name}Shape;`);break;case 2:r.push(`uniform ivec2 ${e.name}Shape;`);break;case 3:r.push(`uniform ivec3 ${e.name}Shape;`);break;case 4:r.push(`uniform ivec4 ${e.name}Shape;`)}r.push(`uniform ivec2 ${e.name}TexShape;`)}})),n.enableShapeUniforms){switch(t.logicalShape.length){case 1:r.push("uniform int outShape;");break;case 2:r.push("uniform ivec2 outShape;"),r.push("uniform int outShapeStrides;");break;case 3:r.push("uniform ivec3 outShape;"),r.push("uniform ivec2 outShapeStrides;");break;case 4:r.push("uniform ivec4 outShape;"),r.push("uniform ivec3 outShapeStrides;")}r.push("uniform ivec2 outTexShape;")}n.customUniforms&&n.customUniforms.forEach((e=>{r.push(`uniform ${e.type} ${e.name}${e.arrayIndex?`[${e.arrayIndex}]`:""};`)}));const s=r.join("\n"),a=e.map((e=>function(e,t,n=!1,r){let s="";s+=n?MO(e,r):OO(e,r);const a=e.shapeInfo.logicalShape,o=t.logicalShape;return a.length<=o.length&&(s+=n?function(e,t){const n=e.name,r=n.charAt(0).toUpperCase()+n.slice(1),s="get"+r+"AtOutCoords",a=e.shapeInfo.logicalShape.length,o=t.logicalShape.length,i=DO(e.shapeInfo.logicalShape,t.logicalShape),l=UO(o),u=o-a;let c;const p=["x","y","z","w","u","v"];c=0===a?"":o<2&&i.length>=1?"coords = 0;":i.map((e=>`coords.${p[e+u]} = 0;`)).join("\n");let h="";h=o<2&&a>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${p[t+u]}`)).join(", ");let d="return outputValue;";const f=1===ue(e.shapeInfo.logicalShape),m=1===ue(t.logicalShape);if(1!==a||f||m){if(f&&!m)d=1===o?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(i.length){const e=a-2,t=a-1;i.indexOf(e)>-1&&i.indexOf(t)>-1?d="return vec4(outputValue.x);":i.indexOf(e)>-1?d="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":i.indexOf(t)>-1&&(d="return vec4(outputValue.xx, outputValue.zz);")}}else d="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${s}() {\n      ${l} coords = getOutputCoords();\n      ${c}\n      vec4 outputValue = get${r}(${h});\n      ${d}\n    }\n  `}(e,t):function(e,t){const n=e.name,r=n.charAt(0).toUpperCase()+n.slice(1),s="get"+r+"AtOutCoords",a=t.texShape,o=e.shapeInfo.texShape,i=e.shapeInfo.logicalShape.length,l=t.logicalShape.length;if(!e.shapeInfo.isUniform&&i===l&&null==e.shapeInfo.flatOffset&&he(o,a))return`\n      float ${s}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const u=UO(l),c=DO(e.shapeInfo.logicalShape,t.logicalShape),p=l-i;let h;const d=["x","y","z","w","u","v"];h=0===i?"":l<2&&c.length>=1?"coords = 0;":c.map((e=>`coords.${d[e+p]} = 0;`)).join("\n");let f="";return f=l<2&&i>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${d[t+p]}`)).join(", "),`\n    float ${s}() {\n      ${u} coords = getOutputCoords();\n      ${h}\n      return get${r}(${f});\n    }\n  `}(e,t)),s}(e,t,n.packedInputs,n.enableShapeUniforms))).join("\n"),o=t.texShape,i=$O(),l=function(e){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${e.texture2D}(textureSampler, uv).r;\n    }\n  `}(i);let u,c,p=function(e){return`${e.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${e.varyingFs} vec2 resultUV;\n    ${e.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${e.defineSpecialNaN}\n    ${e.defineSpecialInf}\n    ${e.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${LO}\n    ${zO}\n    ${PO}\n  `}(i);return t.isPacked?(u=function(e,t,n){switch(e.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(e,t,n){const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];return 1===r[0]?n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${r[1]}.0);\n      }\n    `:1===r[1]?n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${r[0]}.0);\n      }\n    `:n?"\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n      return 2 * (resTexRC.x * ${r[1]} + resTexRC.y);\n    }\n  `}(0,t,n);case 2:return function(e,t,n){const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(he(e,t))return n?"\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${r[0]}, ${r[1]}));\n      }\n    `;const s=Math.ceil(e[1]/2);return n?"\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n\n      int index = resTexRC.x * ${r[1]} + resTexRC.y;\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n)return"\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  ";const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],s=Math.ceil(e[2]/2),a=s*Math.ceil(e[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n      int index = resTexRC.x * ${r[1]} + resTexRC.y;\n\n      int b = index / ${a};\n      index -= b * ${a};\n\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(e,t,n);default:return function(e,t,n){if(n)return"\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  ";const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],s=Math.ceil(e[e.length-1]/2),a=s*Math.ceil(e[e.length-2]/2);let o=a,i="",l="b, r, c";for(let t=2;t<e.length-1;t++)o*=e[e.length-t-1],i=`\n      int b${t} = index / ${o};\n      index -= b${t} * ${o};\n    `+i,l=`b${t}, `+l;return`\n    ivec${e.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n      int index = resTexRC.x * ${r[1]} + resTexRC.y;\n\n      ${i}\n\n      int b = index / ${a};\n      index -= b * ${a};\n\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec${e.length}(${l});\n    }\n  `}(e,t,n)}}(t.logicalShape,o,n.enableShapeUniforms),c=function(e){return`\n    void setOutput(vec4 val) {\n      ${e.output} = val;\n    }\n  `}(i)):(u=function(e,t,n){switch(e.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(e,t,n){return 1===t[0]?n?"\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.x * ${t[1]}.0);\n      }\n    `:1===t[1]?n?"\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.y * ${t[0]}.0);\n      }\n    `:n?"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      return resTexRC.x * ${t[1]} + resTexRC.y;\n    }\n  `}(0,t,n);case 2:return function(e,t,n){return he(e,t)?n?"\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `:1===e[1]?n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `:1===e[0]?n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `:n?"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${e[1]};\n      int c = index - r * ${e[1]};\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n)return`\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${AO(["r","c","d"],e)}\n    return ivec3(r, c, d);\n  }\n`;const r=CO(["r","c","d"],e);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${r}\n      return ivec3(r, c, d);\n    }\n  `}(e,t,n);case 4:return function(e,t,n){if(n)return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${AO(["r","c","d","d2"],e)}\n      return ivec4(r, c, d, d2);\n    }\n  `;const r=CO(["r","c","d","d2"],e);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${r}\n      return ivec4(r, c, d, d2);\n    }\n  `}(e,t,n);case 5:return function(e,t){const n=CO(["r","c","d","d2","d3"],e);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(e,t);case 6:return function(e,t){const n=CO(["r","c","d","d2","d3","d4"],e);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(e,t);default:throw new Error(`${e.length}-D output sampling is not yet supported`)}}(t.logicalShape,o,n.enableShapeUniforms),c=function(e){return`\n    void setOutput(float val) {\n      ${e.output} = vec4(val, 0, 0, 0);\n    }\n  `}(i)),n.packedInputs&&(p+=BO),[p,l,c,s,u,a,n.userCode].join("\n")}function OO(e,t=!1){const n=e.shapeInfo.logicalShape;switch(n.length){case 0:return function(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`float ${r}() {return ${n};}`;const[s,a]=e.shapeInfo.texShape;if(1===s&&1===a)return`\n      float ${r}() {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const o=VO(n);if(t)return`\n    float ${r}() {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `;const[i,l]=e.shapeInfo.texShape;return`\n    float ${r}() {\n      vec2 uv = uvFromFlat(${i}, ${l}, ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,t);case 1:return function(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`\n      float ${r}(int index) {\n        ${WO(e)}\n      }\n    `;const s=e.shapeInfo.texShape,a=s[0],o=s[1];if(1===o&&1===a)return`\n      float ${r}(int index) {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const i=VO(n);return 1===o?t?`\n      float ${r}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / float(${n}TexShape[0]));\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${r}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / ${a}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `:1===a?t?`\n      float ${r}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / float(${n}TexShape[1]), 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${r}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / ${o}.0, 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `:t?`\n    float ${r}(int index) {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], index + ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `:`\n    float ${r}(int index) {\n      vec2 uv = uvFromFlat(${a}, ${o}, index + ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,t);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,r=e.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=e.shapeInfo.texShape;if(null!=a&&he(n,a)){if(t)return`\n      float ${s}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `;const e=a[0];return`\n    float ${s}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${a[1]}.0, ${e}.0);\n      return sampleTexture(${r}, uv);\n    }\n  `}const{newShape:o,keptDims:i}=ve(n),l=o;if(l.length<n.length){const n=["row","col"];return`\n      ${OO(HO(e,l),t)}\n      float ${s}(int row, int col) {\n        return ${s}(${jO(n,i)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${n[1]}, 1)));\n        ${WO(e)}\n      }\n    `;const u=a[0],c=a[1],p=VO(r);return 1===c?t?`\n      float ${s}(int row, int col) {\n        float index = dot(vec3(row, col, ${p}), vec3(${r}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${r}TexShape[0]));\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n    float ${s}(int row, int col) {\n      float index = dot(vec3(row, col, ${p}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${u}.0);\n      return sampleTexture(${r}, uv);\n    }\n  `:1===u?t?`\n      float ${s}(int row, int col) {\n        float index = dot(vec3(row, col, ${p}), vec3(${r}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${r}TexShape[1]), 0.5);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n    float ${s}(int row, int col) {\n      float index = dot(vec3(row, col, ${p}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${c}.0, 0.5);\n      return sampleTexture(${r}, uv);\n    }\n  `:t?`\n      float ${s}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${r}Shape[1] + col + ${p};\n        vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], index);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n  float ${s}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${n[1]} + col + ${p};\n    vec2 uv = uvFromFlat(${u}, ${c}, index);\n    return sampleTexture(${r}, uv);\n  }\n`}(e,t);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,r=e.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=n[1]*n[2],o=n[2],{newShape:i,keptDims:l}=ve(n),u=i;if(u.length<n.length){const n=["row","col","depth"];return`\n        ${OO(HO(e,u),t)}\n        float ${s}(int row, int col, int depth) {\n          return ${s}(${jO(n,l)});\n        }\n      `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${a}, ${o}, 1)));\n        ${WO(e)}\n      }\n    `;const c=e.shapeInfo.texShape,p=c[0],h=c[1],d=e.shapeInfo.flatOffset;if(h===a&&null==d)return t?`\n      float ${s}(int row, int col, int depth) {\n        int stride1 = ${r}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n        float ${s}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${o}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${h}.0, ${p}.0);\n          return sampleTexture(${r}, uv);\n        }\n      `;if(h===o&&null==d)return t?`\n      float ${s}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${r}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n    float ${s}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${n[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${h}.0, ${p}.0);\n      return sampleTexture(${r}, uv);\n    }\n  `;const f=VO(r);return t?`\n    float ${s}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${r}Shape[1] * ${r}Shape[2];\n      int stride1 = ${r}Shape[2];\n      int index = row * stride0 + col * stride1 + depth + ${f};\n      vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], index);\n      return sampleTexture(${r}, uv);\n    }\n    `:`\n      float ${s}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${a} + col * ${o} + depth + ${f};\n        vec2 uv = uvFromFlat(${p}, ${h}, index);\n        return sampleTexture(${r}, uv);\n      }\n  `}(e,t);case 4:return function(e,t){const n=e.shapeInfo.logicalShape,r=e.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=n[3],o=n[2]*a,i=n[1]*o,{newShape:l,keptDims:u}=ve(n);if(l.length<n.length){const n=["row","col","depth","depth2"];return`\n      ${OO(HO(e,l),t)}\n      float ${s}(int row, int col, int depth, int depth2) {\n        return ${s}(${jO(n,u)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${i}, ${o}, ${a}, 1)));\n        ${WO(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,p=e.shapeInfo.texShape,h=p[0],d=p[1],f=`int stride2 = ${r}Shape[3];`,m=`int stride1 = ${r}Shape[2] * stride2;`,g=`int stride0 = ${r}Shape[1] * stride1;`;if(d===i&&null==c)return t?`\n      float ${s}(int row, int col, int depth, int depth2) {\n        ${f}\n        ${m}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n      float ${s}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${o}, ${a}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${d}.0, ${h}.0);\n        return sampleTexture(${r}, uv);\n      }\n    `;if(d===a&&null==c)return t?`\n      float ${s}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${r}Shape[1] * ${r}Shape[2], ${r}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n      float ${s}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${n[1]*n[2]}, ${n[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${d}.0, ${h}.0);\n        return sampleTexture(${r}, uv);\n      }\n    `;const y=VO(r);return t?`\n    float ${s}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${f}\n      ${m}\n      ${g}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], index + ${y});\n      return sampleTexture(${r}, uv);\n    }\n  `:`\n    float ${s}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${o} +\n          depth * ${a} + depth2;\n      vec2 uv = uvFromFlat(${h}, ${d}, index + ${y});\n      return sampleTexture(${r}, uv);\n    }\n  `}(e,t);case 5:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=t[4],a=t[3]*s,o=t[2]*a,i=t[1]*o,{newShape:l,keptDims:u}=ve(t);if(l.length<t.length){const t=["row","col","depth","depth2","depth3"];return`\n      ${OO(HO(e,l))}\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        return ${r}(${jO(t,u)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${i}, ${o}, ${a}, ${s})) +\n          depth3;\n        ${WO(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,p=e.shapeInfo.texShape,h=p[0],d=p[1];if(d===i&&null==c)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${o}, ${a}, ${s}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${d}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(d===s&&null==c)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]},\n               ${t[2]*t[3]}, ${t[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${d}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;return`\n    float ${r}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${o} + depth * ${a} +\n          depth2 * ${s} + depth3 + ${VO(n)};\n      vec2 uv = uvFromFlat(${h}, ${d}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 6:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:s,keptDims:a}=ve(t);if(s.length<t.length){const t=["row","col","depth","depth2","depth3","depth4"];return`\n      ${OO(HO(e,s))}\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${r}(${jO(t,a)});\n      }\n    `}const o=t[5],i=t[4]*o,l=t[3]*i,u=t[2]*l,c=t[1]*u;if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${c}, ${u}, ${l}, ${i})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${o}, 1)));\n        ${WO(e)}\n      }\n    `;const p=e.shapeInfo.flatOffset,h=e.shapeInfo.texShape,d=h[0],f=h[1];if(f===c&&null==p)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${u}, ${l}, ${i}, ${o})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(f===o&&null==p)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]*t[4]},\n               ${t[2]*t[3]*t[4]},\n               ${t[3]*t[4]},\n               ${t[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;return`\n    float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${c} + col * ${u} + depth * ${l} +\n          depth2 * ${i} + depth3 * ${o} + depth4 + ${VO(n)};\n      vec2 uv = uvFromFlat(${d}, ${f}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);default:throw new Error(`${n.length}-D input sampling is not yet supported`)}}function MO(e,t){switch(e.shapeInfo.logicalShape.length){case 0:return function(e){const t=e.name;return`\n    vec4 ${"get"+t.charAt(0).toUpperCase()+t.slice(1)}() {\n      return ${$O().texture2D}(${t}, halfCR);\n    }\n  `}(e);case 1:return function(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=e.shapeInfo.texShape,a=$O();if(t)return`\n    vec4 ${r}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${a.texture2D}(${n}, uv);\n    }\n  `;const o=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)];return`\n    vec4 ${r}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${o[0]}, ${o[1]}, index);\n      return ${a.texture2D}(${n}, uv);\n    }\n  `}(e,t);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,r=e.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=e.shapeInfo.texShape,o=a[0],i=a[1],l=$O();if(null!=a&&he(n,a))return t?`\n      vec4 ${s}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${r}TexShape[1], ${r}TexShape[0]);\n\n        return ${l.texture2D}(${r}, uv);\n      }\n    `:`\n      vec4 ${s}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${i}.0, ${o}.0);\n\n        return ${l.texture2D}(${r}, uv);\n      }\n    `;if(t)return`\n    vec4 ${s}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${r}TexShape[0]) / 2.0), ceil(float(${r}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${r}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${l.texture2D}(${r}, uv);\n    }\n  `;const u=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];return`\n    vec4 ${s}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${Math.ceil(n[1]/2)}, ${u[0]}, ${u[1]}, row, col);\n      return ${l.texture2D}(${r}, uv);\n    }\n  `}(e,t);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,r=e.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=e.shapeInfo.texShape,o=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];if(1===n[0]){const r=[1,2],a=["b","row","col"];return`\n        ${MO(HO(e,n.slice(1)),t)}\n        vec4 ${s}(int b, int row, int col) {\n          return ${s}(${jO(a,r)});\n        }\n      `}const i=$O();if(t)return`\n    vec4 ${s}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${r}TexShape[0]) / 2.0), ceil(float(${r}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${r}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${r}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${i.texture2D}(${r}, uv);\n    }\n  `;const l=o[0],u=o[1],c=Math.ceil(n[2]/2);return`\n    vec4 ${s}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${l}, ${u}, ${c*Math.ceil(n[1]/2)}, ${c}, b, row, col);\n      return ${i.texture2D}(${r}, uv);\n    }\n  `}(e,t);default:return function(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=$O();if(t)return`\n    vec4 ${r}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${n}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${n}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${n}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${s.texture2D}(${n}, uv);\n    }\n  `;const a=e.shapeInfo.logicalShape,o=a.length,i=e.shapeInfo.texShape,l=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)],u=l[0],c=l[1],p=Math.ceil(a[o-1]/2);let h=p*Math.ceil(a[o-2]/2),d="int b, int row, int col",f=`b * ${h} + (row / 2) * ${p} + (col / 2)`;for(let e=2;e<o-1;e++)d=`int b${e}, `+d,h*=a[o-e-1],f=`b${e} * ${h} + `+f;return`\n    vec4 ${r}(${d}) {\n      int index = ${f};\n      int texR = index / ${c};\n      int texC = index - texR * ${c};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${c}, ${u});\n      return ${s.texture2D}(${n}, uv);\n    }\n  `}(e,t)}}const LO="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",zO="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",PO="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",BO="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function VO(e){return`offset${e}`}function WO(e){const t=e.name,n=ue(e.shapeInfo.logicalShape);return n<2?`return ${t};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `}function UO(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";if(6===e)return"ivec6";throw Error(`GPU for rank ${e} is not yet supported`)}function GO(e,t,n){const{newShape:r,keptDims:s}=ve(t),a=t.length,o=e&&3===a&&1===t[0],i=o?t.slice(1):r,l=!e&&a>1&&!he(t,n)&&r.length<a||o;return{useSqueezeShape:l,uniformShape:l?i:t,keptDims:s}}function HO(e,t){const n=JSON.parse(JSON.stringify(e));return n.shapeInfo.logicalShape=t,n}function jO(e,t){return t.map((t=>e[t])).join(", ")}function KO(e,t,n){const r=[],s=[];let a,o,i,l=null,u=null;u=e.getUniformLocation(n,"NAN",!1),1===Ye().getNumber("WEBGL_VERSION")&&(l=e.getUniformLocation(n,"INFINITY",!1));const c=!1;for(const s of t.variableNames){const a={name:s,uniform:e.getUniformLocation(n,s,c),offset:e.getUniformLocation(n,`offset${s}`,c)};t.enableShapeUniforms&&(a.shape=e.getUniformLocation(n,`${s}Shape`,c),a.texShape=e.getUniformLocation(n,`${s}TexShape`,c)),r.push(a)}if(t.enableShapeUniforms&&(a=e.getUniformLocation(n,"outShape",c),i=e.getUniformLocation(n,"outShapeStrides",c),o=e.getUniformLocation(n,"outTexShape",c)),t.customUniforms)for(const r of t.customUniforms)s.push(e.getUniformLocation(n,r.name,c));return{variablesLocations:r,customUniformLocations:s,infLoc:l,nanLoc:u,outShapeLocation:a,outShapeStridesLocation:i,outTexShapeLocation:o}}function qO(e,t){if(e.length!==t.length)throw Error(`Binary was compiled with ${e.length} inputs, but was executed with ${t.length} inputs`);e.forEach(((e,n)=>{const r=e.logicalShape,s=t[n],a=s.shape;if(!he(r,a))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${r} and ${a} must match`);if(e.isUniform&&s.isUniform)return;const o=e.texShape,i=s.isUniform?null:s.texData.texShape;if(!he(o,i))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${o} and ${i} must match`)}))}function YO(e){return Ye().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&e<=4}class XO{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=kF.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=$O();this.outputShape=e,this.enableShapeUniforms=YO(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?AO(["r","c","d"],e):CO(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${t.output} = result;\n      }\n    `}}class ZO{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=kF.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=$O();this.outputShape=e,this.enableShapeUniforms=YO(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?AO(["r","c","d"],e):CO(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${t.output} = result;\n      }\n    `}}class QO{constructor(e){this.variableNames=["A"],this.outTexUsage=NF.DOWNLOAD;const t=$O();this.outputShape=e,this.userCode=`\n      ${RO}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${t.output} = encode_float(x);\n      }\n    `}}class JO{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=NF.DOWNLOAD;const t=$O();this.outputShape=e,this.userCode=`\n      ${RO}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${t.output} = encode_float(x);\n      }\n    `}}const eM={R:0,G:1,B:2,A:3};class tM{constructor(e,t=!1,n="RGBA"){this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];const r=$O();this.outputShape=e,this.enableShapeUniforms=YO(this.outputShape.length);let s="result";t&&(s="floor(result * 255. + 0.5)");let a="";for(let e=0;e<n.length;e++){const t=n[e];a+=`\n          if(offset == ${e}) {\n            result = values[${eM[t]}];\n          }`}this.userCode=`\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":_O(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int flatIndex = getFlatIndex(coords);\n        float result = 0.;\n        int offset = imod(flatIndex, ${n.length});\n\n        flatIndex = idiv(flatIndex, ${n.length}, 1.);\n\n        int r = flatIndex / texShape[1];\n        if (r < texShape[0]) {\n          int c = imod(flatIndex, texShape[1]);\n          vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n          vec4 values = ${r.texture2D}(A, uv);\n          ${a}\n        }\n        ${r.output} = vec4(${s}, 0., 0., 0.);\n      }\n    `}}class nM{constructor(e,t=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];const n=$O();this.outputShape=e,this.enableShapeUniforms=YO(this.outputShape.length);let r="",s="result";t&&(s="floor(result * 255. + 0.5)");for(let t=0;t<=1;t++)for(let s=0;s<=1;s++){const a=2*t+s;r+=`\n          localCoords = coords;\n          if(localCoords[2] + ${s} < ${this.enableShapeUniforms?"outShape[2]":`${e[2]}`}) {\n          localCoords[2] += ${s};\n          if (localCoords[1] + ${t} < ${this.enableShapeUniforms?"outShape[1]":`${e[1]}`}) {\n            localCoords[1] += ${t};\n\n            flatIndex = getFlatIndex(localCoords);\n            offset = imod(flatIndex, 4);\n\n            flatIndex = idiv(flatIndex, 4, 1.);\n\n            int r = flatIndex / texShape[1];\n            int c = imod(flatIndex, texShape[1]);\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n            values = ${n.texture2D}(A, uv);\n\n            if (offset == 0) {\n              result[${a}] = values[0];\n            } else if (offset == 1) {\n              result[${a}] = values[1];\n            } else if (offset == 2) {\n              result[${a}] = values[2];\n            } else {\n              result[${a}] = values[3];\n            }\n          }\n        }\n        `}this.userCode=`\n        ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":_O(e)}\n\n        void main() {\n          ivec3 coords = getOutputCoords();\n\n          vec4 result = vec4(0.);\n          int flatIndex, r, c, offset;\n          ivec3 localCoords;\n          vec2 uv;\n          vec4 values;\n\n          ${r}\n\n          ${n.output} = ${s};\n        }\n    `}}function rM(e){const t=$O();return OF(e,`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}function sM(e){return WF(e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function aM(e){return UF(e,new Uint16Array([0,1,2,2,1,3]))}function oM(e,t,n,r,s,a){jF(t,n);const o=HF(e),i=e.TEXTURE_2D;return CF(e,(()=>e.bindTexture(i,o))),CF(e,(()=>e.texParameteri(i,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE))),CF(e,(()=>e.texParameteri(i,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE))),CF(e,(()=>e.texParameteri(i,e.TEXTURE_MIN_FILTER,e.NEAREST))),CF(e,(()=>e.texParameteri(i,e.TEXTURE_MAG_FILTER,e.NEAREST))),1===Ye().getNumber("WEBGL_VERSION")?CF(e,(()=>e.texImage2D(i,0,r,t,n,0,s,a,null))):CF(e,(()=>e.texStorage2D(i,1,r,t,n))),CF(e,(()=>e.bindTexture(e.TEXTURE_2D,null))),{texture:o,texShape:[n,t]}}function iM(e){return e.internalFormatFloat}function lM(e,t,n,r){const[s,a]=SF(t,n);return oM(e,s,a,iM(r),r.textureFormatFloat,e.FLOAT)}function uM(e){return e.internalFormatHalfFloat}function cM(e,t,n,r){const[s,a]=SF(t,n);return oM(e,s,a,uM(r),r.textureFormatFloat,r.textureTypeHalfFloat)}function pM(e){return e.downloadTextureFormat}function hM(e,t,n,r){const[s,a]=SF(t,n);return oM(e,s,a,pM(r),e.RGBA,e.UNSIGNED_BYTE)}function dM(e){return e.internalFormatPackedFloat}function fM(e,t,n,r){const[s,a]=EF(t,n);return oM(e,s,a,dM(r),e.RGBA,e.FLOAT)}function mM(e){return e.internalFormatPackedHalfFloat}function gM(e,t,n,r){const[s,a]=EF(t,n);return oM(e,s,a,mM(r),e.RGBA,r.textureTypeHalfFloat)}function yM(e,t,n){return CF(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),qF(e,t,"clipSpacePos",n,3,20,0)&&qF(e,t,"uv",n,2,20,12)}function bM(e,t,n,r,s,a){let o,i,l;CF(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),s instanceof Uint8Array?(o=new Uint8Array(n*r*4),i=e.UNSIGNED_BYTE,l=e.RGBA):(o=new Float32Array(n*r*4),i=e.FLOAT,l=a.internalFormatPackedFloat),o.set(s),2===Ye().getNumber("WEBGL_VERSION")?CF(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n,r,e.RGBA,i,o))):CF(e,(()=>e.texImage2D(e.TEXTURE_2D,0,l,n,r,0,e.RGBA,i,o))),CF(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}function xM(e,t,n){CF(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),n.data instanceof Uint8Array?2===Ye().getNumber("WEBGL_VERSION")?CF(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n.width,n.height,e.RGBA,e.UNSIGNED_BYTE,n.data))):CF(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,n.width,n.height,0,e.RGBA,e.UNSIGNED_BYTE,n.data))):2===Ye().getNumber("WEBGL_VERSION")?CF(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,e.RGBA,e.UNSIGNED_BYTE,n))):CF(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,n))),CF(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}function wM(e,t,n,r){const s=e.createBuffer();CF(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,s)));const a=16*t*n;return CF(e,(()=>e.bufferData(e.PIXEL_PACK_BUFFER,a,e.STREAM_READ))),CF(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,0))),CF(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,null))),s}function vM(e,t,n){const r=e,s=new Float32Array(n);return r.bindBuffer(r.PIXEL_PACK_BUFFER,t),r.getBufferSubData(r.PIXEL_PACK_BUFFER,0,s),r.bindBuffer(r.PIXEL_PACK_BUFFER,null),s}function kM(e,t,n,r){const[s,a]=SF(t,n),o=new Uint8Array(t*n*4);return CF(e,(()=>e.readPixels(0,0,s,a,r.downloadTextureFormat,e.UNSIGNED_BYTE,o))),new Float32Array(o.buffer)}function NM(e,t,n,r,s,a,o,i){const l=e,u=new Float32Array(function(e,t){const[n,r]=EF(e,t);return n*r*4}(a,o));return l.bindBuffer(l.PIXEL_PACK_BUFFER,t),l.getBufferSubData(l.PIXEL_PACK_BUFFER,0,u),l.bindBuffer(l.PIXEL_PACK_BUFFER,null),u}function TM(e,t,n){const r=new Float32Array(t*n*4);return CF(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,r))),r}class SM{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.itemsToPoll=[];const t=Ye().getNumber("WEBGL_VERSION");if(null!=e?(this.gl=e,wF(t,e)):this.gl=vF(t),e=this.gl,2===Ye().getNumber("WEBGL_VERSION")){const t=e;this.createVertexArray=()=>CF(t,(()=>t.createVertexArray())),this.bindVertexArray=e=>CF(t,(()=>t.bindVertexArray(e))),this.deleteVertexArray=e=>CF(t,(()=>t.deleteVertexArray(e))),this.getVertexArray=()=>CF(t,(()=>t.getParameter(t.VERTEX_ARRAY_BINDING)))}else if(null!=e){const t=e.getExtension("OES_vertex_array_object");if(null==t)throw new Error("All WebGL1 implementations are expected to offer OES_vertex_array_object.");this.createVertexArray=()=>CF(e,(()=>t.createVertexArrayOES())),this.bindVertexArray=n=>CF(e,(()=>t.bindVertexArrayOES(n))),this.deleteVertexArray=n=>CF(e,(()=>t.deleteVertexArrayOES(n))),this.getVertexArray=()=>CF(e,(()=>e.getParameter(t.VERTEX_ARRAY_BINDING_OES)))}let n="WEBGL_color_buffer_float";const r="EXT_color_buffer_half_float";if(this.parallelCompilationExtension=this.gl.getExtension("KHR_parallel_shader_compile"),1===Ye().getNumber("WEBGL_VERSION")){const e="OES_texture_float",t="OES_texture_half_float";if(this.textureFloatExtension=FF(this.gl,e),wO(this.gl,t))this.textureHalfFloatExtension=FF(this.gl,t);else if(Ye().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),wO(this.gl,r))this.colorBufferHalfFloatExtension=FF(this.gl,r);else if(Ye().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",wO(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!wO(this.gl,r))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(r)}this.vertexBuffer=sM(this.gl),this.indexBuffer=aM(this.gl),this.framebuffer=KF(this.gl),this.textureConfig=$F(this.gl,this.textureHalfFloatExtension)}get debug(){return Ye().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const e=this.gl;CF(e,(()=>e.finish())),CF(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,null))),CF(e,(()=>e.deleteFramebuffer(this.framebuffer))),CF(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,null))),CF(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null))),CF(e,(()=>e.deleteBuffer(this.indexBuffer))),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),lM(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),cM(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),hM(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){this.throwIfDisposed(),xM(this.gl,e,t)}uploadDenseMatrixToTexture(e,t,n,r){this.throwIfDisposed(),bM(this.gl,e,t,n,r,this.textureConfig)}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),gM(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),fM(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(nO(this.gl,this.framebuffer),this.outputTexture=null),CF(this.gl,(()=>this.gl.deleteTexture(e)))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>kM(this.gl,t,n,this.textureConfig)))}downloadPackedMatrixFromBuffer(e,t,n,r,s,a){return NM(this.gl,e,0,0,0,s,a,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,t){return vM(this.gl,e,t)}createBufferFromTexture(e,t,n){this.bindTextureToFrameBuffer(e);const r=wM(this.gl,t,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),r}createAndWaitForFence(){const e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,n;if(Ye().getBool("WEBGL_FENCE_API_ENABLED")){const r=e,s=r.fenceSync(r.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),n=()=>{const e=r.clientWaitSync(s,0,0);return e===r.ALREADY_SIGNALED||e===r.CONDITION_SATISFIED},t=s}else Ye().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(t,Ye().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:t,isFencePassed:n}}downloadMatrixFromPackedTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>TM(this.gl,t,n)))}createProgram(e){this.throwIfDisposed();const t=this.gl;null==this.vertexShader&&(this.vertexShader=rM(t));const n=PF(t);CF(t,(()=>t.attachShader(n,this.vertexShader))),CF(t,(()=>t.attachShader(n,e))),BF(t,n);const r=Object.assign(n,{vao:this.createVertexArray()});return this.debug&&VF(t,r),r}buildVao(e){this.setProgram(e),this.bindVertexArray(e.vao);const t=this.gl;CF(t,(()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this.indexBuffer))),yM(t,e,this.vertexBuffer)}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&(CF(this.gl,(()=>this.gl.deleteProgram(e))),this.deleteVertexArray(e.vao))}setProgram(e){this.throwIfDisposed(),this.program=e,null!=this.program&&this.debug&&VF(this.gl,this.program),CF(this.gl,(()=>this.gl.useProgram(e)))}getUniformLocation(e,t,n=!0){return this.throwIfDisposed(),n?ZF(this.gl,e,t):QF(this.gl,e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),CF(this.gl,(()=>this.gl.getAttribLocation(e,t)))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,n){this.throwIfDisposed(),this.throwIfNoProgram(),JF(this.gl,e,t,n)}setOutputMatrixTexture(e,t,n){this.setOutputMatrixTextureDriver(e,n,t)}setOutputPackedMatrixTexture(e,t,n){this.throwIfDisposed();const[r,s]=EF(t,n);this.setOutputMatrixTextureDriver(e,r,s)}setOutputMatrixWriteRegion(e,t,n,r){this.setOutputMatrixWriteRegionDriver(n,e,r,t)}setOutputPackedMatrixWriteRegion(e,t,n,r){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&VF(this.gl,this.program),rO(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const e=this.gl;if(this.debug){const e=this.getVertexArray();console.assert(e===this.program.vao,"VAO changed between setProgram and executeProgram!"),this.debugValidate()}CF(e,(()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0)))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),CF(this.gl,(()=>this.gl.finish()))}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=FF(this.gl,2===Ye().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===Ye().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2(),n=e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT,n),n}const e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(2===Ye().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2();return void e.endQuery(t.TIME_ELAPSED_EXT)}const e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await be((()=>this.disposed||this.isQueryAvailable(e,Ye().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")))),this.getQueryTime(e,Ye().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(0===t)return null;if(2===t){const t=this.gl;return t.getQueryParameter(e,t.QUERY_RESULT)/1e6}{const t=this.getQueryTimerExtensionWebGL1();return t.getQueryObjectEXT(e,t.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(0===t)return!0;if(2===t){const t=this.gl,n=this.getQueryTimerExtensionWebGL2(),r=t.getQueryParameter(e,t.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),r&&!this.disjoint}{const t=this.getQueryTimerExtensionWebGL1(),n=t.getQueryObjectEXT(e,t.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(t.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(e){return new Promise((t=>{this.addItemToPoll((()=>e.isFencePassed()),(()=>t()))}))}pollItems(){const e=function(e){let t=0;for(;t<e.length&&e[t]();++t);return t-1}(this.itemsToPoll.map((e=>e.isDoneFn)));for(let t=0;t<=e;++t){const{resolveFn:e}=this.itemsToPoll[t];e()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){if(this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1)return;let n;"setTimeoutCustom"in Ye().platform&&(n=Ye().platform.setTimeoutCustom.bind(Ye().platform)),be((()=>(this.pollItems(),0===this.itemsToPoll.length)),(()=>0),null,n)}bindTextureToFrameBuffer(e){this.throwIfDisposed(),tO(this.gl,e,this.framebuffer),this.debug&&rO(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(tO(this.gl,this.outputTexture,this.framebuffer),this.debug&&rO(this.gl)):nO(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);const n=t();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(e,t,n){this.throwIfDisposed();const r=this.gl;tO(r,e,this.framebuffer),this.debug&&rO(r),this.outputTexture=e,CF(r,(()=>r.viewport(0,0,t,n))),CF(r,(()=>r.scissor(0,0,t,n)))}setOutputMatrixWriteRegionDriver(e,t,n,r){this.throwIfDisposed(),CF(this.gl,(()=>this.gl.scissor(e,t,n,r)))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}const{addImpl:IM,bincountImpl:EM,bincountReduceImpl:$M,bitwiseAndImpl:CM,castImpl:AM,ceilImpl:_M,concatImpl:RM,equalImpl:DM,expImpl:FM,expm1Impl:OM,floorImpl:MM,gatherNdImpl:LM,gatherV2Impl:zM,greaterImpl:PM,greaterEqualImpl:BM,lessImpl:VM,lessEqualImpl:WM,linSpaceImpl:UM,logImpl:GM,maxImpl:HM,maximumImpl:jM,minimumImpl:KM,multiplyImpl:qM,negImpl:YM,notEqualImpl:XM,prodImpl:ZM,raggedGatherImpl:QM,raggedRangeImpl:JM,raggedTensorToTensorImpl:eL,rangeImpl:tL,rsqrtImpl:nL,scatterImpl:rL,sigmoidImpl:sL,simpleAbsImpl:aL,sliceImpl:oL,sparseFillEmptyRowsImpl:iL,sparseReshapeImpl:lL,sparseSegmentReductionImpl:uL,sqrtImpl:cL,staticRegexReplaceImpl:pL,stridedSliceImpl:hL,stringNGramsImpl:dL,stringSplitImpl:fL,stringToHashBucketFastImpl:mL,subImpl:gL,tileImpl:yL,topKImpl:bL,transposeImpl:xL,uniqueImpl:wL}=j;function vL(e,t){return["x","y","z","w","u","v"].slice(0,t).map((t=>`${e}.${t}`))}function kL(e,t){return 1===t?[e]:vL(e,t)}class NL{constructor(e){if(this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.enableShapeUniforms=YO(this.outputShape.length),0===this.rank)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const e=kL("rc",this.rank),t=UO(this.rank),n=this.getOutOfBoundsCondition(e),r=this.getSetup(e),s=this.getOutput(e);this.userCode=`\n        void main() {\n          ${t} rc = getOutputCoords();\n\n          if(${n}) {\n            setOutput(vec4(0));\n          } else {\n            ${r}\n\n            setOutput(vec4(${s}));\n          }\n        }\n      `}}getSourceCoordsArr(e){const t=[];for(let n=0;n<=1;n++)for(let r=0;r<=1;r++){let s=`${0===n?"r":"rp1"}, ${0===r?"c":"cp1"}`;for(let t=2;t<this.rank;t++)s=`${e[e.length-1-t]},`+s;t.push(s)}return t}getOutOfBoundsCondition(e){if(1===this.rank)return`rc > ${this.enableShapeUniforms?"outShape":this.outputShape[0]}`;let t="";for(let n=this.rank-2;n<this.rank;n++)t+=`${e[n]} >= ${this.enableShapeUniforms?`outShape[${n}]`:this.outputShape[n]}`,n<this.rank-1&&(t+="||");return t}getSetup(e){if(1===this.rank)return"";const t=e.slice(-2),n=this.enableShapeUniforms?`outShape[${this.rank} - 1]`:this.outputShape[this.rank-1],r=this.enableShapeUniforms?`outShape[${this.rank} - 2]`:this.outputShape[this.rank-2];return`\n      int r = ${t[0]};\n      int c = ${t[1]};\n      int rp1 = r + 1;\n      int cp1 = c + 1;\n\n      bool cEdge = cp1 >= ${n};\n      bool rEdge = rp1 >= ${r};\n    `}getOutput(e){const t=this.getSourceCoordsArr(e);return 1===this.rank?`getA(rc), (rc + 1 >= ${this.enableShapeUniforms?"outShape":this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0`:`getA(${t[0]}),\n            cEdge ? 0. : getA(${t[1]}),\n            rEdge ? 0. : getA(${t[2]}),\n            rEdge || cEdge ? 0. : getA(${t[3]})`}}class TL{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=e,this.enableShapeUniforms=YO(this.outputShape.length);let n="";for(let e=0;e<4;e++){let t="thisRC = rc;";e%2==1&&(t+="thisRC.z += 1;"),e>1&&(t+="thisRC.y += 1;"),n+=`\n        ${t}\n        ${e>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${e}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${e>0?"}":""}\n      `}var r,s;this.userCode=`\n      ${r=t,s=this.enableShapeUniforms,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${s?function(e,t,n="index"){const r=function(e,t){const n=e.length,r=e.map((e=>`${t}[${e}]`)),s=new Array(n-1);s[n-2]=r[n-1];for(let e=n-3;e>=0;--e)s[e]=`(${s[e+1]} * ${r[e+1]})`;return s}(e.map(((e,t)=>t)),t);return r.map(((t,s)=>`int ${e[s]} = ${n} / ${r[s]}; ${s===r.length-1?`int ${e[s+1]} = ${n} - ${e[s]} * ${r[s]}`:`index -= ${e[s]} * ${r[s]}`};`)).join("")}(["r","c","d"],"inputShape"):CO(["r","c","d"],r)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":_O(e)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms?"outShape[1]":e[1]};\n        int cols = ${this.enableShapeUniforms?"outShape[2]":e[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}class SL{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.usedTextures={},this.logEnabled=!1}acquireTexture(e,t,n){const r=EL(t,n),s=$L(e,r,n);s in this.freeTextures||(this.freeTextures[s]=[]),s in this.usedTextures||(this.usedTextures[s]=[]);const a=IL(e,r,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[s].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=a,this.log();const e=this.freeTextures[s].pop();return this.usedTextures[s].push(e),e}let o;return r===TF.PACKED_2X2_FLOAT32?o=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):r===TF.PACKED_2X2_FLOAT16?o=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):r===TF.UNPACKED_FLOAT32?o=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):r===TF.UNPACKED_FLOAT16?o=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):r===TF.PACKED_4X1_UNSIGNED_BYTE&&(o=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[s].push(o),this.numUsedTextures++,this._numBytesAllocated+=a,this.log(),o}releaseTexture(e,t,n,r){if(null==this.freeTextures)return;const s=EL(n,r),a=$L(t,s,r);a in this.freeTextures||(this.freeTextures[a]=[]);const o=IL(t,s,this.gpgpu.gl,this.gpgpu.textureConfig,r),i=Ye().getNumber("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==i&&this._numBytesAllocated>i?(this.gpgpu.deleteMatrixTexture(e.texture),this._numBytesAllocated-=o):(this.freeTextures[a].push(e),this.numFreeTextures++,this._numBytesFree+=o),this.numUsedTextures--;const l=this.usedTextures[a],u=l&&l.indexOf(e);if(null==u||u<0)throw new Error("Cannot release a texture that was never provided by this texture manager");l[u]=l[l.length-1],l.pop(),this.log()}log(){if(!this.logEnabled)return;const e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${e})`);const t=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*t)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const e in this.freeTextures)this.freeTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e.texture)}));for(const e in this.usedTextures)this.usedTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e.texture)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function IL(e,t,n,r,s){const a=function(e,t){switch(e){case TF.PACKED_2X2_FLOAT32:return dM(t);case TF.PACKED_2X2_FLOAT16:return mM(t);case TF.UNPACKED_FLOAT32:return iM(t);case TF.UNPACKED_FLOAT16:return uM(t);case TF.PACKED_4X1_UNSIGNED_BYTE:return pM(t);default:throw new Error(`Unknown physical texture type ${e}`)}}(t,r);let o;if(s){const[t,n]=EF(e[0],e[1]);o=t*n}else{const[t,n]=SF(e[0],e[1]);o=t*n}const i=function(e,t){const n=e;if(t===n.R32F)return 4;if(t===n.R16F)return 2;if(t===n.RGBA32F)return 16;if(t===e.RGBA)return 16;if(t===n.RGBA16F)return 8;if(t===n.RGBA8)return 4;throw new Error(`Unknown internal format ${t}`)}(n,a);return o*i}function EL(e,t){if(e===NF.UPLOAD)return TF.PACKED_2X2_FLOAT32;if(e===NF.RENDER||null==e)return function(e){return Ye().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?e?TF.PACKED_2X2_FLOAT32:TF.UNPACKED_FLOAT32:e?TF.PACKED_2X2_FLOAT16:TF.UNPACKED_FLOAT16}(t);if(e===NF.DOWNLOAD||e===NF.PIXELS)return TF.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${e}`)}function $L(e,t,n){return`${e[0]}_${e[1]}_${t}_${n}`}class CL{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.enableShapeUniforms=YO(this.outputShape.length),this.userCode=`\n      float unaryOperation(float x) {\n        ${t}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const AL="if (isnan(x)) return x;",_L="return abs(x);",RL=AL+"\n  return (x < 0.0) ? 0.0 : x;\n",DL=AL+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",FL="return x;";class OL{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.enableShapeUniforms=YO(this.outputShape.length),this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${t}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class ML{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e,this.enableShapeUniforms=YO(this.outputShape.length);const t=e.length,n=kL("rc",t),r=UO(t),s=function(e,t){if(1===e)return"rc";let n="";for(let r=0;r<e;r++)n+=t[r],r<e-1&&(n+=",");return n}(t,n),a=n.slice(-2),o=t<=1?"rc":`vec2(${a.join(",")})`;this.userCode=`\n      void main() {\n        ${r} rc = getOutputCoords();\n        vec4 packedInput = getA(${s});\n\n        setOutput(getChannel(packedInput, ${o}));\n      }\n    `}}const LL=yd,zL={},PL=Ye().getNumber("CPU_HANDOFF_SIZE_THRESHOLD");class BL extends X{nextDataId(){return BL.nextDataId++}constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!Ye().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");let t;if(null!=e){if(e instanceof SM)t=e;else{const n=vF(Ye().getNumber("WEBGL_VERSION"),e);t=new SM(n)}this.binaryCache={},this.gpgpuCreatedLocally=!1}else{const e=vF(Ye().getNumber("WEBGL_VERSION"));t=new SM(e),this.binaryCache=((n=Ye().getNumber("WEBGL_VERSION"))in zL||(zL[n]={}),zL[n]),this.gpgpuCreatedLocally=!0}var n;this.gpgpu=t,this.canvas=this.gpgpu.gl.canvas,this.textureManager=new SL(this.gpgpu),this.numMBBeforeWarning=null==Ye().global.screen?1024:Ye().global.screen.height*Ye().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new Y(this,ao())}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}writeTexture(e,t,n,r,s,a){const o=this.makeTensorInfo(t,n),i=this.texData.get(o.dataId);i.isPacked=!1,i.texture={texture:e,texShape:[r,s]},i.texShape=[r,s];const l=uO(t),u=new tM(l,!1,a),c=this.runWebGLProgram(u,[o],n,[[r,s]]);return c.shape=t,i.texture=null,this.disposeIntermediateTensorInfo(o),c.dataId}write(e,t,n){if((Ye().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||Ye().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===n&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const r={id:this.nextDataId()};return this.texData.set(r,{shape:t,dtype:n,values:e,usage:NF.UPLOAD,refCount:1}),r}refCount(e){return this.texData.has(e)?this.texData.get(e).refCount:0}incRef(e){this.texData.get(e).refCount++}decRef(e){this.texData.has(e)&&this.texData.get(e).refCount--}move(e,t,n,r,s){if(Ye().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===r)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:n,dtype:r,values:t,usage:NF.UPLOAD,refCount:s})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){const t=this.texData.get(e),{values:n,dtype:r,complexTensorInfos:s,slice:a,shape:o,isPacked:i}=t;if(null!=a){let t;t=i?new OL(o,FL):new CL(o,FL);const n=this.runWebGLProgram(t,[{dataId:e,shape:o,dtype:r}],r),s=this.readSync(n.dataId);return this.disposeIntermediateTensorInfo(n),s}if(null!=n)return this.convertAndCacheOnCPU(e);if("string"===r)return n;const l=null!=this.activeTimers;let u,c;return l&&(u=Ys()),c="complex64"===r?hm(this.readSync(s.real.dataId),this.readSync(s.imag.dataId)):this.getValuesFromTexture(e),l&&(this.downloadWaitMs+=Ys()-u),this.convertAndCacheOnCPU(e,c)}async read(e){if(this.pendingRead.has(e)){const t=this.pendingRead.get(e);return new Promise((e=>t.push(e)))}const t=this.texData.get(e),{values:n,shape:r,slice:s,dtype:a,complexTensorInfos:o,isPacked:i}=t;if(null!=s){let t;t=i?new OL(r,FL):new CL(r,FL);const n=this.runWebGLProgram(t,[{dataId:e,shape:r,dtype:a}],a),s=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),s}if(null!=n)return this.convertAndCacheOnCPU(e);if(Ye().getBool("DEBUG")&&!Ye().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===Ye().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let l,u,c=null;if("complex64"!==a&&Ye().get("WEBGL_BUFFER_SUPPORTED")){l=this.decode(e);const t=this.texData.get(l.dataId);c=this.gpgpu.createBufferFromTexture(t.texture.texture,...IF(r))}if(this.pendingRead.set(e,[]),"complex64"!==a&&await this.gpgpu.createAndWaitForFence(),"complex64"===a){const e=await Promise.all([this.read(o.real.dataId),this.read(o.imag.dataId)]);u=hm(e[0],e[1])}else if(null==c)u=this.getValuesFromTexture(e);else{const e=ue(r);u=this.gpgpu.downloadFloat32MatrixFromBuffer(c,e)}if(null!=l&&this.disposeIntermediateTensorInfo(l),null!=c){const e=this.gpgpu.gl;CF(e,(()=>e.deleteBuffer(c)))}const p=this.convertAndCacheOnCPU(e,u),h=this.pendingRead.get(e);return this.pendingRead.delete(e),h.forEach((e=>e(p))),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e)&&ao().removeDataId(e,this),this.pendingDeletes--),p}readToGPU(e,t={}){const n=this.texData.get(e),{values:r,shape:s,slice:a,dtype:o,isPacked:i,texture:l}=n;if("complex64"===o)throw new Error("Does not support reading texture for complex64 dtype.");if(null!=a){let n;n=i?new OL(s,FL):new CL(s,FL);const r=this.runWebGLProgram(n,[{dataId:e,shape:s,dtype:o}],o),a=this.readToGPU(r,t);return this.disposeIntermediateTensorInfo(r),a}if(null==l)throw null!=r?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");const u=this.decode(e,t.customTexShape),c=ao().makeTensorFromTensorInfo(u),p=this.texData.get(u.dataId);return Object.assign({tensorRef:c},p.texture)}bufferSync(e){const t=this.readSync(e.dataId);if("string"===e.dtype)try{const n=t.map((e=>Qs(e)));return ki(e.shape,e.dtype,n)}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return ki(e.shape,e.dtype,t)}checkNumericalProblems(e){if(null!=e)for(let t=0;t<e.length;t++){const n=e[t];if(!RF(n)){if(Ye().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(e){const{shape:t,dtype:n,isPacked:r}=this.texData.get(e),s=ue(t);if(Ye().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(e),r=this.texData.get(n.dataId),a=this.gpgpu.downloadMatrixFromPackedTexture(r.texture.texture,...IF(t)).subarray(0,s);return this.disposeIntermediateTensorInfo(n),a}const a=Ye().getBool("WEBGL_PACK")&&!0===r,o=a?uO(t):t,i=a?new JO(o):new QO(o),l=this.runWebGLProgram(i,[{shape:o,dtype:n,dataId:e}],"float32"),u=this.texData.get(l.dataId),c=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(u.texture.texture,u.texShape[0],u.texShape[1]).subarray(0,s);return this.disposeIntermediateTensorInfo(l),c}timerAvailable(){return Ye().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}time(e){const t=this.activeTimers,n=[];let r=!1;null==this.programTimersStack?(this.programTimersStack=n,r=!0):this.activeTimers.push(n),this.activeTimers=n,e();const s=ea(this.activeTimers.map((e=>e.query))).filter((e=>null!=e)),a=ea(this.activeTimers.map((e=>e.name))).filter((e=>null!=e));this.activeTimers=t,r&&(this.programTimersStack=null);const o={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};return(async()=>{if(Ye().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const e=await Promise.all(s);o.kernelMs=re(e),o.getExtraProfileInfo=()=>e.map(((e,t)=>({name:a[t],ms:e}))).map((e=>`${e.name}: ${e.ms}`)).join(", ")}else o.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,o})()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return Ye().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:Ys(),endMs:null}}endTimer(e){return Ye().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=Ys(),e)}async getQueryTime(e){if(Ye().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(e);const t=e;return t.endMs-t.startMs}disposeData(e,t=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(t?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!t&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);const{complexTensorInfos:n}=this.texData.get(e);return null!=n&&(this.disposeData(n.real.dataId,t),this.disposeData(n.imag.dataId,t)),this.texData.delete(e),!0}releaseGPUData(e){const{texture:t,dtype:n,texShape:r,usage:s,isPacked:a,slice:o}=this.texData.get(e),i=o&&o.origDataId||e,l=this.dataRefCount.get(i);l>1?this.dataRefCount.set(i,l-1):(this.dataRefCount.delete(i),null!=t&&(this.numBytesInGPU-=this.computeBytes(r,n),this.textureManager.releaseTexture(t,r,s,a)));const u=this.texData.get(e);u.texture=null,u.texShape=null,u.isPacked=!1,u.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture.texture}getDataInfo(e){return this.texData.get(e)}shouldExecuteOnCPU(e,t=PL){return Ye().getBool("WEBGL_CPU_FORWARD")&&e.every((e=>null==this.texData.get(e.dataId).texture&&ue(e.shape)<t))}getGPGPUContext(){return this.gpgpu}where(e){xs("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const t=e.dataSync();return LL(e.shape,t)}packedUnaryOp(e,t,n){const r=new OL(e.shape,t),s=this.compileAndRun(r,[e],n);return ao().makeTensorFromTensorInfo(s)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const t=aL(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,t)}if(Ye().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,_L,e.dtype);const t=new CL(e.shape,_L),n=this.compileAndRun(t,[e]);return ao().makeTensorFromTensorInfo(n)}makeTensorInfo(e,t,n){let r;if("string"===t&&null!=n&&n.length>0&&Ce(n[0])){const s=n.map((e=>Zs(e)));r=this.write(s,e,t)}else r=this.write(n,e,t);return this.texData.get(r).usage=null,{dataId:r,shape:e,dtype:t}}makeOutput(e,t,n){return ao().makeTensorFromTensorInfo(this.makeTensorInfo(e,t,n),this)}unpackTensor(e){const t=new ML(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){const t=new NL(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)}packedReshape(e,t){const n=[iO(e.shape),...lO(e.shape)],r={dtype:e.dtype,shape:n,dataId:e.dataId},s=[iO(t),...lO(t)],a=new TL(s,n),o=[n],i=this.runWebGLProgram(a,[r],e.dtype,o,!0);return{dataId:i.dataId,shape:t,dtype:i.dtype}}decode(e,t){const n=this.texData.get(e),{isPacked:r,shape:s,dtype:a}=n;null!=t&&oe(ue(s)<=t[0]*t[1]*4,(()=>"customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data."));const o=uO(s);let i;i=r?new ZO(o):new XO(o);const l=[null!=t?t:IF(o)];return{dtype:a,shape:s,dataId:this.runWebGLProgram(i,[{shape:o,dtype:a,dataId:e}],a,l,!0,t).dataId}}runWebGLProgram(e,t,n,r,s=!1,a){const o=this.makeTensorInfo(e.outputShape,n),i=this.texData.get(o.dataId);if(e.packedOutput&&(i.isPacked=!0),e.outPackingScheme===kF.DENSE){const t=null!=a?a:IF(e.outputShape);i.texShape=t.map((e=>2*e))}if(null!=e.outTexUsage&&(i.usage=e.outTexUsage),0===ue(o.shape))return i.values=ke(o.dtype,0),o;const l=[],u=t.map((t=>{if("complex64"===t.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(t.dataId);if(null==n.texture){if(!e.packedInputs&&ue(t.shape)<=Ye().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:t.shape,texData:null,isUniform:!0,uniformValues:n.values};e.packedInputs&&(n.isPacked=!0,n.shape=t.shape)}if(this.uploadToGPU(t.dataId),!!n.isPacked!=!!e.packedInputs)t=n.isPacked?this.unpackTensor(t):this.packTensor(t),l.push(t),n=this.texData.get(t.dataId);else if(n.isPacked&&!hO(n.shape,t.shape)){const e=t,r=t.shape;t.shape=n.shape,t=this.packedReshape(t,r),l.push(t),n=this.texData.get(t.dataId),e.shape=r}return{shape:t.shape,texData:n,isUniform:!1}}));this.uploadToGPU(o.dataId);const c={shape:o.shape,texData:i,isUniform:!1},p=function(e,t,n){let r="";t.concat(n).forEach((t=>{const s=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0;if(e.enableShapeUniforms&&!t.isUniform){const a=t.texData.texShape,{useSqueezeShape:o,uniformShape:i,keptDims:l}=GO(e.packedInputs,t.shape,a);let u="",c="",p="";if(1===i.length&&e.packedInputs){const e=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];u=`${e[0]>1}_${e[1]>1}`}else if(2!==i.length||e.packedInputs){if(i.length>2&&!e.packedInputs){const e=Oe(i);p=`${e[0]===a[1]}_${e[e.length-1]===a[1]}`}}else c=`${i[0]>1}_${i[1]>1}`;const h=t.shape.length,d=2===i.length&&he(t.shape,a),f=1===ue(t.shape),m=tl(t.shape,n.shape),g=!e.packedInputs&&h===n.shape.length&&he(a,n.texData.texShape),y=e.packedInputs||i.length>2?"":`${a[0]>1}_${a[1]>1}`;r+=`${h}_${g}_${o?l:""}_${i.length}_${f}_${m}_${d}_${u}_${c}_${p}_${y}_${s}`}else{const e=t.isUniform?"uniform":t.texData.texShape;r+=`${t.shape}_${e}_${s}`}}));const s=e.userCode;let a=e.constructor.name;return a+="_"+r+"_"+s+`${Ye().getNumber("WEBGL_VERSION")}`,a}(e,u,c),h=this.getAndSaveBinary(p,(()=>function(e,t,n,r){const s=n.map(((e,n)=>{const r={logicalShape:e.shape,texShape:e.isUniform?null:e.texData.texShape,isUniform:e.isUniform,isPacked:!e.isUniform&&e.texData.isPacked,flatOffset:null};return null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0&&(r.flatOffset=e.texData.slice.flatOffset),{name:t.variableNames[n],shapeInfo:r}})),a=s.map((e=>e.shapeInfo)),o={logicalShape:r.shape,texShape:r.texData.texShape,isUniform:!1,isPacked:r.texData.isPacked,flatOffset:null},i=FO(s,o,t),l=MF(e.gl,i),u=e.createProgram(l);return Ye().get("ENGINE_COMPILE_ONLY")?{program:t,fragmentShader:l,source:i,webGLProgram:u,inShapeInfos:a,outShapeInfo:o,variablesLocations:null,customUniformLocations:null,infLoc:null,nanLoc:null,outShapeLocation:null,outShapeStridesLocation:null,outTexShapeLocation:null}:(e.buildVao(u),Object.assign({program:t,fragmentShader:l,source:i,webGLProgram:u,inShapeInfos:a,outShapeInfo:o},KO(e,t,u)))}(this.gpgpu,e,u,c))),d=null!=this.activeTimers;let f;d&&(f=this.startTimer()),Ye().get("ENGINE_COMPILE_ONLY")||function(e,t,n,r,s){t.program.enableShapeUniforms||(qO(t.inShapeInfos,n),qO([t.outShapeInfo],[r]));const a=r.texData.texture,o=r.texData.texShape;r.texData.isPacked?e.setOutputPackedMatrixTexture(a.texture,o[0],o[1]):e.setOutputMatrixTexture(a.texture,o[0],o[1]),e.setProgram(t.webGLProgram),e.bindVertexArray(t.webGLProgram.vao),1===Ye().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&e.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&e.gl.uniform1f(t.nanLoc,NaN);for(let r=0;r<n.length;++r){const s=n[r],{uniform:a,offset:o,shape:i,texShape:l}=t.variablesLocations[r];if(i){const{uniformShape:n}=GO(t.program.packedInputs,s.shape,s.texData.texShape);switch(n.length){case 1:e.gl.uniform1iv(i,new Int32Array(n));break;case 2:e.gl.uniform2iv(i,new Int32Array(n));break;case 3:e.gl.uniform3iv(i,new Int32Array(n));break;case 4:e.gl.uniform4iv(i,new Int32Array(n))}}if(l&&e.gl.uniform2i(l,s.texData.texShape[0],s.texData.texShape[1]),null!=a)if(s.isUniform)if(ue(s.shape)<2)e.gl.uniform1f(a,s.uniformValues[0]);else{let t=s.uniformValues;t instanceof Float32Array||(t=new Float32Array(t)),e.gl.uniform1fv(a,t)}else null!=s.texData.slice&&null!=o&&e.gl.uniform1i(o,s.texData.slice.flatOffset),e.setInputMatrixTexture(s.texData.texture.texture,a,r)}const i=t.outShapeLocation;if(i)switch(r.shape.length){case 1:e.gl.uniform1iv(i,new Int32Array(r.shape));break;case 2:e.gl.uniform2iv(i,new Int32Array(r.shape));break;case 3:e.gl.uniform3iv(i,new Int32Array(r.shape));break;case 4:e.gl.uniform4iv(i,new Int32Array(r.shape))}if(t.outShapeStridesLocation){const n=Oe(r.shape);switch(r.shape.length){case 2:e.gl.uniform1iv(t.outShapeStridesLocation,new Int32Array(n));break;case 3:e.gl.uniform2iv(t.outShapeStridesLocation,new Int32Array(n));break;case 4:e.gl.uniform3iv(t.outShapeStridesLocation,new Int32Array(n))}}if(t.outTexShapeLocation&&e.gl.uniform2i(t.outTexShapeLocation,r.texData.texShape[0],r.texData.texShape[1]),t.program.customUniforms&&s)for(let n=0;n<t.program.customUniforms.length;++n){const r=t.program.customUniforms[n],a=t.customUniformLocations[n],o=s[n];if("float"===r.type)e.gl.uniform1fv(a,o);else if("vec2"===r.type)e.gl.uniform2fv(a,o);else if("vec3"===r.type)e.gl.uniform3fv(a,o);else if("vec4"===r.type)e.gl.uniform4fv(a,o);else if("int"===r.type)e.gl.uniform1iv(a,o);else if("ivec2"===r.type)e.gl.uniform2iv(a,o);else if("ivec3"===r.type)e.gl.uniform3iv(a,o);else{if("ivec4"!==r.type)throw Error(`uniform type ${r.type} is not supported yet.`);e.gl.uniform4iv(a,o)}}e.executeProgram()}(this.gpgpu,h,u,c,r),l.forEach((e=>this.disposeIntermediateTensorInfo(e))),d&&(f=this.endTimer(f),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(f)}));const m=Ye().getNumber("WEBGL_FLUSH_THRESHOLD");if(m>0){const e=Ys();e-this.lastGlFlushTime>m&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=e)}if(!Ye().getBool("WEBGL_LAZILY_UNPACK")&&i.isPacked&&!1===s){const e=this.unpackTensor(o);return this.disposeIntermediateTensorInfo(o),e}return o}compileAndRun(e,t,n,r,s=!1){return n=n||t[0].dtype,this.runWebGLProgram(e,t,n,r,s)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){this.disposed||(Ye().getBool("IS_TEST")||Object.keys(this.binaryCache).forEach((e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]})),this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=lo((()=>{if(!Ye().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=Ye().getBool("DEBUG");Ye().set("DEBUG",!1);const t=this.abs(Bi(1e-8)).dataSync()[0];if(Ye().set("DEBUG",e),t>0)return 32}return 16}))),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const t=this.texData.get(e),{shape:n,dtype:r,values:s,texture:a,usage:o,isPacked:i}=t;if(null!=a)return;const l=null!=this.activeTimers;let u;l&&(u=Ys());let c=t.texShape;if(null==c&&(c=cO(n,i),t.texShape=c),null!=s){const e=uO(n);let a,o=c[1],p=c[0];const h=s instanceof Uint8Array||s instanceof Uint8ClampedArray;!i&&h||([o,p]=EF(c[0],c[1])),a=i?new nM(e,h):new tM(e,h);const d=h?[p,o]:c,f=this.makeTensorInfo(d,r),m=this.texData.get(f.dataId);m.usage=h?NF.PIXELS:NF.UPLOAD,m.texShape=d,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(f.dataId),o,p,s);const g=[[p,o]],y=!0,b=this.runWebGLProgram(a,[f],r,g,y),x=this.texData.get(b.dataId);t.texShape=x.texShape,t.isPacked=x.isPacked,t.usage=x.usage,Ye().get("ENGINE_COMPILE_ONLY")?this.disposeData(b.dataId):(t.texture=x.texture,t.values=null,this.texData.delete(b.dataId)),this.disposeIntermediateTensorInfo(f),l&&(this.uploadWaitMs+=Ys()-u)}else{const e=this.acquireTexture(c,o,r,i);t.texture=e}}convertAndCacheOnCPU(e,t){const n=this.texData.get(e),{dtype:r}=n;return null!=t&&(n.values=function(e,t){if("float32"===t||"complex64"===t)return e;if("int32"===t||"bool"===t){const n="int32"===t?new Int32Array(e.length):new Uint8Array(e.length);for(let t=0;t<n.length;++t)n[t]=Math.round(e[t]);return n}throw new Error(`Unknown dtype ${t}`)}(t,r)),n.values}acquireTexture(e,t,n,r){if(this.numBytesInGPU+=this.computeBytes(e,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const e=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${e} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,r)}computeBytes(e,t){return e[0]*e[1]*Ee(t)}checkCompileCompletion(){for(const[,e]of Object.entries(this.binaryCache))this.checkCompletion_(e)}async checkCompileCompletionAsync(){const e=[];if(this.gpgpu.parallelCompilationExtension){for(const[,t]of Object.entries(this.binaryCache))e.push(this.checkCompletionAsync_(t));return Promise.all(e)}for(const[,t]of Object.entries(this.binaryCache)){const n=new Promise((e=>{try{this.checkCompletion_(t),e(!0)}catch(e){throw e}}));e.push(n)}return Promise.all(e)}async checkCompletionAsync_(e){return this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)?this.checkCompletion_(e):(await Wf(),this.checkCompletionAsync_(e))}checkCompletion_(e){if(!1===this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.gl.LINK_STATUS)){if(console.log(this.gpgpu.gl.getProgramInfoLog(e.webGLProgram)),!1===this.gpgpu.gl.getShaderParameter(e.fragmentShader,this.gpgpu.gl.COMPILE_STATUS))throw zF(e.source,this.gpgpu.gl.getShaderInfoLog(e.fragmentShader)),new Error("Failed to compile fragment shader.");throw new Error("Failed to link vertex and fragment shaders.")}return!0}getUniformLocations(){for(const e of Object.values(this.binaryCache)){this.gpgpu.buildVao(e.webGLProgram);const{variablesLocations:t,customUniformLocations:n,infLoc:r,nanLoc:s,outShapeLocation:a,outShapeStridesLocation:o,outTexShapeLocation:i}=KO(this.gpgpu,e.program,e.webGLProgram);e.variablesLocations=t,e.customUniformLocations=n,e.infLoc=r,e.nanLoc=s,e.outShapeLocation=a,e.outShapeStridesLocation=o,e.outTexShapeLocation=i}}createTensorFromGPUData(e,t,n){e.channels=e.channels||"RGBA";const{texture:r,height:s,width:a,channels:o}=e,i=ao().backend;if(!i.gpgpu.gl.isTexture(r))throw new Error("The texture is invalid. Also, please make sure the texture and the TFJS WebGL backend are using the same canvas. If you want to use your own custom canvas, you have to create and use the custom TFJS WebGL backend created from the canvas through 'new tf.MathBackendWebGL(customCanvas)'.");const l=i.writeTexture(r,t,n,s,a,o);return ao().makeTensorFromDataId(l,t,n,i)}}BL.nextDataId=0;const VL="4.22.0";function WL(){Ye().set("WEBGL_FORCE_F16_TEXTURES",!0)}Ba()&&xo("webgl",(()=>new BL),2);const UL={forceHalfFloat:WL},GL="\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n";class HL{constructor(e,t,n){this.variableNames=["A","B"],this.outputShape=rl(t,n),this.enableShapeUniforms=YO(this.outputShape.length),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${e}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}const jL="\n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n";class KL{constructor(e,t,n,r=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=rl(t,n);const s=this.outputShape.length;this.enableShapeUniforms=YO(s);let a="";if(r)if(0===s||1===ue(this.outputShape))a="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else if(a=`\n          ${UO(s)} coords = getOutputCoords();\n        `,1===s)this.enableShapeUniforms?a+="\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ":a+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const e=kL("coords",s);this.enableShapeUniforms?a+=`\n            bool nextRowOutOfBounds =\n              (${e[s-2]} + 1) >= outShape[${s} - 2];\n            bool nextColOutOfBounds =\n              (${e[s-1]} + 1) >= outShape[${s} - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `:a+=`\n            bool nextRowOutOfBounds =\n              (${e[s-2]} + 1) >= ${this.outputShape[s-2]};\n            bool nextColOutOfBounds =\n              (${e[s-1]} + 1) >= ${this.outputShape[s-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${e}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${a}\n\n        setOutput(result);\n      }\n    `}}function qL(e){const{inputs:t,backend:n}=e,{x:r}=t;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}const YL={kernelName:yn,backendName:"webgl",kernelFunc:qL};function XL(e){const{inputs:t,backend:n}=e,{real:r,imag:s}=t,a=n.makeTensorInfo(r.shape,"complex64"),o=n.texData.get(a.dataId),i=qL({inputs:{x:r},backend:n}),l=qL({inputs:{x:s},backend:n});return o.complexTensorInfos={real:i,imag:l},a}const ZL={kernelName:Et,backendName:"webgl",kernelFunc:XL},QL="return (a < 0.) ? b * a : a;",JL="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",ez={kernelName:Nn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{alpha:a}=r,o=n.makeTensorInfo([],"float32",Ks(a,"float32")),i=Ye().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new KL(JL,s.shape,o.shape):new HL(QL,s.shape,o.shape),l=n.runWebGLProgram(i,[s,o],"float32");return n.disposeIntermediateTensorInfo(o),l}},tz="return (a < 0.) ? b * a : a;",nz="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",rz={kernelName:ur,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r,alpha:s}=t,a=Ye().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new KL(nz,r.shape,s.shape):new HL(tz,r.shape,s.shape);return n.runWebGLProgram(a,[r,s],"float32")}},sz="if (isnan(x)) return x;";function az({opSnippet:e,packedOpSnippet:t,cpuKernelImpl:n,dtype:r}){return({inputs:s,backend:a})=>{const{x:o}=s,i=a,l=r||o.dtype;if(i.shouldExecuteOnCPU([o])&&null!=n){const e=i.texData.get(o.dataId),t=n(e.values,l);return i.makeTensorInfo(o.shape,l,t)}let u;return u=Ye().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t?new OL(o.shape,t):new CL(o.shape,e),i.runWebGLProgram(u,[o],l)}}function oz({opSnippet:e,packedOpSnippet:t,checkOutOfBounds:n=!1,supportsComplex:r=!1,cpuKernelImpl:s,dtype:a}){return({inputs:o,backend:i})=>{const{a:l,b:u}=o,c=i;if(r&&"complex64"===l.dtype){const t=c.texData.get(l.dataId),n=c.texData.get(u.dataId),[r,s]=[[t.complexTensorInfos.real,n.complexTensorInfos.real],[t.complexTensorInfos.imag,n.complexTensorInfos.imag]].map((t=>{const[n,r]=t,s={dataId:n.dataId,dtype:n.dtype,shape:l.shape},a={dataId:r.dataId,dtype:r.dtype,shape:u.shape},o=new HL(e,l.shape,u.shape);return c.runWebGLProgram(o,[s,a],ka(n.dtype,r.dtype))})),a=XL({inputs:{real:r,imag:s},backend:c});return c.disposeIntermediateTensorInfo(r),c.disposeIntermediateTensorInfo(s),a}const p=a||ka(l.dtype,u.dtype);if(("string"===l.dtype||"string"===u.dtype||c.shouldExecuteOnCPU([l,u]))&&null!=s){const e=c.texData.get(l.dataId).values,t=c.texData.get(u.dataId).values,n="string"===l.dtype?jm(e):e,r="string"===l.dtype?jm(t):t,[a,o]=s(l.shape,u.shape,n,r,p),i=c.makeTensorInfo(o,p);return c.texData.get(i.dataId).values=a,i}let h;return h=Ye().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t?new KL(t,l.shape,u.shape,n):new HL(e,l.shape,u.shape),c.runWebGLProgram(h,[l,u],p)}}function iz(e,t=!1){if("linear"===e)return"return x;";if("relu"===e)return t?"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":RL;if("elu"===e)return t?"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n":"return (x >= 0.0) ? x : (exp(x) - 1.0);";if("relu6"===e)return t?"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":DL;if("prelu"===e)return t?nz:tz;if("leakyrelu"===e)return t?JL:QL;if("sigmoid"===e)return"return 1.0 / (1.0 + exp(-1.0 * x));";throw new Error(`Activation ${e} has not been implemented for the WebGL backend.`)}class lz{constructor(e,t,n,r=!1,s=!1,a=!1,o=null,i=!1,l=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n,this.enableShapeUniforms=YO(this.outputShape.length);const u=r?e[1]:e[2],c=Math.ceil(u/2),p=r?"i * 2, rc.y":"rc.y, i * 2",h=s?"rc.z, i * 2":"i * 2, rc.z",d=r?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],f=s?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let m="",g="";o&&(m=i?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${o}\n        }`:l?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${o}\n        }`:`vec4 activation(vec4 x) {\n          ${o}\n        }`,g="result = activation(result);");const y=a?"result += getBiasAtOutCoords();":"";a&&this.variableNames.push("bias"),i&&this.variableNames.push("preluActivationWeights"),l&&this.variableNames.push("leakyreluAlpha");let b="rc.x",x="rc.x";e[0]<t[0]?b=`imod(rc.x, ${e[0]})`:t[0]<e[0]&&(x=`imod(rc.x, ${t[0]})`),this.userCode=`\n      ${m}\n      // Don't use uniform for sharedDimensionPacked for performance.\n      const float sharedDimension = ${c}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        int batchA = ${b};\n        int batchB = ${x};\n        for (int i = 0; i < ${c}; i++) {\n          vec4 a = getMatrixA(batchA, ${p});\n          vec4 b = getMatrixB(batchB, ${h});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${d[0]} * ${f[0]});\n          result += (${d[1]} * ${f[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${y}\n\n        ${g}\n\n        setOutput(result);\n      }\n    `}}class uz{constructor(e,t,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=rl(t,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${e}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const cz="return a * b;";function pz(e){const{inputs:t,backend:n}=e,{a:r,b:s}=t,a=ka(r.dtype,s.dtype);if("complex64"===r.dtype){const e=n.texData.get(r.dataId),t=n.texData.get(s.dataId),a=new uz("return areal * breal - aimag * bimag;",r.shape,s.shape),o=new uz("return areal * bimag + aimag * breal;",r.shape,s.shape),i=[{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:r.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:r.shape},{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:s.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:s.shape}],l=n.runWebGLProgram(a,i,"float32"),u=n.runWebGLProgram(o,i,"float32"),c=XL({inputs:{real:l,imag:u},backend:n});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),c}if(n.shouldExecuteOnCPU([r,s])){const e=n.texData.get(r.dataId),t=n.texData.get(s.dataId),[o,i]=qM(r.shape,s.shape,e.values,t.values,a),l=n.makeTensorInfo(i,a);return n.texData.get(l.dataId).values=o,l}let o;return o=Ye().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new KL(cz,r.shape,s.shape):new HL(cz,r.shape,s.shape),n.runWebGLProgram(o,[r,s],a)}const hz={kernelName:Zn,backendName:"webgl",kernelFunc:pz};function dz(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{shape:a}=r,o=n,i=ue(s.shape),l=xe(a,i),u=ue(l);oe(i===u,(()=>`The new shape (${l}) has ${u} elements and the old shape (${s.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`));const c=o.texData.get(s.dataId);return!c.isPacked||hO(s.shape,l)||null!==c.texture&&hO(c.shape,l)?(o.incRef(s.dataId),{dataId:s.dataId,shape:l,dtype:s.dtype}):function(e,t,n){const r=[iO(e.shape),...lO(e.shape)],s={dtype:e.dtype,shape:r,dataId:e.dataId},a=[iO(t),...lO(t)],o=new TL(a,r),i=[r],l=n.runWebGLProgram(o,[s],e.dtype,i,!0);return{dataId:l.dataId,shape:t,dtype:l.dtype}}(s,l,o)}const fz={kernelName:br,backendName:"webgl",kernelFunc:dz};class mz{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:r,inSize:s,outSize:a}=e;this.outputShape=[r,a];const o=4*Math.floor(n/4),i=n%4;let l="sumValue += dot(values, ones);";if(null!=t){const e=1/t;l=`sumValue += dot(values * ${de(e)?e.toPrecision(2):e}, ones);`}let u="";s%n>0&&(u=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${u}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${l}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===i}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${l}\n        } else if (${2===i}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${l}\n        } else if (${3===i}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${l}\n        }\n        setOutput(sumValue);\n      }\n    `}}class gz{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:r,inSize:s,outSize:a}=e;this.outputShape=[r,a];let o="0.0",i="";"prod"===t?o="1.0":"min"===t?(o="1.0 / 1e-20",i="min"):"max"===t&&(o="-1.0 / 1e-20",i="max");let l=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===t?l="sumValue":"prod"===t?l="prodValue":"all"===t?l="allValue":"any"===t&&(l="anyValue");const u=4*Math.floor(n/4),c=n%4;let p=`\n      if (${"sum"===t}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===t}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${i}(values, minMaxValue);\n        if (${"min"===t} || ${"max"===t}) {\n          minMaxValue = ${i}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `,h="vec4";"all"===t?(o="1.0",p="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",h="bvec4"):"any"===t&&(o="0.0",p="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",h="bvec4");let d="";s%n>0&&(d=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${o};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${d}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${o});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${u}; i += 4) {\n          int inIdx = inOffset + i;\n          ${h} values = ${h}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${p}\n        }\n\n        int inIdx = inOffset + ${u};\n        if (${1===c}) {\n          ${h} values = ${h}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${p}\n        } else if (${2===c}) {\n          ${h} values = ${h}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${p}\n        } else if (${3===c}) {\n          ${h} values = ${h}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${p}\n        }\n        setOutput(${l});\n      }\n    `}}function yz(e,t,n,r){const s=function(e){const t=[];for(;0===t.length||1!==t[t.length-1].outSize;){const n=t.length?t[t.length-1].outSize:e[1],r=Zf(n);t.push({inSize:n,windowSize:r,outSize:Math.ceil(n/r)})}return t}(e.shape);let a=e;for(let o=0;o<s.length;o++){const{inSize:i,windowSize:l,outSize:u}=s[o];let c,p;c="mean"===n?0===o?new mz({windowSize:l,inSize:i,batchSize:e.shape[0],outSize:u},i):new mz({windowSize:l,inSize:i,batchSize:e.shape[0],outSize:u}):new gz({windowSize:l,inSize:i,batchSize:e.shape[0],outSize:u},n),p=a,a=r.runWebGLProgram(c,[a],t),p.dataId!==e.dataId&&r.disposeIntermediateTensorInfo(p)}return a}class bz{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[t[r]];this.outputShape=n,this.rank=n.length;const r=UO(this.rank),s=function(e){const t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],r=new Array(t);for(let t=0;t<e.length;t++)r[e[t]]=n[t];return r.join()}(t);this.userCode=`\n    void main() {\n      ${r} resRC = getOutputCoords();\n      setOutput(getA(${s}));\n    }\n    `}}class xz{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[t[r]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const r=UO(this.rank),s=vL("rc",this.rank),a=new Array(this.rank);for(let e=0;e<t.length;e++)a[t[e]]=s[e];const o=`vec2(${a.slice(-2).join()})`,i=`++${s[this.rank-1]} < ${n[this.rank-1]}`,l=`getChannel(getA(${a.join()}), ${o})`;this.userCode=`\n    void main() {\n      ${r} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${l};\n      if(${i}) {\n        result[1] = ${l};\n      }\n      --${s[this.rank-1]};\n      if(++${s[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${l};\n        if(${i}) {\n          result[3] = ${l};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function wz(e,t,n){const r=Ye().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new xz(e.shape,t):new bz(e.shape,t);return n.runWebGLProgram(r,[e],e.dtype)}function vz(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r;return function(e,t,n,r){const s=t,a=e.shape.length,o=we(s,e.shape);let i=o;const l=np(i,a),u=null!=l;let c=e;u&&(c=wz(e,l,r),i=sp(i.length,a)),tp("sum",i,a);const[p,h]=Jc(c.shape,i);let d=p;n&&(d=ep(p,o));const f=ue(h),m=dz({inputs:{x:c},attrs:{shape:[ue(e.shape)/f,f]},backend:r}),g=yz(m,Na(e.dtype),"sum",r),y=dz({inputs:{x:g},attrs:{shape:d},backend:r});return r.disposeIntermediateTensorInfo(m),r.disposeIntermediateTensorInfo(g),u&&r.disposeIntermediateTensorInfo(c),y}(s,a,o,n)}const kz={kernelName:Pr,backendName:"webgl",kernelFunc:vz};function Nz(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{perm:a}=r,o=n,i=s.shape.length,l=new Array(i);for(let e=0;e<l.length;e++)l[e]=s.shape[a[e]];let u;if(o.shouldExecuteOnCPU([s])){const e=o.texData.get(s.dataId).values,t=xL(e,s.shape,s.dtype,a,l);u=o.makeTensorInfo(l,s.dtype),o.texData.get(u.dataId).values=t}else u=wz(s,a,o);return u}const Tz={kernelName:is,backendName:"webgl",kernelFunc:Nz};function Sz({a:e,b:t,transposeA:n,transposeB:r,backend:s,bias:a=null,preluActivationWeights:o=null,leakyreluAlpha:i=0,activation:l=null}){const u=e.shape.length,c=t.shape.length,p=n?e.shape[u-2]:e.shape[u-1],h=r?t.shape[c-1]:t.shape[c-2],d=n?e.shape[u-1]:e.shape[u-2],f=r?t.shape[c-2]:t.shape[c-1],m=e.shape.slice(0,-2),g=t.shape.slice(0,-2),y=ue(m),b=ue(g),x=rl(e.shape.slice(0,-2),t.shape.slice(0,-2)).concat([d,f]);oe(p===h,(()=>`Error in matMul: inner shapes (${p}) and (${h}) of Tensors with shapes ${e.shape} and ${t.shape} and transposeA=${n} and transposeB=${r} must match.`));const w=n?[y,p,d]:[y,d,p],v=r?[b,f,h]:[b,h,f],k=dz({inputs:{x:e},backend:s,attrs:{shape:w}}),N=dz({inputs:{x:t},backend:s,attrs:{shape:v}}),T=[k,N],S=Math.max(y,b),I=n?k.shape[1]:k.shape[2],E=null!=a,$=null!=o,C="leakyrelu"===l,A=null!=l?iz(l,!0):null;let _;if((1===d||1===f)&&I>1e3&&!1===(E||$||C||null!=A)){let e=k,t=N;n&&(e=Nz({inputs:{x:k},backend:s,attrs:{perm:[0,2,1]}}),T.push(e)),r&&(t=Nz({inputs:{x:N},backend:s,attrs:{perm:[0,2,1]}}),T.push(t));const a=1===f;let o=e;1!==f&&(o=dz({inputs:{x:e},backend:s,attrs:{shape:[S,I,1]}}),T.push(o));const i=1===f?2:1;let l=t;a&&(l=dz({inputs:{x:t},backend:s,attrs:{shape:[S,1,I]}}),T.push(l));const u=pz({inputs:{a:o,b:l},backend:s});_=vz({inputs:{x:u},backend:s,attrs:{axis:i,keepDims:!0}}),T.push(u)}else{const l=ka(e.dtype,t.dtype),u=new lz(w,v,[S,d,f],n,r,E,A,$,C),c=[k,N];if(null!=a&&c.push(a),$&&c.push(o),C){const e=s.makeTensorInfo([],"float32",Ks(i,"float32"));c.push(e),T.push(e)}_=s.runWebGLProgram(u,c,l)}const R=dz({inputs:{x:_},backend:s,attrs:{shape:x}});T.push(_);for(const e of T)s.disposeIntermediateTensorInfo(e);return R}const Iz={kernelName:gs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{a:s,b:a,bias:o,preluActivationWeights:i}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:p}=r;return Sz({a:s,b:a,transposeA:l,transposeB:u,backend:n,bias:o,preluActivationWeights:i,leakyreluAlpha:p,activation:c})}},Ez="return abs(x);",$z={kernelName:et,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t;if(n.shouldExecuteOnCPU([r])&&"complex64"!==r.dtype){const e=n.texData.get(r.dataId),t=aL(e.values);return n.makeTensorInfo(r.shape,r.dtype,t)}let s;return s=Ye().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new OL(r.shape,Ez):new CL(r.shape,Ez),n.runWebGLProgram(s,[r],r.dtype)}},Cz=az({opSnippet:AL+"\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"}),Az={kernelName:tt,backendName:"webgl",kernelFunc:Cz},_z=az({opSnippet:AL+"\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"}),Rz={kernelName:nt,backendName:"webgl",kernelFunc:_z},Dz="return a + b;",Fz=oz({opSnippet:Dz,packedOpSnippet:Dz,supportsComplex:!0,cpuKernelImpl:IM}),Oz={kernelName:rt,backendName:"webgl",kernelFunc:Fz};class Mz{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`float v${e} = get${e}AtOutCoords();`)}));const r=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${r};\n        setOutput(result);\n      }\n    `}}class Lz{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`vec4 v${e} = get${e}AtOutCoords();`)}));const r=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${r};\n        setOutput(result);\n      }\n    `}}const zz={kernelName:st,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:r}=t,s=n;if(1===s.length)return qL({inputs:{x:s[0]},backend:r});if(s.length>Ye().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const t=Math.floor(s.length/2),n=e({inputs:s.slice(0,t),backend:r}),a=e({inputs:s.slice(t),backend:r});return e({inputs:[n,a],backend:r})}const a=s.map((e=>e.dtype)).reduce(((e,t)=>ka(e,t))),o=s.map((e=>e.shape)),i=Ye().getBool("WEBGL_PACK")?new Lz(s[0].shape,o):new Mz(s[0].shape,o);return r.runWebGLProgram(i,s,a)}},Pz={kernelName:at,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r,i=s.shape.length,l=we(a,s.shape);let u=l;const c=np(u,i);let p=s;null!=c&&(p=Nz({inputs:{x:s},backend:n,attrs:{perm:c}}),u=sp(u.length,i)),tp("all",u,i);const[h,d]=Jc(p.shape,u),f=dz({inputs:{x:p},backend:n,attrs:{shape:[-1,ue(d)]}}),m=yz(f,f.dtype,"all",n);let g;return g=dz(o?{inputs:{x:m},backend:n,attrs:{shape:ep(h,l)}}:{inputs:{x:m},backend:n,attrs:{shape:h}}),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(p),g}},Bz={kernelName:ot,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r,i=s.shape.length,l=we(a,s.shape);let u=l;const c=np(u,i);let p=s;null!=c&&(p=Nz({inputs:{x:s},backend:n,attrs:{perm:c}}),u=sp(u.length,i)),tp("any",u,i);const[h,d]=Jc(p.shape,u),f=dz({inputs:{x:p},backend:n,attrs:{shape:[-1,ue(d)]}}),m=yz(f,f.dtype,"any",n);let g;return g=dz(o?{inputs:{x:m},backend:n,attrs:{shape:ep(h,l)}}:{inputs:{x:m},backend:n,attrs:{shape:h}}),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(p),g}};class Vz{constructor(e,t,n){this.variableNames=["A"];const{windowSize:r,batchSize:s,outSize:a}=e;n||this.variableNames.push("bestIndicesA"),this.outputShape=[s,a];const o="max"===t?">":"<",i=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${r};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${r}; i++) {\n          int inIdx = ${i};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${o} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}class Wz{constructor(e,t,n,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,oe(e.length>2,(()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`));const s=e[e.length-1],a=Math.ceil(s/t);this.outputShape=e.slice(0,-1),a>1&&this.outputShape.push(a),r||this.variableNames.push("bestIndicesA");const o=this.outputShape,i=o.length,l=UO(i),u=kL("coords",i);let c,p;if(1===a){p=i+1;const e=UO(p);c=`\n        ${e} sourceLocR = ${e}(${u.join()}, 0);\n        ++${u[i-1]};\n        ${e} sourceLocG = ${e}(${u.join()}, 0);\n        ++${u[i-2]};\n        ${e} sourceLocA = ${e}(${u.join()}, 0);\n        --${u[i-1]};\n        ${e} sourceLocB = ${e}(${u.join()}, 0);\n        --${u[i-2]};`}else p=i,c=`\n        ${l} sourceLocR = coords;\n        ++${u[i-1]};\n        ${l} sourceLocG = coords;\n        ++${u[i-2]};\n        ${l} sourceLocA = coords;\n        --${u[i-1]};\n        ${l} sourceLocB = coords;\n        --${u[i-2]};`;const h=["x","y","z","w","u","v"].slice(0,p),d="."+h[p-1],f=h.map((e=>"int "+e)),m=kL("sourceLocR",p-1).concat("inIdx.r"),g=kL("sourceLocG",p-1).concat("inIdx.g"),y=kL("sourceLocB",p-1).concat("inIdx.b"),b=kL("sourceLocA",p-1).concat("inIdx.a"),x="max"===n?"greaterThan":"lessThan",w=r?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${m.join()}),\n                             getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${y.join()}),\n                             getBestIndicesAChannel(${b.join()})));`,v=`vec4(\n            getAChannel(${m.join()}),\n            hasNextCol ? getAChannel(${g.join()}) : 0.,\n            hasNextRow ? getAChannel(${y.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${b.join()}) : 0.)`,k=r?"":`\n      float getBestIndicesAChannel(${f.join()}) {\n        return getChannel(getBestIndicesA(${h.join()}),\n                                          vec2(${h.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${f.join()}) {\n        return getChannel(getA(${h.join()}),\n                               vec2(${h.slice(-2).join()}));\n      }\n      ${k}\n      void main() {\n        ${l} coords = getOutputCoords();\n        bool hasNextCol = ${u[i-1]} < ${o[i-1]-1};\n        bool hasNextRow = ${u[i-2]} < ${o[i-2]-1};\n        ${c}\n        ivec4 srcIdx = ivec4(sourceLocR${d}, sourceLocG${d},\n          sourceLocB${d}, sourceLocA${d}) * ${t};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${v};\n\n        for (int i = 0; i < ${t}; i++) {\n          inIdx = srcIdx;\n          ${w}\n          vec4 candidate = ${v};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${x}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}function Uz(e,t,n,r=null){let s=t.shape[0],a=t.shape[1];null!=r&&(s=r.shape[0],a=r.shape[1]);const o=Zf(a),i={windowSize:o,inSize:a,batchSize:s,outSize:Math.ceil(a/o)},l=new Vz(i,n,null==r),u=[t];null!=r&&u.push(r);const c=e.runWebGLProgram(l,u,"int32");if(1===c.shape[1])return c;const p=Uz(e,t,n,c);return e.disposeIntermediateTensorInfo(c),p}function Gz(e,t,n,r=null){const s=null!=r?r.shape:t.shape,a=Zf(s[s.length-1]),o=new Wz(s,a,n,null==r),i=null==r?[t]:[t,r],l=e.runWebGLProgram(o,i,"int32");if(l.shape.length===t.shape.length){const r=Gz(e,t,n,l);return e.disposeIntermediateTensorInfo(l),r}return l}function Hz(e,t,n,r){const s=[n];if(tp("arg"+r.charAt(0).toUpperCase()+r.slice(1),s,t.shape.length),!Ye().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){const n=[],a=e.texData.get(t.dataId);let o=t;null!==a&&a.isPacked&&(o=e.unpackTensor(t),n.push(o));const[i,l]=Jc(o.shape,s),u=ue(l),c=dz({inputs:{x:o},backend:e,attrs:{shape:[-1,u]}});n.push(c);const p=Uz(e,c,r);n.push(p);const h=dz({inputs:{x:p},backend:e,attrs:{shape:i}});return n.forEach((t=>e.disposeIntermediateTensorInfo(t))),h}return Gz(e,t,r)}const jz={kernelName:it,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a}=r;let o=we(a,s.shape);const i=np(o,s.shape.length);let l=s;const u=[];null!=i&&(l=Nz({inputs:{x:s},backend:n,attrs:{perm:i}}),u.push(l),o=sp(o.length,l.shape.length)),tp("argMax",[o[0]],l.shape.length);const c=Hz(n,l,o[0],"max");return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}},Kz={kernelName:lt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a}=r;let o=we(a,s.shape);const i=np(o,s.shape.length);let l=s;const u=[];null!=i&&(l=Nz({inputs:{x:s},backend:n,attrs:{perm:i}}),u.push(l),o=sp(o.length,l.shape.length)),tp("argMin",[o[0]],l.shape.length);const c=Hz(n,l,o[0],"min");return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}},qz=az({opSnippet:AL+"\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"}),Yz={kernelName:ut,backendName:"webgl",kernelFunc:qz},Xz=az({opSnippet:AL+"return log(x + sqrt(x * x + 1.0));"}),Zz={kernelName:ct,backendName:"webgl",kernelFunc:Xz},Qz=az({opSnippet:AL+"\n  return atan(x);\n"}),Jz={kernelName:pt,backendName:"webgl",kernelFunc:Qz},eP=oz({opSnippet:GL+"\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+jL+"\n  return result;\n"}),tP={kernelName:dt,backendName:"webgl",kernelFunc:eP},nP=az({opSnippet:AL+"\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"}),rP={kernelName:ht,backendName:"webgl",kernelFunc:nP};class sP{constructor(e,t,n,r=!1,s=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,o=e.strideHeight,i=e.strideWidth,l=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterHeight,p=e.effectiveFilterWidth,h=e.padInfo.top,d=e.padInfo.left;this.outputShape=e.outShape;const f="avg"===t,m=`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,g=`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`;let y="0.0";if(f||(y="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${o}, ${i});\n        const ivec2 pads = ivec2(${h}, ${d});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${l}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${p};\n                wC += ${u}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${t} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${r?s?m:g:`wR * ${p} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let b=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(b="avgValue / max(count, 1.0)");const x=4*Math.floor(a/4),w=a%4,v=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${o}, ${i});\n      const ivec2 pads = ivec2(${h}, ${d});\n      const float initializationValue = ${y};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${y});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${l}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${x}; wC += 4) {\n            int xC = xCCorner + wC * ${u};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              getValue(batch, xR, xC + 3 * ${u}, d)\n            );\n\n            ${v}\n          }\n\n          int xC = xCCorner + ${x};\n          if (${1===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${v}\n          } else if (${2===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${v}\n          } else if (${3===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              initializationValue\n            );\n\n            ${v}\n          }\n        }\n        setOutput(${b});\n      }\n    `}}class aP{constructor(e,t,n,r=!1,s=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,o=e.strideDepth,i=e.strideHeight,l=e.strideWidth,u=e.dilationDepth,c=e.dilationHeight,p=e.dilationWidth,h=e.effectiveFilterDepth,d=e.effectiveFilterHeight,f=e.effectiveFilterWidth,m=e.padInfo.front,g=e.padInfo.top,y=e.padInfo.left;this.outputShape=e.outShape;const b="avg"===t;let x="0.0";if(b||(x="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${o}, ${i}, ${l});\n        const ivec3 pads = ivec3(${m}, ${g}, ${y});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${h};\n              wD += ${u}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${d};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${p}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${t} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${r?s?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${d} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let w=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(w="avgValue / max(count, 1.0)");const v=4*Math.floor(a/4),k=a%4,N=`\n      if (${b}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${o}, ${i}, ${l});\n      const ivec3 pads = ivec3(${m}, ${g}, ${y});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${h};\n            wD += ${u}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${d};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${v}; wC += 4) {\n              int xC = xCCorner + wC * ${p};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${p}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${p}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${p}, ch)\n              );\n\n              ${N}\n            }\n\n            int xC = xCCorner + ${v};\n            if (${1===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${N}\n            } else if (${2===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${p}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${N}\n            } else if (${3===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${p}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${p}, ch),\n                initializationValue\n              );\n\n              ${N}\n            }\n          }\n        }\n        setOutput(${w});\n      }\n    `}}const oP={kernelName:ft,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t;IO(s,"avgPool");const{filterSize:a,strides:o,pad:i,dimRoundingMode:l}=r;oe(ec(o,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const u=Gu(s.shape,a,o,1,i,l);if(1===u.filterWidth&&1===u.filterHeight&&he(u.inShape,u.outShape))return qL({inputs:{x:s},backend:n});const c=new sP(u,"avg",!1);return n.runWebGLProgram(c,[s],"float32")}},iP={kernelName:gt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{filterSize:a,strides:o,pad:i,dimRoundingMode:l,dataFormat:u}=r,c=Hu(s.shape,a,o,[1,1,1],i,l,u),p=new aP(c,"avg",!1);return n.runWebGLProgram(p,[s],"float32")}};class lP{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,s=e.strideWidth,a=e.dilationHeight,o=e.dilationWidth,i=e.effectiveFilterHeight,l=e.effectiveFilterWidth,u=i-1-e.padInfo.top,c=l-1-e.padInfo.left,p=1/(t*n);this.userCode=`\n      const ivec2 pads = ivec2(${u}, ${c});\n      const float avgMultiplier = float(${p});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${i};\n            wR += ${a}) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${l};\n            wC+= ${o}) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class uP{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,r=e.filterWidth,s=e.strideDepth,a=e.strideHeight,o=e.strideWidth,i=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterDepth,p=e.effectiveFilterHeight,h=e.effectiveFilterWidth,d=c-1-e.padInfo.front,f=p-1-e.padInfo.top,m=h-1-e.padInfo.left,g=1/(t*n*r);this.userCode=`\n      const ivec3 pads = ivec3(${d}, ${f}, ${m});\n      const float avgMultiplier = float(${g});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${c};\n            wD += ${i}) {\n          float dyD = float(dyDCorner + wD) / ${s}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${p};\n              wR += ${l}) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${h};\n                wC += ${u}) {\n              float dyC = float(dyCCorner + wC) / ${o}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const cP={kernelName:yt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,o=a,{filterSize:i,strides:l,pad:u,dimRoundingMode:c}=r,p=Hu(o.shape,i,l,[1,1,1],u,c),h=new uP(p);return n.runWebGLProgram(h,[s],o.dtype)}},pP={kernelName:mt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,o=a;IO([s,a],"avgPoolGrad");const{filterSize:i,strides:l,pad:u}=r,c=Gu(o.shape,i,l,1,u),p=new lP(c);return n.runWebGLProgram(p,[s],o.dtype)}},hP={kernelName:bt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{a:s,b:a}=t,{transposeA:o,transposeB:i}=r;return Sz({a:s,b:a,transposeA:o,transposeB:i,backend:n})}};class dP{constructor(e,t,n,r,s,a){this.outputShape=[],this.variableNames=["x","mean","variance"],rl(e,t),rl(e,n);let o="0.0";null!=r&&(rl(e,r),this.variableNames.push("offset"),o="getOffsetAtOutCoords()");let i="1.0";null!=s&&(rl(e,s),this.variableNames.push("scale"),i="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${o};\n        float scale = ${i};\n        float inv = scale * inversesqrt(variance + float(${a}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class fP{constructor(e,t,n,r,s,a){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],rl(e,t),rl(e,n);let o="vec4(0.0)";null!=r&&(rl(e,r),this.variableNames.push("offset"),o="getOffsetAtOutCoords()");let i="vec4(1.0)";null!=s&&(rl(e,s),this.variableNames.push("scale"),i="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        vec4 offset = ${o};\n        vec4 scale = ${i};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${a}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const mP={kernelName:hn,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r,mean:s,variance:a,offset:o,scale:i}=e;oe(s.shape.length===a.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),oe(null==o||s.shape.length===o.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),oe(null==i||s.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));let{varianceEpsilon:l}=n;null==l&&(l=.001);const u=[r,s,a];let c=null;null!=o&&(c=o.shape,u.push(o));let p=null;null!=i&&(p=i.shape,u.push(i));const h=Ye().getBool("WEBGL_PACK_NORMALIZATION")?new fP(r.shape,s.shape,a.shape,c,p,l):new dP(r.shape,s.shape,a.shape,c,p,l);return t.runWebGLProgram(h,u,u[0].dtype)}};class gP{constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;const t=UO(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const n=function(e){if(1===e)return"sourceLoc";if(e<=6)return yP.slice(0,e).map((e=>"sourceLoc."+e)).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);let r;r=`\n        ${t} sourceLoc;\n        ${t} coords = getOutputCoords();\n        ${e.map(((e,t)=>`sourceLoc.${yP[t]} = start[${t}] + coords.${yP[t]};`)).join("\n")}\n      `,this.userCode=`\n      void main() {\n        ${r}\n        setOutput(getSource(${n}));\n      }\n    `}}const yP=["x","y","z","w","u","v"];class bP{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const t=UO(this.rank),n=kL("coords",this.rank),r=kL("sourceLoc",this.rank),s=1===this.rank?"sourceLoc":`vec2(${r.slice(-2).join()})`,a=`getChannel(getSource(${r.join()}), ${s})`,o=`\n      result.x = ${a};\n      if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n        ++${r[this.rank-1]};\n        result.y = ${a};\n        --${r[this.rank-1]};\n      }\n    `,i=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${e[this.rank-2]}) {\n        ++${r[this.rank-2]};\n        result.z = ${a};\n        if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n          ++${r[this.rank-1]};\n          result.w = ${a};\n        }\n      }\n    `,l=this.rank<=4?`sourceLoc = coords +\n            ${t}(${e.map(((e,t)=>`start[${t}]`)).join()});`:e.map(((e,t)=>`${r[t]} = ${n[t]} + start[${t}];`)).join("\n");this.userCode=`\n      void main() {\n        ${t} coords = getOutputCoords();\n        ${t} sourceLoc;\n        ${l}\n        vec4 result = vec4(0.);\n        ${o}\n        ${i}\n        setOutput(result);\n      }\n    `}}function xP(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{begin:a,size:o}=r,[i,l]=hu(s,a,o);if(Ql(s,i,l),0===ue(l))return n.makeTensorInfo(l,s.dtype,[]);if(n.shouldExecuteOnCPU([s])||"string"===s.dtype){const e=n.texData.get(s.dataId),t=oL(e.values,i,l,s.shape,s.dtype);return n.makeTensorInfo(l,s.dtype,t)}const{isPacked:u}=n.texData.get(s.dataId),c=cu(s.shape,i,l);if(u||!c){const e=Ye().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new bP(l):new gP(l),t=[i];return n.runWebGLProgram(e,[s],s.dtype,t)}return n.uploadToGPU(s.dataId),function(e,t,n,r){const s=r.texData.get(e.dataId),a=r.makeTensorInfo(n,e.dtype),o=r.texData.get(a.dataId);Object.assign(o,s),o.refCount=1,o.shape=n,o.dtype=e.dtype;let i=pu(t,Oe(e.shape));s.slice&&(i+=s.slice.flatOffset),o.slice={flatOffset:i,origDataId:s.slice&&s.slice.origDataId||e.dataId};const l=r.dataRefCount.get(o.slice.origDataId)||1;return r.dataRefCount.set(o.slice.origDataId,l+1),a}(s,i,l,n)}const wP={kernelName:Rr,backendName:"webgl",kernelFunc:xP},vP={kernelName:xt,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockShape:a,crops:o}=r;oe(s.shape.length<=4,(()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet"));const i=a.reduce(((e,t)=>e*t)),l=Jf(s.shape,a,i),u=em(l.length,a.length),c=tm(s.shape,a,i),p=nm(o,a.length),h=rm(c,o,a.length),d=[],f=dz({inputs:{x:s},backend:n,attrs:{shape:l}}),m=Nz({inputs:{x:f},backend:n,attrs:{perm:u}}),g=dz({inputs:{x:m},backend:n,attrs:{shape:c}}),y=xP({inputs:{x:g},backend:n,attrs:{begin:p,size:h}});return d.push(f),d.push(m),d.push(g),d.forEach((e=>n.disposeIntermediateTensorInfo(e))),y}},kP={kernelName:wt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,weights:a}=t,{size:o}=r,i=n.readSync(s.dataId),l=n.readSync(a.dataId),u=EM(i,l,a.dtype,a.shape,o);return n.makeTensorInfo([o],a.dtype,u)}},NP={kernelName:vt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{a:r,b:s}=t,a=Ye().getBool("WEBGL_PACK_BINARY_OPERATIONS"),o=Ye().getNumber("WEBGL_VERSION");if(n.shouldExecuteOnCPU([r,s])||1===o){const e=n.texData.get(r.dataId).values,t=n.texData.get(s.dataId).values,[a,o]=CM(r.shape,s.shape,e,t,r.dtype),i=n.makeTensorInfo(o,r.dtype);return n.texData.get(i.dataId).values=a,i}let i;return i=a?new KL("\n  int r = int(a.r) & int(b.r);\n  int g = int(a.g) & int(b.g);\n  int rb = int(a.b) & int(b.b);\n  int ra = int(a.a) & int(b.a);\n  return vec4(r, g, rb, ra);\n",r.shape,s.shape,!1):new HL("\n  return float(int(a.r) & int(b.r));\n",r.shape,s.shape),n.runWebGLProgram(i,[r,s],r.dtype)}},TP={kernelName:Nt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{s0:r,s1:s}=t,a=n.readSync(r.dataId),o=n.readSync(s.dataId),i=rl(Array.from(a),Array.from(o));return n.makeTensorInfo([i.length],"int32",Int32Array.from(i))}},SP=oz({opSnippet:"return float(a != b);",cpuKernelImpl:XM,dtype:"bool"}),IP={kernelName:Jn,backendName:"webgl",kernelFunc:SP};function EP(e){const{inputs:t,backend:n}=e,{input:r}=t;return qL({inputs:{x:n.texData.get(r.dataId).complexTensorInfos.real},backend:n})}const $P={kernelName:mr,backendName:"webgl",kernelFunc:EP},CP={kernelName:Tt,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:r,attrs:s}=t,{x:a}=n,{dtype:o}=s;if("complex64"===o){if("complex64"===a.dtype)return qL({inputs:{x:a},backend:r});const t=Hp(a.shape),n=e({inputs:{x:a},backend:r,attrs:{dtype:"float32"}}),s=XL({inputs:{real:n,imag:t},backend:r});return t.dispose(),r.disposeIntermediateTensorInfo(n),s}if("complex64"===a.dtype){const t=EP({inputs:{input:a},backend:r}),n=e({inputs:{x:t},backend:r,attrs:{dtype:o}});return r.disposeIntermediateTensorInfo(t),n}if(!Ie(a.dtype,o)){const e=qL({inputs:{x:a},backend:r});return{dataId:e.dataId,shape:e.shape,dtype:o}}if(r.shouldExecuteOnCPU([a])){const e=r.texData.get(a.dataId).values,[t,n,s]=AM(e,a.shape,a.dtype,o);return r.makeTensorInfo(t,n,s)}if("int32"===o)return function(e,t){const n=new CL(e.shape,"return float(int(x));"),r=t.runWebGLProgram(n,[e],"int32");return{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}(a,r);if("bool"===o){const e=r.makeTensorInfo([],"bool",ke("bool",1)),t=SP({inputs:{a,b:e},backend:r});return r.disposeIntermediateTensorInfo(e),t}throw new Error(`Error in Cast: failed to cast ${a.dtype} to ${o}`)}},AP="return ceil(x);",_P=az({opSnippet:AP,packedOpSnippet:AP,cpuKernelImpl:_M}),RP={kernelName:St,backendName:"webgl",kernelFunc:_P};class DP{constructor(e){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}}class FP{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}}const OP={kernelName:It,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{clipValueMin:a,clipValueMax:o}=r;let i;i=Ye().getBool("WEBGL_PACK_CLIP")?new FP(s.shape):new DP(s.shape);const l=[[a],[o]];return n.runWebGLProgram(i,[s],s.dtype,l)}};class MP{constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function LP(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}const zP={kernelName:$t,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t,s=n.texData.get(r.dataId),a=new MP(r.shape),o=[LP(r,s.complexTensorInfos.real),LP(r,s.complexTensorInfos.imag)];return n.runWebGLProgram(a,o,o[0].dtype)}};class PP{constructor(e){this.outputShape=[],this.outputShape=Gf(e,1),this.variableNames=e.map(((e,t)=>`T${t}`));const t=new Array(e.length-1);t[0]=e[0][1];for(let n=1;n<t.length;n++)t[n]=t[n-1]+e[n][1];const n=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let e=1;e<t.length;e++){const r=t[e-1];n.push(`else if (yC < ${t[e]}) setOutput(getT${e}(yR, yC-${r}));`)}const r=t.length,s=t[t.length-1];n.push(`else setOutput(getT${r}(yR, yC-${s}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class BP{constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=Gf(e,t);const n=this.outputShape,r=n.length,s=UO(r),a=kL("coords",r),o=["x","y","z","w","u","v"].slice(0,r);this.variableNames=e.map(((e,t)=>`T${t}`));const i=new Array(e.length-1);i[0]=e[0][t];for(let n=1;n<i.length;n++)i[n]=i[n-1]+e[n][t];const l=o[t],u=o.slice(-2),c=o.join();let p=`if (${l} < ${i[0]}) {\n        return getChannel(\n            getT0(${c}), vec2(${u.join()}));\n        }`;for(let e=1;e<i.length;e++){const t=i[e-1];p+=`\n        if (${l} < ${i[e]}  && ${l} >= ${i[e-1]}) {\n          return getChannel(\n            getT${e}(${VP(o,l,t)}),\n            vec2(${VP(u,l,t)}));\n        }`}const h=i.length,d=i[i.length-1];p+=`\n        return getChannel(\n          getT${h}(${VP(o,l,d)}),\n          vec2(${VP(u,l,d)}));`,this.userCode=`\n      float getValue(${o.map((e=>"int "+e))}) {\n        ${p}\n      }\n\n      void main() {\n        ${s} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${a}), 0., 0., 0.);\n\n        ${a[r-1]} = ${a[r-1]} + 1;\n        if (${a[r-1]} < ${n[r-1]}) {\n          result.g = getValue(${a});\n        }\n\n        ${a[r-2]} = ${a[r-2]} + 1;\n        if (${a[r-2]} < ${n[r-2]}) {\n          result.a = getValue(${a});\n        }\n\n        ${a[r-1]} = ${a[r-1]} - 1;\n        if (${a[r-2]} < ${n[r-2]} &&\n            ${a[r-1]} < ${n[r-1]}) {\n          result.b = getValue(${a});\n        }\n        setOutput(result);\n      }\n    `}}function VP(e,t,n){const r=e.indexOf(t);return e.map(((e,t)=>t===r?`${e} - ${n}`:e)).join()}function WP(e){const{inputs:t,backend:n}=e,{input:r}=t;return qL({inputs:{x:n.texData.get(r.dataId).complexTensorInfos.imag},backend:n})}const UP={kernelName:xn,backendName:"webgl",kernelFunc:WP};function GP(e,t,n){const r=e[0].dtype;if("complex64"===r){const r=e.map((e=>EP({inputs:{input:e},backend:n}))),s=e.map((e=>WP({inputs:{input:e},backend:n}))),a=GP(r,t,n),o=GP(s,t,n),i=XL({inputs:{real:a,imag:o},backend:n});return r.forEach((e=>n.disposeIntermediateTensorInfo(e))),s.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(o),i}let s=n.shouldExecuteOnCPU(e);if("string"===r&&(s=!0),s){const s=e.map((e=>{const r=ue(e.shape.slice(t));return dz({inputs:{x:e},backend:n,attrs:{shape:[-1,r]}})})),a=s.map((e=>({vals:n.readSync(e.dataId),shape:e.shape}))),o=Gf(s.map((e=>e.shape)),1),i=1===s[0].shape[0],l=RM(a,o,r,i),u=Gf(e.map((e=>e.shape)),t),c=n.makeTensorInfo(u,r,l);return s.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}const a=e.filter((e=>ue(e.shape)>0)),o=Ye().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&a[0].shape.length>1;if(1===a.length){const t=o?new CL(e[0].shape,FL):new OL(e[0].shape,FL);return n.runWebGLProgram(t,e,r)}const i=Ye().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");if(a.length>i){const e=[];for(let r=0;r<a.length;r+=i){const s=a.slice(r,r+i);e.push(GP(s,t,n))}const r=GP(e,t,n);for(const t of e)n.disposeIntermediateTensorInfo(t);return r}if(o){const e=new BP(a.map((e=>e.shape)),t);return n.runWebGLProgram(e,a,r)}const{tensors2D:l,outShape:u}=function(e,t,n){const r=Gf(e.map((e=>e.shape)),t);return{tensors2D:e.map((e=>dz({inputs:{x:e},attrs:{shape:[-1,ue(e.shape.slice(t))]},backend:n}))),outShape:r}}(a,t,n),c=new PP(l.map((e=>e.shape))),p=n.runWebGLProgram(c,l,r);l.forEach((e=>n.disposeIntermediateTensorInfo(e)));const h=dz({inputs:{x:p},attrs:{shape:u},backend:n});return n.disposeIntermediateTensorInfo(p),h}function HP(e){const{inputs:t,backend:n,attrs:r}=e,{axis:s}=r,a=we(s,t[0].shape)[0];Uf(t.map((e=>e.shape)),a);const o=Gf(t.map((e=>e.shape)),a);if(0===ue(o))return n.makeTensorInfo(o,t[0].dtype,[]);const i=t.filter((e=>ue(e.shape)>0));return 1===i.length?qL({inputs:{x:i[0]},backend:n}):GP(i,a,n)}const jP={kernelName:Ct,backendName:"webgl",kernelFunc:HP};class KP{constructor(e,t=!1,n=null,r=!1,s=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const a=e.padInfo.top,o=e.padInfo.left,i=e.strideHeight,l=e.strideWidth,u=e.dilationHeight,c=e.dilationWidth,p=e.filterHeight,h=e.filterWidth,d=4*Math.floor(e.inChannels/4),f=e.inChannels%4,m="channelsLast"===e.dataFormat,g=m?1:2,y=m?2:3,b=m?3:1;let x="",w="";n&&(x=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:s?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,w="result = activation(result);");const v=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${x}\n\n      const ivec2 strides = ivec2(${i}, ${l});\n      const ivec2 pads = ivec2(${a}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${b}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${g}], coords[${y}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${p}; wR++) {\n          int xR = xRCorner + wR * ${u};\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${h}; wC++) {\n            int xC = xCCorner + wC * ${c};\n\n            if (xC < 0 || xC >= ${e.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${d}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${m}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===f}) {\n\n              if (${m}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${d}) *\n                    getW(wR, wC, ${d}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${d}, xR, xC) *\n                    getW(wR, wC, ${d}, d2);\n              }\n\n            } else if (${2===f}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2)\n              );\n\n              if (${m}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===f}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2),\n                getW(wR, wC, ${d} + 2, d2)\n              );\n\n              if (${m}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1),\n                  getX(batch, xR, xC, ${d} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC),\n                  getX(batch, ${d} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${v}\n        ${w}\n        setOutput(result);\n      }\n    `}}class qP{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const t=e.padInfo.front,n=e.padInfo.top,r=e.padInfo.left,s=e.strideDepth,a=e.strideHeight,o=e.strideWidth,i=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,c=e.filterDepth,p=e.filterHeight,h=e.filterWidth,d=4*Math.floor(e.inChannels/4),f=e.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${s}, ${a}, ${o});\n      const ivec3 pads = ivec3(${t}, ${n}, ${r});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${i};\n\n          if (xF < 0 || xF >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${p}; wR++) {\n            int xR = xRCorner + wR * ${l};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${h}; wC++) {\n              int xC = xCCorner + wC * ${u};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${d}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${d}) *\n                  getW(wF, wR, wC, ${d}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1),\n                  getX(batch, xF, xR, xC, ${d} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2),\n                  getW(wF, wR, wC, ${d} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class YP{constructor(e,t=!1,n=null,r=!1,s=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=YO(this.outputShape.length);const a=e.padInfo.left,o=e.strideWidth,i=e.dilationWidth,l=e.filterHeight,u=e.filterWidth,c=u;let p="\n       int xR; int xC; int xCOffset;\n       vec4 wTexel; vec4 previous; vec4 final;";for(let e=0;e<u;e++)p+=`\n           vec4 xTexelC${2*e};\n           int xTexelC${2*e}Ready;\n           vec4 xTexelC${2*e+1};\n           int xTexelC${2*e+1}Ready;\n           vec4 xC${e};`;p+=`\n     for (int r = 0; r < ${l}; r++) {\n      for (int d1 = 0; d1 < ${e.inChannels}; d1 += 2) {\n       `;for(let e=0;e<u;e++)p+=`\n           xTexelC${2*e} = vec4(0.0);\n           xTexelC${2*e}Ready = 0;\n           xTexelC${2*e+1} = vec4(0.0);\n           xTexelC${2*e+1}Ready = 0;\n           xC${e} = vec4(0.0);`;p+="\n         xR = xRCorner + r * dilations[0];\n         if (xR >=0 && xR < inDims[0]) {\n       ";for(let t=0;t<(c+1)/2;t++){const n=2*t;if(p+=`\n           xC = xCCorner + ${n*i};\n           `,1===o){if(n<u&&(a%2==1?(p+=`\n                 xCOffset = xC + 1;\n                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xCOffset, d1);\n\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n               `,p+=1===i&&n>0?`\n                 xC${n} = vec4(xTexelC${n-2}.zw, xTexelC${n}.xy);\n                 `:`\n                   xCOffset = xC + 1 - 2;\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       previous.zw = vec2(0.0);\n                     }\n\n                     xC${n} = vec4(previous.zw, xTexelC${n}.xy);\n                   } else {\n                     xC${n} = vec4(0.0, 0.0, xTexelC${n}.xy);\n                   }\n                   `):p+=`\n                 if (xC >= 0 && xC < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n\n                 xC${n} = xTexelC${n};\n                 `,n+1<u)){const e=a%2==0?te(i):i;i%2==0&&a%2==1||i%2!=0&&a%2!=1?(p+=`\n                   xCOffset = xC + imod(pads[1], 2) + ${e};\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                     xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       xTexelC${n+1}.zw = vec2(0.0);\n                     }\n                     xTexelC${n+1}Ready = 1;\n                   }\n                   `,p+=i>1?`\n                     xCOffset -= 2;\n                     if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                      previous = getX(batch, xR, xCOffset, d1);\n                      xC${n+1} = vec4(previous.zw, xTexelC${n+1}.xy);\n                     } else {\n                      xC${n+1} = vec4(0.0, 0.0, xTexelC${n+1}.xy);\n                     }\n                     `:`\n                     xC${n+1} = vec4(xTexelC${n}.zw, xTexelC${n+1}.xy);\n                     `):p+=1===e?`\n                     xC${n+1} = xTexelC${n};\n                     `:`\n                     xCOffset = xC + ${e};\n\n                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                       xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n                       if (xCOffset + 1 >= inDims[1]) {\n                         xTexelC${n+1}.zw = vec2(0.0);\n                       }\n                       xTexelC${n+1}Ready = 1;\n                     }\n\n                     xC${n+1} = xTexelC${n+1};\n                     `}}else n<u&&(a%2==1?(p+=`\n                 xCOffset = xC + 1 - strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xCOffset, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n\n                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${n+1}Ready == 0) {\n                   xTexelC${n+1} = getX(batch, xR, xC + 1, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xC + 2 >= inDims[1]) {\n                     xTexelC${n+1}.zw = vec2(0.0);\n                   }\n                   xTexelC${n+1}Ready = 1;\n                 }\n\n                 xC${n} = vec4(xTexelC${n}.zw, xTexelC${n+1}.zw);\n               `,n+1<u&&(p+=`\n                   final = vec4(0.0);\n                   xCOffset = xC + 1 + strides[1];\n                   if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                     final = getX(batch, xR, xCOffset, d1);\n                   }\n                   xC${n+1} = vec4(xTexelC${n+1}.xy, final.xy);\n                 `)):(p+=`\n                 if(xC >= 0 && xC < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n\n                 xCOffset = xC + strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                   xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${n+1}.zw = vec2(0.);\n                   }\n                   xTexelC${n+1}Ready = 1;\n                 }\n\n                 xC${n} = vec4(\n                   xTexelC${n}.xy, xTexelC${n+1}.xy);\n               `,n+1<u&&(p+=`\n                   xC${n+1} = vec4(xTexelC${n}.zw, xTexelC${n+1}.zw);\n                 `)));n<u&&(p+=`\n             wTexel = getW(r, ${n}, d1, d2);\n             dotProd += xC${n}.xxzz * vec4(wTexel.xy, wTexel.xy);\n             if(d1 + 1 < ${e.inChannels}) {\n               dotProd += xC${n}.yyww * vec4(wTexel.zw, wTexel.zw);\n             }\n           `,n+1<u&&(p+=`\n               wTexel = getW(r, ${n+1}, d1, d2);\n               dotProd += xC${n+1}.xxzz * vec4(wTexel.xy, wTexel.xy);\n               if(d1 + 1 < ${e.inChannels}) {\n                 dotProd += xC${n+1}.yyww * vec4(wTexel.zw, wTexel.zw);\n               }\n             `))}p+="\n     }\n   ",p+="\n     }\n   ",p+="\n     }\n   ";let h="",d="";n&&(h=r?`vec4 activation(vec4 a) {\n           vec4 b = getPreluActivationWeightsAtOutCoords();\n           ${n}\n         }`:s?`vec4 activation(vec4 a) {\n           vec4 b = getLeakyreluAlphaAtOutCoords();\n           ${n}\n         }`:`vec4 activation(vec4 x) {\n           ${n}\n         }`,d="result = activation(result);");const f=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n       ${h}\n\n       void main() {\n         ivec4 coords = getOutputCoords();\n         int batch = coords.x;\n         ivec2 xRCCorner = coords.yz * strides - pads;\n         int d2 = coords.w;\n         int xRCorner = xRCCorner.x;\n         int xCCorner = xRCCorner.y;\n\n         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n         vec4 dotProd = vec4(0.000000000000001);\n\n         ${p}\n\n         vec4 result = dotProd - vec4(0.000000000000001);\n         ${f}\n         ${d}\n         setOutput(result);\n       }\n     `}}class XP{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec4"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=e,this.enableShapeUniforms=YO(this.outputShape.length);const{dataFormat:n}=t,r=$O(),s="channelsLast"===n,a=s?1:2,o=s?2:3,i=this.enableShapeUniforms?"if(blockIndex < outShape[2] && pos < outShape[1]) {":`if(blockIndex < ${e[2]} && pos < ${e[1]}) {`;let l="";for(let e=0;e<=1;e++)for(let t=0;t<=1;t++)l+=`\n          blockIndex = rc.z + ${t};\n          pos = rc.y + ${e};\n\n          ${i}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${a}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${o}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${s}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*e+t}] = getChannel(\n                    getA(rc.x, d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*e+t}] = getChannel(\n                    getA(rc.x, ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${l}\n\n        ${r.output} = result;\n      }\n    `}}function ZP(e,t){const n=e.length;return n>=3?t?[...e.slice(0,-3),e[n-3]*e[n-2],e[n-1]]:[...e.slice(0,-3),e[n-3],e[n-2]*e[n-1]]:!t&&1===n&&e[0]>1?[e[0],1]:null}function QP({x:e,filter:t,convInfo:n,backend:r,bias:s=null,preluActivationWeights:a=null,leakyreluAlpha:o=0,activation:i=null}){const l=e.shape,u=r.texData.get(e.dataId),c=n.inChannels,p=l[0]*l[1]*l[2],h=n.outChannels,d="channelsLast"===n.dataFormat,f=!1;let m;const g=[];if(null!=a){const e=ZP(a.shape,d);null!=e&&(a=dz({inputs:{x:a},backend:r,attrs:{shape:e}}),g.push(a))}if(null!=s){const e=ZP(s.shape,d);null!=e&&(s=dz({inputs:{x:s},backend:r,attrs:{shape:e}}),g.push(s))}if((1!==p&&1!==h||!(c>1e3))&&u.isPacked&&d&&null!=u.texture&&l[2]%2!=0&&he(u.shape.slice(-3),l.slice(-3))){const c=l[0]*l[1]*(l[2]+1),p={dataId:e.dataId,shape:[1,c,n.inChannels],dtype:e.dtype},h=u.shape;u.shape=u.shape.slice(),u.shape[u.shape.length-2]++,oe(hO(u.shape,p.shape),(()=>`packed reshape ${u.shape} to ${p.shape} isn't free`));const d=dz({inputs:{x:t},backend:r,attrs:{shape:[1,n.inChannels,n.outChannels]}});g.push(d);const y=Sz({a:p,b:d,backend:r,transposeA:!1,transposeB:f,bias:s,activation:i,preluActivationWeights:a,leakyreluAlpha:o}),b=r.texData.get(y.dataId);oe(b.isPacked,(()=>"batchMatMul result is expected to be packed")),u.shape=h,b.shape=n.outShape,m=qL({inputs:{x:y},backend:r}),m.shape=n.outShape,g.push(y)}else{const l=n.outHeight*n.outWidth,u=dz({inputs:{x:e},backend:r,attrs:{shape:d?[n.batchSize,l,n.inChannels]:[n.batchSize,n.inChannels,l]}}),c=dz({inputs:{x:t},backend:r,attrs:{shape:[1,n.inChannels,n.outChannels]}}),p=Sz({a:d?u:c,b:d?c:u,transposeA:!d,transposeB:f,backend:r,bias:s,activation:i,preluActivationWeights:a,leakyreluAlpha:o});m=dz({inputs:{x:p},backend:r,attrs:{shape:n.outShape}}),g.push(u),g.push(c),g.push(p)}for(const e of g)r.disposeIntermediateTensorInfo(e);return m}function JP({x:e,filter:t,convInfo:n,backend:r,bias:s=null,preluActivationWeights:a=null,leakyreluAlpha:o=0,activation:i=null}){const{filterWidth:l,filterHeight:u,inChannels:c,outWidth:p,outHeight:h,dataFormat:d}=n,f="channelsLast"===d,m=l*u*c,g=h*p,y=[n.batchSize,m,g],b=[];if(null!=a){const e=ZP(a.shape,f);null!=e&&(a=dz({inputs:{x:a},backend:r,attrs:{shape:e}}),b.push(a))}if(null!=s){const e=ZP(s.shape,f);null!=e&&(s=dz({inputs:{x:s},backend:r,attrs:{shape:e}}),b.push(s))}const x=dz({inputs:{x:t},backend:r,attrs:{shape:[1,m,ue(t.shape)/m]}});b.push(x);const w=new XP(y,n),v=[e.shape,[n.padInfo.top,n.padInfo.left],[n.strideHeight,n.strideWidth],[n.dilationHeight,n.dilationWidth],[n.inChannels],[n.filterWidth*n.inChannels],[n.outWidth]],k=r.runWebGLProgram(w,[e],"float32",v),N=dz({inputs:{x:k},backend:r,attrs:{shape:y}});b.push(k),b.push(N);const T=null!=s,S=null!=a,I="leakyrelu"===i,E=i?iz(i,!0):null,$=new lz(f?N.shape:x.shape,f?x.shape:N.shape,f?[n.batchSize,g,n.outChannels]:[n.batchSize,n.outChannels,g],!0,!1,T,E,S,I),C=f?[N,x]:[x,N];if(s&&C.push(s),S&&C.push(a),I){const e=r.makeTensorInfo([],"float32",Ks(o,"float32"));C.push(e),b.push(e)}const A=r.runWebGLProgram($,C,"float32"),_=dz({inputs:{x:A},backend:r,attrs:{shape:n.outShape}});b.push(A);for(const e of b)r.disposeIntermediateTensorInfo(e);return _}const eB={kernelName:At,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:o,pad:i,dataFormat:l,dilations:u,dimRoundingMode:c}=r,p=nc(l),h=ju(s.shape,a.shape,o,u,i,c,!1,p);let d;if(1!==h.filterHeight||1!==h.filterWidth||1!==h.dilationHeight||1!==h.dilationWidth||1!==h.strideHeight||1!==h.strideWidth||"SAME"!==h.padInfo.type&&"VALID"!==h.padInfo.type)if(h.strideWidth<=2&&"channelsLast"===p&&Ye().getBool("WEBGL_EXP_CONV")){const e=new YP(h),t=[[h.padInfo.top,h.padInfo.left],[h.strideHeight,h.strideWidth],[h.dilationHeight,h.dilationWidth],[h.inHeight,h.inWidth]];d=n.runWebGLProgram(e,[s,a],"float32",t)}else if(Ye().getBool("WEBGL_CONV_IM2COL"))d=JP({x:s,filter:a,convInfo:h,backend:n});else{const e=new KP(h);d=n.runWebGLProgram(e,[s,a],"float32")}else d=QP({x:s,filter:a,convInfo:h,backend:n});const f=dz({inputs:{x:d},backend:n,attrs:{shape:h.outShape}});return n.disposeIntermediateTensorInfo(d),f}};class tB{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,r=e.padInfo.top,s=e.padInfo.left,a="channelsLast"===e.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${r};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${s};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              ${a?"float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);":"float dyValue = getDy(b, d2, yR, yC);\n              float xValue = getX(b, d1, xR, xC);\n              dotProd += (xValue * dyValue);"}\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class nB{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,s=e.strideWidth,a="channelsLast"===e.dataFormat,o=t-1-e.padInfo.top,i=n-1-e.padInfo.left,l=a?1:2,u=a?2:3,c=a?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${o}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${c}];\n\n        ivec2 dyCorner = ivec2(coords[${l}], coords[${u}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n\n              if (${a}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class rB{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideDepth,n=e.strideHeight,r=e.strideWidth,s=e.padInfo.front,a=e.padInfo.top,o=e.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yF = 0; yF < ${e.outDepth}; yF++) {\n            int xF = wF + yF * ${t} - ${s};\n\n            if (xF < 0 || xF >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${e.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${a};\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${e.outWidth}; yC++) {\n                int xC = wC + yC * ${r} - ${o};\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class sB{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,r=e.filterWidth,s=e.strideDepth,a=e.strideHeight,o=e.strideWidth,i=t-1-e.padInfo.front,l=n-1-e.padInfo.top,u=r-1-e.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${i}, ${l}, ${u});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${t}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${s}.0;\n\n          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${t} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${r}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${o}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${r} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const aB={kernelName:_t,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:o,pad:i,dataFormat:l,dimRoundingMode:u,filterShape:c}=r,p=nc(l),h=ju(s.shape,c,o,1,i,u,!1,p),d=new tB(h);return n.runWebGLProgram(d,[s,a],"float32")}};class oB{constructor(e){this.variableNames=["dy","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"strides",type:"vec2"}],this.outputShape=e.inShape,this.enableShapeUniforms=YO(this.outputShape.length);const t=e.filterHeight,n=e.filterWidth,r=t-1-e.padInfo.top,s=n-1-e.padInfo.left;this.userCode=`\n      const ivec2 pads = ivec2(${r}, ${s});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n\n        ivec2 dyCorner = ivec2(coords[1], coords[2]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        vec4 result = vec4(0.);\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / strides[0];\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            int wCPerm = ${n} - 1 - wC;\n\n            float dyC = float(dyCCorner + wC) / strides[1];\n            bool idyCVal = (dyC >= 0.0) && (dyC < ${e.outWidth}.0)\n              && (fract(dyC) == 0.0);\n            int idyC = int(dyC);\n\n            float dyC2 = float(dyCCorner + wC + 1) / strides[1];\n            bool idyCVal2 = (dyC2 >= 0.0) && (dyC2 < ${e.outWidth}.0)\n              && (fract(dyC2) == 0.0);\n            int idyC2 = int(dyC2);\n\n            if (idyCVal && idyCVal2) {\n              for (int d2 = 0; d2 < ${e.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC, d2);\n                vec4 dySample2 = (idyC / 2 == idyC2 / 2) ?\n                  dySample : getDy(batch, idyR, idyC2, d2);\n\n                vec2 dyValue = mod(float(idyC), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.xy += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n\n                dyValue = mod(float(idyC2), 2.) == 0. ?\n                  dySample2.xy : dySample2.zw;\n                result.zw += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            } else if (idyCVal) {\n              for (int d2 = 0; d2 < ${e.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC, d2);\n                vec2 dyValue = mod(float(idyC), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.xy += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            } else if (idyCVal2) {\n              for (int d2 = 0; d2 < ${e.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC2, d2);\n                vec2 dyValue = mod(float(idyC2), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.zw += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            }\n          }\n        }\n        setOutput(result);\n      }\n    `}}const iB={kernelName:Rt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{inputShape:o,strides:i,pad:l,dataFormat:u,dimRoundingMode:c}=r,p=nc(u),h=ju(o,a.shape,i,1,l,c,!1,p);if(Ye().getBool("WEBGL_PACK_CONV2DTRANSPOSE")&&"channelsLast"===p){const e=[[h.strideHeight,h.strideWidth]],t=new oB(h);return n.runWebGLProgram(t,[s,a],"float32",e)}{const e=new nB(h);return n.runWebGLProgram(e,[s,a],"float32")}}},lB={kernelName:Dt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:o,pad:i,dilations:l}=r,u=Ku(s.shape,a.shape,o,l,i),c=new qP(u);return n.runWebGLProgram(c,[s,a],"float32")}},uB={kernelName:Ft,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:o,pad:i,filterShape:l}=r,u=Ku(s.shape,l,o,1,i),c=new rB(u);return n.runWebGLProgram(c,[s,a],"float32")}},cB={kernelName:Ot,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{pad:o,strides:i,inputShape:l}=r,u=Ku(l,a.shape,i,1,o),c=new sB(u);return n.runWebGLProgram(c,[s,a],"float32")}},pB=az({opSnippet:sz+"\n  return cos(x);\n",packedOpSnippet:`\n  vec4 result = cos(x);\n  bvec4 isNaN = isnan(x);\n  ${jL}\n  return result;\n`}),hB={kernelName:Mt,backendName:"webgl",kernelFunc:pB},dB=az({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"}),fB={kernelName:Lt,backendName:"webgl",kernelFunc:dB};class mB{constructor(e,t,n,r,s){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[a,o,i,l]=e,[u]=t,[c,p]=n;this.outputShape=[u,c,p,l];const h="bilinear"===r?1:0,[d,f]=[o-1+".0",i-1+".0"],[m,g,y]=c>1?[""+(o-1)/(c-1),"(y2-y1) * height_ratio",`y1*${d} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${d}`],[b,x,w]=p>1?[""+(i-1)/(p-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${f}`];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${b});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${a}) {\n          return;\n        }\n\n        float height_scale = ${g};\n        float width_scale = ${x};\n\n        float in_y = ${y};\n        if( in_y < 0.0 || in_y > ${d} ) {\n          setOutput(float(${s}));\n          return;\n        }\n        float in_x = ${w};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${s}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${h} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}const gB={kernelName:Bt,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{image:s,boxes:a,boxInd:o}=t,{cropSize:i,method:l,extrapolationValue:u}=r,c=new mB(s.shape,a.shape,i,l,u);return n.runWebGLProgram(c,[s,a,o],"float32")}};var yB;!function(e){e.Prod="*",e.Sum="+"}(yB||(yB={}));class bB{constructor(e,t,n,r){this.op=e,this.outputShape=t,this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}];const s=this.outputShape.length,a=this.op===yB.Prod?"1.0":"0.0",o=n?a:`getX(${xB(s,"coords",this.op)})`,i=this.outputShape[this.outputShape.length-1];let l="",u="";n?(l=r?"end != "+(i-1):"end != 0",u=r?"end + 1":"end - 1"):(l=r?`end + pow2 < ${i}`:"end >= pow2",u=r?"end + pow2":"end - pow2"),this.userCode=`\n      void main() {\n        ${UO(s)} coords = getOutputCoords();\n        int end = ${wB(s,"coords",this.op)};\n        float val = ${o};\n        int pow2 = int(pow(2.0, index));\n        if (${l}) {\n          int idx = ${u};\n          ${wB(s,"coords",this.op)} = idx;\n          val ${this.op}= getX(${xB(s,"coords",this.op)});\n        }\n        setOutput(val);\n      }\n    `}}function xB(e,t,n){if(1===e)return`${t}`;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw new Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function wB(e,t,n){if(1===e)return`${t}`;if(2===e)return`${t}.y`;if(3===e)return`${t}.z`;if(4===e)return`${t}.w`;throw new Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function vB(e,t,n,r,s,a){const o=t.shape.length,i=np([r],o);let l=t;null!=i&&(l=Nz({inputs:{x:t},backend:n,attrs:{perm:i}}));const u=sp(1,o)[0];if(u!==o-1)throw new Error(`WebGL cumprod shader expects an inner-most axis=${t.shape.length-1} but got axis=${r}`);const c=l.shape[u];let p=qL({inputs:{x:l},backend:n});for(let t=0;t<=Math.ceil(Math.log2(c))-1;t++){const r=new bB(e,l.shape,!1,a),s=[[t]],o=p;p=n.runWebGLProgram(r,[p],p.dtype,s),n.disposeIntermediateTensorInfo(o)}if(s){const t=new bB(e,l.shape,s,a),r=p;p=n.runWebGLProgram(t,[p],p.dtype),n.disposeIntermediateTensorInfo(r)}if(null!=i){const e=Nz({inputs:{x:p},backend:n,attrs:{perm:rp(i)}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(l),e}return p}const kB={kernelName:zt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,exclusive:o,reverse:i}=r;return vB(yB.Prod,s,n,a,o,i)}},NB={kernelName:Pt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,exclusive:o,reverse:i}=r;return vB(yB.Sum,s,n,a,o,i)}},TB={kernelName:Vt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,weights:a}=t,{size:o,binaryOutput:i}=r;if(1===s.shape.length){const e=n.readSync(s.dataId),t=n.readSync(a.dataId),r=EM(e,t,a.dtype,a.shape,o);return n.makeTensorInfo([o],a.dtype,r)}if(2===s.shape.length){const e=n.bufferSync(s),t=n.bufferSync(a),r=$M(e,t,o,i);return n.makeTensorInfo(r.shape,a.dtype,r.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${s.shape.length}.`)}};class SB{constructor(e,t,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${t};\n      int offset_h = imod(h, ${t});\n      int in_w = w / ${t};\n      int offset_w = imod(w, ${t});\n      int offset_d = (offset_h * ${t} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const IB={kernelName:Wt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockSize:a,dataFormat:o}=r,i=s.shape[0],l=("NHWC"===o?s.shape[1]:s.shape[2])*a,u=("NHWC"===o?s.shape[2]:s.shape[3])*a,c=("NHWC"===o?s.shape[3]:s.shape[1])/(a*a),p=new SB("NHWC"===o?[i,l,u,c]:[i,c,l,u],a,o);return n.runWebGLProgram(p,[s],s.dtype)}};class EB{constructor(e,t=!1,n=null,r=!1,s=!1){this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=YO(this.outputShape.length);const a=e.filterHeight,o=e.filterWidth,i=e.outChannels/e.inChannels;let l="",u="";n&&(l=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:s?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,u="result = activation(result);");const c=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${l}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${i};\n        int q = d2 - d1 * ${i};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${a}; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${o}; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${c}\n        ${u}\n        setOutput(result);\n      }\n    `}}class $B{constructor(e,t=!1,n=null,r=!1,s=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=YO(this.outputShape.length);const a=e.outChannels/e.inChannels,o=e.padInfo.left,i=e.strideWidth,l=e.dilationWidth,u=e.filterHeight,c=e.filterWidth,p=c;let h="\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;";for(let e=0;e<c;e++)h+=`\n          vec4 xTexelC${2*e};\n          int xTexelC${2*e}Ready;\n          vec4 xTexelC${2*e+1};\n          int xTexelC${2*e+1}Ready;\n          vec4 xC${e};`;h+=`\n    for (int r = 0; r < ${u}; r++) {\n      `;for(let e=0;e<c;e++)h+=`\n          xTexelC${2*e} = vec4(0.0);\n          xTexelC${2*e}Ready = 0;\n          xTexelC${2*e+1} = vec4(0.0);\n          xTexelC${2*e+1}Ready = 0;\n          xC${e} = vec4(0.0);`;h+="\n        xR = xRCorner + r * dilations[0];\n        if (xR >=0 && xR < inDims[0]) {\n      ";for(let e=0;e<(p+1)/2;e++){const t=2*e;if(h+=`\n          xC = xCCorner + ${t*l};\n          `,1===i){if(t<c&&(o%2==1?(h+=`\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n              `,h+=1===l&&t>0?`\n                xC${t} = vec4(xTexelC${t-2}.zw, xTexelC${t}.xy);\n                `:`\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${t} = vec4(previous.zw, xTexelC${t}.xy);\n                  } else {\n                    xC${t} = vec4(0.0, 0.0, xTexelC${t}.xy);\n                  }\n                  `):h+=`\n                if (xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                xC${t} = xTexelC${t};\n                `,t+1<c)){const e=o%2==0?te(l):l;l%2==0&&o%2==1||l%2!=0&&o%2!=1?(h+=`\n                  xCOffset = xC + imod(pads[1], 2) + ${e};\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                    xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      xTexelC${t+1}.zw = vec2(0.0);\n                    }\n                    xTexelC${t+1}Ready = 1;\n                  }\n                  `,h+=l>1?`\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n                     xC${t+1} = vec4(previous.zw, xTexelC${t+1}.xy);\n                    } else {\n                     xC${t+1} = vec4(0.0, 0.0, xTexelC${t+1}.xy);\n                    }\n                    `:`\n                    xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.xy);\n                    `):h+=1===e?`\n                    xC${t+1} = xTexelC${t};\n                    `:`\n                    xCOffset = xC + ${e};\n\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                      xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= inDims[1]) {\n                        xTexelC${t+1}.zw = vec2(0.0);\n                      }\n                      xTexelC${t+1}Ready = 1;\n                    }\n\n                    xC${t+1} = xTexelC${t+1};\n                    `}}else t<c&&(o%2==1?(h+=`\n                xCOffset = xC + 1 - strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${t+1}Ready == 0) {\n                  xTexelC${t+1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= inDims[1]) {\n                    xTexelC${t+1}.zw = vec2(0.0);\n                  }\n                  xTexelC${t+1}Ready = 1;\n                }\n\n                xC${t} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);\n              `,t+1<c&&(h+=`\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + strides[1];\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${t+1} = vec4(xTexelC${t+1}.xy, final.xy);\n                `)):(h+=`\n                if(xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                xCOffset = xC + strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                  xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t+1}.zw = vec2(0.);\n                  }\n                  xTexelC${t+1}Ready = 1;\n                }\n\n                xC${t} = vec4(\n                  xTexelC${t}.xy, xTexelC${t+1}.xy);\n              `,t+1<c&&(h+=`\n                  xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);\n                `)));t<c&&(h+=`\n            wTexel = getW(r, ${t}, d1, q);\n            dotProd += xC${t} * vec4(wTexel.xz, wTexel.xz);\n          `,t+1<c&&(h+=`\n              wTexel = getW(r, ${t+1}, d1, q);\n              dotProd += xC${t+1} * vec4(wTexel.xz, wTexel.xz);\n            `))}h+="\n    }\n  ",h+="\n      }\n    ";let d="",f="";n&&(d=r?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:s?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,f="result = activation(result);");const m=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${d}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${a};\n        int q = d2 - d1 * ${a};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${h}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${m}\n        ${f}\n        setOutput(result);\n      }\n    `}}const CB={kernelName:Ut,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:o,pad:i,dilations:l,dimRoundingMode:u}=r;let c=l;null==c&&(c=[1,1]),oe(ec(o,c),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${o} and dilations '${c}'`));const p=ju(s.shape,a.shape,o,c,i,u,!0);let h;h=Ye().getBool("WEBGL_PACK_DEPTHWISECONV")&&p.strideWidth<=2&&p.outChannels/p.inChannels==1?new $B(p):new EB(p);const d=[[p.padInfo.top,p.padInfo.left],[p.strideHeight,p.strideWidth],[p.dilationHeight,p.dilationWidth],[p.inHeight,p.inWidth]];return n.runWebGLProgram(h,[s,a],"float32",d)}};class AB{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,r=e.padInfo.top,s=e.padInfo.left,a=e.outChannels/e.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${a} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${r};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${s};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class _B{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,s=e.strideWidth,a=t-1-e.padInfo.top,o=n-1-e.padInfo.left,i=e.outChannels/e.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${a}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${i}; dm++) {\n              int d2 = d1 * ${i} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const RB={kernelName:Gt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:o,dilations:i,pad:l,dimRoundingMode:u,filterShape:c}=r,p=ju(s.shape,c,o,i,l,u,!0),h=new AB(p);return n.runWebGLProgram(h,[s,a],"float32")}},DB={kernelName:Ht,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{strides:o,dilations:i,pad:l,dimRoundingMode:u,inputShape:c}=r,p=ju(c,a.shape,o,i,l,u,!0),h=new _B(p);return n.runWebGLProgram(h,[s,a],"float32")}};class FB{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const OB={kernelName:jt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t,s=[...r.shape,...r.shape],a=ue(r.shape),o=dz({inputs:{x:r},backend:n,attrs:{shape:[a]}}),i=new FB(a),l=n.runWebGLProgram(i,[o],o.dtype),u=dz({inputs:{x:l},backend:n,attrs:{shape:s}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(l),u}};class MB{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const{inHeight:t,inWidth:n,padInfo:r,strideHeight:s,strideWidth:a,filterHeight:o,filterWidth:i,dilationHeight:l,dilationWidth:u}=e,{top:c,left:p}=r;this.userCode=`\n      const ivec2 strides = ivec2(${s}, ${a});\n      const ivec2 pads = ivec2(${c}, ${p});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${o}; h++) {\n          int hIn = hBeg + h * ${l};\n\n          if (hIn >= 0 && hIn < ${t}) {\n            for (int w = 0; w < ${i}; w++) {\n              int wIn = wBeg + w * ${u};\n\n              if (wIn >= 0 && wIn < ${n}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `}}const LB={kernelName:Kt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:o,pad:i,dilations:l}=r,u=Uu(s.shape,a.shape,o,i,"NHWC",l);let c;const p=new MB(u);c=n.runWebGLProgram(p,[s,a],"float32");const h=dz({inputs:{x:c},backend:n,attrs:{shape:u.outShape}});return n.disposeIntermediateTensorInfo(c),h}},zB={kernelName:Qt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{equation:s}=r,a=t,{allDims:o,summedDims:i,idDims:l}=Tm(s,a.length);Im(o.length,l,a);const{path:u,steps:c}=Em(i,l),p=c.length;let h=null,d=o.length;const f=[];for(let e=0;e<p;++e){for(const t of c[e]){const{permutationIndices:e,expandDims:r}=Sm(d,l[t]);let s;$m(e)?s=a[t]:(s=Nz({inputs:{x:a[t]},backend:n,attrs:{perm:e}}),f.push(s));const o=s.shape.slice();for(let e=0;e<r.length;++e)o.splice(r[e],0,1);he(s.shape,o)||(s=dz({inputs:{x:s},backend:n,attrs:{shape:o}}),f.push(s)),null===h?h=s:(h=pz({inputs:{a:s,b:h},backend:n}),f.push(h))}e<p-1&&(u[e]>=0&&(h=vz({inputs:{x:h},backend:n,attrs:{axis:u[e]-(o.length-d),keepDims:!1}}),f.push(h)),d--)}for(const e of f)e!==h&&n.disposeIntermediateTensorInfo(e);return h}},PB=az({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"}),BB={kernelName:Jt,backendName:"webgl",kernelFunc:PB},VB={kernelName:en,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n}=e,{dy:r,y:s}=t,a=Ye().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new KL("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",r.shape,s.shape):new HL("return (b >= 0.0) ? a : a * (b + 1.0);",r.shape,s.shape);return n.runWebGLProgram(a,[r,s],r.dtype)}},WB=oz({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool",cpuKernelImpl:DM}),UB={kernelName:nn,backendName:"webgl",kernelFunc:WB},GB=az({opSnippet:`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${om};\n  float a1 = ${im};\n  float a2 = ${lm};\n  float a3 = ${um};\n  float a4 = ${cm};\n  float a5 = ${pm};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`}),HB={kernelName:tn,backendName:"webgl",kernelFunc:GB},jB=az({opSnippet:sz+"\n  return exp(x);\n",packedOpSnippet:"\n  vec4 result = exp(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:FM,dtype:"float32"}),KB={kernelName:rn,backendName:"webgl",kernelFunc:jB};function qB(e){const{inputs:t,attrs:n,backend:r}=e,{dim:s}=n,{input:a}=t,o=a.shape.length,i=a.shape.slice();let l=s;return s<0&&(oe(-(o+1)<=s,(()=>`Axis must be in the interval [${-(o+1)}, ${o}]`)),l=o+s+1),i.splice(l,0,1),dz({inputs:{x:a},backend:r,attrs:{shape:i}})}const YB={kernelName:sn,backendName:"webgl",kernelFunc:qB},XB="return exp(x) - 1.0;",ZB=az({opSnippet:XB,packedOpSnippet:XB,cpuKernelImpl:OM}),QB={kernelName:an,backendName:"webgl",kernelFunc:ZB};class JB{constructor(e,t,n){this.variableNames=["real","imag"];const r=t[1];this.outputShape=t;const s=n?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,a=n?`${r}.0`:"1.0";let o;if("real"===e)o="return real * expR - imag * expI;";else{if("imag"!==e)throw new Error(`FFT component must be either "real" or "imag", got ${e}.`);o="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${s};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${o}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${r});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${r}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${a};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function eV(e,t,n){const r=n.texData.get(e.dataId),s=ue(e.shape),a=e.shape[e.shape.length-1],o=dz({inputs:{x:e},backend:n,attrs:{shape:[s/a,a]}}),i=o.shape,l=new JB("real",i,t),u=new JB("imag",i,t),c=[{dataId:r.complexTensorInfos.real.dataId,dtype:r.complexTensorInfos.real.dtype,shape:i},{dataId:r.complexTensorInfos.imag.dataId,dtype:r.complexTensorInfos.imag.dtype,shape:i}],p=n.runWebGLProgram(l,c,"float32"),h=n.runWebGLProgram(u,c,"float32"),d=XL({inputs:{real:p,imag:h},backend:n});n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(h);const f=dz({inputs:{x:d},backend:n,attrs:{shape:e.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(d),f}const tV={kernelName:on,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t;return eV(r,!1,n)}};class nV{constructor(e,t){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=e,this.userCode="\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}}function rV(e){const{backend:t,attrs:n}=e,{shape:r,value:s}=n;let{dtype:a}=n;if(a=a||Re(s),"string"===a){const e=Ne(a,ue(r));return e.fill(s),t.makeTensorInfo(r,a,e)}{const e=new nV(r,s),n=[[s]];return t.runWebGLProgram(e,[],a,n)}}const sV={kernelName:ln,backendName:"webgl",kernelFunc:rV};class aV{constructor(e){this.variableNames=["Image"],this.outputShape=[];const t=e[2];this.outputShape=e,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${t} - x - 1;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${t}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const oV={kernelName:un,backendName:"webgl",kernelFunc:({inputs:e,backend:t})=>{const{image:n}=e,r=t,s=new aV(n.shape);return r.runWebGLProgram(s,[n],n.dtype)}},iV="return floor(x);",lV=az({opSnippet:iV,packedOpSnippet:iV,cpuKernelImpl:MM}),uV={kernelName:cn,backendName:"webgl",kernelFunc:lV},cV=oz({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"}),pV={kernelName:pn,backendName:"webgl",kernelFunc:cV};class hV{constructor(e){this.variableNames=["A"];const t=$O(),[n,r]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}.0, ${n}.0);\n\n        vec4 values = ${t.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class dV{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const t=$O(),[n,r]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${r}.0, ${n}.0);\n            vec4 values = ${t.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${t.output} = result;\n      }\n    `}}const fV={kernelName:fs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e;let{pixels:s}=t;const{numChannels:a}=r,o="undefined"!=typeof HTMLVideoElement&&s instanceof HTMLVideoElement,i="undefined"!=typeof HTMLImageElement&&s instanceof HTMLImageElement,[l,u]=o?[s.videoWidth,s.videoHeight]:[s.width,s.height],c=[u,l],p=[u,l,a];if(i||o){const e=Ye().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");null!=mV&&e===gV||(gV=e,mV=document.createElement("canvas").getContext("2d",{willReadFrequently:gV})),mV.canvas.width=l,mV.canvas.height=u,mV.drawImage(s,0,0,l,u),s=mV.canvas}const h=n.makeTensorInfo(c,"int32");n.texData.get(h.dataId).usage=NF.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(h.dataId),s);const d=Ye().getBool("WEBGL_PACK")?new dV(p):new hV(p),f=n.runWebGLProgram(d,[h],"int32");return n.disposeData(h.dataId),f}};let mV,gV=Ye().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");const yV={kernelName:ys,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a,bias:o,preluActivationWeights:i}=t,{strides:l,pad:u,dataFormat:c,dilations:p,dimRoundingMode:h,activation:d,leakyreluAlpha:f}=r,m=nc(c),g=ju(s.shape,a.shape,l,p,u,h,!1,m);let y;const b=[],x=null!=o,w=null!=i,v="leakyrelu"===d,k=()=>{const e=[s,a],t=(e,t)=>{if("NCHW"===t&&1===e.shape.length&&1!==e.shape[0]){const t=dz({inputs:{x:e},backend:n,attrs:{shape:[e.shape[0],1,1]}});return b.push(t),t}return e};if(x&&e.push(t(o,c)),w&&e.push(t(i,c)),v){const t=n.makeTensorInfo([],"float32",Ks(f,"float32"));e.push(t),b.push(t)}return e};if(1!==g.filterHeight||1!==g.filterWidth||1!==g.dilationHeight||1!==g.dilationWidth||1!==g.strideHeight||1!==g.strideWidth||"SAME"!==g.padInfo.type&&"VALID"!==g.padInfo.type)if(g.strideWidth<=2&&"channelsLast"===m&&Ye().getBool("WEBGL_EXP_CONV")){const e=d?iz(d,!0):null,t=new YP(g,x,e,w,v),r=[[g.padInfo.top,g.padInfo.left],[g.strideHeight,g.strideWidth],[g.dilationHeight,g.dilationWidth],[g.inHeight,g.inWidth]],s=k();y=n.runWebGLProgram(t,s,"float32",r)}else if(Ye().getBool("WEBGL_CONV_IM2COL"))y=JP({x:s,filter:a,convInfo:g,backend:n,bias:o,activation:d,preluActivationWeights:i,leakyreluAlpha:f});else{const e=d?iz(d,!1):null,t=new KP(g,x,e,w,v),r=k();y=n.runWebGLProgram(t,r,"float32")}else y=QP({x:s,filter:a,convInfo:g,backend:n,bias:o,activation:d,preluActivationWeights:i,leakyreluAlpha:f});const N=dz({inputs:{x:y},backend:n,attrs:{shape:g.outShape}});return b.push(y),b.forEach((e=>n.disposeIntermediateTensorInfo(e))),N}},bV={kernelName:bs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a,bias:o,preluActivationWeights:i}=t,{strides:l,pad:u,dilations:c,dimRoundingMode:p,activation:h,leakyreluAlpha:d}=r,f=[];let m=c;null==m&&(m=[1,1]),oe(ec(l,m),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${m}'`));const g=ju(s.shape,a.shape,l,m,u,p,!0),y=Ye().getBool("WEBGL_PACK_DEPTHWISECONV")&&g.strideWidth<=2&&g.outChannels/g.inChannels==1,b=h?iz(h,y):null,x=[s,a],w=null!=o,v=null!=i,k="leakyrelu"===h;if(w&&x.push(o),v&&x.push(i),k){const e=n.makeTensorInfo([],"float32",Ks(d,"float32"));x.push(e),f.push(e)}let N;N=y?new $B(g,w,b,v,k):new EB(g,w,b,v,k);const T=[[g.padInfo.top,g.padInfo.left],[g.strideHeight,g.strideWidth],[g.dilationHeight,g.dilationWidth],[g.inHeight,g.inWidth]],S=n.runWebGLProgram(N,x,"float32",T);return f.forEach((e=>n.disposeIntermediateTensorInfo(e))),S}};class xV{constructor(e,t,n,r){this.sliceDim=e,this.strides=t,this.paramsShape=r,this.variableNames=["x","indices"],this.outputShape=n;const s=UO(n.length);let a="\n    int index;";for(let e=0;e<this.sliceDim;e++)a+=`\n          index = round(getIndices(coords[0], ${e}));\n          out_of_bounds = out_of_bounds || index < 0;\n          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[e]};\n          flattenIndex += index * ${this.strides[e]};`;this.userCode=`\n         void main() {\n          ${s} coords = getOutputCoords();\n          int flattenIndex = 0;\n          bool out_of_bounds = false;\n\n          ${a}\n\n          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));\n        }\n      `}}const wV={kernelName:fn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:r,indices:s}=t,a=s.shape,o=a[a.length-1],i=ue(r.shape),[l,u,c,p]=jl(r,s),h=dz({inputs:{x:s},backend:n,attrs:{shape:[u,o]}}),d=dz({inputs:{x:r},backend:n,attrs:{shape:[ue(r.shape)/c,c]}});if(n.shouldExecuteOnCPU([r,s])||"string"===r.dtype){const e=n.readSync(s.dataId),t=n.bufferSync(r),a=LM(e,t,r.dtype,u,o,c,p,r.shape,i);return n.makeTensorInfo(l,r.dtype,a.values)}const f=new xV(o,p,[u,c],r.shape),m=n.runWebGLProgram(f,[d,h],d.dtype),g=dz({inputs:{x:m},backend:n,attrs:{shape:l}});return n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(m),g}};class vV{constructor(e,t){this.variableNames=["A","indices"],this.outputShape=t,this.rank=t.length;const n=UO(this.rank),r=function(e){const t=["resRC.x","resRC.y","resRC.z","resRC.w"],n=[];for(let r=0;r<e.length;r++)2===r?n.push("index"):n.push(`${t[r]}`);return n.join()}(e);this.userCode=`\n      void main() {\n        ${n} resRC = getOutputCoords();\n        int index = int(getIndices(resRC.x, resRC.z));\n        float inBounds = (index >= 0) && (index < ${e[2]}) ? 1.0 : 0.0;\n        setOutput(inBounds * getA(${r}));\n      }\n    `}}function kV(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,indices:a}=t,{axis:o,batchDims:i}=r,l=we(o,s.shape)[0];if(Ye().get("DEBUG")){const e=n.readSync(a.dataId),t=s.shape[l];for(let n=0;n<e.length;++n){const r=e[n];oe(r<=t-1&&r>=0,(()=>`GatherV2: the index value ${r} is not in [0, ${t-1}]`))}}const u=Hm(s,a,l,i),c=ue(a.shape),p=[],h=dz({inputs:{x:s},backend:n,attrs:{shape:[u.batchSize,u.outerSize,u.dimSize,u.sliceSize]}}),d=dz({inputs:{x:a},backend:n,attrs:{shape:[u.batchSize,c/u.batchSize]}});p.push(h),p.push(d);const f=[u.batchSize,u.outerSize,c/u.batchSize,u.sliceSize];if(n.shouldExecuteOnCPU([s,a])||"string"===s.dtype){const e=n.bufferSync(d),t=n.bufferSync(h),r=zM(t,e,f);return p.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(u.outputShape,r.dtype,r.values)}const m=new vV(h.shape,f),g=n.runWebGLProgram(m,[h,d],h.dtype);p.push(g);const y=dz({inputs:{x:g},backend:n,attrs:{shape:u.outputShape}});return p.forEach((e=>n.disposeIntermediateTensorInfo(e))),y}const NV={kernelName:dn,backendName:"webgl",kernelFunc:kV},TV=oz({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:PM,dtype:"bool"}),SV={kernelName:mn,backendName:"webgl",kernelFunc:TV},IV=oz({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool",cpuKernelImpl:BM}),EV={kernelName:gn,backendName:"webgl",kernelFunc:IV},$V={kernelName:bn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t;return eV(r,!0,n)}},CV=az({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"}),AV={kernelName:wn,backendName:"webgl",kernelFunc:CV},_V=az({opSnippet:"return float(isinf(x));",dtype:"bool"}),RV={kernelName:vn,backendName:"webgl",kernelFunc:_V},DV=az({opSnippet:"return float(isnan(x));",dtype:"bool"}),FV={kernelName:kn,backendName:"webgl",kernelFunc:DV},OV=oz({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:VM,dtype:"bool"}),MV={kernelName:Tn,backendName:"webgl",kernelFunc:OV},LV=oz({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",cpuKernelImpl:WM,dtype:"bool"}),zV={kernelName:Sn,backendName:"webgl",kernelFunc:LV},PV={kernelName:In,backendName:"webgl",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:r,stop:s,num:a}=n,o=UM(r,s,a);return t.makeTensorInfo([o.length],"float32",o)}},BV=az({opSnippet:sz+"\n  return x < 0.0 ? 0./0. : log(x);\n",packedOpSnippet:"\n  vec4 result = log(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);\n  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);\n  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);\n  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);\n  return result;\n",cpuKernelImpl:GM}),VV={kernelName:En,backendName:"webgl",kernelFunc:BV},WV=az({opSnippet:sz+"\n  return log(1.0 + x);\n"}),UV={kernelName:$n,backendName:"webgl",kernelFunc:WV},GV=oz({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"}),HV={kernelName:Cn,backendName:"webgl",kernelFunc:GV},jV=az({opSnippet:"return float(!(x >= 1.0));"}),KV={kernelName:An,backendName:"webgl",kernelFunc:jV},qV=oz({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"}),YV={kernelName:_n,backendName:"webgl",kernelFunc:qV};class XV{constructor(e,t,n,r,s){this.variableNames=["x"],this.outputShape=[];const a=t,o=e[3]-1;let i;this.outputShape=e;const l=`float(${n}) + float(${r}) * sum`;i=.5===s?`inversesqrt(${l})`:1===s?`1.0/(${l})`:`exp(log(${l}) * float(-${s}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${a}; j <= ${a}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${o}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${i};\n        setOutput(val);\n      }\n    `}}class ZV{constructor(e,t,n,r,s){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const a=t,o=e[3]-1;let i;this.outputShape=e;const l=`float(${n}) + float(${r}) * sum`;i=.5===s?`inversesqrt(${l})`:1===s?`1.0/(${l})`:`exp(log(${l}) * float(-${s}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${a};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${a}; j <= ${a}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${o}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${i};\n        setOutput(result);\n      }\n    `}}const QV={kernelName:On,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{depthRadius:a,bias:o,alpha:i,beta:l}=r,u=Ye().getBool("WEBGL_PACK_NORMALIZATION")?new ZV(s.shape,a,o,i,l):new XV(s.shape,a,o,i,l);return n.runWebGLProgram(u,[s],s.dtype)}};class JV{constructor(e,t,n,r,s){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=n,this.alpha=r,this.beta=s,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${t})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${t} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${r}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${r})\n                * float(${s})\n                * getInputImage(b, r, c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${s});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}const eW={kernelName:Mn,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:s,y:a,dy:o}=t,{depthRadius:i,bias:l,alpha:u,beta:c}=r,p=new JV(s.shape,i,l,u,c);return n.runWebGLProgram(p,[s,a,o],s.dtype)}};function tW(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{reductionIndices:a,keepDims:o}=r,i=s.shape.length,l=we(a,s.shape);let u=l;const c=np(u,i),p=null!=c,h=n.shouldExecuteOnCPU([s]);let d=s;if(p){if(h){const e=n.texData.get(d.dataId).values,t=new Array(i);for(let e=0;e<t.length;e++)t[e]=s.shape[c[e]];const r=xL(e,s.shape,s.dtype,c,t);d=n.makeTensorInfo(t,s.dtype),n.texData.get(d.dataId).values=r}else d=wz(s,c,n);u=sp(u.length,i)}tp("max",u,i);const[f,m]=Jc(d.shape,u);let g,y=f;if(o&&(y=ep(f,l)),h){const e=n.texData.get(d.dataId).values,t=HM(e,ue(m),y,s.dtype);g=n.makeTensorInfo(y,s.dtype),n.texData.get(g.dataId).values=t}else g=function(e,t,n,r){const s=ue(t),a=dz({inputs:{x:e},attrs:{shape:[ue(e.shape)/s,s]},backend:r}),o=yz(a,e.dtype,"max",r),i=dz({inputs:{x:o},attrs:{shape:n},backend:r});return r.disposeIntermediateTensorInfo(a),r.disposeIntermediateTensorInfo(o),i}(d,m,y,n);return p&&n.disposeIntermediateTensorInfo(d),g}const nW={kernelName:zn,backendName:"webgl",kernelFunc:tW},rW=oz({opSnippet:GL+"\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+jL+"\n  return result;\n",cpuKernelImpl:jM}),sW={kernelName:Pn,backendName:"webgl",kernelFunc:rW},aW={kernelName:Bn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t;IO(s,"maxPool");const{filterSize:a,strides:o,pad:i,dimRoundingMode:l}=r;oe(ec(o,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const u=Gu(s.shape,a,o,1,i,l);if(1===u.filterWidth&&1===u.filterHeight&&he(u.inShape,u.outShape))return qL({inputs:{x:s},backend:n});const c=new sP(u,"max",!1);return n.runWebGLProgram(c,[s],s.dtype)}},oW={kernelName:Wn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{filterSize:a,strides:o,pad:i,dataFormat:l,dimRoundingMode:u}=r,c=Hu(s.shape,a,o,[1,1,1],i,u,l),p=new aP(c,"max",!1);return n.runWebGLProgram(p,[s],s.dtype)}};class iW{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideHeight,n=e.strideWidth,r=e.dilationHeight,s=e.effectiveFilterHeight,a=e.effectiveFilterWidth,o=s-1-e.padInfo.top,i=a-1-e.padInfo.left,l=s*a-1;this.userCode=`\n      const ivec2 pads = ivec2(${o}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${s};\n          wR += ${r}) {\n          float dyR = float(dyRCorner + wR) / ${t}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${a}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${l} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${a} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class lW{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideDepth,n=e.strideHeight,r=e.strideWidth,s=e.dilationDepth,a=e.dilationHeight,o=e.dilationWidth,i=e.effectiveFilterDepth,l=e.effectiveFilterHeight,u=e.effectiveFilterWidth,c=i-1-e.padInfo.front,p=l-1-e.padInfo.top,h=u-1-e.padInfo.left,d=i*l*u-1;this.userCode=`\n      const ivec3 pads = ivec3(${c}, ${p}, ${h});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${i};\n           wD += ${s}) {\n          float dyD = float(dyDCorner + wD) / ${t}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${l};\n              wR += ${a}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${u};\n                wC += ${o}) {\n              float dyC = float(dyCCorner + wC) / ${r}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${d} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${l} * ${u} +\n                  wR * ${u} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const uW={kernelName:Un,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,o=a,{filterSize:i,strides:l,pad:u,dimRoundingMode:c}=r,p=Hu(o.shape,i,l,[1,1,1],u,c),h=new aP(p,"max",!0),d=n.runWebGLProgram(h,[o],o.dtype),f=new lW(p),m=n.runWebGLProgram(f,[s,d],o.dtype);return n.disposeIntermediateTensorInfo(d),m}},cW={kernelName:Vn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a,output:o}=t,i=a;IO([a,o],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:p}=r,h=Gu(i.shape,l,u,1,c,p),d=new sP(h,"max",!0),f=n.runWebGLProgram(d,[i],i.dtype),m=new iW(h),g=n.runWebGLProgram(m,[s,f],i.dtype);return n.disposeIntermediateTensorInfo(f),g}},pW={kernelName:Gn,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:r}=e,{filterSize:s,strides:a,pad:o,includeBatchInIndex:i}=t,l=n;oe(4===r.shape.length,(()=>`Error in maxPool: input must be rank 4 but got rank ${r.shape.length}.`));const u=[1,1];oe(ec(a,u),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${u}'`));const c=Gu(r.shape,s,a,u,o),[p,h]=function(e,t,n,r){let s=new sP(n,"max",!1);const a=r.runWebGLProgram(s,[e],"float32");return s=new sP(n,"max",!0,!0,t),[a,r.runWebGLProgram(s,[e],"float32")]}(r,i,c,l);return[p,h]}},hW={kernelName:Hn,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:r}=e,{keepDims:s,axis:a}=t,o=n,i=r.shape.length,l=we(a,r.shape);let u=l;const c=np(u,i),p=null!=c,h=o.shouldExecuteOnCPU([r]),d=[];let f=r;if(p){if(h){const e=o.texData.get(f.dataId).values,t=new Array(i);for(let e=0;e<t.length;e++)t[e]=r.shape[c[e]];const n=xL(e,r.shape,r.dtype,c,t);f=o.makeTensorInfo(t,r.dtype),o.texData.get(f.dataId).values=n}else f=wz(r,c,o);d.push(f),u=sp(u.length,i)}tp("sum",u,i);const[m,g]=Jc(f.shape,u);let y=m;s&&(y=ep(m,l));const b=function(e,t,n,r){const s=ue(t),a=dz({inputs:{x:e},attrs:{shape:[ue(e.shape)/s,s]},backend:r}),o=yz(a,"float32","mean",r),i=dz({inputs:{x:o},attrs:{shape:n},backend:r});return r.disposeIntermediateTensorInfo(a),r.disposeIntermediateTensorInfo(o),i}(f,g,y,o);for(const e of d)o.disposeIntermediateTensorInfo(e);return b}},dW={kernelName:jn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r,i=s.shape.length,l=we(a,s.shape);let u=l;const c=np(u,i);let p=s;null!=c&&(p=Nz({inputs:{x:s},backend:n,attrs:{perm:c}}),u=sp(u.length,s.shape.length)),tp("min",u,i);const[h,d]=Jc(p.shape,u),f=dz({inputs:{x:p},backend:n,attrs:{shape:[-1,ue(d)]}}),m=yz(f,f.dtype,"min",n);let g;return g=dz(o?{inputs:{x:m},backend:n,attrs:{shape:ep(h,l)}}:{inputs:{x:m},backend:n,attrs:{shape:h}}),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(p),g}},fW=oz({opSnippet:GL+"\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+jL+"\n  return result;\n",cpuKernelImpl:KM}),mW={kernelName:Kn,backendName:"webgl",kernelFunc:fW};class gW{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const r=e.length,s=UO(r),a=t.map((e=>e[0])).join(","),o=t.map(((t,n)=>t[0]+e[n])).join(","),i=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r),l="reflect"===n?0:1;this.userCode=1!==r?`\n      ${s} start = ${s}(${a});\n      ${s} end = ${s}(${o});\n\n      void main() {\n        ${s} outC = getOutputCoords();\n        for (int i = 0; i < ${r}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${l};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${l};\n          }\n        }\n        ${s} coords = outC - start;\n        setOutput(getX(${i}));\n      }\n    `:`\n        int start = ${a};\n        int end = ${o};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${l};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${l};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class yW{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const r=e.length,s=UO(r),a=t.map((e=>e[0])).join(","),o=t.map(((t,n)=>t[0]+e[n])).join(","),i=kL("rc",r),l=kL("source",r),u=`${i[r-1]} < ${this.outputShape[r-1]}`,c=1===r?"source":`vec2(${l.slice(-2).join()})`,p="reflect"===n?0:1;let h="";if(1===r){const e=`\n        ${s} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${p};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${p};\n        }\n        source -= start;\n      `;h=`\n        ${s} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${i[r-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n      `}else{const e=`\n        ${s} source = rc;\n        ${s} lt = ${s}(lessThan(source, start));\n        ${s} gte = ${s}(greaterThanEqual(source, end));\n        ${s} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${p}) +\n                gte * ((end - 1) * 2 - source + ${p});\n        source -= start;\n      `;h=`\n        ${s} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${i[r-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n        rc = outputLoc;\n        ${i[r-2]} += 1;\n        if(${i[r-2]} < ${this.outputShape[r-2]}) {\n          ${e}\n          result[2] = getChannel(getX(${l.join()}), ${c});\n          ${i[r-1]} += 1;\n          if(${u}) {\n            ${e}\n            result[3] = getChannel(getX(${l.join()}), ${c});\n          }\n        }\n      `}this.userCode=`\n      const ${s} start = ${s}(${a});\n      const ${s} end = ${s}(${o});\n\n      void main() {\n        ${s} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${h}\n        setOutput(result);\n      }\n    `}}const bW={kernelName:qn,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r}=e,{paddings:s,mode:a}=n,o=Ye().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new yW(r.shape,s,a):new gW(r.shape,s,a);return t.runWebGLProgram(o,[r],r.dtype)}},xW=oz({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  bvec4 isNaN = equal(b, vec4(0.0));\n  "+jL+"\n  return result;\n"}),wW={kernelName:Yn,backendName:"webgl",kernelFunc:xW};class vW{constructor(e,t,n){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[e,n],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${t-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${t-1}));\n      }\n    `}}const kW=oz({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),NW={kernelName:Zt,backendName:"webgl",kernelFunc:kW},TW="return a - b;",SW=oz({opSnippet:TW,packedOpSnippet:TW,supportsComplex:!0,cpuKernelImpl:gL}),IW={kernelName:ts,backendName:"webgl",kernelFunc:SW};function EW(e){const{inputs:t,backend:n,attrs:r}=e,{logits:s}=t,{dim:a}=r,o=we([a],s.shape),i=tW({inputs:{x:s},backend:n,attrs:{reductionIndices:o,keepDims:!1}}),l=ep(i.shape,o),u=dz({inputs:{x:i},backend:n,attrs:{shape:l}}),c=SW({inputs:{a:s,b:u},backend:n}),p=jB({inputs:{x:c},backend:n}),h=vz({inputs:{x:p},backend:n,attrs:{axis:o,keepDims:!1}}),d=dz({inputs:{x:h},backend:n,attrs:{shape:l}}),f=kW({inputs:{a:p,b:d},backend:n});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(d),f}const $W={kernelName:Wr,backendName:"webgl",kernelFunc:EW},CW={kernelName:Xn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{logits:s}=t,{numSamples:a,seed:o,normalized:i}=r,l=i?s:EW({inputs:{logits:s},backend:n,attrs:{dim:s.shape.length-1}}),u=l.shape[0],c=l.shape[1],p=new vW(u,c,a),h=[[o]],d=n.runWebGLProgram(p,[l],"int32",h);return i||n.disposeIntermediateTensorInfo(l),d}},AW=AL+"\n  return -x;\n",_W={kernelName:Qn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t;if(n.shouldExecuteOnCPU([r])){const e=n.texData.get(r.dataId),[t,s]=YM(e.values,r.shape,r.dtype);return n.makeTensorInfo(s,r.dtype,t)}let s;return s=Ye().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new OL(r.shape,"\n  vec4 result = -x;\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"):new CL(r.shape,AW),n.runWebGLProgram(s,[r],r.dtype)}},RW=Zd,DW={kernelName:er,backendName:"webgl",kernelFunc:function(e){xs("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:l}=r,u=n.readSync(s.dataId),c=n.readSync(a.dataId),{selectedIndices:p}=RW(u,c,o,i,l);return n.makeTensorInfo([p.length],"int32",new Int32Array(p))}},FW=Qd,OW={kernelName:tr,backendName:"webgl",kernelFunc:function(e){xs("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:l,padToMaxOutputSize:u}=r,c=n.readSync(s.dataId),p=n.readSync(a.dataId),{selectedIndices:h,validOutputs:d}=FW(c,p,o,i,l,u);return[n.makeTensorInfo([h.length],"int32",new Int32Array(h)),n.makeTensorInfo([],"int32",new Int32Array([d]))]}},MW=Jd,LW={kernelName:nr,backendName:"webgl",kernelFunc:function(e){xs("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:l,softNmsSigma:u}=r,c=n.readSync(s.dataId),p=n.readSync(a.dataId),h=o,d=i,f=l,m=u,{selectedIndices:g,selectedScores:y}=MW(c,p,h,d,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}};class zW{constructor(e,t,n,r){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${r}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}const PW={kernelName:sr,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{indices:s}=t,{dtype:a,depth:o,onValue:i,offValue:l}=r,u=ue(s.shape),c=new zW(u,o,i,l),p=dz({inputs:{x:s},backend:n,attrs:{shape:[u]}}),h=n.runWebGLProgram(c,[p],a);n.disposeIntermediateTensorInfo(p);const d=dz({inputs:{x:h},backend:n,attrs:{shape:[...s.shape,o]}});return n.disposeIntermediateTensorInfo(h),d}};function BW(e){const{inputs:t,backend:n}=e,{x:r}=t;if("complex64"===r.dtype){const e=EP({inputs:{input:r},backend:n}),t=BW({inputs:{x:e},backend:n}),s=WP({inputs:{input:r},backend:n}),a=BW({inputs:{x:s},backend:n}),o=XL({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(a),o}return rV({attrs:{shape:r.shape,dtype:r.dtype,value:"string"===r.dtype?"":0},backend:n})}const VW={kernelName:hs,backendName:"webgl",kernelFunc:BW},WW={kernelName:rr,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:r}=t,{x:s}=n;if("string"===s.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===s.dtype){const t=EP({inputs:{input:s},backend:r}),n=e({inputs:{x:t},backend:r}),a=WP({inputs:{input:s},backend:r}),o=BW({inputs:{x:a},backend:r}),i=XL({inputs:{real:n,imag:o},backend:r});return r.disposeIntermediateTensorInfo(t),r.disposeIntermediateTensorInfo(n),r.disposeIntermediateTensorInfo(a),r.disposeIntermediateTensorInfo(o),i}return rV({attrs:{shape:s.shape,dtype:s.dtype,value:1},backend:r})}},UW={kernelName:ar,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{axis:s}=r;if(1===t.length)return qB({inputs:{input:t[0]},backend:n,attrs:{dim:s}});const a=t[0].shape,o=t[0].dtype;t.forEach((e=>{ie(a,e.shape,"All tensors passed to stack must have matching shapes"),oe(o===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const i=[],l=HP({inputs:t.map((e=>{const t=qB({inputs:{input:e},backend:n,attrs:{dim:s}});return i.push(t),t})),backend:n,attrs:{axis:s}});return i.forEach((e=>n.disposeIntermediateTensorInfo(e))),l}};class GW{constructor(e,t,n){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const r=e.length,s=UO(r),a=t.map((e=>e[0])).join(","),o=t.map(((t,n)=>t[0]+e[n])).join(","),i=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r);this.userCode=1!==r?`\n      ${s} start = ${s}(${a});\n      ${s} end = ${s}(${o});\n\n      void main() {\n        ${s} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${s} coords = outC - start;\n          setOutput(getX(${i}));\n        }\n      }\n    `:`\n        int start = ${a};\n        int end = ${o};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class HW{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const r=e.length,s=UO(r),a=t.map((e=>e[0])).join(","),o=t.map(((t,n)=>t[0]+e[n])).join(","),i=kL("rc",r),l=kL("source",r),u=`${i[r-1]} < ${this.outputShape[r-1]}`,c=1===r?"source":`vec2(${l.slice(-2).join()})`,p=[`${s} rc = outputLoc;`,`${i[r-1]} += 1;\n       if(${u}) {\n      `,1===r?"":`}\n       rc = outputLoc;\n       ${i[r-2]} += 1;\n       if(${i[r-2]} < ${this.outputShape[r-2]}) {`,1===r?"":`  ${i[r-1]} += 1;\n         if(${u}) {`],h=1===r?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let d="";for(let e=0,t=1===r?2:4;e<t;e++)d+=`\n        ${p[e]}\n        if (${h}) {\n          result[${e}] = float(value);\n        } else {\n          ${s} source = rc - start;\n          result[${e}] = getChannel(getX(${l.join()}), ${c});\n        }\n      `;d+=1===r?"} ":"}}",this.userCode=`\n      const ${s} start = ${s}(${a});\n      const ${s} end = ${s}(${o});\n\n      void main() {\n        ${s} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${d}\n        setOutput(result);\n      }\n    `}}const jW=e=>{const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{paddings:a,constantValue:o}=r;if(0===ue(s.shape)){const e=a.map(((e,t)=>e[0]+s.shape[t]+e[1]));return rV({backend:n,attrs:{shape:e,value:o,dtype:s.dtype}})}const i=Ye().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new HW(s.shape,a,o):new GW(s.shape,a,o),l=[[o]];return n.runWebGLProgram(i,[s],s.dtype,l)},KW={kernelName:or,backendName:"webgl",kernelFunc:jW},qW=oz({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  bvec4 isNaN1 = lessThan(a, vec4(0.0));\n  bvec4 isNaN2 = lessThan(floor(b), b);\n  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);\n  "+jL+"\n  return result;\n"}),YW={kernelName:lr,backendName:"webgl",kernelFunc:qW},XW={kernelName:cr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r,i=s.shape.length,l=[],u=we(a,s.shape);let c=u;const p=np(c,i);let h,d=s;if(null!=p&&(d=Nz({inputs:{x:s},backend:n,attrs:{perm:p}}),c=sp(c.length,i),l.push(d)),tp("prod",c,i),n.shouldExecuteOnCPU([d])){const e=n.texData.get(d.dataId).values,{outVals:t,outShape:r,outDtype:s}=ZM(d.shape,d.dtype,e,c);h=n.makeTensorInfo(r,s,t)}else{const[e,t]=Jc(d.shape,c),r=ue(t),a=dz({inputs:{x:d},backend:n,attrs:{shape:[-1,r]}}),o=yz(a,Na(s.dtype),"prod",n);h=dz({inputs:{x:o},backend:n,attrs:{shape:e}}),l.push(a),l.push(o)}if(o){l.push(h);const e=ep(h.shape,u);h=dz({inputs:{x:h},backend:n,attrs:{shape:e}})}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),h}},ZW={kernelName:pr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{paramsNestedSplits:s,paramsDenseValues:a,indices:o}=t,{outputRaggedRank:i}=r,l=s.map((e=>n.readSync(e.dataId))),u=s.map((e=>e.shape)),c=n.readSync(a.dataId),p=n.readSync(o.dataId),[h,d,f]=QM(l,u,c,a.shape,a.dtype,p,o.shape,i),m=h.map((e=>n.makeTensorInfo([e.length],"int32",e))),g=n.makeTensorInfo(f,a.dtype,d);return m.concat([g])}},QW={kernelName:hr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{starts:r,limits:s,deltas:a}=t,o=n.readSync(r.dataId),i=n.readSync(s.dataId),l=n.readSync(a.dataId),[u,c]=JM(o,r.shape,r.dtype,i,s.shape,l,a.shape);return[n.makeTensorInfo([u.length],"int32",u),n.makeTensorInfo([c.length],r.dtype,c)]}},JW={kernelName:dr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{shape:s,values:a,defaultValue:o,rowPartitionTensors:i}=t,{rowPartitionTypes:l}=r,u=n.readSync(s.dataId),c=n.readSync(a.dataId),p=n.readSync(o.dataId),h=i.map((e=>n.readSync(e.dataId))),d=i.map((e=>e.shape)),[f,m]=eL(u,s.shape,c,a.shape,a.dtype,p,o.shape,h,d,l);return n.makeTensorInfo(f,a.dtype,m)}},eU=e=>{const{backend:t,attrs:n}=e,{start:r,stop:s,step:a,dtype:o}=n,i=tL(r,s,a,o);return t.makeTensorInfo([i.length],o,i)},tU={kernelName:fr,backendName:"webgl",kernelFunc:eU},nU=az({opSnippet:"return 1.0 / x;"}),rU={kernelName:gr,backendName:"webgl",kernelFunc:nU},sU=az({opSnippet:AL+"\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),aU={kernelName:yr,backendName:"webgl",kernelFunc:sU},oU=az({opSnippet:AL+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),iU={kernelName:Nr,backendName:"webgl",kernelFunc:oU};class lU{constructor(e,t,n,r,s){this.variableNames=["A"],this.outputShape=[];const[a,o,i,l]=e;this.outputShape=[a,t,n,l];const u=[r&&t>1?o-1:o,r&&n>1?i-1:i],c=[r&&t>1?t-1:t,r&&n>1?n-1:n];let p;p=s?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${o}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${p};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class uU{constructor(e,t,n,r,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,o,i,l]=e;this.outputShape=[a,t,n,l];const u=[r&&t>1?o-1:o,r&&n>1?i-1:i],c=[r&&t>1?t-1:t,r&&n>1?n-1:n];let p;p=s?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]},\n          ${u[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${o}.0, ${i}.0,\n                                     ${i}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${p};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${l-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}const cU={kernelName:vr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s}=t,{alignCorners:a,halfPixelCenters:o,size:i}=r,[l,u]=i,c=Ye().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new uU(s.shape,l,u,a,o):new lU(s.shape,l,u,a,o);return n.runWebGLProgram(c,[s],"float32")}};class pU{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,r,s]=t,[,a,o]=e,i=[n&&a>1?r-1:r,n&&o>1?s-1:s],l=[n&&a>1?a-1:a,n&&o>1?o-1:o],u=i[0]/l[0],c=i[1]/l[1],p=1/u,h=1/c,d=2*Math.ceil(p)+2,f=2*Math.ceil(h)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${p});\n        const float invWidthScale = float(${h});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${o}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${r-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${s-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const hU={kernelName:kr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s,dy:a}=t,{alignCorners:o}=r,i=new pU(a.shape,s.shape,o);return n.runWebGLProgram(i,[a],a.dtype)}};class dU{constructor(e,t,n,r,s){this.variableNames=["A"],this.outputShape=[];const[a,o,i,l]=e;this.outputShape=[a,t,n,l];const u=[r&&t>1?o-1:o,r&&n>1?i-1:i],c=[r&&t>1?t-1:t,r&&n>1?n-1:n],p=r?"0.5":"0.0";let h;h=s?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${o}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${h};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${p})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class fU{constructor(e,t,n,r,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,o,i,l]=e;this.outputShape=[a,t,n,l];const u=[r&&t>1?o-1:o,r&&n>1?i-1:i],c=[r&&t>1?t-1:t,r&&n>1?n-1:n],p=r?"0.5":"0.0";let h;h=s?"max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]},\n          ${u[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${o}.0, ${i}.0,\n                                     ${i}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${h};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${p})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${l-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `}}const mU={kernelName:xr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s}=t,{alignCorners:a,halfPixelCenters:o,size:i}=r,[l,u]=i,c=Ye().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new fU(s.shape,l,u,a,o):new dU(s.shape,l,u,a,o);return n.runWebGLProgram(c,[s],s.dtype)}};class gU{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,r,s]=t,[,a,o]=e,i=[n&&a>1?r-1:r,n&&o>1?s-1:s],l=[n&&a>1?a-1:a,n&&o>1?o-1:o],u=i[0]/l[0],c=i[1]/l[1],p=1/u,h=1/c,d=2*Math.ceil(p)+2,f=2*Math.ceil(h)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${p});\n        const float invWidthScale = float(${h});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${o}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${i[0]}) *\n                (float(dyR) / float(${l[0]}));\n\n            float sourceFracCol =\n                float(${i[1]}) *\n                  (float(dyC) / float(${l[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${s}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const yU={kernelName:wr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s,dy:a}=t,{alignCorners:o}=r,i=new gU(a.shape,s.shape,o);return n.runWebGLProgram(i,[a],a.dtype)}};class bU{constructor(e,t){this.variableNames=["x"];const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=e,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${e[0]} - coord - 1));\n        }\n      `);const r=e.map(((n,r)=>(n=>-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - coords[${n}] - 1`:`coords[${n}]`)(r))).join(","),s=UO(n);this.userCode=`\n      void main() {\n        ${s} coords = getOutputCoords();\n        setOutput(getX(${r}));\n      }\n    `}}class xU{constructor(e,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=e;const r=kL("rc",n),s=`${r[n-1]} + 1 < ${this.outputShape[n-1]}`,a=`${r[n-2]} + 1 < ${this.outputShape[n-2]}`,o=UO(n);function i(n){const r=e.map(((r,s)=>function(n,r){return-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - ${r[n]} - 1`:`${r[n]}`}(s,n)));return`getChannel(getX(${r.join(",")}), vec2(${r.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${e[0]} - rc - 1),\n            ${e[0]} - rc - 1);\n          if(${s}){\n              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),\n                ${e[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${o} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function(e){return i(e)}(r.slice())};\n          if(${s}){\n            result.g = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",i(e)}(r.slice())};\n          }\n          if(${a}) {\n            result.b = ${function(e){return e[n-2]="("+e[n-2]+" + 1)",i(e)}(r.slice())};\n            if(${s}) {\n              result.a = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",e[n-2]="("+e[n-2]+" + 1)",i(e)}(r.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}const wU={kernelName:Tr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{dims:a}=r,o=s.shape.length,i=we(a,s.shape);if(0===o)return qL({inputs:{x:s},backend:n});const l=Ye().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new xU(s.shape,i):new bU(s.shape,i);return n.runWebGLProgram(l,[s],s.dtype)}};class vU{constructor(e,t){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];const n=e[1],r=e[2];this.outputShape=e;let s="";s="number"==typeof t?`float outputValue = ${t.toFixed(2)};`:`\n        vec3 fill = vec3(${t.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${s}\n          if(coordX >= 0 && coordX < ${r} && coordY >= 0 && coordY < ${n}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const kU={kernelName:ms,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:r}=e,{radians:s,fillValue:a,center:o}=t,i=n,l=new vU(r.shape,a),[u,c]=Qf(o,r.shape[1],r.shape[2]),p=[[u,c,Math.sin(s),Math.cos(s)]];return i.runWebGLProgram(l,[r],r.dtype,p)}},NU=az({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"}),TU={kernelName:Sr,backendName:"webgl",kernelFunc:NU},SU=az({opSnippet:"return inversesqrt(x);",cpuKernelImpl:nL}),IU={kernelName:Ir,backendName:"webgl",kernelFunc:SU};class EU{constructor(e,t,n,r,s,a,o=!0,i=!1){this.variableNames=["updates","indices","defaultValue"],this.outputShape=a;const l=UO(s.length),u=UO(a.length);let c="";1===n?c="i":2===n&&(c="i, j");const p=`getIndices(${c})`;let h="";1===r?h="i":2===r&&(h="i, coords[1]");const d=`getUpdates(${h})`;let f="";i&&(f="coords[0], coords[1]");const m=`getDefaultValue(${f})`,g=t>1?"strides[j]":"strides";this.userCode=`\n        ${l} strides = ${l}(${s});\n\n        void main() {\n          ${u} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${e}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${t}; j++) {\n              int index = round(${p});\n              flattenedIndex += index * ${g};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${d};\n              found = true;\n            }\n          }\n          setOutput(mix(${m}, sum, float(found)));\n        }\n      `}}class $U{constructor(e,t,n,r,s,a,o=!0,i=!1){this.variableNames=["updates","indices","defaultValue"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=a;const l=UO(s.length),u=UO(a.length);let c="";1===n?c="i":2===n&&(c="i, j");const p=`getIndices(${c})`;let h="";1===r?h="i":2===r&&(h="i, coords[1]");const d=`getUpdates(${h})`;let f="";i&&(f="coords[0], coords[1]");const m=`getDefaultValue(${f})`,g=t>1?"strides[j]":"strides",y=t>1?"strides[j + 1]":"strides";this.userCode=`\n        ${l} strides = ${l}(${s});\n\n        void main() {\n          ${u} coords = getOutputCoords();\n          vec4 sum = vec4(0.);\n          vec4 found = vec4(0.);\n          for (int i = 0; i < ${e}; i+=2) {\n            ivec2 flattenedIndex = ivec2(0);\n            for (int j = 0; j < ${t}; j+=2) {\n              ivec4 index = round(${p});\n              flattenedIndex += index.xz * ${g};\n              if (j + 1 < ${t}) {\n                flattenedIndex += index.yw * ${y};\n              }\n            }\n            if (flattenedIndex[0] == coords[0] || flattenedIndex[1] == coords[0] ||\n                flattenedIndex[0] == coords[0] + 1 || flattenedIndex[1] == coords[0] + 1) {\n              vec4 updVals = ${d};\n              if (flattenedIndex[0] == coords[0]) {\n                sum.xy += updVals.xy;\n                found.xy = vec2(1.);\n              } else if (flattenedIndex[0] == coords[0] + 1) {\n                sum.zw += updVals.xy;\n                found.zw = vec2(1.);\n              }\n              if (flattenedIndex[1] == coords[0]) {\n                sum.xy += updVals.zw;\n                found.xy = vec2(1.);\n              } else if (flattenedIndex[1] == coords[0] + 1) {\n                sum.zw += updVals.zw;\n                found.zw = vec2(1.);\n              }\n            }\n          }\n          setOutput(mix(${m}, sum, found));\n        }\n      `}}const CU={kernelName:Er,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{indices:s,updates:a}=t,{shape:o}=r,{sliceRank:i,numUpdates:l,sliceSize:u,strides:c,outputSize:p}=Yl(0,s,o),h=[p/u,u];if(0===p)return n.makeTensorInfo(o,s.dtype);const d=dz({inputs:{x:s},backend:n,attrs:{shape:[l,i]}}),f=dz({inputs:{x:a},backend:n,attrs:{shape:[l,u]}}),m=n.makeTensorInfo([],"float32",new Float32Array([0]));let g;g=Ye().getBool("WEBGL_PACK")?new $U(l,i,d.shape.length,f.shape.length,c,h):new EU(l,i,d.shape.length,f.shape.length,c,h);const y=n.runWebGLProgram(g,[f,d,m],f.dtype),b=dz({inputs:{x:y},backend:n,attrs:{shape:o}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(y),n.disposeIntermediateTensorInfo(m),b}};class AU{constructor(e,t,n,r){this.variableNames=["sortedSequence","values"],this.customUniforms=[{name:"numInputs",type:"int"}],this.outputShape=[e,n];const s=`for (int i = 0; i < ${Math.ceil(Math.log2(t+1))}; ++i) { if (left >= right) break;`,a=2===Ye().getNumber("WEBGL_VERSION")?"while (left < right) {":s,o="left"===r?"<":"<=";this.userCode=`\n       int findBound(int batch, float value) {\n         int left = 0;\n         int right = numInputs;\n         int mid;\n         ${a}\n           mid = (left + right) / 2;\n           if (getSortedSequence(batch, mid) ${o} value) {\n             left = mid + 1;\n           } else {\n             right = mid;\n           }\n         }\n         return right;\n       }\n\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int valueIndex = coords[1];\n\n         float value = getValues(batch, valueIndex);\n\n         setOutput(float(findBound(batch, value)));\n       }\n     `}}const _U={kernelName:Cr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{sortedSequence:s,values:a}=t,{side:o}=r,i=new AU(s.shape[0],s.shape[1],a.shape[1],o),l=[[s.shape[1]]];return n.runWebGLProgram(i,[s,a],"int32",l)}};class RU{constructor(e,t,n){let r,s;if(this.variableNames=["c","a","b"],this.outputShape=t,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)s="resRC",r="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[],o=[];for(let r=0;r<t.length;r++)o.push(`${n[r]}`),r<e&&a.push(`${n[r]}`);r=a.join(),s=o.join()}const a=UO(n);this.userCode=`\n      void main() {\n        ${a} resRC = getOutputCoords();\n        float cVal = getC(${r});\n        if (cVal >= 1.0) {\n          setOutput(getA(${s}));\n        } else {\n          setOutput(getB(${s}));\n        }\n      }\n    `}}const DU={kernelName:Ar,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:r,t:s,e:a}=t,o=new RU(r.shape.length,s.shape,s.shape.length);return n.runWebGLProgram(o,[r,s,a],ka(s.dtype,a.dtype))}},FU=az({opSnippet:`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${sm};\n  float scale = ${am};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`}),OU={kernelName:_r,backendName:"webgl",kernelFunc:FU},MU=az({opSnippet:sz+"\n  return 1.0 / (1.0 + exp(-1.0 * x));\n",packedOpSnippet:"\n  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:sL}),LU={kernelName:Mr,backendName:"webgl",kernelFunc:MU},zU=az({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"}),PU={kernelName:Or,backendName:"webgl",kernelFunc:zU},BU=az({opSnippet:sz+"\n  return sin(x);\n",packedOpSnippet:`\n  vec4 result = sin(x);\n  bvec4 isNaN = isnan(x);\n  ${jL}\n  return result;\n`}),VU={kernelName:Dr,backendName:"webgl",kernelFunc:BU},WU=az({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"}),UU={kernelName:Fr,backendName:"webgl",kernelFunc:WU},GU=az({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"}),HU={kernelName:Lr,backendName:"webgl",kernelFunc:GU},jU={kernelName:Br,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockShape:a,paddings:o}=r;oe(s.shape.length<=4,(()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet"));const i=a.reduce(((e,t)=>e*t)),l=[[0,0]];l.push(...o);for(let e=1+a.length;e<s.shape.length;++e)l.push([0,0]);const u=[],c=jW({inputs:{x:s},backend:n,attrs:{paddings:l,constantValue:0}}),p=Jf(c.shape,a,i,!1),h=em(p.length,a.length,!1),d=tm(c.shape,a,i,!1),f=dz({inputs:{x:c},backend:n,attrs:{shape:p}}),m=Nz({inputs:{x:f},backend:n,attrs:{perm:h}}),g=dz({inputs:{x:m},backend:n,attrs:{shape:d}});return u.push(c),u.push(f),u.push(m),u.forEach((e=>n.disposeIntermediateTensorInfo(e))),g}},KU={kernelName:Ur,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:r,values:s,denseShape:a,defaultValue:o}=t;if(1!==a.shape.length)throw new Error(`Dense shape must be a vector, saw:\n         ${a.shape}`);if(2!==r.shape.length)throw new Error(`Indices must be a matrix, saw:\n         ${r.shape}`);if(1!==s.shape.length)throw new Error(`Values must be a vector, saw:\n         ${s.shape}`);if(0!==o.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${o.shape}`);const i=n.readSync(r.dataId),l=n.readSync(s.dataId),u=n.readSync(a.dataId),c=n.readSync(o.dataId)[0],[p,h,d,f,m]=iL(i,r.shape,r.dtype,l,s.dtype,u,c);return[n.makeTensorInfo(h,r.dtype,p),n.makeTensorInfo([h[0]],s.dtype,d),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map((e=>Number(e))))),n.makeTensorInfo([m.length],r.dtype,new Int32Array(m))]}},qU={kernelName:Gr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:r,inputShape:s,newShape:a}=t;if(2!==r.shape.length)throw new Error(`Input indices should be a matrix but received shape ${r.shape}`);if(1!==s.shape.length)throw new Error(`Input shape should be a vector but received shape ${s.shape}`);if(1!==a.shape.length)throw new Error(`Target shape should be a vector but received shape ${a.shape}`);const o=Array.from(n.readSync(s.dataId)),i=n.readSync(r.dataId),l=Array.from(n.readSync(a.dataId)),[u,c,p]=lL(i,r.shape,r.dtype,o,l);return[n.makeTensorInfo(c,r.dtype,u),n.makeTensorInfo([p.length],a.dtype,new Int32Array(p))]}},YU={kernelName:Hr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:r,indices:s,segmentIds:a}=t;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.shape.length)throw new Error(`Indices should be a vector but received shape\n              ${s.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n              ${a.shape}`);const o=n.readSync(r.dataId),i=n.readSync(s.dataId),l=n.readSync(a.dataId),[u,c]=uL(o,r.shape,r.dtype,i,l,!0);return n.makeTensorInfo(c,r.dtype,u)}},XU={kernelName:jr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:r,indices:s,segmentIds:a}=t;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.shape.length)throw new Error(`Indices should be a vector but received shape\n             ${s.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n             ${a.shape}`);const o=n.readSync(r.dataId),i=n.readSync(s.dataId),l=n.readSync(a.dataId),[u,c]=uL(o,r.shape,r.dtype,i,l);return n.makeTensorInfo(c,r.dtype,u)}},ZU={kernelName:Kr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{sparseIndices:s,sparseValues:a,defaultValue:o}=t,{outputShape:i}=r,{sliceRank:l,numUpdates:u,sliceSize:c,strides:p,outputSize:h}=Yl(0,s,i),d=!1;if("string"===a.dtype){const e=n.bufferSync(s),t=n.bufferSync(a),r=Qs(n.readSync(o.dataId)[0]),f=rL(e,t,i,h,c,u,l,p,r,d);return n.makeTensorInfo(i,f.dtype,f.values)}const f=new EU(u,l,s.shape.length,a.shape.length,p,[h,1],d),m=n.runWebGLProgram(f,[a,s,o],a.dtype),g=dz({inputs:{x:m},backend:n,attrs:{shape:i}});return n.disposeIntermediateTensorInfo(m),g}},QU={kernelName:Vr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{numOrSizeSplits:a,axis:o}=r,i=we(o,s.shape)[0],l=Am(s,a,i),u=s.shape.length,c=new Array(u).fill(0),p=s.shape.slice();return l.map((e=>{const t=[...p];t[i]=e;const r=xP({inputs:{x:s},backend:n,attrs:{begin:c,size:t}});return c[i]+=e,r}))}},JU="return sqrt(x);",eG=az({opSnippet:JU,packedOpSnippet:JU,cpuKernelImpl:cL}),tG={kernelName:zr,backendName:"webgl",kernelFunc:eG},nG=az({opSnippet:"return x * x;"}),rG={kernelName:Yr,backendName:"webgl",kernelFunc:nG},sG="return (a - b) * (a - b);",aG=oz({opSnippet:sG,packedOpSnippet:sG}),oG={kernelName:qr,backendName:"webgl",kernelFunc:aG},iG={kernelName:Xr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t;if("string"!==s.dtype)throw new Error("Input must be of datatype string");const a=jm(n.readSync(s.dataId)),o=pL(a,"string",r);return n.makeTensorInfo(s.shape,"string",o)}},lG={kernelName:ds,backendName:"webgl",kernelFunc:function({inputs:e,attrs:t,backend:n}){const{x:r}=e,s=AL+`\n    return x > 0.0 ? 1.0 : float(${t.alpha});\n  `,a=new CL(r.shape,s);return n.runWebGLProgram(a,[r],r.dtype)}};class uG{constructor(e,t,n){this.variableNames=["x"],this.outputShape=n;const r=n.length,s=UO(n.length),a=UO(n.length);let o="";if(1===r)o="coords * strides + begin";else{let e=0;o=n.map(((t,r)=>(e++,1===n.length?`coords * strides[${r}] + begin[${r}]`:`coords[${e-1}] * strides[${r}] + begin[${r}]`))).join(",")}this.userCode=`\n      ${s} begin = ${s}(${e});\n      ${s} strides = ${s}(${t});\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${o}));\n      }\n    `}}const cG={kernelName:Zr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{begin:a,end:o,strides:i,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:p,shrinkAxisMask:h}=r,{finalShapeSparse:d,finalShape:f,isIdentity:m,sliceDim0:g,isSimpleSlice:y,begin:b,end:x,strides:w}=du(s.shape,a,o,i,l,u,c,p,h);let v;if(m)v=dz({inputs:{x:s},backend:n,attrs:{shape:f}});else if(g||y){oe(s.shape.length>=1,(()=>`Input must have rank at least 1, got: ${s.shape.length}`));const e=eu(b,x,w),t=xP({inputs:{x:s},backend:n,attrs:{begin:b,size:e}});v=dz({inputs:{x:t},backend:n,attrs:{shape:f}}),n.disposeIntermediateTensorInfo(t)}else if(n.shouldExecuteOnCPU([s])){const e=n.readSync(s.dataId),t=ki(s.shape,s.dtype,e),r=hL(d,t,w,b);v=n.makeTensorInfo(f,s.dtype,r.values)}else{const e=new uG(b,w,d);v=n.runWebGLProgram(e,[s],s.dtype)}const k=dz({inputs:{x:v},backend:n,attrs:{shape:f}});return n.disposeIntermediateTensorInfo(v),k}},pG={kernelName:Qr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{separator:s,nGramWidths:a,leftPad:o,rightPad:i,padWidth:l,preserveShortSequences:u}=r,{data:c,dataSplits:p}=t,h=n.readSync(c.dataId),d=n.readSync(p.dataId),[f,m]=dL(h,d,s,a,o,i,l,u);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(p.shape,"int32",m)]}},hG={kernelName:Jr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{skipEmpty:s}=r,{input:a,delimiter:o}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(1!==a.shape.length)throw new Error(`Input must be a vector, got shape: ${a.shape}`);if(0!==o.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${o.shape}`);const i=n.readSync(a.dataId),l=n.readSync(o.dataId)[0],[u,c,p]=fL(i,l,s),h=c.length;return[n.makeTensorInfo([h,2],"int32",u),n.makeTensorInfo([h],"string",c),n.makeTensorInfo([2],"int32",new Int32Array(p))]}},dG={kernelName:es,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{numBuckets:s}=r,{input:a}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(s<=0)throw new Error("Number of buckets must be at least 1");const o=n.readSync(a.dataId),i=mL(o,s);return n.makeTensorInfo(a.shape,"int32",i)}},fG=az({opSnippet:"return tan(x);"}),mG={kernelName:ns,backendName:"webgl",kernelFunc:fG},gG=az({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"}),yG={kernelName:rs,backendName:"webgl",kernelFunc:gG},bG={kernelName:$r,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{tensor:s,indices:a,updates:o}=t,{}=r,{sliceRank:i,numUpdates:l,sliceSize:u,strides:c,outputSize:p}=Yl(0,a,s.shape),h=[p/u,u];if(0===p)return n.makeTensorInfo(s.shape,a.dtype);const d=dz({inputs:{x:a},backend:n,attrs:{shape:[l,i]}}),f=dz({inputs:{x:o},backend:n,attrs:{shape:[l,u]}}),m=dz({inputs:{x:s},backend:n,attrs:{shape:h}}),g=new EU(l,i,d.shape.length,f.shape.length,c,h,!1,!0),y=n.runWebGLProgram(g,[f,d,m],m.dtype),b=dz({inputs:{x:y},backend:n,attrs:{shape:s.shape}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(y),b}};class xG{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[r]*t[r];this.outputShape=n,this.rank=n.length;const r=UO(this.rank),s=function(e){const t=e.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${e[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],r=[];for(let t=0;t<e.length;t++)r.push(`imod(${n[t]}, ${e[t]})`);return r.join()}(e);this.userCode=`\n      void main() {\n        ${r} resRC = getOutputCoords();\n        setOutput(getA(${s}));\n      }\n    `}}function wG(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{reps:a}=r;if("string"===s.dtype||s.shape.length>5){const e=n.readSync(s.dataId),t="string"===s.dtype?e.map((e=>Qs(e))):e,r=ki(s.shape,s.dtype,t),o=yL(r,a);return n.makeTensorInfo(o.shape,o.dtype,o.values)}const o=new xG(s.shape,a);return n.runWebGLProgram(o,[s],s.dtype)}const vG={kernelName:ss,backendName:"webgl",kernelFunc:wG};class kG{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=e,this.userCode="\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     "}}class NG{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=e,this.userCode="\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     "}}function TG(e,t){null!==t&&e.disposeIntermediateTensorInfo(t)}function SG(e){let t=1;for(;t<e;)t*=2;return t}const IG={kernelName:as,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{k:a,sorted:o}=r,i=Ye().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),l=Ye().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),u=s.shape,c=u[u.length-1];if(n.shouldExecuteOnCPU([s])||c<i||a>l){const e=n.readSync(s.dataId),[t,r]=bL(e,u,s.dtype,a,o);return[n.makeTensorInfo(t.shape,t.dtype,t.values),n.makeTensorInfo(r.shape,r.dtype,r.values)]}if(0===a)return u[u.length-1]=0,[n.makeTensorInfo(u,s.dtype,[]),n.makeTensorInfo(u,"int32",[])];if(1===c)return[s,rV({attrs:{shape:u,dtype:"int32",value:0},backend:n})];const p=n.texData.get(s.dataId),h=null!==p&&p.isPacked,d=h?n.unpackTensor(s):s,f=ue(u)/c,m=dz({inputs:{x:d},attrs:{shape:[f,c]},backend:n});h&&TG(n,d);const g=SG(a),y=SG(c);let b=null;const x=()=>null===b?[m,m]:[m,b],w=(e,t,r)=>{const s=x(),a=new kG(r),o=[[c],[null===b?1:0],[Number.NEGATIVE_INFINITY],[e],[t]],i=b;b=n.runWebGLProgram(a,s,"int32",o),TG(n,i)};for(let e=1;e<g;e*=2){const t=2*e;for(let n=e;n>=1;n/=2)w(t,n,[f,y])}for(let e=y;e>g;e/=2){const t=x(),r=new NG([f,e/2]),s=[[c],[null===b?1:0],[g]],a=b;b=n.runWebGLProgram(r,t,"int32",s),TG(n,a);const o=g/2,i=2*o;for(let e=o;e>=1;e/=2)w(i,e,b.shape)}let v=b;b=xP({inputs:{x:b},backend:n,attrs:{begin:0,size:[f,a]}}),TG(n,v);let k=kV({inputs:{x:m,indices:b},backend:n,attrs:{axis:1,batchDims:1}});TG(n,m);const N=u.slice(0,-1);N.push(a),v=b,b=dz({inputs:{x:b},attrs:{shape:N},backend:n}),TG(n,v);const T=k;return k=dz({inputs:{x:k},attrs:{shape:N},backend:n}),TG(n,T),[k,b]}};class EG{constructor(e,t,n,r,s,a){this.variableNames=["Image","Transforms"],this.outputShape=a;const o="nearest"===n?1:2;let i;switch(r){case"constant":default:i=1;break;case"reflect":i=2;break;case"wrap":i=3;break;case"nearest":i=4}this.userCode=`\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${i} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${i} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${i} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${e} && 0 <= coordX && coordX < ${t}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${s});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${s});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${t}));\n                float mapY = mapCoord(inY, float(${e}));\n\n                if (${o} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `}}const $G={kernelName:os,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{image:s,transforms:a}=t,{interpolation:o,fillMode:i,fillValue:l,outputShape:u}=r,[c,p,h,d]=s.shape,[f,m]=null!=u?u:[p,h],g=new EG(p,h,o,i,l,[c,f,m,d]);return n.runWebGLProgram(g,[s,a],"float32")}},CG={kernelName:ls,backendName:"webgl",kernelFunc:function(e){const{inputs:t,attrs:n,backend:r}=e,{axis:s}=n,{x:a}=t;IO(a,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const o=r.readSync(a.dataId),{outputValues:i,outputShape:l,indices:u}=wL(o,s,a.shape,a.dtype);return[r.makeTensorInfo(l,a.dtype,i),r.makeTensorInfo([u.length],"int32",u)]}},AG={kernelName:us,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{value:s}=t;let{axis:a}=r;a<0&&(a+=s.shape.length);const o=s,i=o.shape.length,l=s.shape[a],u=new Array(i-1);let c=0;for(let e=0;e<i;e++)e!==a&&(u[c++]=o.shape[e]);const p=[],h=new Array(i).fill(0),d=o.shape.slice();d[a]=1;const f=new Array(l);for(let e=0;e<f.length;e++){h[a]=e;const t=xP({inputs:{x:o},backend:n,attrs:{begin:h,size:d}}),r=dz({inputs:{x:t},backend:n,attrs:{shape:u}});f[e]=r,p.push(t)}return p.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}};class _G{constructor(e,t){this.variableNames=["x","segmentIds"];const n=e.windowSize,r=e.batchSize,s=e.inSize,a=e.numSegments,o=a*Math.ceil(s/n);this.outputShape=[r,o];const i=4*Math.floor(n/4),l=n%4,u="\n        sumValue += dot(values, segFilter);\n    ";let c="";s%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return initializationValue;\n        }\n      `);let p="";s%n>0&&(p=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${p}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${a})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${a})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${i}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${i};\n        if (${1===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${u}\n        } else if (${2===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${u}\n        } else if (${3===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}const RG={kernelName:cs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,segmentIds:a}=t,{numSegments:o}=r,i=s.shape.length,l=[];let u=0;const c=np([u],i);let p=s;null!=c&&(p=Nz({inputs:{x:s},backend:n,attrs:{perm:c}}),l.push(p),u=sp(1,i)[0]);const h=Gm(p.shape,u,o),d=ue([p.shape[u]]),f=dz({inputs:{x:p},backend:n,attrs:{shape:[-1,d]}});l.push(f);const m=Na(s.dtype),g=(e,t,r,s,a)=>{const o=e.shape[0],i=e.shape[1],u=Um(i,a),c=new _G({windowSize:u,inSize:i,batchSize:o,numSegments:a},t),p=n.compileAndRun(c,[e,r],s);if(l.push(p),p.shape[1]===a)return p;const h=eU({backend:n,attrs:{start:0,stop:a,step:1,dtype:"float32"}}),d=wG({inputs:{x:h},backend:n,attrs:{reps:[i/u]}});return l.push(h),l.push(d),g(p,t,d,s,a)},y=dz({inputs:{x:g(f,"unsortedSegmentSum",a,m,o)},backend:n,attrs:{shape:h}});let b=y;if(null!=c){l.push(y);const e=rp(c);b=Nz({inputs:{x:b},backend:n,attrs:{perm:e}})}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),b}},DG=[Iz,$z,Az,Rz,Oz,zz,Pz,Bz,jz,Kz,Yz,Zz,Jz,tP,rP,oP,iP,cP,pP,hP,mP,vP,kP,NP,TP,CP,RP,OP,ZL,zP,jP,eB,aB,iB,lB,uB,cB,hB,fB,gB,kB,NB,TB,IB,CB,RB,DB,OB,LB,zB,BB,VB,UB,HB,KB,YB,QB,tV,sV,oV,uV,pV,fV,yV,bV,wV,NV,SV,EV,YL,$V,UP,AV,RV,FV,ez,MV,zV,PV,VV,UV,HV,KV,YV,QV,eW,nW,sW,aW,oW,uW,cW,pW,hW,dW,mW,bW,wW,CW,hz,_W,DW,OW,LW,IP,PW,WW,UW,KW,YW,rz,XW,ZW,QW,JW,tU,$P,NW,rU,aU,iU,fz,cU,hU,mU,yU,wU,kU,TU,IU,CU,_U,DU,OU,LU,PU,VU,UU,wP,$W,HU,jU,KU,qU,YU,XU,ZU,QU,tG,rG,oG,iG,lG,cG,pG,hG,dG,IW,kz,mG,yG,bG,vG,IG,$G,Tz,CG,AG,RG,VW];for(const e of DG)Is(e);const FG={"tfjs-core":Cu,"tfjs-backend-cpu":hA,"tfjs-backend-webgl":VL,"tfjs-data":zE,"tfjs-layers":Aw,"tfjs-converter":_I,tfjs:"4.22.0"}},5119:(e,t,n)=>{function r(e){let t=e.length,n=0;for(;t>0;)n=Math.random()*t|0,t--,i(e,t,n)}function s(e,t){if(e.length!==t.length)throw new Error(`Array sizes must match to be shuffled together First array length was ${e.length}Second array length was ${t.length}`);let n=e.length,r=0;for(;n>0;)r=Math.random()*n|0,n--,i(e,n,r),i(t,n,r)}function a(e,t,n){return Math.max(e,Math.min(t,n))}function o(e){return e%2==0?e:e+1}function i(e,t,n){const r=e[t];e[t]=e[n],e[n]=r}function l(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}function u(e,t){const n=Math.random();return t*n+(1-n)*e}function c(e,t){let n=0;for(let r=0;r<e.length;r++){const s=Number(e[r])-Number(t[r]);n+=s*s}return n}function p(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function h(e,t,n=""){p(y(e,t),(()=>n+` Shapes ${e} and ${t} must match`))}function d(e){p(null!=e,(()=>"The input to the tensor constructor must be a non-null value."))}function f(e,t=[],n=!1){if(null==t&&(t=[]),Array.isArray(e)||R(e)&&!n)for(let r=0;r<e.length;++r)f(e[r],t,n);else t.push(e);return t}function m(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function g(e){return 0===e.length}function y(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function b(e){return e%1==0}function x(e){if(null!=Math.tanh)return Math.tanh(e);if(e===1/0)return 1;if(e===-1/0)return-1;{const t=Math.exp(2*e);return(t-1)/(t+1)}}function w(e){const t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function v(e){const t=new Uint32Array(e);for(let n=0;n<e;++n)t[n]=n;return r(t),t}function k(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function N(e,t=e=>0,n,r=setTimeout){return new Promise(((s,a)=>{let o=0;const i=()=>{if(e())return void s();o++;const l=t(o);null!=n&&o>=n?a():r(i,l)};i()}))}function T(e,t){let n=1,r=-1;for(let t=0;t<e.length;++t)if(e[t]>=0)n*=e[t];else if(-1===e[t]){if(-1!==r)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${r} and dim ${t}`);r=t}else if(e[t]<0)throw Error(`Shapes can not be < 0. Found ${e[t]} at dim ${t}`);if(-1===r){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);const s=e.slice();return s[r]=t/n,s}function S(e,t){const n=t.length;return p((e=null==e?t.map(((e,t)=>t)):[].concat(e)).every((e=>e>=-n&&e<n)),(()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${e}`)),p(e.every((e=>b(e))),(()=>`All values in axis param must be integers but got axis ${e}`)),e.map((e=>e<0?n+e:e))}function I(e,t){const n=[],r=[],s=null!=t&&Array.isArray(t)&&0===t.length,a=null==t||s?null:S(t,e).sort();let o=0;for(let t=0;t<e.length;++t){if(null!=a){if(a[o]===t&&1!==e[t])throw new Error(`Can't squeeze axis ${t} since its dim '${e[t]}' is not 1`);(null==a[o]||a[o]>t)&&1===e[t]&&(n.push(e[t]),r.push(t)),a[o]<=t&&o++}1!==e[t]&&(n.push(e[t]),r.push(t))}return{newShape:n,keptDims:r}}function E(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else{if("bool"!==e)throw new Error(`Unknown data type ${e}`);n=new Uint8Array(t)}return n}function $(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error(`Unknown data type ${e}`);n=new Array(t)}return n}function C(e,t){for(let n=0;n<e.length;n++){const r=e[n];if(isNaN(r)||!isFinite(r))throw Error(`A tensor of type ${t} being uploaded contains ${r}.`)}}function A(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}function _(e,t){return!("complex64"===t||"float32"===t&&"complex64"!==e||"int32"===t&&"float32"!==e&&"complex64"!==e||"bool"===t&&"bool"===e)}function R(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray}function D(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error(`Unknown dtype ${e}`)}function F(e){if(null==e)return 0;let t=0;return e.forEach((e=>t+=e.length)),t}function O(e){return"string"==typeof e||e instanceof String}function M(e){return"boolean"==typeof e}function L(e){return"number"==typeof e}function z(e){return Array.isArray(e)?z(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray?"int32":L(e)?"float32":O(e)?"string":M(e)?"bool":"float32"}function P(e){return!!(e&&e.constructor&&e.call&&e.apply)}function B(e,t){for(let n=t;n<e;++n)if(e%n==0)return n;return e}function V(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let r=t-3;r>=0;--r)n[r]=n[r+1]*e[r+1];return n}function W(e,t,n,r=!1){const s=new Array;if(1===t.length){const a=t[0]*(r?2:1);for(let t=0;t<a;t++)s[t]=n[e+t]}else{const a=t[0],o=t.slice(1),i=o.reduce(((e,t)=>e*t))*(r?2:1);for(let t=0;t<a;t++)s[t]=W(e+t*i,o,n,r)}return s}function U(e,t,n=!1){if(0===e.length)return t[0];const r=e.reduce(((e,t)=>e*t))*(n?2:1);if(0===r)return[];if(r!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}${n?" for a complex tensor":""}.`);return W(0,e,t,n)}function G(e,t){const n=H(e,t);for(let e=0;e<n.length;e++)n[e]=1;return n}function H(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error(`Unknown data type ${t}`)}function j(e,t){const n=e.reduce(((e,t)=>e*t),1);if(null==t||"float32"===t)return U(e,new Float32Array(n));if("int32"===t)return U(e,new Int32Array(n));if("bool"===t)return U(e,new Uint8Array(n));throw new Error(`Unknown data type ${t}`)}function K(e){e.forEach((t=>{p(Number.isInteger(t)&&t>=0,(()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`))}))}function q(e,t,n){if(0===t)return 0;if(1===t)return e[0];let r=e[e.length-1];for(let t=0;t<e.length-1;++t)r+=n[t]*e[t];return r}function Y(e,t,n){if(0===t)return[];if(1===t)return[e];const r=new Array(t);for(let t=0;t<r.length-1;++t)r[t]=Math.floor(e/n[t]),e-=r[t]*n[t];return r[r.length-1]=e,r}function X(e){return e&&e.then&&"function"==typeof e.then}n.d(t,{Ab:()=>$,BE:()=>_,Bq:()=>f,E6:()=>b,Et:()=>L,FZ:()=>G,HO:()=>d,Kg:()=>O,Lm:()=>M,O3:()=>h,P8:()=>v,SA:()=>K,SL:()=>F,Sf:()=>g,Tn:()=>P,Ty:()=>H,Ur:()=>V,X$:()=>z,XT:()=>T,Y6:()=>S,Ze:()=>m,_k:()=>Y,_q:()=>N,a0:()=>s,av:()=>k,c7:()=>j,ce:()=>E,cz:()=>l,eV:()=>o,gS:()=>w,gx:()=>I,iu:()=>R,jv:()=>D,k4:()=>r,lK:()=>B,nd:()=>C,oO:()=>c,qE:()=>a,r1:()=>y,sX:()=>q,so:()=>u,vA:()=>p,wg:()=>i,xn:()=>A,yL:()=>X,ym:()=>x,yw:()=>U})},5295:(e,t,n)=>{function r(e,t=!1){console.log(e.toString(t))}n.d(t,{y:()=>r})},5388:(e,t,n)=>{n.d(t,{T2:()=>S,Ye:()=>T});class r{refCount(e){return s("refCount")}incRef(e){return s("incRef")}timerAvailable(){return!0}time(e){return s("time")}read(e){return s("read")}readSync(e){return s("readSync")}readToGPU(e,t){return s("readToGPU")}numDataIds(){return s("numDataIds")}disposeData(e,t){return s("disposeData")}write(e,t,n){return s("write")}move(e,t,n,r,a){return s("move")}memory(){return s("memory")}floatPrecision(){return s("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return s("dispose")}}function s(e){throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}var a=n(6574),o=n(1743),i=n(5441);const l=(0,o.m)("kernelRegistry",(()=>new Map)),u=(0,o.m)("gradRegistry",(()=>new Map));function c(e,t){const n=function(e,t){return`${t}_${e}`}(e,t);return l.get(n)}function p(e){return u.get(e)}function h(e){const t=l.entries(),n=[];for(;;){const{done:r,value:s}=t.next();if(r)break;const[a,o]=s,[i]=a.split("_");i===e&&n.push(o)}return n}function d(...e){(0,a._K)().getBool("IS_TEST")||(0,a._K)().getBool("PROD")||console.warn(...e)}var f=n(3879),m=n(5119);class g{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new b)}profileKernel(e,t,n){let r;const s=()=>{r=n()};let o;const i=f.now();if(this.backendTimer.timerAvailable())o=this.backendTimer.time(s);else{s();for(const e of r)e.dataSync();o=Promise.resolve({kernelMs:f.now()-i})}if((0,a._K)().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let t=0;t<r.length;t++){const n=r[t];n.data().then((t=>{y(t,n.dtype,e)}))}return{kernelName:e,outputs:r,inputs:t,timeMs:o.then((e=>e.kernelMs)),extraInfo:o.then((e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():""))}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:r,inputs:s,extraInfo:a}=e;n.forEach((e=>{Promise.all([e.data(),r,a]).then((n=>{this.logger.logKernelProfile(t,e,n[0],n[1],s,n[2])}))}))}}function y(e,t,n){if("float32"!==t)return!1;for(let t=0;t<e.length;t++){const r=e[t];if(isNaN(r)||!isFinite(r))return console.warn(`Found ${r} in the result of '${n}'`),!0}return!1}class b{logKernelProfile(e,t,n,r,s,a){const o="number"==typeof r?m.av(`${r}ms`,9):r.error,i=m.av(e,25),l=t.rank,u=t.size,c=m.av(t.shape.toString(),14);let p="";for(const e in s){const n=s[e];if(null!=n){const r=n.shape||t.shape,s=r.length;p+=`${e}: ${s}D ${s>0?r:""} `}}console.log(`%c${i}\t%c${o}\t%c${l}D ${c}\t%c${u}\t%c${p}\t%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}var x=n(259),w=n(4051);function v(e){return null!=e.kernelName}class k{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map((e=>e.name))))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class N{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new k}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then((()=>{}));if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(d(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new g(this.backendInstance),!0}setupRegisteredKernels(){h(this.backendName).forEach((e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)}))}disposeRegisteredKernels(e){h(e).forEach((t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])}))}initializeBackend(e){const t=this.registryFactory[e];if(null==t)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const n=t.factory();if(!n||n instanceof r||"function"!=typeof n.then)return this.registry[e]=n,{success:!0,asyncInit:!1};{const t=++this.pendingBackendInitId,r=n.then((n=>!(t<this.pendingBackendInitId||(this.registry[e]=n,this.pendingBackendInit=null,0)))).catch((n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,d(`Initialization of backend ${e} failed`),d(n.stack||n.message)),!1)));return this.pendingBackendInit=r,{success:r,asyncInit:!0}}}catch(t){return d(`Initialization of backend ${e} failed`),d(t.stack||t.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort(((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority))}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:r,asyncInit:s}=this.initializeBackend(n);if(s||r)return{name:n,asyncInit:s}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),r=n.backend,s=this.readSync(t),a=r.refCount(t);r.disposeData(t,!0),n.backend=e,e.move(t,s,n.shape,n.dtype,a),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,r=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=e}return this.scopedRun((()=>this.startScope(r)),(()=>this.endScope(n)),(()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n)))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(e){throw t(),e}}nextTensorId(){return N.nextTensorId++}nextVariableId(){return N.nextVariableId++}clone(e){const t=S.runKernel(i.lzr,{x:e}),n={x:e};return this.addTapeNode(this.state.activeScope.name,n,[t],(e=>({x:()=>{const t={x:e};return S.runKernel(i.KXH,t,{dtype:"float32"})}})),[],{}),t}runKernel(e,t,n){if(null==this.backendName&&this.backend,null==c(e,this.backendName))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:n})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const r=this.backend.numDataIds();let s=0;n.forEach((e=>{s+="complex64"===e.dtype?3:1}));const a=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],o=r-t-s-a;if(o>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${o} data ids) after running '${e}'`)}runKernelFunc(e){let t,n=[];const r=this.isTapeOn(),s=this.state.numBytes,a=this.state.numTensors;let o,i;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;const l=v(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(v(e)){const{kernelName:t,inputs:s,attrs:a}=e;null==this.backendName&&this.backend;const l=c(t,this.backendName);m.vA(null!=l,(()=>`Cannot find registered kernel '${t}' for backend '${this.backendName}'`)),o=()=>{const e=this.backend.numDataIds();i=l.kernelFunc({inputs:s,attrs:a,backend:this.backend});const o=Array.isArray(i)?i:[i];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(t,e,o);const u=o.map((e=>null!=e.rank?e:this.makeTensorFromTensorInfo(e)));if(r){const e=this.getTensorsForGradient(t,s,u);n=this.saveTensorsForBackwardMode(e)}return u}}else{const{forwardFunc:t}=e,s=e=>{r&&(n=e.map((e=>this.keep(this.clone(e)))))};o=()=>{const e=this.backend.numDataIds();i=this.tidy((()=>t(this.backend,s)));const n=Array.isArray(i)?i:[i];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(l,e,n),n}}const{inputs:u,attrs:p}=e,h=v(e)?null:e.backwardsFunc;let d;return this.scopedRun((()=>this.state.kernelDepth++),(()=>this.state.kernelDepth--),(()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(d=this.profiler.profileKernel(l,u,(()=>o())),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(d),t=d.outputs):t=o()})),r&&this.addTapeNode(l,u,t,h,n,p),this.state.profiling&&this.state.activeProfile.kernels.push({name:l,bytesAdded:this.state.numBytes-s,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-a,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(u).map((e=>null!=u[e]?u[e].shape:null)),outputShapes:t.map((e=>e.shape)),kernelTimeMs:d.timeMs,extraInfo:d.extraInfo}),Array.isArray(i)?t:t[0]}saveTensorsForBackwardMode(e){const t=e.map((e=>this.keep(this.clone(e))));return t}getTensorsForGradient(e,t,n){const r=p(e);if(null!=r){const e=r.inputsToSave||[],s=r.outputsToSave||[];let a;r.saveAllInputs?(m.vA(Array.isArray(t),(()=>"saveAllInputs is true, expected inputs to be an array.")),a=Object.keys(t).map((e=>t[e]))):a=e.map((e=>t[e]));const o=n.filter(((e,t)=>s[t]));return a.concat(o)}return[]}makeTensor(e,t,n,r){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",r=r||this.backend;let s=e;"string"===n&&m.Kg(e[0])&&(s=e.map((e=>f.encodeString(e))));const a=r.write(s,t,n),o=new x.qY(t,n,a,this.nextTensorId());if(this.trackTensor(o,r),"string"===n){const e=this.state.tensorInfo.get(a),t=(0,m.SL)(s);this.state.numBytes+=t-e.bytes,e.bytes=t}return o}makeTensorFromDataId(e,t,n,r){const s={dataId:e,shape:t,dtype:n=n||"float32"};return this.makeTensorFromTensorInfo(s,r)}makeTensorFromTensorInfo(e,t){const{dataId:n,shape:r,dtype:s}=e,a=new x.qY(r,s,n,this.nextTensorId());return this.trackTensor(a,t),a}makeVariable(e,t=!0,n,r){n=n||this.nextVariableId().toString(),null!=r&&r!==e.dtype&&(e=e.cast(r));const s=new x.rT(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[s.name])throw new Error(`Variable with name ${s.name} was already registered`);return this.state.registeredVariables[s.name]=s,this.incRef(s,this.backend),s}trackTensor(e,t){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*m.jv(e.dtype)),this.state.numBytes+=n,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n})),e instanceof x.rT||this.track(e)}incRef(e,t){this.trackTensor(e,t),this.backend.incRef(e.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const t=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){const t=e.size*m.jv(e.dtype);this.state.numBytes-=t}t.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,t.backend)}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map((e=>e.totalBytesSnapshot))),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const e of this.state.activeProfile.kernels)e.kernelTimeMs=await e.kernelTimeMs,e.extraInfo=await e.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,r,s,a){const o={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:s},i=p(e);null!=i&&(r=i.gradFunc),null!=r&&(o.gradient=e=>(e=e.map(((e,t)=>{if(null==e){const e=n[t],r=m.Ty(e.size,e.dtype);return this.makeTensor(r,e.shape,e.dtype)}return e})),r(e.length>1?e:e[0],s,a))),this.state.activeTape.push(o)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=(0,w.NB)(e),n=new Set(t.map((e=>e.id)));for(let e=0;e<this.state.activeScope.track.length;e++){const t=this.state.activeScope.track[e];t.kept||n.has(t.id)||t.dispose()}const r=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach((e=>{e.kept||e.scopeId!==r.id||this.track(e)}))}gradients(e,t,n,r=!1){if(m.vA(t.length>0,(()=>"gradients() received an empty list of xs.")),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const s=this.scopedRun((()=>this.startTape()),(()=>this.endTape()),(()=>this.tidy("forward",e)));m.vA(s instanceof x.qY,(()=>"The result y returned by f() must be a tensor."));const a=function(e,t,n){const r={},s={};for(let e=0;e<t.length;e++)r[t[e].id]=!0;for(let n=0;n<e.length;n++){const a=e[n],o=a.inputs;for(const e in o){const n=o[e];let i=!1;for(let e=0;e<t.length;e++)if(r[n.id]){a.outputs.forEach((e=>r[e.id]=!0)),i=!0,s[a.id]=!0;break}if(i)break}}const a={};a[n.id]=!0;const o={};for(let t=e.length-1;t>=0;t--){const n=e[t],r=n.inputs;for(let e=0;e<n.outputs.length;e++)if(a[n.outputs[e].id]){for(const e in r)a[r[e].id]=!0,o[n.id]=!0;break}}const i=[];for(let t=0;t<e.length;t++){const n=e[t];if(s[n.id]&&o[n.id]){const e={};for(const t in n.inputs){const s=n.inputs[t];r[s.id]&&(e[t]=s)}const t=Object.assign({},n);t.inputs=e,t.outputs=n.outputs,i.push(t)}}return i}(this.state.activeTape,t,s);if(!r&&0===a.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(()=>{const e={};e[s.id]=null==n?function(e){const t=(0,m.FZ)((0,m.Ze)(e),"float32");return S.makeTensor(t,e,"float32")}(s.shape):n,function(e,t,n,r){for(let s=t.length-1;s>=0;s--){const a=t[s],o=[];if(a.outputs.forEach((t=>{const n=e[t.id];null!=n?o.push(n):o.push(null)})),null==a.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${a.kernelName}.`);const i=a.gradient(o);for(const t in a.inputs){if(!(t in i))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(i)}.`);const s=n((()=>i[t]()));if("float32"!==s.dtype)throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${s.dtype}'`);const o=a.inputs[t];if(!m.r1(s.shape,o.shape))throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input '${t}' has shape '${s.shape}', which does not match the shape of the input '${o.shape}'`);if(null==e[o.id])e[o.id]=s;else{const t=e[o.id];e[o.id]=r(t,s),t.dispose()}}}}(e,a,(e=>this.tidy(e)),I);const r=t.map((t=>e[t.id]));return 0===this.state.gradientDepth&&(this.state.activeTape.forEach((e=>{for(const t of e.saved)t.dispose()})),this.state.activeTape=null),{value:s,grads:r}}))}customGrad(e){return m.vA(m.Tn(e),(()=>"The f passed in customGrad(f) must be a function.")),(...t)=>{let n;m.vA(t.every((e=>e instanceof x.qY)),(()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors"));const r={};return t.forEach(((e,t)=>{r[t]=e})),this.runKernelFunc({forwardFunc:(r,s)=>(n=e(...t,s),m.vA(n.value instanceof x.qY,(()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor")),m.vA(m.Tn(n.gradFunc),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.")),n.value),backwardsFunc:(e,r)=>{const s=n.gradFunc(e,r),a=Array.isArray(s)?s:[s];m.vA(a.length===t.length,(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).")),m.vA(a.every((e=>e instanceof x.qY)),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."));const o={};return a.forEach(((e,t)=>{o[t]=()=>e})),o},inputs:r})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}readToGPU(e,t){return this.state.tensorInfo.get(e).backend.readToGPU(e,t)}async time(e){const t=(0,f.now)(),n=await this.backend.time(e);return n.wallMs=(0,f.now)()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new k;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function T(){const e=(0,o.L)();if(null==e._tfengine){const t=new a.OH(e);e._tfengine=new N(t)}return(0,a.tj)(e._tfengine.ENV),(0,x.qP)((()=>e._tfengine)),e._tfengine}N.nextTensorId=0,N.nextVariableId=0;const S=T();function I(e,t){const n={a:e,b:t};return S.runKernel(i.OMN,n)}},5441:(e,t,n)=>{n.d(t,{$dB:()=>$,$jE:()=>Dt,$zE:()=>E,A1h:()=>R,A8B:()=>vt,BK4:()=>jt,BLA:()=>Oe,BRl:()=>X,Blb:()=>kt,BoJ:()=>St,BxF:()=>ne,C8s:()=>Tt,Cg$:()=>ve,CwD:()=>be,D7i:()=>ot,Ddj:()=>Ct,Dr:()=>Kt,DvZ:()=>Et,E3$:()=>fe,EkD:()=>i,ElG:()=>se,EwU:()=>Vt,FAs:()=>Lt,FSt:()=>u,Fin:()=>bt,Ik2:()=>w,J3C:()=>mt,JiE:()=>dt,Jp_:()=>c,KXH:()=>N,L6G:()=>It,LDN:()=>Ee,LG0:()=>De,LRy:()=>Je,LWX:()=>Ue,LXA:()=>Te,MRQ:()=>z,Mn0:()=>F,MnK:()=>O,N4F:()=>v,Ncv:()=>qe,O4G:()=>ie,OAQ:()=>pe,ODT:()=>je,OMN:()=>o,ORI:()=>G,PH8:()=>a,P_L:()=>at,Pah:()=>q,PbM:()=>Ft,Q6t:()=>Qe,QDP:()=>T,QKF:()=>h,Qgm:()=>K,R23:()=>nt,RUm:()=>ke,SDM:()=>Be,SQl:()=>te,T7M:()=>Yt,TBb:()=>zt,TL8:()=>Ae,TMz:()=>B,TOR:()=>lt,TyE:()=>f,UcO:()=>At,VAI:()=>Ie,Vvy:()=>s,WT3:()=>Me,WuN:()=>wt,X$8:()=>W,X0$:()=>ge,XhZ:()=>le,YAb:()=>_t,YVe:()=>gt,ZgB:()=>re,Zl4:()=>Ve,_s9:()=>Y,aAr:()=>qt,cS:()=>b,dFH:()=>xt,dLy:()=>Pt,dXR:()=>Wt,dv8:()=>he,e0f:()=>We,epO:()=>d,fUj:()=>tt,g5A:()=>_e,gC7:()=>D,gIW:()=>de,hVg:()=>it,hgw:()=>st,ho8:()=>y,hql:()=>ft,huO:()=>et,i5R:()=>ae,iPs:()=>me,iW0:()=>Rt,iuW:()=>Mt,jAQ:()=>x,jM4:()=>Se,jOE:()=>rt,jfg:()=>_,jgd:()=>$t,jj_:()=>M,jxD:()=>H,kdj:()=>Ye,l0G:()=>ze,l6P:()=>pt,lLS:()=>ue,lNG:()=>Re,ljI:()=>r,lxb:()=>g,lzr:()=>ce,mH5:()=>Ze,mIA:()=>ye,mM$:()=>He,mnI:()=>xe,mxL:()=>oe,nVu:()=>U,nY8:()=>L,nZd:()=>Ne,oFs:()=>Ot,oJ2:()=>Xe,ox3:()=>Z,p2J:()=>C,pJc:()=>ut,pPe:()=>Ut,p_m:()=>p,pnw:()=>Ht,pr3:()=>I,pyJ:()=>Ke,rFG:()=>Nt,rFm:()=>A,rGP:()=>ee,sDr:()=>j,t3d:()=>$e,tG8:()=>we,tGH:()=>V,u$b:()=>ht,u8Z:()=>l,uWl:()=>ct,urI:()=>Ge,vI1:()=>yt,vaV:()=>S,vj7:()=>k,wNW:()=>P,wx0:()=>Bt,x7F:()=>Fe,xJ3:()=>Gt,xu7:()=>Le,ySp:()=>Ce,ybN:()=>Q,ybj:()=>J,ylV:()=>Pe,zP9:()=>m});const r="Abs",s="Acos",a="Acosh",o="Add",i="AddN",l="All",u="Any",c="ArgMax",p="ArgMin",h="Asin",d="Asinh",f="Atan",m="Atanh",g="Atan2",y="AvgPool",b="AvgPool3D",x="BatchMatMul",w="BatchToSpaceND",v="Bincount",k="BroadcastArgs",N="Cast",T="Ceil",S="ClipByValue",I="Complex",E="ComplexAbs",$="Concat",C="Conv2D",A="Conv2DBackpropFilter",_="Conv2DBackpropInput",R="Conv3D",D="Conv3DBackpropInputV2",F="Cos",O="Cosh",M="Cumprod",L="Cumsum",z="CropAndResize",P="DenseBincount",B="DepthToSpace",V="DepthwiseConv2dNative",W="DepthwiseConv2dNativeBackpropFilter",U="DepthwiseConv2dNativeBackpropInput",G="Diag",H="Dilation2D",j="RealDiv",K="Einsum",q="Elu",Y="Erf",X="Equal",Z="Exp",Q="ExpandDims",J="Expm1",ee="FFT",te="Fill",ne="FlipLeftRight",re="Floor",se="FloorDiv",ae="FusedBatchNorm",oe="GatherV2",ie="GatherNd",le="Greater",ue="GreaterEqual",ce="Identity",pe="IFFT",he="Imag",de="IsFinite",fe="IsInf",me="IsNan",ge="LeakyRelu",ye="Less",be="LessEqual",xe="LinSpace",we="Log",ve="Log1p",ke="LogicalAnd",Ne="LogicalNot",Te="LogicalOr",Se="LRN",Ie="Max",Ee="Maximum",$e="MaxPool",Ce="MaxPool3D",Ae="MaxPoolWithArgmax",_e="Mean",Re="Min",De="Minimum",Fe="MirrorPad",Oe="Mod",Me="Multinomial",Le="Multiply",ze="Neg",Pe="NotEqual",Be="NonMaxSuppressionV3",Ve="NonMaxSuppressionV4",We="NonMaxSuppressionV5",Ue="OnesLike",Ge="OneHot",He="Pack",je="PadV2",Ke="Pow",qe="Prelu",Ye="Prod",Xe="RaggedGather",Ze="RaggedTensorToTensor",Qe="Range",Je="Real",et="Reciprocal",tt="Relu",nt="Reshape",rt="ResizeNearestNeighbor",st="ResizeBilinear",at="Relu6",ot="Reverse",it="Round",lt="Rsqrt",ut="ScatterNd",ct="SearchSorted",pt="Select",ht="Selu",dt="Slice",ft="Sin",mt="Sinh",gt="Sign",yt="Sigmoid",bt="Softplus",xt="Sqrt",wt="Sum",vt="SpaceToBatchND",kt="SplitV",Nt="Softmax",Tt="SparseFillEmptyRows",St="SparseReshape",It="SparseSegmentMean",Et="SparseSegmentSum",$t="SparseToDense",Ct="SquaredDifference",At="StridedSlice",_t="StringNGrams",Rt="StringSplit",Dt="StringToHashBucketFast",Ft="Sub",Ot="Tan",Mt="Tanh",Lt="Tile",zt="TopK",Pt="Transform",Bt="Transpose",Vt="Unique",Wt="Unpack",Ut="UnsortedSegmentSum",Gt="ZerosLike",Ht="Step",jt="RotateWithOffset",Kt="_FusedMatMul",qt="FusedConv2D",Yt="FusedDepthwiseConv2D"},5702:(e,t,n)=>{n.d(t,{d:()=>a});var r=n(5119),s=n(9171);function a(e,t){if(((0,r.iu)(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&(0,r.iu)(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return(0,s.Q)(e,[],[],t)}},5718:(e,t,n)=>{n.d(t,{qYS:()=>pe.qY,o8B:()=>Fe.o8B,xWs:()=>Fe.xWs,_K2:()=>a._K,io:()=>r,aCs:()=>Oe.aC,tQQ:()=>Fe.tQQ,d_2:()=>Fe.d_2,dik:()=>Fe.dik,t$z:()=>Fe.t$z,OEK:()=>Fe.OEK,tGX:()=>Fe.tGX,KtR:()=>Fe.KtR,DZQ:()=>Oe.DZ,K$i:()=>Fe.K$i,ZSL:()=>De});var r={};n.r(r),n.d(r,{browserFiles:()=>ge,browserHTTPRequest:()=>Se,concatenateArrayBuffers:()=>y,copyModel:()=>re,decodeWeights:()=>d,encodeWeights:()=>h,fromMemory:()=>Ce,fromMemorySync:()=>Ae,getLoadHandlers:()=>C,getModelArtifactsForJSON:()=>v,getModelArtifactsForJSONSync:()=>w,getModelArtifactsInfoForJSON:()=>k,getSaveHandlers:()=>$,getWeightSpecs:()=>N,http:()=>Te,isHTTPScheme:()=>ke,listModels:()=>te,loadWeights:()=>xe,moveModel:()=>se,registerLoadRouter:()=>E,registerSaveRouter:()=>I,removeModel:()=>ne,weightsLoaderFactory:()=>we,withSaveHandler:()=>_e,withSaveHandlerSync:()=>Re});var s=n(5388),a=n(6574);const o=(0,a._K)();o.registerFlag("DEBUG",(()=>!1),(e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),o.registerFlag("IS_BROWSER",(()=>"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope)),o.registerFlag("IS_NODE",(()=>"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node)),o.registerFlag("IS_CHROME",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor))),o.registerFlag("PROD",(()=>!1)),o.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(()=>o.getBool("DEBUG"))),o.registerFlag("DEPRECATION_WARNINGS_ENABLED",(()=>!0)),o.registerFlag("IS_TEST",(()=>!1)),o.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",(()=>!0)),o.registerFlag("WRAP_TO_IMAGEBITMAP",(()=>!1)),o.registerFlag("ENGINE_COMPILE_ONLY",(()=>!1)),o.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU",(()=>!1)),o.registerFlag("USE_SETTIMEOUTCUSTOM",(()=>!1));var i=n(7148),l=n(4027),u=n(5119);const c={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8},p=4;async function h(e,t){const n=[],r=[],s=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);for(let a=0;a<s.length;++a){const o=s[a],i=Array.isArray(e)?e[a].tensor:e[o];if("float32"!==i.dtype&&"int32"!==i.dtype&&"bool"!==i.dtype&&"string"!==i.dtype&&"complex64"!==i.dtype)throw new Error(`Unsupported dtype in weight '${o}': ${i.dtype}`);const l={name:o,shape:i.shape,dtype:i.dtype};if("string"===i.dtype){const e=new Promise((async e=>{const t=await i.bytes(),n=t.reduce(((e,t)=>e+t.length),0)+p*t.length,r=new Uint8Array(n);let s=0;for(let e=0;e<t.length;e++){const n=t[e],a=new Uint8Array(new Uint32Array([n.length]).buffer);r.set(a,s),s+=p,r.set(n,s),s+=n.length}e(r)}));r.push(e)}else r.push(i.data());null!=t&&(l.group=t),n.push(l)}return{data:f(await Promise.all(r)),specs:n}}function d(e,t){const n={};let r,s=0;for(const a of t){const t=a.name,o=a.dtype,h=a.shape,d=(0,u.Ze)(h);let f;if("quantization"in a){const n=a.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error(`Weight ${a.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==n.dtype)throw new Error(`Weight ${a.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==o)throw new Error(`Weight ${a.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${o}.`)}const i=c[n.dtype],l=e.slice(s,s+d*i),u="uint8"===n.dtype?new Uint8Array(l):new Uint16Array(l);if("float32"===o)if("uint8"===n.dtype||"uint16"===n.dtype){f=new Float32Array(u.length);for(let e=0;e<u.length;e++){const t=u[e];f[e]=t*n.scale+n.min}}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===r&&(r=T()),f=r(u)}else{if("int32"!==o)throw new Error(`Unsupported dtype in weight '${t}': ${o}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);f=new Int32Array(u.length);for(let e=0;e<u.length;e++){const t=u[e];f[e]=Math.round(t*n.scale+n.min)}}s+=d*i}else if("string"===o){const t=(0,u.Ze)(a.shape);f=[];for(let n=0;n<t;n++){const t=new Uint32Array(e.slice(s,s+p))[0];s+=p;const n=new Uint8Array(e.slice(s,s+t));f.push(n),s+=t}}else{const r=c[o],a=e.slice(s,s+d*r);if("float32"===o)f=new Float32Array(a);else if("int32"===o)f=new Int32Array(a);else if("bool"===o)f=new Uint8Array(a);else{if("complex64"!==o)throw new Error(`Unsupported dtype in weight '${t}': ${o}`);{f=new Float32Array(a);const e=new Float32Array(f.length/2),r=new Float32Array(f.length/2);for(let t=0;t<e.length;t++)e[t]=f[2*t],r[t]=f[2*t+1];const s=(0,l.O)(e,h,"float32"),o=(0,l.O)(r,h,"float32");n[t]=(0,i.f)(s,o),s.dispose(),o.dispose()}}s+=d*r}"complex64"!==o&&(n[t]=(0,l.O)(f,h,o))}return n}function f(e){if(null===e)throw new Error(`Invalid input value: ${JSON.stringify(e)}`);let t=0;const n=[];e.forEach((e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${e.constructor.name}`)}));const r=new Uint8Array(t);let s=0;return n.forEach((e=>{r.set(new Uint8Array(e.buffer),s),s+=e.byteLength})),r.buffer}const m="undefined"!=typeof Buffer&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function g(e){return m?Buffer.byteLength(e):new Blob([e]).size}function y(e){if(1===e.length)return e[0];let t=0;e.forEach((e=>{t+=e.byteLength}));const n=new Uint8Array(t);let r=0;return e.forEach((e=>{n.set(new Uint8Array(e),r),r+=e.byteLength})),n.buffer}function b(e){for(e=e.trim();e.endsWith("/");)e=e.slice(0,e.length-1);const t=e.split("/");return t[t.length-1]}function x(e,t){const n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:t};return null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer),null!=e.trainingConfig&&(n.trainingConfig=e.trainingConfig),n}function w(e,t,n){const r={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};if(null!=e.trainingConfig&&(r.trainingConfig=e.trainingConfig),null!=e.weightsManifest){if(!t)throw new Error("modelJSON has weightsManifest but weightSpecs is null");if(!n)throw new Error("modelJSON has weightsManifest but weightData is null");r.weightSpecs=t,r.weightData=n}return null!=e.signature&&(r.signature=e.signature),null!=e.userDefinedMetadata&&(r.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(r.modelInitializer=e.modelInitializer),r}async function v(e,t){let n,r;return null!=e.weightsManifest&&([n,r]=await t(e.weightsManifest)),w(e,n,r)}function k(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:g(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:g(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:e.weightData.byteLength}}function N(e){const t=[];for(const n of e)t.push(...n.weights);return t}function T(){const e=function(){const e=e=>{let t=e<<13,n=0;for(;!(8388608&t);)n-=8388608,t<<=1;return t&=-8388609,n+=947912704,t|n},t=new Uint32Array(2048);t[0]=0;for(let n=1;n<1024;n++)t[n]=e(n);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}(),t=function(){const e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=2147483648+(t-32<<23);return e}(),n=function(){const e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return r=>{const s=new ArrayBuffer(4*r.length),a=new Uint32Array(s);for(let s=0;s<r.length;s++){const o=r[s],i=e[n[o>>10]+(1023&o)]+t[o>>10];a[s]=i}return new Float32Array(s)}}class S{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==S.instance&&(S.instance=new S),S.instance}static registerSaveRouter(e){S.getInstance().saveRouters.push(e)}static registerLoadRouter(e){S.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return S.getHandlers(e,"save")}static getLoadHandlers(e,t){return S.getHandlers(e,"load",t)}static getHandlers(e,t,n){const r=[];return("load"===t?S.getInstance().loadRouters:S.getInstance().saveRouters).forEach((t=>{const s=t(e,n);null!==s&&r.push(s)})),r}}const I=e=>S.registerSaveRouter(e),E=e=>S.registerLoadRouter(e),$=e=>S.getSaveHandlers(e),C=(e,t)=>S.getLoadHandlers(e,t),A="tensorflowjs",_="models_store",R="model_info_store";function D(){if(!(0,a._K)().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function F(e){const t=e.result;t.createObjectStore(_,{keyPath:"modelPath"}),t.createObjectStore(R,{keyPath:"modelPath"})}class O{constructor(e){if(this.indexedDB=D(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise(((e,n)=>{const r=this.indexedDB.open(A,1);r.onupgradeneeded=()=>F(r),r.onsuccess=()=>{const s=r.result;if(null==t){const t=s.transaction(_,"readonly"),r=t.objectStore(_).get(this.modelPath);r.onsuccess=()=>{if(null==r.result)return s.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(r.result.modelArtifacts)},r.onerror=e=>(s.close(),n(r.error)),t.oncomplete=()=>s.close()}else{const r=k(t),a=s.transaction(R,"readwrite");let o=a.objectStore(R);const i=o.put({modelPath:this.modelPath,modelArtifactsInfo:r});let l;i.onsuccess=()=>{l=s.transaction(_,"readwrite");const i=l.objectStore(_).put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:r});i.onsuccess=()=>e({modelArtifactsInfo:r}),i.onerror=e=>{o=a.objectStore(R);const t=o.delete(this.modelPath);t.onsuccess=()=>(s.close(),n(i.error)),t.onerror=e=>(s.close(),n(i.error))}},i.onerror=e=>(s.close(),n(i.error)),a.oncomplete=()=>{null==l?s.close():l.oncomplete=()=>s.close()}}},r.onerror=e=>n(r.error)}))}}O.URL_SCHEME="indexeddb://";const M=e=>{return(0,a._K)().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(O.URL_SCHEME)?(t=e.slice(O.URL_SCHEME.length),new O(t)):null;var t};S.registerSaveRouter(M),S.registerLoadRouter(M);class L{constructor(){this.indexedDB=D()}async listModels(){return new Promise(((e,t)=>{const n=this.indexedDB.open(A,1);n.onupgradeneeded=()=>F(n),n.onsuccess=()=>{const r=n.result,s=r.transaction(R,"readonly"),a=s.objectStore(R).getAll();a.onsuccess=()=>{const t={};for(const e of a.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},a.onerror=e=>(r.close(),t(a.error)),s.oncomplete=()=>r.close()},n.onerror=e=>t(n.error)}))}async removeModel(e){var t;return e=(t=e).startsWith(O.URL_SCHEME)?t.slice(O.URL_SCHEME.length):t,new Promise(((t,n)=>{const r=this.indexedDB.open(A,1);r.onupgradeneeded=()=>F(r),r.onsuccess=()=>{const s=r.result,a=s.transaction(R,"readwrite"),o=a.objectStore(R),i=o.get(e);let l;i.onsuccess=()=>{if(null==i.result)return s.close(),n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const r=o.delete(e),a=()=>{l=s.transaction(_,"readwrite");const r=l.objectStore(_).delete(e);r.onsuccess=()=>t(i.result.modelArtifactsInfo),r.onerror=e=>n(i.error)};r.onsuccess=a,r.onerror=e=>(a(),s.close(),n(i.error))}},i.onerror=e=>(s.close(),n(i.error)),a.oncomplete=()=>{null==l?s.close():l.oncomplete=()=>s.close()}},r.onerror=e=>n(r.error)}))}}const z="/",P="tensorflowjs_models",B="info",V="model_topology",W="weight_specs",U="weight_data",G="model_metadata";function H(e){return{info:[P,e,B].join(z),topology:[P,e,V].join(z),weightSpecs:[P,e,W].join(z),weightData:[P,e,U].join(z),modelMetadata:[P,e,G].join(z)}}function j(e){for(const t of Object.values(e))window.localStorage.removeItem(t)}function K(e){const t=e.split(z);if(t.length<3)throw new Error(`Invalid key format: ${e}`);return t.slice(1,t.length-1).join(z)}class q{constructor(e){if(!(0,a._K)().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=H(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const t=JSON.stringify(e.modelTopology),n=JSON.stringify(e.weightSpecs),r=k(e);try{this.LS.setItem(this.keys.info,JSON.stringify(r)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(e){if(m)return Buffer.from(e).toString("base64");const t=new Uint8Array(e);let n="";for(let e=0,r=t.length;e<r;e++)n+=String.fromCharCode(t[e]);return btoa(n)}(e.weightData));const s={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:null!=e.signature?e.signature:void 0,userDefinedMetadata:null!=e.userDefinedMetadata?e.userDefinedMetadata:void 0,modelInitializer:null!=e.modelInitializer?e.modelInitializer:void 0,trainingConfig:null!=e.trainingConfig?e.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(s)),{modelArtifactsInfo:r}}catch(e){throw j(this.keys),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${r.modelTopologyBytes}, weightSpecsBytes=${r.weightSpecsBytes}, weightDataBytes=${r.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;const r=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==r)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=r;const s=this.LS.getItem(this.keys.modelMetadata);if(null!=s){const e=JSON.parse(s);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer),null!=e.trainingConfig&&(t.trainingConfig=e.trainingConfig)}const a=this.LS.getItem(this.keys.weightData);if(null==a)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=function(e){if(m){const t=Buffer.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}const t=atob(e),n=new Uint8Array(t.length);for(let e=0;e<t.length;++e)n.set([t.charCodeAt(e)],e);return n.buffer}(a),t}}q.URL_SCHEME="localstorage://";const Y=e=>{return(0,a._K)().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(q.URL_SCHEME)?(t=e.slice(q.URL_SCHEME.length),new q(t)):null;var t};S.registerSaveRouter(Y),S.registerLoadRouter(Y);class X{constructor(){(0,u.vA)((0,a._K)().getBool("IS_BROWSER"),(()=>"Current environment is not a web browser")),(0,u.vA)("undefined"==typeof window||void 0!==window.localStorage,(()=>"Current browser does not appear to support localStorage")),this.LS=window.localStorage}async listModels(){const e={},t=P+z,n=z+B;for(let r=0;r<this.LS.length;++r){const s=this.LS.key(r);s.startsWith(t)&&s.endsWith(n)&&(e[K(s)]=JSON.parse(this.LS.getItem(s)))}return e}async removeModel(e){var t;const n=H(e=(t=e).startsWith(q.URL_SCHEME)?t.slice(q.URL_SCHEME.length):t);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${e}'`);const r=JSON.parse(this.LS.getItem(n.info));return j(n),r}}const Z="://";class Q{constructor(){this.managers={}}static getInstance(){return null==Q.instance&&(Q.instance=new Q),Q.instance}static registerManager(e,t){(0,u.vA)(null!=e,(()=>"scheme must not be undefined or null.")),e.endsWith(Z)&&(e=e.slice(0,e.indexOf(Z))),(0,u.vA)(e.length>0,(()=>"scheme must not be an empty string."));const n=Q.getInstance();(0,u.vA)(null==n.managers[e],(()=>`A model store manager is already registered for scheme '${e}'.`)),n.managers[e]=t}static getManager(e){const t=Q.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(Q.getInstance().managers)}}function J(e){if(-1===e.indexOf(Z))throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${Q.getSchemes().join(",")}`);return{scheme:e.split(Z)[0],path:e.split(Z)[1]}}async function ee(e,t,n=!1){(0,u.vA)(e!==t,(()=>`Old path and new path are the same: '${e}'`));const r=S.getLoadHandlers(e);(0,u.vA)(r.length>0,(()=>`Copying failed because no load handler is found for source URL ${e}.`)),(0,u.vA)(r.length<2,(()=>`Copying failed because more than one (${r.length}) load handlers for source URL ${e}.`));const s=r[0],a=S.getSaveHandlers(t);(0,u.vA)(a.length>0,(()=>`Copying failed because no save handler is found for destination URL ${t}.`)),(0,u.vA)(a.length<2,(()=>`Copying failed because more than one (${r.length}) save handlers for destination URL ${t}.`));const o=a[0],i=J(e).scheme,l=J(e).path,c=i===J(e).scheme,p=await s.load();n&&c&&await Q.getManager(i).removeModel(l);const h=await o.save(p);return n&&!c&&await Q.getManager(i).removeModel(l),h.modelArtifactsInfo}async function te(){const e=Q.getSchemes(),t={};for(const n of e){const e=await Q.getManager(n).listModels();for(const r in e)t[n+Z+r]=e[r]}return t}async function ne(e){const t=J(e);return Q.getManager(t.scheme).removeModel(t.path)}async function re(e,t){return ee(e,t,!1)}async function se(e,t){return ee(e,t,!0)}class ae{constructor(){this.messageName="setTimeoutCustom",this.functionRefs=[],this.handledMessageCount=0,this.hasEventListener=!1}fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}setTimeoutCustom(e,t){window&&(0,a._K)().getBool("USE_SETTIMEOUTCUSTOM")?(this.functionRefs.push(e),setTimeout((()=>{window.postMessage({name:this.messageName,index:this.functionRefs.length-1},"*")}),t),this.hasEventListener||(this.hasEventListener=!0,window.addEventListener("message",(e=>{e.source===window&&e.data.name===this.messageName&&(e.stopPropagation(),(0,this.functionRefs[e.data.index])(),this.handledMessageCount++,this.handledMessageCount===this.functionRefs.length&&(this.functionRefs=[],this.handledMessageCount=0))}),!0))):setTimeout(e,t)}}if((0,a._K)().get("IS_BROWSER")){(0,a._K)().setPlatform("browser",new ae);try{Q.registerManager(q.URL_SCHEME,new X)}catch(e){}try{Q.registerManager(O.URL_SCHEME,new L)}catch(e){}}let oe;(0,a._K)().get("IS_NODE")&&!(0,a._K)().get("IS_BROWSER")&&(0,a._K)().setPlatform("node",new class{constructor(){this.util=n(8590),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=(0,a._K)().global.fetch?(0,a._K)().global.fetch(e,t):(null==oe&&(oe=n(5817)),oe(e,t))}now(){const e=process.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}});var ie=n(448),le=n(9809),ue=n(125),ce=n(5295),pe=n(259);(0,s.Ye)();const he={buffer:ie.r,cast:le.w,clone:ue.o,print:ce.y};function de(e){return new Promise((e=>setTimeout(e))).then(e)}(0,pe.Q5)(he);class fe{constructor(e){if(!(0,a._K)().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(fe.URL_SCHEME)&&(e=e.slice(fe.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelJsonFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=x(e,[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}]),r=window.URL.createObjectURL(new Blob([JSON.stringify(n)],{type:"application/json"})),s=null==this.modelJsonAnchor?document.createElement("a"):this.modelJsonAnchor;if(s.download=this.modelJsonFileName,s.href=r,await de((()=>s.dispatchEvent(new MouseEvent("click")))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=t,await de((()=>e.dispatchEvent(new MouseEvent("click"))))}return{modelArtifactsInfo:k(e)}}}}fe.URL_SCHEME="downloads://";class me{constructor(e){if(null==e||e.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);this.jsonFile=e[0],this.weightsFiles=e.slice(1)}async load(){return new Promise(((e,t)=>{const n=new FileReader;n.onload=n=>{const r=JSON.parse(n.target.result),s=r.modelTopology;if(null==s)return void t(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));if(null==r.weightsManifest)return void t(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));if(0===this.weightsFiles.length)return void e({modelTopology:s});const a=v(r,(e=>this.loadWeights(e)));e(a)},n.onerror=e=>t(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),n.readAsText(this.jsonFile)}))}loadWeights(e){const t=[],n=[];for(const r of e)t.push(...r.weights),n.push(...r.paths);const r=this.checkManifestAndWeightFiles(e),s=n.map((e=>this.loadWeightsFile(e,r[e])));return Promise.all(s).then((e=>[t,y(e)]))}loadWeightsFile(e,t){return new Promise(((n,r)=>{const s=new FileReader;s.onload=e=>{const t=e.target.result;n(t)},s.onerror=t=>r(`Failed to weights data from file of path '${e}'.`),s.readAsArrayBuffer(t)}))}checkManifestAndWeightFiles(e){const t=[],n=this.weightsFiles.map((e=>b(e.name))),r={};for(const s of e)s.paths.forEach((e=>{const s=b(e);if(-1!==t.indexOf(s))throw new Error(`Duplicate file basename found in weights manifest: '${s}'`);if(t.push(s),-1===n.indexOf(s))throw new Error(`Weight file with basename '${s}' is not provided.`);r[e]=this.weightsFiles[n.indexOf(s)]}));if(t.length!==this.weightsFiles.length)throw new Error(`Mismatch in the number of files in weights manifest (${t.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return r}}function ge(e){return new me(e)}function ye(e,t,n,r){!function(e){(0,u.vA)(null!=e&&Array.isArray(e)&&e.length>0,(()=>"promises must be a none empty array"))}(e),function(e,t){(0,u.vA)(e>=0&&e<=1,(()=>`Progress fraction must be in range [0, 1], but got startFraction ${e}`)),(0,u.vA)(t>=0&&t<=1,(()=>`Progress fraction must be in range [0, 1], but got endFraction ${t}`)),(0,u.vA)(t>=e,(()=>`startFraction must be no more than endFraction, but got startFraction ${e} and endFraction ${t}`))}(n=null==n?0:n,r=null==r?1:r);let s=0;return Promise.all(e.map((a=>(a.then((a=>{const o=n+ ++s/e.length*(r-n);return t(o),a})),a))))}async function be(e,t){null==t&&(t={});const n=null==t.fetchFunc?(0,a._K)().platform.fetch:t.fetchFunc,r=e.map((e=>n(e,t.requestInit,{isBinary:!0}))),s=(null==t.onProgress?await Promise.all(r):await ye(r,t.onProgress,0,.5)).map((e=>e.arrayBuffer()));return null==t.onProgress?await Promise.all(s):await ye(s,t.onProgress,.5,1)}async function xe(e,t="",n,r){return we((e=>be(e,{requestInit:r})))(e,t,n)}function we(e){return async(t,n="",r)=>{const s=t.map((()=>!1)),a={},o=null!=r?r.map((()=>!1)):[],i=[];if(t.forEach(((e,t)=>{let n=0;e.weights.forEach((e=>{const l="quantization"in e?e.quantization.dtype:e.dtype,p=c[l]*u.Ze(e.shape),h=()=>{s[t]=!0,null==a[t]&&(a[t]=[]),a[t].push({manifestEntry:e,groupOffset:n,sizeBytes:p})};null!=r?r.forEach(((t,n)=>{t===e.name&&(h(),o[n]=!0)})):h(),i.push(e.name),n+=p}))})),!o.every((e=>e))){const e=r.filter(((e,t)=>!o[t]));throw new Error(`Could not find weights in manifest with names: ${e.join(", ")}. \nManifest JSON has weights with names: ${i.join(", ")}.`)}const l=s.reduce(((e,t,n)=>(t&&e.push(n),e)),[]),p=[];l.forEach((e=>{t[e].paths.forEach((e=>{const t=n+(n.endsWith("/")?"":"/")+e;p.push(t)}))}));const h=await e(p),f={};let m=0;return l.forEach((e=>{const n=t[e].paths.length;let r=0;for(let e=0;e<n;e++)r+=h[m+e].byteLength;const s=new ArrayBuffer(r),o=new Uint8Array(s);let i=0;for(let e=0;e<n;e++){const t=new Uint8Array(h[m+e]);o.set(t,i),i+=t.byteLength}a[e].forEach((e=>{const t=d(s.slice(e.groupOffset,e.groupOffset+e.sizeBytes),[e.manifestEntry]);for(const e in t)f[e]=t[e]})),m+=n})),f}}S.registerSaveRouter((e=>(0,a._K)().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(fe.URL_SCHEME)?function(e="model"){return new fe(e)}(e.slice(fe.URL_SCHEME.length)):null));class ve{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?((0,u.vA)("function"==typeof t.fetchFunc,(()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)")),this.fetch=t.fetchFunc):this.fetch=(0,a._K)().platform.fetch,(0,u.vA)(null!=e&&e.length>0,(()=>"URL path for http must not be null, undefined or empty.")),Array.isArray(e)&&(0,u.vA)(2===e.length,(()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`)),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const n=x(e,[{paths:["./model.weights.bin"],weights:e.weightSpecs}]);t.body.append("model.json",new Blob([JSON.stringify(n)],{type:"application/json"}),"model.json"),null!=e.weightData&&t.body.append("model.weights.bin",new Blob([e.weightData],{type:"application/octet-stream"}),"model.weights.bin");const r=await this.fetch(this.path,t);if(r.ok)return{modelArtifactsInfo:k(e),responses:[r]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${r.status}.`)}async load(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);let t;try{t=await e.json()}catch(e){let t=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?t+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":t+=" Please make sure the server is serving valid JSON for this request.",new Error(t)}const n=t.modelTopology,r=t.weightsManifest;if(null==n&&null==r)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return v(t,(e=>this.loadWeights(e)))}async loadWeights(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[n,r]=function(e){const t=e.lastIndexOf("/"),n=e.lastIndexOf("?");return[e.substring(0,t)+"/",n>t?e.substring(n):""]}(t),s=this.weightPathPrefix||n,a=N(e),o=[],i=[];for(const t of e)for(const e of t.paths)null!=this.weightUrlConverter?i.push(this.weightUrlConverter(e)):o.push(s+e+r);return this.weightUrlConverter&&o.push(...await Promise.all(i)),[a,y(await be(o,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function ke(e){return null!=e.match(ve.URL_SCHEME_REGEX)}ve.URL_SCHEME_REGEX=/^https?:\/\//;const Ne=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every((e=>ke(e))):ke(e),n)return Te(e,t)}return null};function Te(e,t){return new ve(e,t)}function Se(e,t){return Te(e,t)}S.registerSaveRouter(Ne),S.registerLoadRouter(Ne);class Ie{constructor(e){this.modelArtifacts=e}load(){return this.modelArtifacts}}class Ee{constructor(e){this.saveHandler=e}save(e){return this.saveHandler(e)}}class $e{constructor(e){e.load&&(this.load=()=>Promise.resolve(e.load())),e.save&&(this.save=t=>Promise.resolve(e.save(t)))}}function Ce(e,t,n,r){return new $e(Ae(...arguments))}function Ae(e,t,n,r){return 1===arguments.length?null!=e.modelTopology||null!=e.weightSpecs?new Ie(e):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Ie({modelTopology:e})):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Ie({modelTopology:e,weightSpecs:t,weightData:n,trainingConfig:r}))}function _e(e){return new Ee(e)}function Re(e){return new Ee(e)}var De=n(3879),Fe=n(46),Oe=n(7668)},6574:(e,t,n)=>{n.d(t,{OH:()=>a,_K:()=>i,tj:()=>u});var r=n(5119);const s="tfjsflags";class a{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=o,this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&(i().getBool("IS_TEST")||i().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`)),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];i().getBool("IS_TEST")||i().getBool("PROD")||console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if((0,r.yL)(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const e=this.getQueryParams(this.global.location.search);s in e&&e[s].split(",").forEach((e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){if("true"===(t=t.toLowerCase())||"false"===t)return"true"===t;if(""+ +t===t)return+t;throw new Error(`Could not parse value flag value ${t} for flag ${e}.`)}(t,n)}))}}function o(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,((e,...n)=>(function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,n[0],n[1]),n.join("=")))),t}function i(){return l}let l=null;function u(e){l=e}},7148:(e,t,n)=>{n.d(t,{f:()=>i});var r=n(5388),s=n(5441),a=n(8189),o=n(5119);const i=(0,n(929).op)({complex_:function(e,t){const n=(0,a.YT)(e,"real","complex"),i=(0,a.YT)(t,"imag","complex");o.O3(n.shape,i.shape,`real and imag shapes, ${n.shape} and ${i.shape}, must match in call to tf.complex().`);const l={real:n,imag:i};return r.T2.runKernel(s.pr3,l)}})},7668:(e,t,n)=>{n.d(t,{AS:()=>l,DZ:()=>i,aC:()=>u});var r=n(5388),s=n(6574),a=n(259),o=n(4051);function i(e,t){return r.T2.tidy(e,t)}function l(e){(0,o.NB)(e).forEach((e=>e.dispose()))}function u(e){return r.T2.keep(e)}(0,a.B4)((function(e){(0,s._K)().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}))},8189:(e,t,n)=>{n.d(t,{MZ:()=>l,YT:()=>p,j1:()=>h});var r=n(5388),s=n(6574),a=n(259),o=n(5119),i=n(3879);function l(e,t){let n=e;if((0,o.iu)(e))return"string"===t?[]:[e.length];if(!Array.isArray(e))return[];const r=[];for(;Array.isArray(n)||(0,o.iu)(n)&&"string"!==t;)r.push(n.length),n=n[0];return Array.isArray(e)&&(0,s._K)().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&u(e,r,[]),r}function u(e,t,n){if(n=n||[],!Array.isArray(e)&&!(0,o.iu)(e))return void(0,o.vA)(0===t.length,(()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`));(0,o.vA)(t.length>0,(()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${e.length} elements`)),(0,o.vA)(e.length===t[0],(()=>`Element arr[${n.join("][")}] should have ${t[0]} elements, but has ${e.length} elements`));const r=t.slice(1);for(let t=0;t<e.length;++t)u(e[t],r,n.concat(t))}function c(e,t,n,r){if("string_or_numeric"!==e){if(null==e)throw new Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw new Error(`Argument '${n}' passed to '${r}' must be ${e} tensor, but got ${t} tensor`)}}function p(e,t,n,s="numeric"){if(e instanceof a.qY)return c(s,e.dtype,t,n),e;let u=(0,o.X$)(e);if("string"!==u&&["bool","int32","float32"].indexOf(s)>=0&&(u=s),c(s,u,t,n),null==e||!(0,o.iu)(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){const r=null==e?"null":e.constructor.name;throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${r}'`)}const p=l(e,u);(0,o.iu)(e)||Array.isArray(e)||(e=[e]);const h="string"!==u?(0,i.toTypedArray)(e,u):(0,o.Bq)(e,[],!0);return r.T2.makeTensor(h,p,u)}function h(e,t,n,r="numeric"){if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map(((e,s)=>p(e,`${t}[${s}]`,n,r)))}},8355:(e,t,n)=>{n.d(t,{ox:()=>Ve});var r={};n.r(r),n.d(r,{json:()=>O});var s={};n.r(s),n.d(s,{json:()=>M});var a={};n.r(a),n.d(a,{json:()=>L});var o={};n.r(o),n.d(o,{json:()=>z});var i={};n.r(i),n.d(i,{json:()=>P});var l={};n.r(l),n.d(l,{json:()=>B});var u={};n.r(u),n.d(u,{json:()=>V});var c={};n.r(c),n.d(c,{json:()=>W});var p={};n.r(p),n.d(p,{json:()=>U});var h={};n.r(h),n.d(h,{json:()=>G});var d={};n.r(d),n.d(d,{json:()=>H});var f={};n.r(f),n.d(f,{json:()=>j});var m={};n.r(m),n.d(m,{json:()=>K});var g={};n.r(g),n.d(g,{json:()=>q});var y={};n.r(y),n.d(y,{json:()=>Y});var b={};n.r(b),n.d(b,{json:()=>X});var x={};n.r(x),n.d(x,{json:()=>Z});var w={};n.r(w),n.d(w,{json:()=>Q});var v={};n.r(v),n.d(v,{json:()=>J});var k={};n.r(k),n.d(k,{OP_SCOPE_SUFFIX:()=>ge.BTT,abs:()=>ge.tnl,acos:()=>ge.HQu,acosh:()=>ge.FqL,add:()=>ge.WQq,addN:()=>ge.QiD,all:()=>ge.Q7R,any:()=>ge.bzn,argMax:()=>ge.FLi,argMin:()=>ge.XRg,asin:()=>ge.qRo,asinh:()=>ge.yHs,atan:()=>ge.rYl,atan2:()=>ge.FPz,atanh:()=>ge.rfv,avgPool:()=>ge.$jT,avgPool3d:()=>ge.sub,basicLSTMCell:()=>ge.lZX,batchNorm:()=>ge.$v7,batchNorm2d:()=>ge.BFc,batchNorm3d:()=>ge.kSi,batchNorm4d:()=>ge.T5N,batchToSpaceND:()=>ge.GTe,bincount:()=>ge.HbZ,booleanMaskAsync:()=>ge.ftb,broadcastArgs:()=>ge.ROE,broadcastTo:()=>ge.hOW,buffer:()=>ge.ra8,cast:()=>ge.wgE,ceil:()=>ge.mkO,clipByValue:()=>ge.zQh,clone:()=>ge.o8B,complex:()=>ge.faB,concat:()=>ge.xWs,concat1d:()=>ge.I1m,concat2d:()=>ge.RPU,concat3d:()=>ge.O5O,concat4d:()=>ge.P1l,conv1d:()=>ge.kA9,conv2d:()=>ge.Xtf,conv2dTranspose:()=>ge.wX9,conv3d:()=>ge.IPL,conv3dTranspose:()=>ge.jIJ,cos:()=>ge.gnS,cosh:()=>ge.yIG,cosineWindow:()=>ge._jP,cumprod:()=>ge.Lp0,cumsum:()=>ge.rCv,denseBincount:()=>ge.aOp,depthToSpace:()=>ge.Rj8,depthwiseConv2d:()=>ge.Gl3,diag:()=>ge.smy,dilation2d:()=>ge.X7t,div:()=>ge.y4m,divNoNan:()=>ge.ek5,dot:()=>ge.Omf,dropout:()=>ge.EZY,einsum:()=>ge._3C,elu:()=>ge.Pqc,enclosingPowerOfTwo:()=>ge.FJY,equal:()=>ge.LCg,erf:()=>ge.Y12,euclideanNorm:()=>ge.p4S,exp:()=>ge.oNF,expandDims:()=>ge.UG6,expm1:()=>ge.IYd,eye:()=>ge.y5U,fft:()=>ge.hVP,fill:()=>ge.GSj,floor:()=>ge.RIf,floorDiv:()=>ge.wh_,fused:()=>ge.cZk,gather:()=>ge.kgh,gatherND:()=>ge.SY9,greater:()=>ge.rhj,greaterEqual:()=>ge.DQN,ifft:()=>ge.KGM,imag:()=>ge.ngS,image:()=>ge.Slp,inTopKAsync:()=>ge.U4u,irfft:()=>ge.ggX,isFinite:()=>ge.MIs,isInf:()=>ge.EN4,isNaN:()=>ge.yrW,leakyRelu:()=>ge.H8d,less:()=>ge.M7h,lessEqual:()=>ge.InN,linalg:()=>ge.mPL,linspace:()=>ge.mT8,localResponseNormalization:()=>ge.Kgs,log:()=>ge.Rm2,log1p:()=>ge.Kko,logSigmoid:()=>ge.nqI,logSoftmax:()=>ge.HPB,logSumExp:()=>ge.VZ,logicalAnd:()=>ge.n76,logicalNot:()=>ge.NSZ,logicalOr:()=>ge.ztW,logicalXor:()=>ge.rxB,losses:()=>ge.YYh,lowerBound:()=>ge.yzS,matMul:()=>ge.NoW,max:()=>ge.T9B,maxPool:()=>ge.jgi,maxPool3d:()=>ge.NYV,maxPoolWithArgmax:()=>ge.RO,maximum:()=>ge.PhQ,mean:()=>ge.i2o,meshgrid:()=>ge.OYQ,min:()=>ge.jkA,minimum:()=>ge.BpO,mirrorPad:()=>ge.FFZ,mod:()=>ge.ziu,moments:()=>ge.Clk,movingAverage:()=>ge.CRk,mul:()=>ge.lKK,multiRNNCell:()=>ge.YDF,multinomial:()=>ge.OjQ,neg:()=>ge.HZy,norm:()=>ge.xbf,notEqual:()=>ge.Ec,oneHot:()=>ge.Mw0,ones:()=>ge.SaS,onesLike:()=>ge.P61,op:()=>ge.op,outerProduct:()=>ge.X4o,pad:()=>ge.eVF,pad1d:()=>ge.BZs,pad2d:()=>ge.grY,pad3d:()=>ge.XHu,pad4d:()=>ge.WLX,pool:()=>ge.dzn,pow:()=>ge.n7C,prelu:()=>ge.NsG,print:()=>ge.yyV,prod:()=>ge._eU,raggedGather:()=>ge.whe,raggedTensorToTensor:()=>ge.Q0_,rand:()=>ge._9M,randomGamma:()=>ge.pR9,randomNormal:()=>ge.FE$,randomStandardNormal:()=>ge.m0H,randomUniform:()=>ge.YeY,range:()=>ge.y17,real:()=>ge.xav,reciprocal:()=>ge.VOZ,relu:()=>ge.VVh,relu6:()=>ge.j__,reshape:()=>ge.tQQ,reverse:()=>ge.BEg,reverse1d:()=>ge.QD2,reverse2d:()=>ge.LMr,reverse3d:()=>ge.I2l,reverse4d:()=>ge.JYU,rfft:()=>ge.z8$,round:()=>ge.LIG,rsqrt:()=>ge.Z$r,scalar:()=>ge.d_2,scatterND:()=>ge.NFr,searchSorted:()=>ge.sZg,selu:()=>ge.WfX,separableConv2d:()=>ge.wdz,setdiff1dAsync:()=>ge.F12,sigmoid:()=>ge.ry7,sign:()=>ge._SZ,signal:()=>ge.vPA,sin:()=>ge.F8e,sinh:()=>ge.L0l,slice:()=>ge.dik,slice1d:()=>ge.Q$M,slice2d:()=>ge.zAd,slice3d:()=>ge.wck,slice4d:()=>ge.R0O,softmax:()=>ge.Vs9,softplus:()=>ge.lw0,spaceToBatchND:()=>ge.eDJ,sparse:()=>ge.lMo,sparseToDense:()=>ge.Zhr,spectral:()=>ge.lOn,split:()=>ge.lDo,sqrt:()=>ge.RZD,square:()=>ge.EwI,squaredDifference:()=>ge.Pbu,squeeze:()=>ge.r2V,stack:()=>ge.t$z,step:()=>ge.PMw,stridedSlice:()=>ge.Ym9,string:()=>ge.YjP,sub:()=>ge.jbE,sum:()=>ge.czq,tan:()=>ge.Mlm,tanh:()=>ge.ymU,tensor:()=>ge.OEK,tensor1d:()=>ge.tGX,tensor2d:()=>ge.KtR,tensor3d:()=>ge.$_$,tensor4d:()=>ge.g9W,tensor5d:()=>ge.Lpo,tensor6d:()=>ge.yxw,tile:()=>ge.Vsq,topk:()=>ge.rfw,transpose:()=>ge.mgz,truncatedNormal:()=>ge.efE,unique:()=>ge.AmM,unsortedSegmentSum:()=>ge.zAU,unstack:()=>ge.K$i,upperBound:()=>ge.rni,variable:()=>ge.bvq,where:()=>ge._M9,whereAsync:()=>ge.YJN,zeros:()=>ge.Ul9,zerosLike:()=>ge.POl});var N,T,S=n(5718);(0,S._K2)().registerFlag("KEEP_INTERMEDIATE_TENSORS",(()=>!1),(e=>{e&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")})),function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_QINT16=15]="DT_QINT16",e[e.DT_QUINT16=16]="DT_QUINT16",e[e.DT_UINT16=17]="DT_UINT16",e[e.DT_COMPLEX128=18]="DT_COMPLEX128",e[e.DT_HALF=19]="DT_HALF",e[e.DT_RESOURCE=20]="DT_RESOURCE",e[e.DT_VARIANT=21]="DT_VARIANT",e[e.DT_UINT32=22]="DT_UINT32",e[e.DT_UINT64=23]="DT_UINT64",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",e[e.DT_QINT16_REF=115]="DT_QINT16_REF",e[e.DT_QUINT16_REF=116]="DT_QUINT16_REF",e[e.DT_UINT16_REF=117]="DT_UINT16_REF",e[e.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",e[e.DT_HALF_REF=119]="DT_HALF_REF",e[e.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",e[e.DT_VARIANT_REF=121]="DT_VARIANT_REF",e[e.DT_UINT32_REF=122]="DT_UINT32_REF",e[e.DT_UINT64_REF=123]="DT_UINT64_REF"}(N||(N={})),function(e){let t;!function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))}(T||(T={}));const I={};function E(e){return I[e]}function $(e,t,n,r,s){const a=t.inputParams[e];if(a&&void 0!==a.inputIndexStart){const e=a.inputIndexStart,o=0===a.inputIndexEnd?void 0:void 0===a.inputIndexEnd?e+1:a.inputIndexEnd;if("tensor"===a.type)return C(t.inputNames[a.inputIndexStart],n,r,s);if("tensors"===a.type)return t.inputNames.slice(e,o).map((e=>C(e,n,r,s)));const i=C(t.inputNames.slice(e)[0],n,r,s),l=i.dataSync();return"number"===a.type?l[0]:S.ZSL.toNestedArray(i.shape,l)}const o=t.attrParams[e];return o&&o.value}function C(e,t,n,r){const[s,a]=R(e);if(null!=r){const e=r.getHashTableHandleByName(s);if(null!=e)return e}const o=n.currentContextIds.find((e=>!!t[_(s,e)]));return void 0!==o?t[_(s,o)][a]:void 0}function A(e,t){const[n,r,s]=R(e);return[_(n,t&&t.currentContextId),r,s]}function _(e,t){return t?`${e}-${t}`:e}function R(e){const t=e.split(":");if(1===t.length)return[e,0,void 0];const n=t[0],r=3===t.length?t[1]:void 0;return[n,Number(t[t.length-1]),r]}function D(e,t,n){let r=$("pad",e,t,n);if("explicit"===r){r=$("explicitPaddings",e,t,n);const s=[[0,0],[0,0],[0,0],[0,0]];for(let e=0;e<4;e++)s[e][0]=r[2*e],s[e][1]=r[2*e+1];return s}return r}function F(e){return e.kept?e:(0,S.o8B)(e)}const O=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],M=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],L=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcatV2",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListLength",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}]},{tfOpName:"TensorListResize",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"size",type:"number"}]}],z=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}],P=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomStandardNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}],B=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],V=[{tfOpName:"LowerBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"UpperBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}],W=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}],U=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]}],G=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]},{tfOpName:"ImageProjectiveTransformV3",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"transforms",type:"tensor"},{start:2,name:"outputShape",type:"number[]"},{start:3,name:"fillValue",type:"number"}],attrs:[{tfName:"interpolation",name:"interpolation",type:"string"},{tfName:"fill_mode",name:"fillMode",type:"string"}]}],H=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],j=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]}],K=[{tfOpName:"EuclideanNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",defaultValue:!1}]},{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}],q=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumprod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}],Y=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}],X=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}],Z=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}],Q=[{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}],J=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}];class ee{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const e=[].concat(...[r,s,a,o,i,l,u,c,p,h,d,f,m,g,y,b,x,w,v].map((e=>e.json)));this.opMappers=e.reduce(((e,t)=>(e[t.tfOpName]=t,e)),{})}transformGraph(e,t={}){const n=e.node,r=[],s=[],a=[],o=n.reduce(((e,t)=>(e[t.name]=this.mapNode(t),t.op.startsWith("Placeholder")?r.push(e[t.name]):"Const"===t.op?s.push(e[t.name]):null!=t.input&&0!==t.input.length||a.push(e[t.name]),e)),{});let i=[];const l=[];let u={},c={};null!=t&&(u=this.mapSignatureEntries(t.inputs),c=this.mapSignatureEntries(t.outputs));const p=Object.keys(o);p.forEach((e=>{const t=o[e];t.inputNames.forEach(((e,n)=>{const[r,,s]=A(e),a=o[r];if(null!=a.outputs){const e=a.outputs.indexOf(s);if(-1!==e){const s=`${r}:${e}`;t.inputNames[n]=s}}t.inputs.push(a),a.children.push(t)}))})),0===Object.keys(c).length?p.forEach((e=>{const t=o[e];0===t.children.length&&l.push(t)})):Object.keys(c).forEach((e=>{const[t]=A(e),n=o[t];null!=n&&(n.signatureKey=c[e],l.push(n))})),Object.keys(u).length>0?Object.keys(u).forEach((e=>{const[t]=A(e),n=o[t];n&&(n.signatureKey=u[e],i.push(n))})):i=r;let h={};null!=e.library&&null!=e.library.function&&(h=e.library.function.reduce(((e,t)=>(e[t.signature.name]=this.mapFunction(t),e)),{}));const d={nodes:o,inputs:i,outputs:l,weights:s,placeholders:r,signature:t,functions:h};return a.length>0&&(d.initNodes=a),d}mapSignatureEntries(e){return Object.keys(e||{}).reduce(((t,n)=>(t[e[n].name]=n,t)),{})}mapNode(e){const t=E(e.op)||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});const n={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map((e=>e.startsWith("^")?e.slice(1):e)),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr,outputs:t.outputs};return null!=t.inputs&&(n.inputParams=t.inputs.reduce(((e,t)=>(e[t.name]={type:t.type,inputIndexStart:t.start,inputIndexEnd:t.end},e)),{})),null!=t.attrs&&(n.attrParams=t.attrs.reduce(((t,n)=>{const r=n.type;let s;switch(n.type){case"string":s=ne(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=ne(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":s=he(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=he(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":s=se(e.attr,n.tfName,n.defaultValue||0),void 0===s&&n.tfDeprecatedName&&(s=se(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":s=pe(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=pe(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":s=re(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=re(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":s=fe(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=fe(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":s=ce(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=ce(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":s=de(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=de(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":s=ie(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=ie(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":s=le(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=le(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":s=oe(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=oe(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${n.type} for op: ${e.op}`)}return t[n.name]={value:s,type:r},t}),{})),n}mapFunction(e){const t=e.nodeDef,n=[];let r={};null!=t&&(r=t.reduce(((e,t)=>(e[t.name]=this.mapNode(t),"Const"===t.op&&n.push(e[t.name]),e)),{}));const s=[],a=[];e.signature.inputArg.forEach((e=>{const[t]=A(e.name),n={name:t,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:ae(e.type),type:"dtype"}},children:[]};n.signatureKey=e.name,s.push(n),r[t]=n})),Object.keys(r).forEach((e=>{const t=r[e];t.inputNames.forEach(((e,n)=>{const[s,,a]=A(e),o=r[s];if(null!=o.outputs){const e=o.outputs.indexOf(a);if(-1!==e){const r=`${s}:${e}`;t.inputNames[n]=r}}t.inputs.push(o),o.children.push(t)}))}));const o=e.ret;e.signature.outputArg.forEach((e=>{const[t,n]=A(o[e.name]),s=r[t];null!=s&&(s.defaultOutput=n,a.push(s))}));const i=this.mapArgsToSignature(e);return{nodes:r,inputs:s,outputs:a,weights:n,placeholders:[],signature:i}}mapArgsToSignature(e){return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce(((e,t)=>(e[t.name]=this.mapArgToTensorInfo(t),e)),{}),outputs:e.signature.outputArg.reduce(((t,n)=>(t[n.name]=this.mapArgToTensorInfo(n,e.ret),t)),{})}}mapArgToTensorInfo(e,t){let n=e.name;return null!=t&&(n=t[n]),{name:n,dtype:e.type}}}function te(e,t){const n=Array.isArray(e)?String.fromCharCode.apply(null,e):function(e){const t=(0,S._K2)().global;if(void 0!==t.atob)return t.atob(e);if("undefined"!=typeof Buffer)return new Buffer(e,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(e);return t?n:n.toLowerCase()}function ne(e,t,n,r=!1){const s=e[t];return null!=s?te(s.s,r):n}function re(e,t,n){const r=e[t];return r?r.b:n}function se(e,t,n){const r=e[t]||{},s=null!=r.i?r.i:null!=r.f?r.f:n;return"number"==typeof s?s:parseInt(s,10)}function ae(e){switch("string"==typeof e&&(e=N[e]),e){case N.DT_FLOAT:case N.DT_HALF:return"float32";case N.DT_INT32:case N.DT_INT64:case N.DT_INT8:case N.DT_UINT8:return"int32";case N.DT_BOOL:return"bool";case N.DT_DOUBLE:return"float32";case N.DT_STRING:return"string";default:return null}}function oe(e,t,n){const r=e[t];return r&&r.func?r.func.name:n}function ie(e,t,n){const r=e[t];return r&&r.type?ae(r.type):n}function le(e,t,n){const r=e[t];return r&&r.list&&r.list.type?r.list.type.map((e=>ae(e))):n}function ue(e){if(!e.unknownRank)return null!=e.dim?e.dim.map((e=>"number"==typeof e.size?e.size:parseInt(e.size,10))):[]}function ce(e,t,n){const r=e[t];return r&&r.shape?ue(r.shape):n}function pe(e,t,n){const r=e[t];return r?((r.list.f&&r.list.f.length?r.list.f:r.list.i)||[]).map((e=>"number"==typeof e?e:parseInt(e,10))):n}function he(e,t,n,r=!1){const s=e[t];return s&&s.list&&s.list.s?s.list.s.map((e=>te(e,r))):n}function de(e,t,n){const r=e[t];return r&&r.list&&r.list.shape?r.list.shape.map((e=>ue(e))):n}function fe(e,t,n){const r=e[t];return r&&r.list&&r.list.b?r.list.b:n}class me{constructor(e,t,n){this.node=e,this.tensorMap=t,this.context=n,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map((e=>this.getInput(e))),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce(((e,t)=>(e[t]=this.getAttr(t),e)),{}))}getInput(e){return C(e,this.tensorMap,this.context)}getAttr(e,t){const n=this.node.rawAttrs[e];if(null!=n.tensor)return C(e,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return se(this.node.rawAttrs,e,t);if(null!=n.s)return ne(this.node.rawAttrs,e,t);if(null!=n.b)return re(this.node.rawAttrs,e,t);if(null!=n.shape)return ce(this.node.rawAttrs,e,t);if(null!=n.type)return ie(this.node.rawAttrs,e,t);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return pe(this.node.rawAttrs,e,t);if(null!=n.list.s)return he(this.node.rawAttrs,e,t);if(null!=n.list.shape)return de(this.node.rawAttrs,e,t);if(null!=n.list.b)return fe(this.node.rawAttrs,e,t);if(null!=n.list.type)return le(this.node.rawAttrs,e,t)}return t}}var ge=n(46);function ye(e,t,n=""){if("number"!=typeof e&&"number"!=typeof t){S.ZSL.assert(e.length===t.length,(()=>n+` Shapes ${e} and ${t} must match`));for(let r=0;r<e.length;r++){const s=e[r],a=t[r];S.ZSL.assert(s<0||a<0||s===a,(()=>n+` Shapes ${e} and ${t} must match`))}}}function be(e){return"number"!=typeof e&&!e.some((e=>e<0))}function xe(e,t,n){let r=we(e,n);const s=!be(r);if(s&&0===t.length)throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${r}`);if(s&&t.forEach((e=>{r=we(e.shape,r)})),!be(r))throw new Error(`Non-fully-defined elementShape: ${r}`);return r}function we(e,t){if("number"==typeof e)return t;if("number"==typeof t)return e;if(e.length!==t.length)throw new Error(`Incompatible ranks during merge: ${e} vs. ${t}`);const n=[];for(let r=0;r<e.length;++r){const s=e[r],a=t[r];if(s>=0&&a>=0&&s!==a)throw new Error(`Incompatible shape during merge: ${e} vs. ${t}`);n[r]=s>=0?s:a}return n}class ve{constructor(e,t,n,r,s,a,o){this.name=e,this.dtype=t,this.maxSize=n,this.elementShape=r,this.identicalElementShapes=s,this.dynamicSize=a,this.clearAfterRead=o,this.tensors=[],this.closed_=!1,this.idTensor=(0,S.d_2)(0),(0,S.aCs)(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.tensor.id)||t.tensor.dispose()})),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||e>=this.size())throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);const t=this.tensors[e];if(t.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor}readMany(e){return e.map((e=>this.read(e)))}write(e,t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[e]||{};if(t.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},\n          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=t.shape),ye(this.elementShape,t.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${e}.`),n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);if(n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);n.tensor=t,(0,S.aCs)(t),n.written=!0,this.tensors[e]=n}writeMany(e,t){if(e.length!==t.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);e.forEach(((e,n)=>this.write(e,t[n])))}gather(e,t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);if(e)e=e.slice(0,this.size());else{e=[];for(let t=0;t<this.size();t++)e.push(t)}if(0===e.length)return(0,S.OEK)([],[0].concat(this.elementShape));const n=this.readMany(e);return ye(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),(0,S.t$z)(n,0)}concat(e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);if(0===this.size())return(0,S.OEK)([],[0].concat(this.elementShape));const t=[];for(let e=0;e<this.size();e++)t.push(e);const n=this.readMany(t);return ye(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),(0,S.xWs)(n,0)}scatter(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const n=Math.max(...e);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(e,(0,S.K$i)(t,0))}split(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);let n=0;const r=e.map((e=>(n+=e,n)));if(n!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${t.shape}`);if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);const s=0===n?0:t.size/n,a=[];(0,S.DZQ)((()=>{t=(0,S.tQQ)(t,[1,n,s]);for(let n=0;n<e.length;++n){const o=[0,0===n?0:r[n-1],0],i=[1,e[n],s];a[n]=(0,S.tQQ)((0,S.dik)(t,o,i),this.elementShape)}return a}));const o=[];for(let t=0;t<e.length;t++)o[t]=t;this.writeMany(o,a)}}class ke{constructor(e,t,n,r=-1){this.tensors=e,this.elementShape=t,this.elementDtype=n,null!=e&&e.forEach((e=>{if(n!==e.dtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${e.dtype}`);ye(t,e.shape,"TensorList shape mismatch: "),(0,S.aCs)(e)})),this.idTensor=(0,S.d_2)(0),this.maxNumElements=r,(0,S.aCs)(this.idTensor)}get id(){return this.idTensor.id}copy(){return new ke([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.id)||t.dispose()})),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(e,t,n=-1){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);ye(e,this.elementShape,"TensorList shape mismatch: ");const r=xe(this.elementShape,this.tensors,e);return(0,S.DZQ)((()=>{const e=this.tensors.map((e=>(0,S.tQQ)(e,r)));return(0,S.t$z)(e,0)}))}popBack(e,t){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const n=xe(this.elementShape,this.tensors,e),r=this.tensors.pop();return r.kept=!1,ye(r.shape,e,"TensorList shape mismatch: "),(0,S.tQQ)(r,n)}pushBack(e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(ye(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");(0,S.aCs)(e),this.tensors.push(e)}resize(e){if(e<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${e}`);if(-1!==this.maxNumElements&&e>this.maxNumElements)throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);const t=new ke([],this.elementShape,this.elementDtype,this.maxNumElements);t.tensors.length=e;for(let n=0;n<Math.min(this.tensors.length,e);++n)t.tensors[n]=this.tensors[n];return t}getItem(e,t,n){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(e<0||e>this.tensors.length)throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[e])throw new Error(`element at index ${e} is null.`);ye(this.tensors[e].shape,t,"TensorList shape mismatch: ");const r=xe(this.elementShape,this.tensors,t);return(0,S.tQQ)(this.tensors[e],r)}setItem(e,t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(e<0||-1!==this.maxNumElements&&e>=this.maxNumElements)throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);ye(this.elementShape,t.shape,"TensorList shape mismatch: "),(0,S.aCs)(t),null!=this.tensors[e]&&(this.tensors[e].kept=!1),this.tensors[e]=t}gather(e,t,n){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);ye(this.elementShape,n,"TensorList shape mismatch: "),e=e.slice(0,this.size());const r=xe(this.elementShape,this.tensors,n);return 0===e.length?(0,S.OEK)([],[0].concat(r)):(0,S.DZQ)((()=>{const t=e.map((e=>(0,S.tQQ)(this.tensors[e],r)));return(0,S.t$z)(t,0)}))}concat(e,t){if(e&&e!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);ye(this.elementShape,t,"TensorList shape mismatch: ");const n=xe(this.elementShape,this.tensors,t);return 0===this.size()?(0,S.OEK)([],[0].concat(n)):(0,S.DZQ)((()=>{const e=this.tensors.map((e=>(0,S.tQQ)(e,n)));return(0,S.xWs)(e,0)}))}}function Ne(e,t,n){const[r,s]=$("fusedOps",e,t,n),a="biasadd"===r,o=!a,i="prelu"===s,l="fusedbatchnorm"===r,u=$("numArgs",e,t,n);if(a){if(i&&2!==u)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&a&&1!==u)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(l)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");const c=$("strides",e,t,n),p=D(e,t,n),h=$("dataFormat",e,t,n).toUpperCase(),d=$("dilations",e,t,n);let[f,m]=$("args",e,t,n);return o&&(m=f,f=void 0),{stride:c,pad:p,dataFormat:h,dilations:d,biasArg:f,preluArg:m,activationFunc:s,leakyreluAlpha:$("leakyreluAlpha",e,t,n)}}function Te(e,t,n){return{boxes:$("boxes",e,t,n),scores:$("scores",e,t,n),maxOutputSize:$("maxOutputSize",e,t,n),iouThreshold:$("iouThreshold",e,t,n),scoreThreshold:$("scoreThreshold",e,t,n),softNmsSigma:$("softNmsSigma",e,t,n)}}var Se=n(5702);class Ie{constructor(e,t){this.keyDType=e,this.valueDType=t,this.handle=(0,S.d_2)(0),this.tensorMap=new Map,(0,S.aCs)(this.handle)}get id(){return this.handle.id}clearAndClose(){this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return Se.d(this.size(),"int32")}async import(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),(0,S.DZQ)((()=>{const e=(0,S.K$i)(t),r=n.length,s=e.length;S.ZSL.assert(r===s,(()=>`The number of elements doesn't match, keys has ${r} elements, the values has ${s} elements.`));for(let t=0;t<r;t++){const r=n[t],s=e[t];(0,S.aCs)(s),this.tensorMap.set(r,s)}return this.handle}))}async find(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return(0,S.DZQ)((()=>{const e=[];for(let r=0;r<n.length;r++){const s=n[r],a=this.findWithDefault(s,t);e.push(a)}return(0,S.t$z)(e)}))}findWithDefault(e,t){const n=this.tensorMap.get(e);return null!=n?n:t}checkKeyAndValueTensor(e,t){if(e.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`);if(t.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${t.dtype}`)}}function Ee(e,t,n,r,s=S.DZQ){const a=((e,t,n)=>{switch(e.category){case"arithmetic":return s((()=>((e,t,n,r=k)=>{switch(e.op){case"BiasAdd":case"AddV2":case"Add":return[r.add($("a",e,t,n),$("b",e,t,n))];case"AddN":return[r.addN($("tensors",e,t,n))];case"FloorMod":case"Mod":return[r.mod($("a",e,t,n),$("b",e,t,n))];case"Mul":return[r.mul($("a",e,t,n),$("b",e,t,n))];case"RealDiv":case"Div":return[r.div($("a",e,t,n),$("b",e,t,n))];case"DivNoNan":return[r.divNoNan($("a",e,t,n),$("b",e,t,n))];case"FloorDiv":return[r.floorDiv($("a",e,t,n),$("b",e,t,n))];case"Sub":return[r.sub($("a",e,t,n),$("b",e,t,n))];case"Minimum":return[r.minimum($("a",e,t,n),$("b",e,t,n))];case"Maximum":return[r.maximum($("a",e,t,n),$("b",e,t,n))];case"Pow":return[r.pow($("a",e,t,n),$("b",e,t,n))];case"SquaredDifference":return[r.squaredDifference($("a",e,t,n),$("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"basic_math":return s((()=>((e,t,n,r=k)=>{switch(e.op){case"Abs":case"ComplexAbs":return[r.abs($("x",e,t,n))];case"Acos":return[r.acos($("x",e,t,n))];case"Acosh":return[r.acosh($("x",e,t,n))];case"Asin":return[r.asin($("x",e,t,n))];case"Asinh":return[r.asinh($("x",e,t,n))];case"Atan":return[r.atan($("x",e,t,n))];case"Atan2":return[r.atan2($("x",e,t,n),$("y",e,t,n))];case"Atanh":return[r.atanh($("x",e,t,n))];case"Ceil":return[r.ceil($("x",e,t,n))];case"Complex":return[r.complex($("real",e,t,n),$("imag",e,t,n))];case"Cos":return[r.cos($("x",e,t,n))];case"Cosh":return[r.cosh($("x",e,t,n))];case"Elu":return[r.elu($("x",e,t,n))];case"Erf":return[r.erf($("x",e,t,n))];case"Exp":return[r.exp($("x",e,t,n))];case"Expm1":return[r.expm1($("x",e,t,n))];case"Floor":return[r.floor($("x",e,t,n))];case"Log":return[r.log($("x",e,t,n))];case"Log1p":return[r.log1p($("x",e,t,n))];case"Imag":return[r.imag($("x",e,t,n))];case"Neg":return[r.neg($("x",e,t,n))];case"Reciprocal":return[r.reciprocal($("x",e,t,n))];case"Real":return[r.real($("x",e,t,n))];case"Relu":return[r.relu($("x",e,t,n))];case"Round":return[r.round($("x",e,t,n))];case"Selu":return[r.selu($("x",e,t,n))];case"Sigmoid":return[r.sigmoid($("x",e,t,n))];case"Sin":return[r.sin($("x",e,t,n))];case"Sign":return[r.sign($("x",e,t,n))];case"Sinh":return[r.sinh($("x",e,t,n))];case"Softplus":return[r.softplus($("x",e,t,n))];case"Sqrt":return[r.sqrt($("x",e,t,n))];case"Square":return[r.square($("x",e,t,n))];case"Tanh":return[r.tanh($("x",e,t,n))];case"Tan":return[r.tan($("x",e,t,n))];case"ClipByValue":return[r.clipByValue($("x",e,t,n),$("clipValueMin",e,t,n),$("clipValueMax",e,t,n))];case"Relu6":return[r.relu6($("x",e,t,n))];case"Rsqrt":return[r.rsqrt(C(e.inputNames[0],t,n))];case"Prod":return[r.prod($("x",e,t,n),$("axes",e,t,n))];case"LeakyRelu":return[r.leakyRelu($("x",e,t,n),$("alpha",e,t,n))];case"Prelu":return[r.prelu($("x",e,t,n),$("alpha",e,t,n))];case"IsNan":return[r.isNaN(C(e.inputNames[0],t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"control":return(async(e,t,n)=>{switch(e.op){case"If":case"StatelessIf":{const r=$("thenBranch",e,t,n),s=$("elseBranch",e,t,n),a=$("cond",e,t,n),o=$("args",e,t,n);return(await a.data())[0]?n.functionMap[r].executeFunctionAsync(o,n.tensorArrayMap,n.tensorListMap):n.functionMap[s].executeFunctionAsync(o,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{const r=$("body",e,t,n),s=$("cond",e,t,n),a=$("args",e,t,n),o=await n.functionMap[s].executeFunctionAsync(a,n.tensorArrayMap,n.tensorListMap),i=a.map((e=>e.id));let l=await o[0].data();o.forEach((e=>{e.kept||-1!==i.indexOf(e.id)||e.dispose()}));let u=a;for(;l[0];){const e=u;u=await n.functionMap[r].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap);const t=u.map((e=>e.id));e.forEach((e=>{e.kept||-1!==i.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}));const a=await n.functionMap[s].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap);l=await a[0].data(),a.forEach((e=>{e.kept||-1!==i.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}))}return u}case"LoopCond":return[F($("pred",e,t,n))];case"Switch":{const r=$("pred",e,t,n);let s=$("data",e,t,n);return s.kept||(s=F(s)),(await r.data())[0]?[void 0,s]:[s,void 0]}case"Merge":{const r=e.inputNames.find((e=>void 0!==C(e,t,n)));return r?[F(C(r,t,n))]:void 0}case"Enter":{const r=$("frameName",e,t,n),s=$("tensor",e,t,n);return n.enterFrame(r),[F(s)]}case"Exit":{const r=$("tensor",e,t,n);return n.exitFrame(),[F(r)]}case"NextIteration":{const r=$("tensor",e,t,n);return n.nextIteration(),[F(r)]}case"TensorArrayV3":{const r=$("size",e,t,n),s=$("dtype",e,t,n),a=$("elementShape",e,t,n),o=$("dynamicSize",e,t,n),i=$("clearAfterRead",e,t,n),l=$("identicalElementShapes",e,t,n),u=$("name",e,t,n),c=new ve(u,s,r,a,l,o,i);return n.addTensorArray(c),[c.idTensor,(0,S.d_2)(1)]}case"TensorArrayWriteV3":{const r=$("tensorArrayId",e,t,n),s=$("index",e,t,n),a=$("tensor",e,t,n),o=n.getTensorArray(r.id);return o.write(s,a),[o.idTensor]}case"TensorArrayReadV3":{const r=$("tensorArrayId",e,t,n),s=$("index",e,t,n);return[n.getTensorArray(r.id).read(s)]}case"TensorArrayGatherV3":{const r=$("tensorArrayId",e,t,n),s=$("indices",e,t,n),a=$("dtype",e,t,n);return[n.getTensorArray(r.id).gather(s,a)]}case"TensorArrayScatterV3":{const r=$("tensorArrayId",e,t,n),s=$("indices",e,t,n),a=$("tensor",e,t,n),o=n.getTensorArray(r.id);return o.scatter(s,a),[o.idTensor]}case"TensorArrayConcatV3":{const r=$("tensorArrayId",e,t,n),s=n.getTensorArray(r.id),a=$("dtype",e,t,n);return[s.concat(a)]}case"TensorArraySplitV3":{const r=$("tensorArrayId",e,t,n),s=$("tensor",e,t,n),a=$("lengths",e,t,n),o=n.getTensorArray(r.id);return o.split(a,s),[o.idTensor]}case"TensorArraySizeV3":{const r=$("tensorArrayId",e,t,n),s=n.getTensorArray(r.id);return[(0,S.d_2)(s.size(),"int32")]}case"TensorArrayCloseV3":{const r=$("tensorArrayId",e,t,n),s=n.getTensorArray(r.id);return s.clearAndClose(),[s.idTensor]}case"TensorListSetItem":{const r=$("tensorListId",e,t,n),s=$("index",e,t,n),a=$("tensor",e,t,n),o=n.getTensorList(r.id);return o.setItem(s,a),[o.idTensor]}case"TensorListGetItem":{const r=$("tensorListId",e,t,n),s=$("index",e,t,n),a=$("elementShape",e,t,n),o=$("elementDType",e,t,n);return[n.getTensorList(r.id).getItem(s,a,o)]}case"TensorListScatterV2":case"TensorListScatter":{const r=$("indices",e,t,n),s=function(e,t,n,r){if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const s=Math.max(...t);if(null!=r&&-1!==r&&s>=r)throw new Error(`Max index must be < array size (${s}  vs. ${r})`);const a=new ke([],n,e.dtype,r),o=(0,S.K$i)(e,0);return t.forEach(((e,t)=>{a.setItem(e,o[t])})),a}($("tensor",e,t,n),r,$("elementShape",e,t,n),$("numElements",e,t,n));return n.addTensorList(s),[s.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const r=$("elementShape",e,t,n),s=$("elementDType",e,t,n);let a;a="TensorListReserve"===e.op?"numElements":"maxNumElements";const o=$(a,e,t,n),i=function(e,t,n,r){return new ke([],e,t,r)}(r,s,0,"TensorListReserve"===e.op?-1:o);return n.addTensorList(i),[i.idTensor]}case"TensorListGather":{const r=$("tensorListId",e,t,n),s=$("indices",e,t,n),a=$("elementShape",e,t,n),o=$("elementDType",e,t,n);return[n.getTensorList(r.id).gather(s,o,a)]}case"TensorListStack":{const r=$("tensorListId",e,t,n),s=$("elementShape",e,t,n),a=$("elementDType",e,t,n),o=$("numElements",e,t,n);return[n.getTensorList(r.id).stack(s,a,o)]}case"TensorListFromTensor":{const r=function(e,t,n){const r=e.dtype;if(e.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${e.shape}`);if(e.dtype!==n)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${n}`);ye(e.shape.slice(1),t,"TensorList shape mismatch: ");const s=(0,S.K$i)(e);return new ke(s,t,r)}($("tensor",e,t,n),$("elementShape",e,t,n),$("elementDType",e,t,n));return n.addTensorList(r),[r.idTensor]}case"TensorListConcat":case"TensorListConcatV2":{const r=$("tensorListId",e,t,n),s=n.getTensorList(r.id),a=$("dtype",e,t,n),o=$("elementShape",e,t,n);return[s.concat(a,o)]}case"TensorListPushBack":{const r=$("tensorListId",e,t,n),s=$("tensor",e,t,n),a=n.getTensorList(r.id);return a.pushBack(s),[a.idTensor]}case"TensorListPopBack":{const r=$("tensorListId",e,t,n),s=$("elementShape",e,t,n),a=$("elementDType",e,t,n);return[n.getTensorList(r.id).popBack(s,a)]}case"TensorListSplit":{const r=$("tensor",e,t,n),s=$("elementShape",e,t,n),a=function(e,t,n){let r=0;const s=t.map((e=>(r+=e,r)));if(r!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${r}, and tensor's shape is: ${e.shape}`);const a=we(e.shape.slice(1),n),o=0===r?0:e.size/r,i=(0,S.DZQ)((()=>{const n=[];e=(0,S.tQQ)(e,[1,r,o]);for(let r=0;r<t.length;++r){const i=[0,0===r?0:s[r-1],0],l=[1,t[r],o];n[r]=(0,S.tQQ)((0,S.dik)(e,i,l),a)}return e.dispose(),n})),l=new ke([],n,e.dtype,t.length);for(let e=0;e<i.length;e++)l.setItem(e,i[e]);return l}(r,$("lengths",e,t,n),s);return n.addTensorList(a),[a.idTensor]}case"TensorListLength":{const r=$("tensorListId",e,t,n),s=n.getTensorList(r.id);return[(0,S.d_2)(s.size(),"int32")]}case"TensorListResize":{const r=$("tensorListId",e,t,n),s=$("size",e,t,n),a=n.getTensorList(r.id).resize(s);return n.addTensorList(a),[a.idTensor]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n);case"convolution":return s((()=>((e,t,n,r=k)=>{switch(e.op){case"Conv1D":{const s=$("stride",e,t,n),a=$("pad",e,t,n),o=$("dataFormat",e,t,n).toUpperCase(),i=$("dilation",e,t,n);return[r.conv1d($("x",e,t,n),$("filter",e,t,n),s,a,o,i)]}case"Conv2D":{const s=$("strides",e,t,n),a=D(e,t,n),o=$("dataFormat",e,t,n).toUpperCase(),i=$("dilations",e,t,n);return[r.conv2d($("x",e,t,n),$("filter",e,t,n),[s[1],s[2]],a,o,[i[1],i[2]])]}case"_FusedConv2D":{const{stride:s,pad:a,dataFormat:o,dilations:i,biasArg:l,preluArg:u,activationFunc:c,leakyreluAlpha:p}=Ne(e,t,n);return[r.fused.conv2d({x:$("x",e,t,n),filter:$("filter",e,t,n),strides:[s[1],s[2]],pad:a,dataFormat:o,dilations:[i[1],i[2]],bias:l,activation:c,preluActivationWeights:u,leakyreluAlpha:p})]}case"FusedDepthwiseConv2dNative":{const{stride:s,pad:a,dataFormat:o,dilations:i,biasArg:l,preluArg:u,activationFunc:c,leakyreluAlpha:p}=Ne(e,t,n);return[r.fused.depthwiseConv2d({x:$("x",e,t,n),filter:$("filter",e,t,n),strides:[s[1],s[2]],pad:a,dataFormat:o,dilations:[i[1],i[2]],bias:l,activation:c,preluActivationWeights:u,leakyreluAlpha:p})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const s=$("outputShape",e,t,n),a=$("strides",e,t,n),o=D(e,t,n);return[r.conv2dTranspose($("x",e,t,n),$("filter",e,t,n),s,[a[1],a[2]],o)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const s=$("strides",e,t,n),a=D(e,t,n),o=$("dilations",e,t,n),i=$("dataFormat",e,t,n).toUpperCase();return[r.depthwiseConv2d($("input",e,t,n),$("filter",e,t,n),[s[1],s[2]],a,i,[o[1],o[2]])]}case"Conv3D":{const s=$("strides",e,t,n),a=$("pad",e,t,n),o=$("dataFormat",e,t,n).toUpperCase(),i=$("dilations",e,t,n);return[r.conv3d($("x",e,t,n),$("filter",e,t,n),[s[1],s[2],s[3]],a,o,[i[1],i[2],i[3]])]}case"AvgPool":{const s=$("strides",e,t,n),a=$("pad",e,t,n),o=$("kernelSize",e,t,n);return[r.avgPool($("x",e,t,n),[o[1],o[2]],[s[1],s[2]],a)]}case"MaxPool":{const s=$("strides",e,t,n),a=$("pad",e,t,n),o=$("kernelSize",e,t,n);return[r.maxPool($("x",e,t,n),[o[1],o[2]],[s[1],s[2]],a)]}case"MaxPoolWithArgmax":{const s=$("strides",e,t,n),a=$("pad",e,t,n),o=$("kernelSize",e,t,n),i=$("includeBatchInIndex",e,t,n),{result:l,indexes:u}=r.maxPoolWithArgmax($("x",e,t,n),[o[1],o[2]],[s[1],s[2]],a,i);return[l,u]}case"AvgPool3D":{const s=$("strides",e,t,n),a=$("pad",e,t,n),o=$("kernelSize",e,t,n);return[r.avgPool3d($("x",e,t,n),[o[1],o[2],o[3]],[s[1],s[2],s[3]],a)]}case"MaxPool3D":{const s=$("strides",e,t,n),a=$("pad",e,t,n),o=$("kernelSize",e,t,n);return[r.maxPool3d($("x",e,t,n),[o[1],o[2],o[3]],[s[1],s[2],s[3]],a)]}case"Dilation2D":{const s=$("strides",e,t,n),a=$("pad",e,t,n),o=$("dilations",e,t,n),i=s[1],l=s[2],u=o[1],c=o[2];return[r.dilation2d($("x",e,t,n),$("filter",e,t,n),[i,l],a,[u,c],"NHWC")]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"creation":return s((()=>((e,t,n,r=k)=>{switch(e.op){case"Fill":{const s=$("shape",e,t,n),a=$("dtype",e,t,n),o=$("value",e,t,n);return[r.fill(s,o,a)]}case"LinSpace":{const s=$("start",e,t,n),a=$("stop",e,t,n),o=$("num",e,t,n);return[r.linspace(s,a,o)]}case"Multinomial":{const s=$("logits",e,t,n),a=$("numSamples",e,t,n),o=$("seed",e,t,n);return[r.multinomial(s,a,o)]}case"OneHot":{const s=$("indices",e,t,n),a=$("depth",e,t,n),o=$("onValue",e,t,n),i=$("offValue",e,t,n),l=$("dtype",e,t,n);return[r.oneHot(s,a,o,i,l)]}case"Ones":return[r.ones($("shape",e,t,n),$("dtype",e,t,n))];case"OnesLike":return[r.onesLike($("x",e,t,n))];case"RandomStandardNormal":return[r.randomStandardNormal($("shape",e,t,n),$("dtype",e,t,n),$("seed",e,t,n))];case"RandomUniform":return[r.randomUniform($("shape",e,t,n),$("minval",e,t,n),$("maxval",e,t,n),$("dtype",e,t,n))];case"Range":{const s=$("start",e,t,n),a=$("stop",e,t,n),o=$("step",e,t,n);return[r.range(s,a,o,$("dtype",e,t,n))]}case"TruncatedNormal":{const s=$("shape",e,t,n),a=$("mean",e,t,n),o=$("stdDev",e,t,n),i=$("seed",e,t,n);return[r.truncatedNormal(s,a,o,$("dtype",e,t,n),i)]}case"Zeros":return[r.zeros($("shape",e,t,n),$("dtype",e,t,n))];case"ZerosLike":return[r.zerosLike($("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"dynamic":return(async(e,t,n,r,s=k)=>{switch(e.op){case"NonMaxSuppressionV5":{const{boxes:r,scores:a,maxOutputSize:o,iouThreshold:i,scoreThreshold:l,softNmsSigma:u}=Te(e,t,n),c=await s.image.nonMaxSuppressionWithScoreAsync(r,a,o,i,l,u);return[c.selectedIndices,c.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:r,scores:a,maxOutputSize:o,iouThreshold:i,scoreThreshold:l}=Te(e,t,n),u=$("padToMaxOutputSize",e,t,n),c=await s.image.nonMaxSuppressionPaddedAsync(r,a,o,i,l,u);return[c.selectedIndices,c.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:r,scores:a,maxOutputSize:o,iouThreshold:i,scoreThreshold:l}=Te(e,t,n);return[await s.image.nonMaxSuppressionAsync(r,a,o,i,l)]}case"Where":{const r=s.cast($("condition",e,t,n),"bool"),a=[await s.whereAsync(r)];return r.dispose(),a}case"ListDiff":return s.setdiff1dAsync($("x",e,t,n),$("y",e,t,n));default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n);case"evaluation":return s((()=>((e,t,n,r=k)=>{switch(e.op){case"LowerBound":{const s=$("sortedSequence",e,t,n),a=$("values",e,t,n);return[r.lowerBound(s,a)]}case"TopKV2":{const s=$("x",e,t,n),a=$("k",e,t,n),o=$("sorted",e,t,n),i=r.topk(s,a,o);return[i.values,i.indices]}case"UpperBound":{const s=$("sortedSequence",e,t,n),a=$("values",e,t,n);return[r.upperBound(s,a)]}case"Unique":{const s=$("x",e,t,n),a=r.unique(s);return[a.values,a.indices]}case"UniqueV2":{const s=$("x",e,t,n),a=$("axis",e,t,n),o=r.unique(s,a);return[o.values,o.indices]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"image":return s((()=>((e,t,n,r=k)=>{switch(e.op){case"ResizeBilinear":{const s=$("images",e,t,n),a=$("size",e,t,n),o=$("alignCorners",e,t,n),i=$("halfPixelCenters",e,t,n);return[r.image.resizeBilinear(s,[a[0],a[1]],o,i)]}case"ResizeNearestNeighbor":{const s=$("images",e,t,n),a=$("size",e,t,n),o=$("alignCorners",e,t,n),i=$("halfPixelCenters",e,t,n);return[r.image.resizeNearestNeighbor(s,[a[0],a[1]],o,i)]}case"CropAndResize":{const s=$("image",e,t,n),a=$("boxes",e,t,n),o=$("boxInd",e,t,n),i=$("cropSize",e,t,n),l=$("method",e,t,n),u=$("extrapolationValue",e,t,n);return[r.image.cropAndResize(s,a,o,i,l,u)]}case"ImageProjectiveTransformV3":{const s=$("images",e,t,n),a=$("transforms",e,t,n),o=$("outputShape",e,t,n),i=$("fillValue",e,t,n),l=$("interpolation",e,t,n),u=$("fillMode",e,t,n);return[r.image.transform(s,a,l.toLowerCase(),u.toLowerCase(),i,o)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"graph":return s((()=>((e,t,n,r=k)=>{switch(e.op){case"Const":return t[e.name];case"PlaceholderWithDefault":const s=$("default",e,t,n);return[C(e.name,t,n)||s];case"Placeholder":return[C(e.name,t,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":case"Snapshot":return[F($("x",e,t,n))];case"IdentityN":return $("x",e,t,n).map((e=>F(e)));case"Shape":return[r.tensor1d($("x",e,t,n).shape,"int32")];case"ShapeN":return $("x",e,t,n).map((e=>r.tensor1d(e.shape)));case"Size":return[r.scalar($("x",e,t,n).size,"int32")];case"Rank":return[r.scalar($("x",e,t,n).rank,"int32")];case"NoOp":return[r.scalar(1)];case"Print":const a=$("x",e,t,n),o=$("data",e,t,n),i=$("message",e,t,n),l=$("summarize",e,t,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(i);for(let e=0;e<o.length;e++)console.log(Array.prototype.slice.call(o[e].dataSync()).slice(0,l));return[a];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"logical":return s((()=>((e,t,n,r=k)=>{switch(e.op){case"Equal":return[r.equal($("a",e,t,n),$("b",e,t,n))];case"NotEqual":return[r.notEqual($("a",e,t,n),$("b",e,t,n))];case"Greater":return[r.greater($("a",e,t,n),$("b",e,t,n))];case"GreaterEqual":return[r.greaterEqual($("a",e,t,n),$("b",e,t,n))];case"Less":return[r.less($("a",e,t,n),$("b",e,t,n))];case"LessEqual":return[r.lessEqual($("a",e,t,n),$("b",e,t,n))];case"LogicalAnd":return[r.logicalAnd($("a",e,t,n),$("b",e,t,n))];case"LogicalNot":return[r.logicalNot($("a",e,t,n))];case"LogicalOr":return[r.logicalOr($("a",e,t,n),$("b",e,t,n))];case"Select":case"SelectV2":return[r.where($("condition",e,t,n),$("a",e,t,n),$("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"matrices":return s((()=>((e,t,n,r=k)=>{switch(e.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[r.matMul($("a",e,t,n),$("b",e,t,n),$("transposeA",e,t,n),$("transposeB",e,t,n))];case"Einsum":return[r.einsum($("equation",e,t,n),...$("tensors",e,t,n))];case"Transpose":return[r.transpose($("x",e,t,n),$("perm",e,t,n))];case"_FusedMatMul":const[s,a]=$("fusedOps",e,t,n),o="biasadd"===s,i="prelu"===a,l=$("numArgs",e,t,n),u=$("leakyreluAlpha",e,t,n);if(o){if(i&&2!==l)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==l)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[c,p]=$("args",e,t,n);return[r.fused.matMul({a:$("a",e,t,n),b:$("b",e,t,n),transposeA:$("transposeA",e,t,n),transposeB:$("transposeB",e,t,n),bias:c,activation:a,preluActivationWeights:p,leakyreluAlpha:u})];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"normalization":return s((()=>((e,t,n,r=k)=>{switch(e.op){case"EuclideanNorm":return[r.euclideanNorm($("x",e,t,n),$("axis",e,t,n),$("keepDims",e,t,n))];case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[r.batchNorm($("x",e,t,n),$("mean",e,t,n),$("variance",e,t,n),$("offset",e,t,n),$("scale",e,t,n),$("epsilon",e,t,n))];case"LRN":return[r.localResponseNormalization($("x",e,t,n),$("radius",e,t,n),$("bias",e,t,n),$("alpha",e,t,n),$("beta",e,t,n))];case"Softmax":return[r.softmax($("x",e,t,n))];case"LogSoftmax":return[r.logSoftmax($("x",e,t,n))];case"SparseToDense":return[r.sparseToDense($("sparseIndices",e,t,n),$("outputShape",e,t,n),$("sparseValues",e,t,n),$("defaultValue",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"reduction":return s((()=>((e,t,n,r=k)=>{switch(e.op){case"Max":{const s=$("axis",e,t,n),a=$("keepDims",e,t,n);return[r.max($("x",e,t,n),s,a)]}case"Mean":{const s=$("axis",e,t,n),a=$("keepDims",e,t,n);return[r.mean($("x",e,t,n),s,a)]}case"Min":{const s=$("axis",e,t,n),a=$("keepDims",e,t,n);return[r.min($("x",e,t,n),s,a)]}case"Sum":{const s=$("axis",e,t,n),a=$("keepDims",e,t,n);return[r.sum($("x",e,t,n),s,a)]}case"All":{const s=$("axis",e,t,n),a=$("keepDims",e,t,n);return[r.all($("x",e,t,n),s,a)]}case"Any":{const s=$("axis",e,t,n),a=$("keepDims",e,t,n);return[r.any($("x",e,t,n),s,a)]}case"ArgMax":{const s=$("axis",e,t,n);return[r.argMax($("x",e,t,n),s)]}case"ArgMin":{const s=$("axis",e,t,n);return[r.argMin($("x",e,t,n),s)]}case"Prod":{const s=$("axis",e,t,n),a=$("keepDims",e,t,n);return[r.prod($("x",e,t,n),s,a)]}case"Cumprod":{const s=$("axis",e,t,n),a=$("exclusive",e,t,n),o=$("reverse",e,t,n);return[r.cumprod($("x",e,t,n),s,a,o)]}case"Cumsum":{const s=$("axis",e,t,n),a=$("exclusive",e,t,n),o=$("reverse",e,t,n);return[r.cumsum($("x",e,t,n),s,a,o)]}case"Bincount":const s=$("x",e,t,n),a=$("weights",e,t,n),o=$("size",e,t,n);return[r.bincount(s,a,o)];case"DenseBincount":{const s=$("x",e,t,n),a=$("weights",e,t,n),o=$("size",e,t,n),i=$("binaryOutput",e,t,n);return[r.denseBincount(s,a,o,i)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"slice_join":return s((()=>((e,t,n,r=k)=>{switch(e.op){case"ConcatV2":case"Concat":{const s=$("n",e,t,n),a=$("axis",e,t,n);let o=$("tensors",e,t,n);return o=o.slice(0,s),[r.concat(o,a)]}case"Gather":{const s=$("x",e,t,n),a=$("indices",e,t,n);return[r.gather(s,r.cast(a,"int32"),0)]}case"GatherV2":{const s=$("axis",e,t,n),a=$("batchDims",e,t,n),o=$("x",e,t,n),i=$("indices",e,t,n);return[r.gather(o,r.cast(i,"int32"),s,a)]}case"Reverse":{const s=$("dims",e,t,n),a=[];for(let e=0;e<s.length;e++)s[e]&&a.push(e);const o=$("x",e,t,n);return[r.reverse(o,a)]}case"ReverseV2":{const s=$("axis",e,t,n),a=$("x",e,t,n);return[r.reverse(a,s)]}case"Slice":{const s=$("begin",e,t,n),a=$("size",e,t,n);return[r.slice($("x",e,t,n),s,a)]}case"StridedSlice":{const s=$("begin",e,t,n),a=$("end",e,t,n),o=$("strides",e,t,n),i=$("beginMask",e,t,n),l=$("endMask",e,t,n),u=$("ellipsisMask",e,t,n),c=$("newAxisMask",e,t,n),p=$("shrinkAxisMask",e,t,n),h=$("x",e,t,n);return[r.stridedSlice(h,s,a,o,i,l,u,c,p)]}case"Pack":return(0,S.DZQ)((()=>{const s=$("axis",e,t,n),a=$("tensors",e,t,n),o=a[0].shape,i=r.squeeze(a[0]).shape,l=a.map((e=>{const t=S.ZSL.arraysEqual(e.shape,o);if(!t&&!S.ZSL.arraysEqual(r.squeeze(e).shape,i))throw new Error("the input tensors shape does not match");return t?e:r.reshape(e,o)}));return[r.stack(l,s)]}));case"Unpack":{const s=$("axis",e,t,n),a=$("tensor",e,t,n);return r.unstack(a,s)}case"Tile":{const s=$("reps",e,t,n);return[r.tile($("x",e,t,n),s)]}case"Split":case"SplitV":{const s=$("axis",e,t,n),a=$("numOrSizeSplits",e,t,n),o=$("x",e,t,n);return r.split(o,a,s)}case"ScatterNd":{const s=$("indices",e,t,n),a=$("values",e,t,n),o=$("shape",e,t,n);return[r.scatterND(s,a,o)]}case"GatherNd":{const s=$("x",e,t,n),a=$("indices",e,t,n);return[r.gatherND(s,a)]}case"SparseToDense":{const s=$("sparseIndices",e,t,n),a=$("outputShape",e,t,n),o=$("sparseValues",e,t,n),i=$("defaultValue",e,t,n);return[r.sparseToDense(s,o,a,o.dtype===i.dtype?i:r.cast(i,o.dtype))]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"sparse":return s((()=>((e,t,n,r=k)=>{switch(e.op){case"SparseFillEmptyRows":{const{outputIndices:s,outputValues:a,emptyRowIndicator:o,reverseIndexMap:i}=r.sparse.sparseFillEmptyRows($("indices",e,t,n),$("values",e,t,n),$("denseShape",e,t,n),$("defaultValue",e,t,n));return[s,a,o,i]}case"SparseReshape":{const{outputIndices:s,outputShape:a}=r.sparse.sparseReshape($("inputIndices",e,t,n),$("inputShape",e,t,n),$("newShape",e,t,n));return[s,a]}case"SparseSegmentMean":return[r.sparse.sparseSegmentMean($("data",e,t,n),$("indices",e,t,n),$("segmentIds",e,t,n))];case"SparseSegmentSum":return[r.sparse.sparseSegmentSum($("data",e,t,n),$("indices",e,t,n),$("segmentIds",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"spectral":return s((()=>((e,t,n,r=k)=>{switch(e.op){case"FFT":return[r.fft($("x",e,t,n))];case"IFFT":return[r.ifft($("x",e,t,n))];case"RFFT":return[r.rfft($("x",e,t,n))];case"IRFFT":return[r.irfft($("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"string":return s((()=>((e,t,n,r=k)=>{switch(e.op){case"StringNGrams":{const{nGrams:s,nGramsSplits:a}=r.string.stringNGrams($("data",e,t,n),$("dataSplits",e,t,n),$("separator",e,t,n),$("nGramWidths",e,t,n),$("leftPad",e,t,n),$("rightPad",e,t,n),$("padWidth",e,t,n),$("preserveShortSequences",e,t,n));return[s,a]}case"StringSplit":{const{indices:s,values:a,shape:o}=r.string.stringSplit($("input",e,t,n),$("delimiter",e,t,n),$("skipEmpty",e,t,n));return[s,a,o]}case"StringToHashBucketFast":return[r.string.stringToHashBucketFast($("input",e,t,n),$("numBuckets",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"transformation":return s((()=>((e,t,n,r=k)=>{switch(e.op){case"Cast":return[r.cast($("x",e,t,n),$("dtype",e,t,n))];case"ExpandDims":{const s=$("axis",e,t,n);return[r.expandDims($("x",e,t,n),s)]}case"Squeeze":{const s=$("axis",e,t,n);return[r.squeeze($("x",e,t,n),s)]}case"Reshape":return[r.reshape($("x",e,t,n),$("shape",e,t,n))];case"MirrorPad":return[r.mirrorPad($("x",e,t,n),$("padding",e,t,n),$("mode",e,t,n))];case"PadV2":case"Pad":return[r.pad($("x",e,t,n),$("padding",e,t,n),$("constantValue",e,t,n))];case"SpaceToBatchND":{const s=$("blockShape",e,t,n),a=$("paddings",e,t,n);return[r.spaceToBatchND($("x",e,t,n),s,a)]}case"BatchToSpaceND":{const s=$("blockShape",e,t,n),a=$("crops",e,t,n);return[r.batchToSpaceND($("x",e,t,n),s,a)]}case"DepthToSpace":{const s=$("blockSize",e,t,n),a=$("dataFormat",e,t,n).toUpperCase();return[r.depthToSpace($("x",e,t,n),s,a)]}case"BroadcastTo":return[r.broadcastTo($("x",e,t,n),$("shape",e,t,n))];case"BroadcastArgs":return[r.broadcastArgs($("s0",e,t,n),$("s1",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"hash_table":return(async(e,t,n,r)=>{switch(e.op){case"HashTable":case"HashTableV2":{const s=$("keyDType",e,t,n),a=$("valueDType",e,t,n),o=new Ie(s,a);return r.addHashTable(e.name,o),[o.handle]}case"LookupTableImport":case"LookupTableImportV2":{const s=$("tableHandle",e,t,n,r),a=$("keys",e,t,n),o=$("values",e,t,n),i=r.getHashTableById(s.id);return[await i.import(a,o)]}case"LookupTableFind":case"LookupTableFindV2":{const s=$("tableHandle",e,t,n,r),a=$("keys",e,t,n),o=$("defaultValue",e,t,n),i=r.getHashTableById(s.id);return[await i.find(a,o)]}case"LookupTableSize":case"LookupTableSizeV2":{const s=$("tableHandle",e,t,n,r);return[r.getHashTableById(s.id).tensorSize()]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n,r);case"custom":const a=E(e.op);if(a&&a.customExecutor)return a.customExecutor(new me(e,t,n));throw TypeError(`Custom op ${e.op} is not registered.`);default:throw TypeError(`Unknown op '${e.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(e,t,n);return S.ZSL.isPromise(a)?a.then((e=>[].concat(e))):[].concat(a)}class $e{constructor(e={},t={},n={},r={}){this.weightMap=e,this.tensorArrayMap=t,this.tensorListMap=n,this.functionMap=r,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(e,t){return{id:e,frameName:t,iterationId:0}}set currentContext(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const e=[];for(let t=0;t<this.contexts.length-1;t++){const n=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(n))}e.push(""),this._currentContextIds=e}contextIdforContexts(e){return e?e.map((e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`)).join("/"):""}enterFrame(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(e){return this.weightMap[e]}addTensorArray(e){this.tensorArrayMap[e.id]=e}getTensorArray(e){return this.tensorArrayMap[e]}addTensorList(e){this.tensorListMap[e.id]=e}getTensorList(e){return this.tensorListMap[e]}dispose(e){for(const t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose(e);for(const t in this.tensorListMap)this.tensorListMap[t].clearAndClose(e)}}function Ce(e,t,n,r){const s=new Set,a=[];let o=null,i=null;const l=new Set,u=Object.keys(e).map((e=>R(e)[0]));let c=[];null!=r&&(c=r.map((e=>R(e.name)[0])));const p=[...t];for(;p.length>0;){const e=p.pop();(De(e)||Fe(e)||Oe(e))&&null==o&&(o=e,i=o.children.map((e=>e.name)).filter((e=>s.has(e)))),s.add(e.name),null==n[e.name]&&-1===u.indexOf(e.name)&&-1===c.indexOf(e.name)&&(0!==e.inputs.length?e.inputs.forEach((e=>{l.has(e.name)||(l.add(e.name),p.push(e))})):a.push(e.name))}return{inputs:e,outputs:t,usedNodes:s,missingInputs:a,dynamicNode:o,syncInputs:i}}const Ae=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],_e=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"],Re=["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"];function De(e){return Ae.indexOf(e.op)>=0}function Fe(e){return _e.indexOf(e.op)>=0}function Oe(e){return Re.indexOf(e.op)>=0}class Me{constructor(e,t){this.graph=e,this.parent=t,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this.intermediateTensors={},this.keepTensorForDebug=!1,this._outputs=e.outputs,this._inputs=e.inputs,this._initNodes=e.initNodes,this._signature=e.signature,this._functions=e.functions,null!=e.functions&&Object.keys(e.functions).forEach((t=>{this._functionExecutorMap[t]=new Me(e.functions[t],this)}))}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(e){const t=Object.keys(e).map((t=>e[t].map((e=>e.id))));this._weightIds=[].concat(...t),this._weightMap=e}set resourceManager(e){this._resourceManager=e}get inputs(){return this._inputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get outputs(){return this._outputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get inputNodes(){return this._inputs.map((e=>e.signatureKey||e.name))}get outputNodes(){return this._outputs.map((e=>{const t=e.signatureKey||e.name;return e.defaultOutput?`${t}:${e.defaultOutput}`:t}))}get functions(){return Object.keys(this._functions).reduce(((e,t)=>(e[t]=this._functions[t].signature,e)),{})}getCompilationKey(e,t){const n=e.map((e=>e.name)).sort(),r=t.map((e=>e.name)).sort();return n.join(this.SEPERATOR)+"--"+r.join(this.SEPERATOR)}compile(e,t){const n=Ce(e,t,this.weightMap,this._initNodes),{missingInputs:r,dynamicNode:s,syncInputs:a}=n;if(null!=s)throw new Error(`This execution contains the node '${s.name}', which has the dynamic op '${s.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${a}]`);if(r.length>0){const n=t.map((e=>e.name)),s=Object.keys(e);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${s}]. Missing the following inputs: [${r}]`)}return function(e,t,n){const{usedNodes:r,inputs:s}=n,a=[],o=Object.keys(s).map((e=>R(e)[0])).map((t=>e.nodes[t])),i=e.initNodes;o.forEach((e=>{r.has(e.name)&&a.push(e)})),e.weights.forEach((e=>{r.has(e.name)&&a.push(e)})),null!=i&&i.forEach((e=>{r.has(e.name)&&a.push(e)}));const l=new Set,u=[];for(;a.length>0;){const e=a.pop();l.add(e.name),t[e.name]||u.push(e),e.children.forEach((e=>{!l.has(e.name)&&r.has(e.name)&&e.inputs.every((e=>l.has(e.name)))&&a.push(e)}))}return u}(this.graph,this.weightMap,n)}execute(e,t){e=this.mapInputs(e);const n=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);const r=n.map((e=>this.graph.nodes[R(e)[0]])),s=t.map((e=>R(e)[0]));let a=s.map((e=>this.graph.nodes[e]));this.resetIntermediateTensors(),0===a.length&&(a=this._outputs);const o=this.getCompilationKey(r,a);let i=this.compiledMap.get(o);null==i&&(i=this.compile(e,a),this.compiledMap.set(o,i));const l={},u={};return(0,S.DZQ)((()=>{const n=new $e(this.weightMap,l,u,this.functionExecutorMap),r=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,s]=R(t),a=[];a[s]=e[t],r[n]=a}));const a=this.getFrozenTensorIds(r),o={};for(let e=0;e<i.length;e++){const t=i[e];if(!r[t.name]){const e=Ee(t,r,n,this._resourceManager);if(S.ZSL.isPromise(e))throw new Error(`The execution of the op '${t.op}' returned a promise. Please use model.executeAsync() instead.`);r[t.name]=e,this.checkTensorForDisposal(t.name,t,r,n,a,s,o)}}return null==this.parent&&n.dispose(a),t.map((e=>C(e,r,n)))}))}getFrozenTensorIds(e){const t=[].concat.apply([],Object.keys(e).map((t=>e[t])).map((e=>e.map((e=>e.id)))));return new Set(t)}checkTensorForDisposal(e,t,n,r,s,a,o){"control"!==t.category&&-1===a.indexOf(e)&&(n[e].forEach((e=>{null!=e&&(o[e.id]=(o[e.id]||0)+t.children.length)})),t.inputs.forEach((e=>{if("control"!==e.category){const a=function(e,t,n){return t[_(e,n.currentContextId)]}(e.name,n,r);null!=a&&a.forEach((e=>{if(e&&!e.kept&&!s.has(e.id)){const n=o[e.id];if(1===n){if(this.keepTensorForDebug){const[n,s]=A(t.name,r);this.intermediateTensors[n]||(this.intermediateTensors[n]=[]),this.intermediateTensors[n][s]=e}else e.dispose();delete o[e.id]}else null!=n&&o[e.id]--}}))}})))}async executeAsync(e,t){return this._executeAsync(e,t)}disposeIntermediateTensors(){this.intermediateTensors&&(Object.keys(this.intermediateTensors).forEach((e=>this.intermediateTensors[e].forEach((e=>e.dispose())))),this.disposeTensorsMap())}disposeTensorsMap(){this.tensorsMap&&Object.keys(this.tensorsMap).forEach((e=>{this.tensorsMap[e].forEach((e=>{!e||e.kept||e.isDisposed||this.keepIds.has(e.id)||e.dispose()}))}))}getIntermediateTensors(){return this.tensorsMap}resetIntermediateTensors(){for(const e in this.intermediateTensors)this.intermediateTensors[e].forEach((e=>e.dispose())),delete this.intermediateTensors[e]}async _executeAsync(e,t,n=!1,r={},s={}){n||(e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t));try{this.keepTensorForDebug=(0,S._K2)().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(e){console.warn(e.message)}this.resetIntermediateTensors();const a=new $e(this.weightMap,r,s,this.functionExecutorMap);this.tensorsMap=await this.executeWithControlFlow(e,a,t,n);const o=t.map((e=>C(e,this.tensorsMap,a))),i=o.map((e=>e.id)),l=Object.keys(e).map((t=>e[t].id));return this.keepIds=new Set([...i,...l,...this.weightIds]),this.keepTensorForDebug||this.disposeTensorsMap(),null==this.parent&&a.dispose(this.keepIds),o}async executeFunctionAsync(e,t,n){const r=e.reduce(((e,t,n)=>(e[this.inputs[n].name]=t,e)),{});return this._executeAsync(r,this.outputNodes,!0,t,n)}async executeWithControlFlow(e,t,n,r){const s=Object.keys(e),a=s.map((e=>this.graph.nodes[R(e)[0]])),o=n.map((e=>R(e)[0]));let i=o.map((e=>this.graph.nodes[e]));0===i.length&&(i=this._outputs);const{usedNodes:l,missingInputs:u,dynamicNode:c,syncInputs:p}=Ce(e,i,this.weightMap,this._initNodes),h=[...a,...this.graph.weights,...this._initNodes||[]].map((e=>({node:e,contexts:t.currentContext}))),d=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,r]=R(t),s=[];s[r]=e[t],d[n]=s}));const f={},m=this.getFrozenTensorIds(d),g={};for(;h.length>0;){const e=this.processStack(a,h,t,d,g,m,o,f,l);await Promise.all(e)}null!=c||r||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const y=i.filter((e=>!De(e)&&!C(e.name,d,t))).map((e=>e.name));if(y.length>0){let e="";throw null!=c&&(e=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${p}]`),new Error(`Cannot compute the outputs [${y}] from the provided inputs [${s}]. Consider providing the following inputs: [${u}]. ${e}`)}return d}processStack(e,t,n,r,s,a,o,i,l){const u=[];for(;t.length>0;){const e=t.pop();n.currentContext=e.contexts;let c="";if("Enter"===e.node.op&&$("isConstant",e.node,r,n)&&([c]=A(e.node.name,n)),null==r[e.node.name]){const p=Ee(e.node,r,n,this._resourceManager);c||([c]=A(e.node.name,n));const h=n.currentContext;S.ZSL.isPromise(p)?u.push(p.then((u=>(r[c]=u,n.currentContext=h,this.checkTensorForDisposal(c,e.node,r,n,a,o,i),this.processChildNodes(e.node,t,n,r,s,l),u)))):(r[c]=p,this.checkTensorForDisposal(c,e.node,r,n,a,o,i),this.processChildNodes(e.node,t,n,r,s,l))}else this.processChildNodes(e.node,t,n,r,s,l)}return u}processChildNodes(e,t,n,r,s,a){e.children.forEach((e=>{const[o]=A(e.name,n);!s[o]&&a.has(e.name)&&("Merge"===e.op?e.inputNames.some((e=>!!C(e,r,n)))&&(s[o]=!0,t.push({contexts:n.currentContext,node:e})):e.inputNames.every((e=>!!C(e,r,n)))&&(s[o]=!0,t.push({contexts:n.currentContext,node:e})))}))}dispose(){Object.keys(this.weightMap).forEach((e=>this.weightMap[e].forEach((e=>e.dispose()))))}checkInputShapeAndType(e){Object.keys(e).forEach((t=>{const n=e[t],[r]=R(t),s=this.graph.nodes[r];if(s.attrParams.shape&&s.attrParams.shape.value){const e=s.attrParams.shape.value,t=e.length===n.shape.length&&n.shape.every(((t,n)=>-1===e[n]||e[n]===t));S.ZSL.assert(t,(()=>`The shape of dict['${s.name}'] provided in model.execute(dict) must be [${e}], but was [${n.shape}]`))}s.attrParams.dtype&&s.attrParams.dtype.value&&S.ZSL.assert(n.dtype===s.attrParams.dtype.value,(()=>`The dtype of dict['${s.name}'] provided in model.execute(dict) must be ${s.attrParams.dtype.value}, but was ${n.dtype}`))}))}mapInputs(e){const t={};for(const n in e)null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[n]?t[this._signature.inputs[n].name]=e[n]:t[n]=e[n];return t}checkInputs(e){const t=Object.keys(e).filter((e=>{const[t]=R(e);return null==this.graph.nodes[t]}));if(t.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`)}mapOutputs(e){return e.map((e=>null!=this._signature&&null!=this._signature.outputs&&null!=this._signature.outputs[e]?this._signature.outputs[e].name:e),{})}checkOutputs(e){e.forEach((e=>{const[t]=R(e);if(!this.graph.nodes[t])throw new Error(`The output '${e}' is not found in the graph`)}))}}class Le{constructor(e={},t={}){this.hashTableNameToHandle=e,this.hashTableMap=t}addHashTable(e,t){this.hashTableNameToHandle[e]=t.handle,this.hashTableMap[t.id]=t}getHashTableHandleByName(e){return this.hashTableNameToHandle[e]}getHashTableById(e){return this.hashTableMap[e]}dispose(){for(const e in this.hashTableMap)this.hashTableMap[e].clearAndClose(),delete this.hashTableMap[e];for(const e in this.hashTableNameToHandle)this.hashTableNameToHandle[e].dispose(),delete this.hashTableNameToHandle[e]}}const ze="?tfjs-format=file",Pe="model.json";class Be{constructor(e,t={},n=S.io){this.modelUrl=e,this.loadOptions=t,this.version="n/a",this.io=n,null==t&&(this.loadOptions={}),this.resourceManager=new Le}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}get modelStructuredOutputKeys(){return this.structuredOutputKeys}findIOHandler(){const e=this.modelUrl;if(null!=e.load)this.handler=e;else if(null!=this.loadOptions.requestInit)this.handler=this.io.browserHTTPRequest(e,this.loadOptions);else{const t=this.io.getLoadHandlers(e,this.loadOptions);if(0===t.length)t.push(this.io.browserHTTPRequest(e,this.loadOptions));else if(t.length>1)throw new Error(`Found more than one (${t.length}) load handlers for URL '${[e]}'`);this.handler=t[0]}}load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const e=this.handler.load();return S.ZSL.isPromise(e)?e.then((e=>this.loadSync(e))):this.loadSync(e)}loadSync(e){this.artifacts=e;const t=this.artifacts.modelTopology;let n=this.artifacts.signature;if(null!=this.artifacts.userDefinedMetadata){const e=this.artifacts.userDefinedMetadata;null!=e.signature&&(n=e.signature),null!=e.structuredOutputKeys&&(this.structuredOutputKeys=e.structuredOutputKeys)}this.signature=n,this.version=`${t.versions.producer}.${t.versions.minConsumer}`;const r=this.io.decodeWeights(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new Me(ee.Instance.transformGraph(t,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(r),this.executor.resourceManager=this.resourceManager,null!=e.modelInitializer&&null!=e.modelInitializer.node){const t=ee.Instance.transformGraph(e.modelInitializer);this.initializer=new Me(t),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializer.executeAsync({},[])}return!0}async save(e,t){if("string"==typeof e){const t=this.io.getSaveHandlers(e);if(0===t.length)throw new Error(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Error(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return e.save(this.artifacts)}predict(e,t){const n=this.execute(e,this.outputNodes);if(this.structuredOutputKeys){const e=n instanceof S.qYS?[n]:n,t={};return e.forEach(((e,n)=>t[this.structuredOutputKeys[n]]=e)),t}return n}normalizeInputs(e){if(!(e instanceof S.qYS||Array.isArray(e)))return e;if((e=Array.isArray(e)?e:[e]).length!==this.inputNodes.length)throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${e.length} input tensors.`);return this.inputNodes.reduce(((t,n,r)=>(t[n]=e[r],t)),{})}normalizeOutputs(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]}execute(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=this.executor.execute(e,t);return n.length>1?n:n[0]}async executeAsync(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=await this.executor.executeAsync(e,t);return n.length>1?n:n[0]}getIntermediateTensors(){return this.executor.getIntermediateTensors()}disposeIntermediateTensors(){this.executor.disposeIntermediateTensors()}convertTensorMapToTensorsMap(e){return Object.keys(e).reduce(((t,n)=>(t[n]=[e[n]],t)),{})}dispose(){this.executor.dispose(),this.initializer&&this.initializer.dispose(),this.resourceManager.dispose()}}async function Ve(e,t={},n=S.io){if(null==e)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==t&&(t={}),t.fromTFHub&&"string"==typeof e&&(e=function(e){return e.endsWith("/")||(e+="/"),`${e}${Pe}${ze}`}(e));const r=new Be(e,t,n);return await r.load(),r}},9171:(e,t,n)=>{n.d(t,{Q:()=>o});var r=n(5388),s=n(5119),a=n(3879);function o(e,t,n,o){if(null==o&&(o=(0,s.X$)(e)),"complex64"===o)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!(0,s.iu)(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){(0,s.SA)(t);const e=(0,s.Ze)(t),r=(0,s.Ze)(n);(0,s.vA)(e===r,(()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${r}`));for(let e=0;e<n.length;++e){const r=n[e],a=e!==n.length-1||r!==(0,s.Ze)(t.slice(e));(0,s.vA)(n[e]===t[e]||!a,(()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `))}}return(0,s.iu)(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==o?(0,a.toTypedArray)(e,o):(0,s.Bq)(e,[],!0),r.T2.makeTensor(e,t,o)}},9809:(e,t,n)=>{n.d(t,{w:()=>i});var r=n(5388),s=n(5441),a=n(8189),o=n(5119);const i=(0,n(929).op)({cast_:function(e,t){const n=(0,a.YT)(e,"x","cast");if(!o.xn(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const i={x:n},l={dtype:t};return r.T2.runKernel(s.KXH,i,l)}})}}]);
//# sourceMappingURL=chunk-7c312c917da0fc9a8551.js.map